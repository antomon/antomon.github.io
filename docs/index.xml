<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Antonio Montano&#39;s Personal Website</title>
<link>https://antomon.github.io/</link>
<atom:link href="https://antomon.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Antonio Montano&#39;s personal blog</description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Wed, 04 Sep 2024 22:00:00 GMT</lastBuildDate>
<item>
  <title>Sudoku and Satisfiability Modulo Theories</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/satisfiability-modulo-theories-sudoku/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Imagine you’re trying to solve a puzzle where you have to figure out whether certain statements can all be true at the same time. This might sound simple, but what if those statements involve complex rules and relationships? Problems like these are at the heart of <strong>SAT (Boolean Satisfiability Problem)</strong> and <strong>SMT (Satisfiability Modulo Theories)</strong>, two important topics in computer science and logic. They help us solve complex puzzles in many areas, from designing computer chips to scheduling tasks. This essay will explore what SAT and SMT are, why they matter, and how they are used in real-world situations.</p>
<p>As a fun and practical example of how these tools can be used, we’ll end this post by showing how SMT can be used to solve Sudoku puzzles, turning a well-known puzzle into a logic-based problem-solving task.</p>
</section>
<section id="sat" class="level2">
<h2 class="anchored" data-anchor-id="sat">SAT</h2>
<p><strong>SAT</strong> stands for <strong>Boolean Satisfiability Problem</strong>. It’s all about answering a basic question: <em>“Can we assign True or False values to certain variables in a way that makes a given logical formula true?”</em></p>
<p>Think of SAT as a logic puzzle. Here’s an example:</p>
<p>You’re given the statements:</p>
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?x"> or <img src="https://latex.codecogs.com/png.latex?y"> (meaning one of them, or both, must be True).</p></li>
<li><p>Not <img src="https://latex.codecogs.com/png.latex?x"> or <img src="https://latex.codecogs.com/png.latex?z"> (meaning either <img src="https://latex.codecogs.com/png.latex?x"> is False, or <img src="https://latex.codecogs.com/png.latex?z"> is True, or both).</p></li>
<li><p>Not <img src="https://latex.codecogs.com/png.latex?y"> or not <img src="https://latex.codecogs.com/png.latex?z"> (meaning at least one of <img src="https://latex.codecogs.com/png.latex?y"> or <img src="https://latex.codecogs.com/png.latex?z"> must be False).</p></li>
</ol>
<p>Can you assign True or False values to <img src="https://latex.codecogs.com/png.latex?x">, <img src="https://latex.codecogs.com/png.latex?y">, and <img src="https://latex.codecogs.com/png.latex?z"> that make all of these statements true at the same time?</p>
<p>This is a SAT problem! The goal is to find a solution where the statements don’t contradict each other, or determine if no such solution exists.</p>
<section id="propositional-logic" class="level3">
<h3 class="anchored" data-anchor-id="propositional-logic">Propositional logic</h3>
<p><strong>Propositional logic</strong>, also known as <strong>Boolean logic</strong>, deals with statements that can either be <strong>True</strong> or <strong>False</strong>. These statements are called <strong>propositions</strong>, and they are combined using logical operators to form <strong>propositional logic formulas</strong>.</p>
<p>A <strong>proposition</strong> is a statement that has a definite truth value—either True or False. For example:</p>
<ul>
<li><p>“It is raining” is a proposition, and it can be either True or False.</p></li>
<li><p>In mathematical terms, we often use <strong>variables</strong> to represent propositions. For example, we might let:</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?x"> represent “It is raining”.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?y"> represent “It is cloudy”.</p></li>
</ul></li>
</ul>
<p>Each of these variables can take the value True or False.</p>
<p>In propositional logic, we use <strong>logical operators</strong> to combine propositions into more complex formulas. The most important operators are:</p>
<ul>
<li><p><strong>AND ( ∧ )</strong>: The expression <img src="https://latex.codecogs.com/png.latex?x%20%5Cland%20y"> is True only if both <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> are True. Example: “It is raining <strong>and</strong> it is cloudy” is only True if both things are happening.</p></li>
<li><p><strong>OR ( ∨ )</strong>: The expression <img src="https://latex.codecogs.com/png.latex?x%20%5Clor%20y"> is True if either <img src="https://latex.codecogs.com/png.latex?x"> or <img src="https://latex.codecogs.com/png.latex?y"> (or both) are True. Example: “It is raining <strong>or</strong> it is cloudy” is True if at least one of them is happening.</p></li>
<li><p><strong>NOT ( ¬ )</strong>: The expression <img src="https://latex.codecogs.com/png.latex?%5Cneg%20x"> (read as “not <img src="https://latex.codecogs.com/png.latex?x">”) is True if <img src="https://latex.codecogs.com/png.latex?x"> is False. Example: “It is <strong>not</strong> raining” is True if <img src="https://latex.codecogs.com/png.latex?x"> is False (i.e., it is not raining).</p></li>
<li><p><strong>Implication ( → )</strong>: The expression <img src="https://latex.codecogs.com/png.latex?x%20%5Crightarrow%20y"> (read as “if <img src="https://latex.codecogs.com/png.latex?x">, then <img src="https://latex.codecogs.com/png.latex?y">”) is True unless <img src="https://latex.codecogs.com/png.latex?x"> is True and <img src="https://latex.codecogs.com/png.latex?y"> is False. Example: “If it is raining, then it is cloudy” is True unless it’s raining but not cloudy.</p></li>
</ul>
<p>A <strong>propositional logic formula</strong> is a combination of variables and logical operators that can be evaluated as True or False, depending on the values of the variables.</p>
<p>For example, consider the formula:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A(x%20%5Clor%20y)%20%5Cland%20(%5Cneg%20x%20%5Clor%20z)%0A"></p>
<p>This formula combines the variables <img src="https://latex.codecogs.com/png.latex?x">, <img src="https://latex.codecogs.com/png.latex?y">, and <img src="https://latex.codecogs.com/png.latex?z"> using the logical operators AND, OR, and NOT. The task is to determine whether there are values for <img src="https://latex.codecogs.com/png.latex?x">, <img src="https://latex.codecogs.com/png.latex?y">, and <img src="https://latex.codecogs.com/png.latex?z"> that make the whole formula True. This is exactly what the SAT problem asks us to solve.</p>
</section>
<section id="decision-problems" class="level3">
<h3 class="anchored" data-anchor-id="decision-problems">Decision problems</h3>
<p>A <strong>decision problem</strong> is a question that can be answered with a simple <strong>Yes</strong> or <strong>No</strong>. In the case of SAT, the decision problem is:</p>
<p><em>“Given a propositional logic formula, is there an assignment of True/False values to the variables that makes the formula True?”</em></p>
<p>If such an assignment exists, the answer is <strong>Yes</strong>, and we say the formula is <strong>satisfiable</strong>. If no such assignment exists, the answer is <strong>No</strong>, and we say the formula is <strong>unsatisfiable</strong>.</p>
<p>Let’s consider a simple SAT problem:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A(x%20%5Clor%20y)%20%5Cland%20(%5Cneg%20x%20%5Clor%20z)%20%5Cland%20(%5Cneg%20y%20%5Clor%20%5Cneg%20z)%0A"></p>
<p>We want to know if there’s a way to assign True or False values to <img src="https://latex.codecogs.com/png.latex?x">, <img src="https://latex.codecogs.com/png.latex?y">, and <img src="https://latex.codecogs.com/png.latex?z"> so that the entire formula is True.</p>
<p>Let’s try a few combinations:</p>
<ul>
<li><p>If <img src="https://latex.codecogs.com/png.latex?x%20=%20%5Cmathrm%7BTrue%7D,%20y%20=%20%5Cmathrm%7BTrue%7D,%20z%20=%20%5Cmathrm%7BTrue%7D">: <img src="https://latex.codecogs.com/png.latex?(x%20%5Clor%20y)"> is <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BTrue%7D">, <img src="https://latex.codecogs.com/png.latex?(%5Cneg%20x%20%5Clor%20z)"> is <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BTrue%7D">, but <img src="https://latex.codecogs.com/png.latex?(%5Cneg%20y%20%5Clor%20%5Cneg%20z)"> is <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BFalse%7D">. This assignment does <strong>not</strong> satisfy the formula.</p></li>
<li><p>If <img src="https://latex.codecogs.com/png.latex?x%20=%20%5Cmathrm%7BTrue%7D,%20y%20=%20%5Cmathrm%7BFalse%7D,%20z%20=%20%5Cmathrm%7BTrue%7D">: <img src="https://latex.codecogs.com/png.latex?(x%20%5Clor%20y)"> is <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BTrue%7D">, <img src="https://latex.codecogs.com/png.latex?(%5Cneg%20x%20%5Clor%20z)"> is <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BTrue%7D">, and <img src="https://latex.codecogs.com/png.latex?(%5Cneg%20y%20%5Clor%20%5Cneg%20z)"> is <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BTrue%7D">. This assignment <strong>does</strong> satisfy the formula!</p></li>
</ul>
<p>So, the formula is satisfiable, and the answer to the SAT problem is Yes.</p>
</section>
<section id="standardizing-sat-problems" class="level3">
<h3 class="anchored" data-anchor-id="standardizing-sat-problems">Standardizing SAT problems</h3>
<p>Many SAT problems are written in a special format called <strong>Conjunctive Normal Form (CNF)</strong>. A formula is in CNF if it is a conjunction (AND) of one or more <strong>clauses</strong>, where each clause is a disjunction (OR) of <strong>literals</strong>. A literal is simply a variable or its negation.</p>
<p>For example, the formula:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A(x%20%5Clor%20%5Cneg%20y)%20%5Cland%20(%5Cneg%20x%20%5Clor%20z%20%5Clor%20y)%0A"></p>
<p>is in CNF because it is an AND of two OR clauses.</p>
<p>Why is CNF important? SAT solvers (programs designed to solve SAT problems) work more efficiently when the formula is in CNF. In fact, any propositional logic formula can be converted into CNF without changing its satisfiability.</p>
</section>
<section id="np-complete-problems" class="level3">
<h3 class="anchored" data-anchor-id="np-complete-problems">NP-complete problems</h3>
<p><strong>SAT is the first problem ever proven to be NP-complete.</strong> This means that:</p>
<ol type="1">
<li><p><strong>SAT is in NP</strong>: Given a solution (an assignment of True/False values), we can check if it satisfies the formula in a reasonable amount of time (in polynomial time).</p></li>
<li><p><strong>SAT is NP-hard</strong>: Every problem in NP can be reduced to SAT in polynomial time. In simpler terms, if we can solve SAT quickly, we can solve every problem in NP quickly.</p></li>
</ol>
<p>This discovery has huge implications in computer science because it shows how SAT is connected to many other difficult problems. If we can find an efficient algorithm to solve SAT, we can apply it to a wide range of important problems, like optimization, scheduling, and even cryptography.</p>
</section>
<section id="sat-solvers-how-do-they-work" class="level3">
<h3 class="anchored" data-anchor-id="sat-solvers-how-do-they-work">SAT solvers: how do they work?</h3>
<p>SAT problems can get very complicated, especially when there are many variables and clauses. To solve them efficiently, we use <strong>SAT solvers</strong>, which are computer programs designed to find solutions to SAT problems. SAT solvers use several smart strategies to speed up the search for a solution. Two of the most common strategies are:</p>
<ul>
<li><p><strong>Backtracking</strong>: The solver tries different assignments of True/False values, and if it hits a dead end (an unsatisfiable assignment), it backtracks and tries a different path.</p></li>
<li><p><strong>Unit propagation</strong>: If a clause contains only one unassigned variable, the solver can immediately assign it a value that satisfies the clause.</p></li>
</ul>
<p>Modern SAT solvers can solve problems with thousands or even millions of variables and clauses. These solvers are used in many applications, including verifying that hardware circuits work correctly and solving complex puzzles like Sudoku.</p>
</section>
<section id="real-world-applications" class="level3">
<h3 class="anchored" data-anchor-id="real-world-applications">Real-world applications</h3>
<p>Now that we know what SAT is, let’s explore some real-world uses:</p>
<ul>
<li><p><strong>Hardware and software verification</strong>: Before building a computer chip, engineers use SAT to check that the design behaves correctly. A mistake in the design could cause a computer to crash or malfunction. SAT solvers help catch these errors before they become costly problems. Similarly, SAT is used in software verification to ensure that a program behaves as expected under all possible conditions.</p></li>
<li><p><strong>AI and decision making</strong>: In artificial intelligence (AI), SAT is used to solve planning and decision-making problems. For example, SAT can help an AI system figure out the best sequence of actions to achieve a goal while following certain rules.</p></li>
<li><p><strong>Puzzles and games</strong>: Many logic-based puzzles, like Sudoku or Minesweeper, can be turned into SAT problems. A SAT solver can then be used to find the solution to the puzzle, or to check if the puzzle has a unique solution.</p></li>
</ul>
</section>
</section>
<section id="smt" class="level2">
<h2 class="anchored" data-anchor-id="smt">SMT</h2>
<p>Now that we have a solid understanding of <strong>SAT</strong> and how it helps us solve problems using <strong>propositional logic</strong> (True/False values), let’s take things a step further with <strong>SMT</strong>, or <strong>Satisfiability Modulo Theories</strong>. While SAT focuses only on whether a logical formula can be true or false, SMT opens the door to solving more complex mathematical problems that involve numbers, functions, arrays, and even more abstract concepts. SMT combines the power of SAT with other <strong>theories</strong> from mathematics to tackle a wider range of problems.</p>
<p>Like SAT, SMT asks whether a certain formula can be made True, but it doesn’t limit itself to just logical variables (True/False values). Instead, SMT allows us to work with <strong>mathematical objects</strong> like:</p>
<ul>
<li><p><strong>Integers</strong> (whole numbers).</p></li>
<li><p><strong>Real numbers</strong> (including fractions and decimals).</p></li>
<li><p><strong>Arrays</strong> (lists of elements).</p></li>
<li><p><strong>Functions</strong> (mathematical relationships).</p></li>
</ul>
<p>With SMT, we can ask questions that involve not just logic but also arithmetic, like: “Is there a way to assign values to <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> such that <img src="https://latex.codecogs.com/png.latex?x%20+%20y%20=%205"> and <img src="https://latex.codecogs.com/png.latex?x%20%3E%202">?”</p>
<p>In this case, <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> are not just True or False; they are numbers. SMT solvers, just like SAT solvers, try to find values for the variables that satisfy all the given conditions.</p>
<section id="theories" class="level3">
<h3 class="anchored" data-anchor-id="theories">Theories</h3>
<p>In SMT, the word <strong>theory</strong> refers to a set of rules that describe how certain kinds of mathematical objects behave. These theories help the SMT solver understand and solve problems that go beyond simple logic. Let’s take a look at some common theories used in SMT:</p>
<ul>
<li><p><strong>Linear arithmetic</strong>: This theory deals with equations and inequalities involving numbers. It allows us to solve problems like:</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?x%20+%20y%20=%2010">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?3x%20-%202y%20%5Cleq%205">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?x%20%5Cgeq%200">.</p></li>
</ul></li>
</ul>
<p>The SMT solver uses the rules of arithmetic to find values for <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> that satisfy these equations.</p>
<ul>
<li><p><strong>Bit-vectors</strong>: Bit-vectors represent numbers in <strong>binary form</strong> (0s and 1s), which is how computers store and manipulate data. Bit-vector theory is important in verifying how computer hardware (like circuits) works. For example:</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?x%20%5C&amp;%20y%20=%201">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?x%20%5Ctext%7B%20shifted%20left%20by%20%7D%202%20=%20z">.</p></li>
</ul>
<p>These operations are common in low-level computing tasks, and SMT solvers can handle them by using the rules of bit-wise operations.</p></li>
<li><p><strong>Arrays and functions</strong>: Arrays are lists of numbers or objects, and functions describe how inputs are mapped to outputs. SMT solvers can reason about arrays and functions using logical and mathematical rules. For example, in array theory, you might ask: “Is there a way to assign values to an array such that the sum of all its elements is 20?”, or in function theory: “Is there a function <img src="https://latex.codecogs.com/png.latex?f(x)"> that satisfies <img src="https://latex.codecogs.com/png.latex?f(2)%20=%204"> and <img src="https://latex.codecogs.com/png.latex?f(3)%20=%209">?”.</p></li>
</ul>
</section>
<section id="how-smt-solvers-work" class="level3">
<h3 class="anchored" data-anchor-id="how-smt-solvers-work">How SMT solvers work</h3>
<p>SMT solvers work in two main steps:</p>
<ol type="1">
<li><p><strong>Boolean abstraction</strong>: The solver first treats the problem as a SAT problem by working with the Boolean logic part. It temporarily ignores the complicated mathematical parts (like numbers or arrays) and focuses on the logical structure.</p></li>
<li><p><strong>Theory solving</strong>: After the SAT part is solved, the SMT solver checks if the numbers, arrays, or functions meet the additional constraints defined by the theory. If the SAT part leads to a solution that violates the mathematical rules (e.g., if the solution says <img src="https://latex.codecogs.com/png.latex?x%20+%20y%20=%2010"> but the theory says that’s not possible), the solver tries a different assignment.</p></li>
</ol>
<p>This combination of logical reasoning (like in SAT) and mathematical reasoning (using theories) makes SMT solvers extremely powerful.</p>
</section>
<section id="complexity" class="level3">
<h3 class="anchored" data-anchor-id="complexity">Complexity</h3>
<p><strong>SMT is NP-hard</strong>, meaning it is at least as hard as the hardest problems in <strong>NP</strong>. This is important because many real-world problems can be formulated as SMT problems, and solving them efficiently is difficult. Like SAT, SMT involves searching through many possible assignments for variables, but in addition to simple logic, the solver must also deal with more complex mathematical theories (such as arithmetic or arrays).</p>
<p>This makes SMT harder to solve than pure SAT problems because the solver not only needs to find a logical assignment but also ensure that it satisfies the rules of the mathematical theory involved. Despite this complexity, SMT solvers have become incredibly advanced and are used in many real-world applications.</p>
</section>
<section id="why-smt-is-powerful" class="level3">
<h3 class="anchored" data-anchor-id="why-smt-is-powerful">Why SMT is powerful</h3>
<p>While <strong>SAT</strong> is a powerful tool for solving logical problems that involve only True/False values, <strong>SMT</strong> goes much further. It combines logic with mathematics, allowing us to solve more complex problems that involve not just logical variables, but also numbers, functions, arrays, and other mathematical structures. By incorporating <strong>theories</strong> such as arithmetic, arrays, and functions, SMT enables us to reason about problems that SAT alone cannot handle.</p>
<p>In a SAT problem, we are limited to determining whether a set of logical conditions can all be true at once, with variables that can only be <strong>True</strong> or <strong>False</strong>. While this is useful in many areas (like circuit verification and puzzle-solving), it doesn’t account for problems that involve numbers, functions, or more abstract data types.</p>
<p>SMT enhances SAT by allowing us to work with variables that take on more complex values and obey specific rules (or <strong>theories</strong>). This means that SMT can handle problems like:</p>
<ul>
<li><p>Arithmetic: <strong>Finding numbers</strong> that satisfy equations or inequalities.</p></li>
<li><p>Bit-vectors: <strong>Verifying computer hardware</strong> by modeling numbers as binary digits.</p></li>
<li><p>Arrays: <strong>Working with data structures</strong>, such as lists or tables, and reasoning about how elements are stored and accessed.</p></li>
<li><p>Functions: <strong>Handling relationships</strong> between inputs and outputs, which is useful for reasoning about computer programs or mathematical models.</p></li>
</ul>
<p>For example, consider a problem where you need to find two numbers, <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y">, such that:</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?x%20+%20y%20=%2010">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?x%20%3E%203">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?y%20%5Cleq%206">.</p></li>
</ul>
<p>A simple SAT solver cannot deal with this because it only works with True/False values. An SMT solver, however, can use <strong>linear arithmetic theory</strong> to find values for <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> that satisfy these conditions.</p>
</section>
<section id="real-world-applications-1" class="level3">
<h3 class="anchored" data-anchor-id="real-world-applications-1">Real-world applications</h3>
<p>Because SMT solvers can handle both logic and mathematics, they are used in a wide range of <strong>real-world applications</strong>. These applications often involve problems where both logical conditions and numerical relationships must be satisfied at the same time. Here are a few important areas where SMT solvers play a critical role:</p>
<ul>
<li><p><strong>Verifying computer programs</strong>: In the world of software, programs are expected to behave correctly no matter what inputs they receive or what paths their execution follows. SMT solvers are used to <strong>formally verify</strong> that programs do not crash, run into errors, or behave unexpectedly.</p>
<p>For instance, if you write a program that calculates the square root of a number, you need to make sure it never tries to compute the square root of a negative number (which would cause an error). An SMT solver can check all possible inputs to ensure that the program handles every situation correctly, even the edge cases that a human might miss.</p>
<p>By using SMT, software engineers can catch potential bugs <strong>before</strong> they happen, preventing costly errors in industries like aerospace, medical devices, or financial systems, where software correctness is absolutely critical.</p></li>
<li><p><strong>Solving scheduling problems</strong>: SMT solvers are also used in <strong>scheduling</strong>—a problem that involves assigning tasks to people, machines, or time slots while following certain rules. These rules might include constraints like:</p>
<ul>
<li><p>A task can only start after another task is finished.</p></li>
<li><p>Some tasks cannot be done at the same time.</p></li>
<li><p>Certain workers are only available at specific times.</p></li>
</ul>
<p>Imagine trying to schedule a series of construction tasks on a large building site. Each task depends on other tasks being completed (you can’t install the windows before the walls are built!), and you only have a limited number of workers available. SMT solvers can process these constraints and find an <strong>optimal schedule</strong> that minimizes delays and uses resources efficiently.</p>
<p>This ability to handle both logical dependencies and numerical constraints makes SMT invaluable for <strong>resource allocation</strong>, <strong>project planning</strong>, and <strong>logistics</strong> in industries like manufacturing, transportation, and healthcare.</p></li>
<li><p><strong>Optimizing circuit designs</strong>: In hardware design, particularly for computer chips, engineers need to ensure that the circuit behaves correctly under all possible input combinations. This is critical because even a small error can lead to catastrophic consequences, like a computer crashing or malfunctioning. Using <strong>bit-vector theory</strong>, SMT solvers model how circuits manipulate binary data (0s and 1s) and check whether the circuit design meets the required specifications. For example, SMT can verify that:</p>
<ul>
<li><p>A chip correctly adds two numbers without overflow.</p></li>
<li><p>A processor handles all operations within its performance constraints.</p></li>
</ul>
<p>In addition, SMT solvers can <strong>optimize designs</strong> by ensuring that the chip uses the least amount of resources (such as power or space) while still functioning correctly. This makes them indispensable in the <strong>semiconductor industry</strong>, where efficient design is key to building faster, smaller, and more energy-efficient devices.</p></li>
</ul>
</section>
<section id="efficiency-and-scalability-of-smt-solvers" class="level3">
<h3 class="anchored" data-anchor-id="efficiency-and-scalability-of-smt-solvers">Efficiency and scalability of SMT solvers</h3>
<p><strong>SMT solvers</strong> are designed to handle highly complex problems, often involving thousands or even millions of variables and constraints. This capability to scale and manage complexity efficiently is one of the key reasons why SMT solvers have become indispensable in many fields. Unlike simpler solvers that can only handle basic logical formulas, modern SMT solvers—such as Z3 (developed by Microsoft)—can work on incredibly large and intricate problems that require the integration of both logic and mathematics.</p>
<section id="large-scale-software-verification" class="level4">
<h4 class="anchored" data-anchor-id="large-scale-software-verification">Large-Scale software verification</h4>
<p>Software verification is a critical application of SMT solvers. Large and complex codebases, like those used in operating systems or flight control software, require guarantees that they behave correctly in every possible situation. This is especially important for <strong>safety-critical systems</strong>, where even a small bug could lead to catastrophic consequences (such as an airplane malfunctioning or a medical device failing). SMT solvers are used to <strong>automatically verify</strong> that a program adheres to its specifications by checking all possible inputs and paths the software might take.</p>
<p>For example, verifying that a piece of software does not crash when it processes certain inputs might require checking billions of different combinations of inputs and internal states. An SMT solver can analyze these possibilities using logical and mathematical models, ensuring that the software behaves as expected across all cases. This process, known as <strong>formal verification</strong>, is a step beyond typical software testing because it proves the absence of errors rather than simply checking for errors that are found during testing.</p>
</section>
<section id="optimizing-systems" class="level4">
<h4 class="anchored" data-anchor-id="optimizing-systems">Optimizing systems</h4>
<p>Another area where SMT solvers excel is <strong>system optimization</strong>. Many real-world systems—such as networks, electronic circuits, or transportation schedules—are incredibly complex, involving a large number of interacting components that must work together efficiently. SMT solvers help <strong>optimize</strong> these systems by finding the best possible configuration that meets all the necessary constraints.</p>
<p>For instance, in <strong>network design</strong>, you might need to ensure that data flows through the network as efficiently as possible while minimizing costs and avoiding congestion. SMT solvers can handle the complexity of these requirements, modeling both the logical rules that govern the network’s behavior and the mathematical constraints, such as bandwidth limits or latency requirements.</p>
<p>In <strong>circuit design</strong>, SMT solvers are used to minimize the power consumption, size, and heat production of electronic circuits while ensuring they perform their intended functions correctly. As circuits become more advanced and compact, this optimization process becomes critical for the performance of modern electronics, including smartphones and computer processors.</p>
<p>In large-scale <strong>scheduling</strong> problems—such as assigning shifts to employees or scheduling jobs on machines—SMT solvers help find optimal solutions that balance competing demands, such as time constraints, available resources, and efficiency goals. Because SMT solvers can scale to handle thousands of tasks or constraints, they are a powerful tool for solving these optimization problems in real-world industrial settings.</p>
</section>
<section id="advanced-techniques" class="level4">
<h4 class="anchored" data-anchor-id="advanced-techniques">Advanced techniques</h4>
<p>Even though SMT is <strong>NP-hard</strong>, meaning that, in the worst cases, solving these problems can take an enormous amount of time—the development of <strong>advanced algorithms</strong> and <strong>heuristics</strong> has made SMT solvers much faster and more practical for real-world applications. SMT solvers use several techniques to reduce the time and resources required to find a solution, including:</p>
<ul>
<li><p><strong>Backtracking</strong>: The solver explores possible solutions and, if it hits a dead end (where a solution doesn’t work), it backtracks to an earlier decision point and tries a different path. This helps the solver avoid wasting time on unworkable solutions.</p></li>
<li><p><strong>Conflict-Driven Clause Learning (CDCL)</strong>: When the solver encounters a conflict (a situation where no solution can satisfy the current set of constraints), it learns from this conflict to avoid making similar mistakes in the future. This dramatically speeds up the solving process by preventing the solver from revisiting paths that are known to be dead ends.</p></li>
<li><p><strong>Theory Propagation</strong>: Theories in SMT (such as arithmetic or arrays) have their own specific rules. SMT solvers use <strong>theory propagation</strong> to narrow down the possible values for variables based on the rules of these theories. For example, if a variable must satisfy a certain arithmetic equation, the solver can limit the range of possible values for that variable, which reduces the complexity of the search.</p></li>
</ul>
<p>By combining these techniques, SMT solvers are able to handle problems that would be intractable for simpler solvers, allowing them to efficiently solve highly complex and large-scale problems.</p>
</section>
</section>
<section id="combining-multiple-theories" class="level3">
<h3 class="anchored" data-anchor-id="combining-multiple-theories">Combining multiple theories</h3>
<p>One of the key strengths of <strong>SMT solvers</strong> is their ability to handle multiple theories simultaneously, allowing them to solve problems that involve not just simple logic but a mixture of complex mathematical domains. This combination of theories allows SMT solvers to model real-world systems with a higher degree of accuracy and sophistication. By integrating diverse theories, SMT solvers can solve problems that span multiple <strong>domains of mathematics and logic</strong> in a seamless way. Let’s take a closer look at how multiple theories work together in SMT, and why this makes SMT solvers exceptionally powerful.</p>
<p>When we talk about SMT solvers “combining multiple theories,” what we really mean is that the solver is capable of reasoning about different kinds of constraints that apply to different types of data—all at the same time.</p>
<p>Each theory brings its own set of <strong>rules and constraints</strong>. For example:</p>
<ul>
<li><p>Arithmetic theory deals with equations and inequalities.</p></li>
<li><p>Array theory includes operations like indexing and updating.</p></li>
<li><p>Bit-vector theory includes binary manipulations like bit-shifting or bitwise AND/OR operations.</p></li>
</ul>
<p>In real-world applications, it’s rare for a problem to belong to just one theory. Often, multiple theories are at play. SMT solvers shine in such scenarios by integrating these different theories and <strong>coordinating the solving process</strong> so that constraints from all applicable theories are satisfied simultaneously.</p>
<p>Let’s now explore some concrete examples where multiple theories interact in SMT.</p>
</section>
<section id="verifying-software-with-mixed-data-types" class="level3">
<h3 class="anchored" data-anchor-id="verifying-software-with-mixed-data-types">Verifying software with mixed data types</h3>
<p>Consider a software verification problem in which a program performs both arithmetic computations and manipulates arrays. Suppose the program performs operations like:</p>
<ol type="1">
<li><p><strong>Arithmetic</strong>: <img src="https://latex.codecogs.com/png.latex?x%20=%20a%20+%20b">.</p></li>
<li><p><strong>Array access</strong>: Reading an element from an array <img src="https://latex.codecogs.com/png.latex?arr%5Bi%5D">.</p></li>
<li><p><strong>Bitwise operations</strong>: <img src="https://latex.codecogs.com/png.latex?z%20=%20x%20%5C&amp;%20y">, where <img src="https://latex.codecogs.com/png.latex?%5C&amp;"> is the bitwise AND operation.</p></li>
</ol>
<p>To ensure the correctness of this program, we need to check if the program will behave correctly for any given inputs. Here’s how <strong>multiple theories</strong> would be combined by the SMT solver:</p>
<ol type="1">
<li><p><strong>Arithmetic theory</strong> will handle the equation <img src="https://latex.codecogs.com/png.latex?x%20=%20a%20+%20b">, ensuring that the sum is computed correctly according to arithmetic rules. The solver will also check that variables like <img src="https://latex.codecogs.com/png.latex?x">, <img src="https://latex.codecogs.com/png.latex?a">, and <img src="https://latex.codecogs.com/png.latex?b"> are appropriately constrained (e.g., <img src="https://latex.codecogs.com/png.latex?x"> must be an integer).</p></li>
<li><p><strong>Array theory</strong> will handle the operation <img src="https://latex.codecogs.com/png.latex?arr%5Bi%5D">, ensuring that the index <img src="https://latex.codecogs.com/png.latex?i"> is valid (i.e., it lies within the bounds of the array). It will also ensure that the right value is retrieved from the array and assigned to the right variable. The solver checks that accessing <img src="https://latex.codecogs.com/png.latex?arr%5Bi%5D"> doesn’t lead to an out-of-bounds error.</p></li>
<li><p><strong>Bit-vector theory</strong> will manage the bitwise operation <img src="https://latex.codecogs.com/png.latex?z%20=%20x%20%5C&amp;%20y">, ensuring that the binary representation of <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> is correctly manipulated at the bit level. This is crucial for many low-level computing tasks, such as encoding or encryption, where binary data is processed.</p></li>
</ol>
<p>By combining these theories, the SMT solver verifies that the program will execute correctly, no matter what values are assigned to the variables. The solver considers all possible inputs and execution paths to prove that there are no runtime errors, incorrect calculations, or invalid memory accesses.</p>
</section>
<section id="a-coordinated-process" class="level3">
<h3 class="anchored" data-anchor-id="a-coordinated-process">A coordinated process</h3>
<p>The magic of SMT solvers lies in their ability to coordinate between these multiple theories while solving a problem. Theories often interact in complex ways, so SMT solvers must <strong>communicate between theories</strong> to resolve constraints effectively. This involves a process known as <strong>theory combination</strong> or <strong>theory propagation</strong>.</p>
<ol type="1">
<li><p><strong>Theory propagation</strong>: Each theory can propagate constraints based on its specific rules. For example, if the arithmetic theory deduces that <img src="https://latex.codecogs.com/png.latex?x%20%3E%2010">, then this information is passed to the array theory to check if accessing <img src="https://latex.codecogs.com/png.latex?arr%5Bx%5D"> is still valid, ensuring <img src="https://latex.codecogs.com/png.latex?x"> doesn’t exceed the array bounds.</p></li>
<li><p><strong>Conflict resolution</strong>: If a conflict arises—such as the arithmetic theory concluding <img src="https://latex.codecogs.com/png.latex?x%20=%205">, while the bit-vector theory requires <img src="https://latex.codecogs.com/png.latex?x"> to have a binary value that would make <img src="https://latex.codecogs.com/png.latex?x%20=%203">, the solver identifies this conflict and attempts to resolve it by exploring alternative solutions. This iterative process is essential for finding a solution that satisfies all constraints across different theories.</p></li>
<li><p><strong>Theory interpolation</strong>: When two different theories interact, SMT solvers use techniques like <strong>theory interpolation</strong> to reconcile their different views of the problem. For instance, arithmetic may dictate that <img src="https://latex.codecogs.com/png.latex?x%20=%204">, while array theory may require that <img src="https://latex.codecogs.com/png.latex?x"> be within certain index limits. The solver navigates these competing constraints by narrowing down possible values for <img src="https://latex.codecogs.com/png.latex?x"> that satisfy both theories.</p></li>
</ol>
<p>These interactions make SMT solvers <strong>more efficient</strong> at solving problems that would be too difficult for simpler solvers that only handle one theory at a time.</p>
</section>
<section id="flexibility-across-domains" class="level3">
<h3 class="anchored" data-anchor-id="flexibility-across-domains">Flexibility across domains</h3>
<p>The flexibility of SMT solvers to combine multiple theories makes them incredibly versatile. Here are a few real-world examples that highlight their power across different domains:</p>
<ul>
<li><p><strong>Cryptographic verification</strong>: SMT solvers are used to verify cryptographic algorithms, such as those used for data encryption and digital signatures. Cryptographic operations often involve both <strong>arithmetic</strong> (modular arithmetic over large numbers) and <strong>bitwise manipulations</strong> (such as shifting bits or performing XOR operations).</p>
<p>For instance, verifying the correctness of a <strong>RSA encryption algorithm</strong> requires an SMT solver to:</p>
<ul>
<li><p>Check the <strong>modular arithmetic</strong> involved in key generation and encryption.</p></li>
<li><p>Ensure the <strong>bitwise operations</strong> used to encode and decode messages are performed correctly.</p></li>
</ul>
<p>By integrating arithmetic and bit-vector theories, an SMT solver can ensure that the algorithm is mathematically secure and functions as expected for all inputs.</p></li>
<li><p><strong>Optimizing robotic movements</strong>: In modern factories, robots are often programmed to perform complex tasks that involve both <strong>decision-making</strong> (logic) and <strong>precise control of movement</strong> (arithmetic). SMT solvers are used to <strong>optimize robotic movements</strong>, ensuring that they follow the most efficient path while respecting physical constraints like speed, distance, and safety.</p>
<p>An SMT solver may combine:</p>
<ul>
<li><p><strong>Linear arithmetic</strong> to model the robot’s physical movements.</p></li>
<li><p><strong>Logic</strong> to represent decision-making rules, such as “if an obstacle is detected, stop the robot.”</p></li>
<li><p><strong>Array theory</strong> to manage data about the robot’s environment and task status.</p></li>
</ul>
<p>By solving these constraints together, the SMT solver finds an optimal plan for the robot that minimizes movement time, avoids obstacles, and completes tasks in the most efficient way possible.</p></li>
<li><p><strong>Artificial Intelligence: Planning and Scheduling</strong>: AI systems often need to make decisions that involve both logic and time-based scheduling. For example, an AI planning system might need to schedule tasks for multiple robots working in parallel, ensuring that each robot finishes its task without clashing with others.</p>
<p>SMT solvers can:</p>
<ul>
<li><p>Use <strong>arithmetic theory</strong> to track time constraints, such as ensuring that task A is completed before task B starts.</p></li>
<li><p>Use <strong>array theory</strong> to keep track of which robot is performing which task.</p></li>
<li><p>Use <strong>logical reasoning</strong> to decide the best sequence of actions.</p></li>
</ul>
<p>By combining these theories, SMT solvers can efficiently plan out the most effective way for robots to complete tasks without delays or conflicts, making AI systems smarter and more reliable.</p></li>
</ul>
</section>
</section>
<section id="z3" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="z3">Z3</h2>
<p><a href="https://www.microsoft.com/en-us/research/project/z3-3/"><strong>Z3</strong></a><sup>1</sup> is one of the most widely-used and powerful SMT solvers, developed by <strong>Microsoft Research</strong>. It is designed to solve logical and mathematical problems that involve both Boolean logic (True/False values) and a variety of mathematical structures, such as integers, real numbers, arrays, bit-vectors, and more. Z3 has become the go-to tool for a wide range of applications, from verifying software correctness to optimizing systems in industrial engineering. Its ability to handle large and complex problems efficiently, while combining different mathematical theories, sets it apart from other solvers.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;de Moura, L., &amp; Bjørner, N. (2008). <strong>Z3: An Efficient SMT Solver</strong>. <em>Tools and Algorithms for the Construction and Analysis of Systems (TACAS)</em>. <a href="https://www.microsoft.com/en-us/research/publication/z3-an-efficient-smt-solver/">Link to paper</a></p></div></div><p>Key features:</p>
<ul>
<li><p><strong>Multi-theory solver</strong>: Z3 can handle problems that involve multiple theories simultaneously, such as <strong>arithmetic</strong>, <strong>bit-vectors</strong>, <strong>arrays</strong>, and <strong>functions</strong>. This makes it versatile enough to solve complex real-world problems that span multiple domains of logic and mathematics. Whether you are working with numerical constraints, manipulating data structures like arrays, or verifying hardware circuits that operate at the bit level, Z3 can manage these interactions seamlessly.</p></li>
<li><p><strong>High efficiency</strong>: Z3 is designed to solve extremely large problems with millions of variables and constraints. It employs advanced techniques, such as <strong>conflict-driven clause learning (CDCL)</strong>, <strong>backtracking</strong>, and <strong>theory propagation</strong>, to explore the search space efficiently. These techniques enable Z3 to quickly find solutions or prove that no solution exists, even for problems that are computationally intensive.</p></li>
<li><p><strong>Combining logical and mathematical constraints</strong>: One of Z3’s most powerful features is its ability to combine <strong>logical constraints</strong> (such as those used in SAT solving) with <strong>mathematical constraints</strong> (such as equations and inequalities). For example, in software verification, Z3 can check both the logical flow of the program and the correctness of its arithmetic operations, ensuring that a program behaves as expected in all possible scenarios.</p></li>
<li><p><strong>Modularity and extensibility</strong>: Z3 is highly modular, which means that users can extend its capabilities to suit specific applications. It allows developers to define custom theories and tailor the solver’s behavior to fit the particular needs of their problem domain. This flexibility makes Z3 suitable for a wide range of industries, including aerospace, finance, cybersecurity, and hardware design.</p></li>
<li><p><strong>Rich API support</strong>: Z3 provides rich API support for various programming languages, including Python, C++, and Java. This means that users can integrate Z3 into their existing software tools and workflows easily. For instance, developers can use Z3 within a Python environment to model complex optimization problems, check for software bugs, or verify hardware designs. Its user-friendly interface and robust API make Z3 accessible to both researchers and engineers.</p></li>
<li><p><strong>Proving and model generation</strong>: In addition to solving for satisfiability, Z3 can also be used to <strong>prove the correctness</strong> of formulas or <strong>generate models</strong> that demonstrate specific properties. For example, in verifying a software system, Z3 can either provide a counterexample where the program fails or prove that no such failure exists under any circumstances. This capability is essential in formal methods for software and hardware verification.</p></li>
</ul>
<section id="api-basic-usage" class="level3">
<h3 class="anchored" data-anchor-id="api-basic-usage">API basic usage</h3>
<p>The <strong>Z3 solver API</strong> provides a powerful interface for solving constraint satisfaction problems in Python. To use it, you first need to import Z3’s key components, such as <code>Solver()</code>, <code>Int()</code>, and constraint functions like <code>And()</code>, <code>Or()</code>, and <code>Distinct()</code>.</p>
<p>You start by defining variables using <code>Int()</code> for integers or other types like <code>Bool()</code> for Boolean values. For example, to define an integer variable <code>X</code> and <code>Y</code>, you can do:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int</span>
<span id="cb1-2"></span>
<span id="cb1-3"></span>
<span id="cb1-4">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<span id="cb1-5">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span></code></pre></div>
<p>This creates two integer variables <code>X</code> and <code>Y</code> that can take integer values.</p>
<p>Next, you initialize the Z3 solver using the <code>Solver()</code> class. The solver will handle adding constraints and finding solutions. For example:</p>
<div class="sourceCode" id="annotated-cell-2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Solver</span>
<span id="annotated-cell-2-2"></span>
<span id="annotated-cell-2-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-2-4" class="code-annotation-target">solver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Solver()</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-2" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="4" data-code-annotation="1">Initialize the Z3 solver.</span>
</dd>
</dl>
<p>Now, you can add constraints to the solver using <code>solver.add()</code>. For example, let’s say you want to add a constraint that the sum of <code>X</code> and <code>Y</code> should equal 10, and both <code>X</code> and <code>Y</code> should be greater than 0:</p>
<div class="sourceCode" id="annotated-cell-3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Solver</span>
<span id="annotated-cell-3-2"></span>
<span id="annotated-cell-3-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-3-4" class="code-annotation-target">solver.add(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-3-5" class="code-annotation-target">solver.add(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-3" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="4" data-code-annotation="1">Add constraint that X + Y equals 10.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="5" data-code-annotation="2">Add constraint that X and Y are greater than 0.</span>
</dd>
</dl>
<p>You can also use logical operators like <code>Or()</code> and <code>And()</code> for more complex constraints. For example:</p>
<div class="sourceCode" id="annotated-cell-4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-4-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int, Solver, Or, And</span>
<span id="annotated-cell-4-2"></span>
<span id="annotated-cell-4-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-4-4" class="code-annotation-target">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-4-5" class="code-annotation-target">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span>
<span id="annotated-cell-4-6"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-4-7" class="code-annotation-target">solver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Solver()</span>
<span id="annotated-cell-4-8"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-4-9" class="code-annotation-target">solver.add(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="annotated-cell-4-10"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-4-11" class="code-annotation-target">solver.add(And(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="annotated-cell-4-12"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-4-13" class="code-annotation-target">solver.add(Or(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-4" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="1" data-code-annotation="1">Import Z3 components: <code>Int</code> for integer variables, <code>Solver</code> to set up the constraint solver, and <code>Or</code> and <code>And</code> for logical operations.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="4" data-code-annotation="2">Define an integer variable <code>X</code> using Z3’s <code>Int</code> constructor.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="5" data-code-annotation="3">Define another integer variable <code>Y</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="7" data-code-annotation="4">Initialize the solver.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="9" data-code-annotation="5">Add constraint: <code>X + Y == 10</code>, so the sum of <code>X</code> and <code>Y</code> must equal 10.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="11" data-code-annotation="6">Add constraint using <code>And()</code>: Both <code>X</code> and <code>Y</code> must be greater than 0.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="13" data-code-annotation="7">Add constraint using <code>Or()</code>: Either <code>X</code> is less than 5 or <code>Y</code> is greater than 5.</span>
</dd>
</dl>
<p>Once all constraints are added, you check whether the solver can find a solution by calling <code>solver.check()</code>:</p>
<div class="sourceCode" id="annotated-cell-5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-5-1" class="code-annotation-target"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> solver.check() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sat:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-5-2" class="code-annotation-target">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solver.model()</span>
<span id="annotated-cell-5-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-5-4" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"X = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(X)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-5-5">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Y = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(Y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-5-6"></span>
<span id="annotated-cell-5-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="annotated-cell-5-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No solution found"</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-5" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="1" data-code-annotation="1">Call to <code>solver.check()</code> causes the execution of the actual constraint-solving algorithm. If <code>solver.check()</code> returns <code>sat</code>, then it means Z3 found a solution.</span>
</dd>
<dt data-target-cell="annotated-cell-5" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="2" data-code-annotation="2"><code>solver.model()</code> retrieves the solution.</span>
</dd>
<dt data-target-cell="annotated-cell-5" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="4" data-code-annotation="3"><code>model.evaluate(X)</code> retrieves the value of the variable <code>X</code> from the solution (<code>model</code>) that Z3 has already found after executing the full algorithm during the <code>solver.check()</code> call.</span>
</dd>
</dl>
<p>The <code>solver.check()</code> method is used to determine whether the given set of constraints is <strong>satisfiable</strong>. The result of <code>solver.check()</code> can be one of three possible values:</p>
<ul>
<li><p><code>sat</code> (satisfiable): This means that Z3 has found at least one solution that satisfies all the constraints you’ve provided. If <code>solver.check() == sat</code>, it means that Z3 was able to find a solution where all the constraints hold true.</p></li>
<li><p><code>unsat</code> (unsatisfiable): This means that there is <strong>no possible solution</strong> that satisfies the given set of constraints. If <code>solver.check()</code> returns <code>unsat</code>, it means that the constraints are contradictory, and Z3 cannot find any values for the variables that satisfy all the constraints.</p></li>
<li><p><code>unknown</code>: This means Z3 could not determine whether the constraints are satisfiable or unsatisfiable, often due to the complexity of the problem or limitations in the solver’s ability to handle the specific problem. This result can happen in more complex cases, such as problems involving non-linear arithmetic or other advanced features.</p></li>
</ul>
<p>Here’s a complete example that ties everything together:</p>
<div class="sourceCode" id="annotated-cell-6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-6-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int, Solver, Or, And, sat</span>
<span id="annotated-cell-6-2"></span>
<span id="annotated-cell-6-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-6-4" class="code-annotation-target">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-6-5" class="code-annotation-target">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span>
<span id="annotated-cell-6-6"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-6-7" class="code-annotation-target">solver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Solver()</span>
<span id="annotated-cell-6-8"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-6-9" class="code-annotation-target">solver.add(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="annotated-cell-6-10"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-6-11" class="code-annotation-target">solver.add(And(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="annotated-cell-6-12"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-6-13" class="code-annotation-target">solver.add(Or(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="annotated-cell-6-14"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-6-15" class="code-annotation-target"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> solver.check() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sat:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="9" onclick="event.preventDefault();">9</a><span id="annotated-cell-6-16" class="code-annotation-target">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solver.model()</span>
<span id="annotated-cell-6-17"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="10" onclick="event.preventDefault();">10</a><span id="annotated-cell-6-18" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Solution: X = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(X)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Y = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(Y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-6-19"></span>
<span id="annotated-cell-6-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="11" onclick="event.preventDefault();">11</a><span id="annotated-cell-6-21" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No solution found"</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-6" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="1" data-code-annotation="1">Import Z3 components: <code>Int</code> for integer variables, <code>Solver</code> to set up the constraint solver, and <code>Or</code> and <code>And</code> for logical operations.</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="4" data-code-annotation="2">Define an integer variable <code>X</code> using Z3’s <code>Int</code> constructor.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="5" data-code-annotation="3">Define another integer variable <code>Y</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="7" data-code-annotation="4">Initialize the solver.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="9" data-code-annotation="5">Add constraint: <code>X + Y == 10</code>, so the sum of <code>X</code> and <code>Y</code> must equal 10.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="11" data-code-annotation="6">Add constraint using <code>And()</code>: Both <code>X</code> and <code>Y</code> must be greater than 0.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="13" data-code-annotation="7">Add constraint using <code>Or()</code>: Either <code>X</code> is less than 5 or <code>Y</code> is greater than 5.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="15" data-code-annotation="8">Check if the constraints are satisfiable.</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="16" data-code-annotation="9">Retrieve the solution model if satisfiable.</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="10">10</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="18" data-code-annotation="10">Print the values of <code>X</code> and <code>Y</code>. Output: Solution: <code>X = 4, Y = 6</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="11">11</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="21" data-code-annotation="11">Print a message if no solution is found.</span>
</dd>
</dl>
<p>This simple example shows how Z3 can be used in Python to solve constraint satisfaction problems. With just a few lines of code, you can define variables, add constraints, and let Z3 find solutions for you. This makes Z3 a powerful tool for solving puzzles, optimization problems, or more complex logical tasks.</p>
</section>
<section id="api-overview" class="level3">
<h3 class="anchored" data-anchor-id="api-overview">API overview</h3>
<p>The <strong>Z3 solver API</strong> provides a robust framework for solving a wide range of problems, including logic, optimization, and constraint satisfaction, using <strong>SMT (Satisfiability Modulo Theories)</strong>. It leverages mathematical methods such as <strong>Boolean satisfiability (SAT)</strong>, <strong>linear arithmetic</strong>, and <strong>theory solvers</strong> (for arrays, bit-vectors, real arithmetic, etc.). Z3’s API allows you to formulate complex problems in terms of constraints and logical propositions, which it then solves using advanced heuristics, backtracking, and conflict-driven clause learning (CDCL).</p>
<p>Overview of Z3 API concepts:</p>
<ul>
<li><p>Z3 supports different types of <strong>variables</strong>, such as:</p>
<ul>
<li><p><strong>Integers</strong> (<code>Int()</code>).</p></li>
<li><p><strong>Booleans</strong> (<code>Bool()</code>).</p></li>
<li><p><strong>Real numbers</strong> (<code>Real()</code>).</p></li>
<li><p><strong>Bit-vectors</strong> (<code>BitVec()</code>).</p></li>
</ul>
<p>Each variable is associated with a domain, and constraints are imposed on these variables. For instance:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int, Bool</span>
<span id="cb2-2"></span>
<span id="cb2-3">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Integer variable</span></span>
<span id="cb2-4">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Bool(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Boolean variable</span></span></code></pre></div></li>
<li><p>Z3 allows you to add <strong>arithmetic</strong>, <strong>logical</strong>, and <strong>set-theoretic constraints</strong> to your problem. These constraints can involve:</p>
<ul>
<li><p><strong>Arithmetic operations</strong>: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>.</p></li>
<li><p><strong>Logical operations</strong>: <code>And()</code>, <code>Or()</code>, <code>Not()</code>, <code>Implies()</code>.</p></li>
<li><p><strong>Relational operations</strong>: <code>&lt;</code>, <code>&gt;</code>, <code>==</code>, <code>!=</code>.</p></li>
<li><p><strong>Set operations</strong>: <code>Distinct()</code> (for ensuring distinct values in a set of variables).</p></li>
</ul>
<p>Example:</p>
<div class="sourceCode" id="annotated-cell-13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-13-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int, Solver, And, Or, Not, Distinct, sat</span>
<span id="annotated-cell-13-2"></span>
<span id="annotated-cell-13-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-13-4" class="code-annotation-target">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-13-5" class="code-annotation-target">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-13-6" class="code-annotation-target">Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span>)</span>
<span id="annotated-cell-13-7"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-13-8" class="code-annotation-target">solver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Solver()</span>
<span id="annotated-cell-13-9"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-13-10" class="code-annotation-target">solver.add(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="annotated-cell-13-11"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-13-12" class="code-annotation-target">solver.add(And(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="annotated-cell-13-13"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-13-14" class="code-annotation-target">solver.add(Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> Z)</span>
<span id="annotated-cell-13-15"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="9" onclick="event.preventDefault();">9</a><span id="annotated-cell-13-16" class="code-annotation-target">solver.add(Distinct(X, Y, Z))</span>
<span id="annotated-cell-13-17"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="10" onclick="event.preventDefault();">10</a><span id="annotated-cell-13-18" class="code-annotation-target"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> solver.check() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sat:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="11" onclick="event.preventDefault();">11</a><span id="annotated-cell-13-19" class="code-annotation-target">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solver.model()</span>
<span id="annotated-cell-13-20"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="12" onclick="event.preventDefault();">12</a><span id="annotated-cell-13-21" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Solution: X = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(X)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Y = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(Y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Z = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(Z)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-13-22"></span>
<span id="annotated-cell-13-23"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="13" onclick="event.preventDefault();">13</a><span id="annotated-cell-13-24" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No solution found"</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-13" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="1" data-code-annotation="1">Import the necessary components: Z3 components such as <code>Int</code>, <code>Solver</code>, <code>And</code>, <code>Distinct</code>, etc., are imported.</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="4" data-code-annotation="2">Define an integer variable <code>X</code> using Z3’s <code>Int</code> constructor.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="5" data-code-annotation="3">Define another integer variable <code>Y</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="6" data-code-annotation="4">Define a third integer variable <code>Z</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="8" data-code-annotation="5">Set up the Z3 solver: This initializes the solver that will manage and solve the constraints.</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="10" data-code-annotation="6">Add an arithmetic constraint: <code>X + 2 * Y == 10</code> ensures that <code>X</code> plus twice <code>Y</code> equals 10.</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="12" data-code-annotation="7">Add a logical constraint: <code>X &gt; 0</code> and <code>Y &lt; 10</code> using the <code>And()</code> function.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="14" data-code-annotation="8">Add relational constraints: <code>Z &gt; X</code> and <code>Y &lt; Z</code> to ensure relations between <code>X</code>, <code>Y</code>, and <code>Z</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="16" data-code-annotation="9">Add distinctness constraint: <code>Distinct(X, Y, Z)</code> ensures that <code>X</code>, <code>Y</code>, and <code>Z</code> all have distinct values.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="10">10</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="18" data-code-annotation="10">Check if the constraints are satisfiable using <code>solver.check()</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="11">11</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="19" data-code-annotation="11">Retrieve the model (solution) if the constraints are satisfiable.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="12">12</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="21" data-code-annotation="12">Print the solution for <code>X</code>, <code>Y</code>, and <code>Z</code>. Output: <code>Solution: X = 10, Y = 0, Z = 11</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="13">13</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="24" data-code-annotation="13">Print a message if no solution is found.</span>
</dd>
</dl></li>
<li><p>Z3 excels in combining <strong>SAT solvers</strong> with <strong>theory solvers</strong> for specific domains. Theories are specialized solvers that handle specific classes of constraints:</p>
<ul>
<li><p><strong>Linear arithmetic</strong>: Handles constraints involving addition, subtraction, and multiplication by constants (e.g., <code>X + Y &gt;= 10</code>).</p></li>
<li><p><strong>Non-linear arithmetic</strong>: Handles more complex polynomial expressions.</p></li>
<li><p><strong>Bit-vectors</strong>: Useful for hardware modeling, where operations are performed on fixed-size binary numbers (e.g., <code>BitVec('X', 32)</code> for a 32-bit integer).</p></li>
<li><p><strong>Arrays and functions</strong>: Z3 supports reasoning about arrays and functions, allowing for the definition of array indices and function applications.</p></li>
</ul></li>
<li><p>Z3 works by converting the problem into a <strong>Boolean satisfiability (SAT)</strong> problem and then applying <strong>conflict-driven clause learning (CDCL)</strong> to explore possible solutions. It divides the problem into <strong>Boolean logic</strong> and <strong>theory-specific reasoning</strong> (such as arithmetic or bit-vector theory). The general solving process involves:</p>
<ul>
<li><p><strong>SAT-based search</strong>: Z3 uses efficient SAT-solving techniques to find assignments to variables.</p></li>
<li><p><strong>Theory propagation</strong>: Z3 incorporates theory solvers to check consistency within a specific theory (e.g., arithmetic or arrays).</p></li>
<li><p><strong>Backtracking and learning</strong>: If a contradiction is encountered, Z3 backtracks and uses the learned conflict to prune the search space, improving efficiency.</p></li>
</ul></li>
<li><p>Z3 also supports <strong>optimization</strong> over variables, where you can minimize or maximize a given objective function. This is useful in cases where you are not just looking for any solution, but the <strong>best</strong> one (e.g., minimal cost, maximum profit). You can use <code>Optimize()</code> instead of <code>Solver()</code> to define an optimization problem:</p>
<div class="sourceCode" id="annotated-cell-14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-14-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int, Optimize, sat</span>
<span id="annotated-cell-14-2"></span>
<span id="annotated-cell-14-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-14-4" class="code-annotation-target">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-14-5" class="code-annotation-target">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span>
<span id="annotated-cell-14-6"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-14-7" class="code-annotation-target">opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Optimize()</span>
<span id="annotated-cell-14-8"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-14-9" class="code-annotation-target">opt.add(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="annotated-cell-14-10"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-14-11" class="code-annotation-target">opt.minimize(X)</span>
<span id="annotated-cell-14-12"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-14-13" class="code-annotation-target"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> opt.check() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sat:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-14-14" class="code-annotation-target">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> opt.model()</span>
<span id="annotated-cell-14-15"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="9" onclick="event.preventDefault();">9</a><span id="annotated-cell-14-16" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Solution: X = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(X)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Y = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(Y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-14-17"></span>
<span id="annotated-cell-14-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="10" onclick="event.preventDefault();">10</a><span id="annotated-cell-14-19" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No solution found"</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-14" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="1" data-code-annotation="1">Import the necessary components: We import <code>Int</code> to define integer variables and <code>Optimize</code> for optimization.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-14" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="4" data-code-annotation="2">Define an integer variable <code>X</code> using Z3’s <code>Int</code> constructor.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-14" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="5" data-code-annotation="3">Define another integer variable <code>Y</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-14" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="7" data-code-annotation="4">Initialize the Z3 optimizer: Instead of using <code>Solver()</code>, we use <code>Optimize()</code> to allow the solver to minimize or maximize values.</span>
</dd>
<dt data-target-cell="annotated-cell-14" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="9" data-code-annotation="5">Add a constraint: The sum of <code>X + Y</code> must be greater than or equal to 10.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-14" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="11" data-code-annotation="6">Minimize <code>X</code>: We tell Z3 to minimize the value of <code>X</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-14" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="13" data-code-annotation="7">Check if the problem is satisfiable: Z3 checks if it can satisfy the constraints while optimizing.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-14" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="14" data-code-annotation="8">Retrieve the model (solution) if the problem is satisfiable.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-14" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="16" data-code-annotation="9">Print the solution for <code>X</code> and <code>Y</code>. Output: Solution: <code>X = 10, Y = 0</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-14" data-target-annotation="10">10</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="19" data-code-annotation="10">Print a message if no solution is found.</span>
</dd>
</dl></li>
<li><p><strong>Advanced solver techniques</strong>:</p>
<ul>
<li><p><strong>Conflict-driven clause learning (CDCL)</strong>: Z3 uses CDCL to handle the SAT problem. It systematically explores possible assignments and learns from conflicts (inconsistent assignments) to avoid repeating them.</p></li>
<li><p><strong>Backjumping and restarting</strong>: Z3 employs heuristics that help it decide when to backtrack, restart, or jump past certain unsolvable branches to explore more promising parts of the search space.</p></li>
<li><p><strong>Theory combination</strong>: Z3 excels at combining different theories. For example, you can solve problems that simultaneously involve linear arithmetic, arrays, and bit-vectors, combining results from theory solvers to find the overall solution.</p></li>
</ul></li>
<li><p>Z3 supports <strong>first-order logic</strong> and can handle <strong>universal</strong> and <strong>existential quantifiers</strong>. You can express statements like “for all” or “there exists” using <code>ForAll()</code> and <code>Exists()</code>, respectively. The example given below will demonstrate the use of both <strong>universal</strong> and <strong>existential quantifiers</strong>. We’ll check if the solver can find a value for <code>Y</code> that satisfies a certain property for all values of <code>X</code> (universal quantification), and whether there exists a value of <code>X</code> that satisfies a condition (existential quantification).</p>
<div class="sourceCode" id="annotated-cell-15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-15-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int, Solver, ForAll, Exists, Implies, Or, And, sat</span>
<span id="annotated-cell-15-2"></span>
<span id="annotated-cell-15-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-15-4" class="code-annotation-target">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-15-5" class="code-annotation-target">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span>
<span id="annotated-cell-15-6"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-15-7" class="code-annotation-target">solver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Solver()</span>
<span id="annotated-cell-15-8"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-15-9" class="code-annotation-target">domain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="annotated-cell-15-10"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-15-11" class="code-annotation-target">solver.add(ForAll([X], Implies(Or([X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> domain]), X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)))</span>
<span id="annotated-cell-15-12"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-15-13" class="code-annotation-target">solver.add(Exists([X], And(Or([X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> domain]), X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)))</span>
<span id="annotated-cell-15-14"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-15-15" class="code-annotation-target"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> solver.check() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sat:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="9" onclick="event.preventDefault();">9</a><span id="annotated-cell-15-16" class="code-annotation-target">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solver.model()</span>
<span id="annotated-cell-15-17"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="10" onclick="event.preventDefault();">10</a><span id="annotated-cell-15-18" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Solution: Y = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(Y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-15-19"></span>
<span id="annotated-cell-15-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="11" onclick="event.preventDefault();">11</a><span id="annotated-cell-15-21" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No solution found"</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-15" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="1" data-code-annotation="1">Import required Z3 components: <code>Int</code>, <code>Solver</code>, <code>ForAll</code>, <code>Exists</code>, <code>Implies</code>, <code>Or</code>, and <code>And</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-15" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="4" data-code-annotation="2">Define an integer variable <code>X</code> using Z3’s <code>Int</code> constructor.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-15" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="5" data-code-annotation="3">Define another integer variable <code>Y</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-15" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="7" data-code-annotation="4">Initialize the Z3 solver using the <code>Solver()</code> class to manage and solve constraints.</span>
</dd>
<dt data-target-cell="annotated-cell-15" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="9" data-code-annotation="5">Define the finite domain of <code>X</code> as <code>[1, 2, 3]</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-15" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="11" data-code-annotation="6">Add a universal quantifier constraint: For all <code>X</code> in the domain, <code>X + Y &gt;= 5</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-15" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="13" data-code-annotation="7">Add an existential quantifier constraint: There exists an <code>X</code> in the domain such that <code>X + Y == 6</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-15" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="15" data-code-annotation="8">Check if the constraints are satisfiable using <code>solver.check()</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-15" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="16" data-code-annotation="9">Retrieve the model (solution) if the constraints are satisfiable.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-15" data-target-annotation="10">10</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="18" data-code-annotation="10">Print the value of <code>Y</code> from the model (solution). Output: <code>Solution: Y = 4</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-15" data-target-annotation="11">11</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="21" data-code-annotation="11">Print a message if no solution is found.</span>
</dd>
</dl></li>
<li><p>Z3 can generate <strong>proofs</strong> for unsatisfiable queries, showing why no solution exists for a given set of constraints. This is useful for formal verification tasks where you need to prove the correctness of systems, such as verifying hardware circuits or ensuring software correctness.</p></li>
<li><p>Mathematical methods:</p>
<ul>
<li><p><strong>SAT Solvers</strong>: Z3 primarily uses <strong>Boolean satisfiability</strong> solvers, which handle the basic logic of whether a problem can be satisfied given the constraints. Z3 applies CDCL techniques to improve efficiency in solving SAT problems.</p></li>
<li><p><strong>Theory Solvers</strong>:</p>
<ul>
<li><p><strong>Linear arithmetic solvers</strong>: These handle systems of linear inequalities and equations.</p></li>
<li><p><strong>Non-linear arithmetic solvers</strong>: For handling polynomial constraints.</p></li>
<li><p><strong>Bit-vector theory</strong>: This theory is used to model and verify properties of hardware systems where operations are performed on fixed-length bit-vectors.</p></li>
<li><p><strong>Array theory</strong>: Provides reasoning about operations on arrays, such as read and write operations, making Z3 suitable for reasoning about data structures and memory models.</p></li>
</ul></li>
<li><p><strong>Optimization algorithms</strong>: Z3’s <code>Optimize()</code> module uses <strong>linear programming</strong> and <strong>mixed-integer programming</strong> techniques to find solutions that optimize an objective function under a set of constraints.</p></li>
<li><p><strong>Quantifier elimination</strong>: Z3 implements methods for handling quantifiers in first-order logic, allowing it to reason about quantified statements efficiently.</p></li>
</ul></li>
</ul>
</section>
<section id="complete-example" class="level3">
<h3 class="anchored" data-anchor-id="complete-example">Complete example</h3>
<div class="sourceCode" id="annotated-cell-7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-7-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int, Solver, And, Or, sat</span>
<span id="annotated-cell-7-2"></span>
<span id="annotated-cell-7-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-7-4" class="code-annotation-target">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-7-5" class="code-annotation-target">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span>
<span id="annotated-cell-7-6"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-7-7" class="code-annotation-target">solver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Solver()</span>
<span id="annotated-cell-7-8"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-7-9" class="code-annotation-target">solver.add(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-7-10" class="code-annotation-target">solver.add(And(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-7-11" class="code-annotation-target">solver.add(Or(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="annotated-cell-7-12"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-7-13" class="code-annotation-target"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> solver.check() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sat:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="9" onclick="event.preventDefault();">9</a><span id="annotated-cell-7-14" class="code-annotation-target">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solver.model()</span>
<span id="annotated-cell-7-15">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="10" onclick="event.preventDefault();">10</a><span id="annotated-cell-7-16" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Solution: X = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(X)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Y = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(Y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-7-17"></span>
<span id="annotated-cell-7-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="11" onclick="event.preventDefault();">11</a><span id="annotated-cell-7-19" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No solution found"</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-7" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="1" data-code-annotation="1">Import the required Z3 components: <code>Int</code>, <code>Solver</code>, <code>And</code>, <code>Or</code>, and <code>sat</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="4" data-code-annotation="2">Define an integer variable <code>X</code> using Z3’s <code>Int</code> constructor.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="5" data-code-annotation="3">Define another integer variable <code>Y</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="7" data-code-annotation="4">Set up the Z3 solver using the <code>Solver()</code> class to manage and solve constraints.</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="9" data-code-annotation="5">Add an arithmetic constraint: <code>X + Y</code> must equal 10.</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="10" data-code-annotation="6">Add a logical constraint: Both <code>X</code> and <code>Y</code> must be greater than 0.</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="11" data-code-annotation="7">Add a logical disjunction: Either <code>X</code> is equal to 3, or <code>Y</code> is equal to 7.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="13" data-code-annotation="8">Check if the constraints are satisfiable using <code>solver.check()</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="14" data-code-annotation="9">Retrieve the model (solution) if the constraints are satisfiable.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="10">10</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="16" data-code-annotation="10">Print the values of <code>X</code> and <code>Y</code> from the model (solution). Output: <code>Solution: X = 3, Y = 7</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="11">11</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="19" data-code-annotation="11">Print a message if no solution is found.</span>
</dd>
</dl>
</section>
<section id="uninterpreted-functions" class="level3">
<h3 class="anchored" data-anchor-id="uninterpreted-functions">Uninterpreted functions</h3>
<p><strong>Uninterpreted functions</strong> in Z3 allow you to work with symbolic functions without specifying their exact definition or behavior. They are useful in scenarios where you want to reason about relationships between variables without providing the actual function’s implementation. Z3 treats these functions symbolically, meaning you only impose constraints on the inputs and outputs rather than defining the internal workings of the function.</p>
<p>Uninterpreted functions are commonly used in <strong>formal verification</strong> (e.g., verifying the correctness of algorithms or systems), <strong>theory reasoning</strong>, and <strong>model checking</strong>, where you care about the relationships between function calls but not necessarily their specific behavior.</p>
<p>In Z3, you can define an uninterpreted function using <code>Function()</code> and specify the domain and range of the function. You can then impose constraints on how the function behaves for certain inputs and reason about its properties.</p>
<p>Suppose we have a function <code>f(x)</code> which maps integers to integers. We don’t know the exact behavior of <code>f(x)</code>, but we want to reason about its properties—specifically, we want to know if <code>f(x)</code> satisfies certain conditions.</p>
<p>Here’s how you define and work with an uninterpreted function in Z3:</p>
<div class="sourceCode" id="annotated-cell-8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-8-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int, Function, Solver, IntSort, sat</span>
<span id="annotated-cell-8-2"></span>
<span id="annotated-cell-8-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-8-4" class="code-annotation-target">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-8-5" class="code-annotation-target">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="annotated-cell-8-6"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-8-7" class="code-annotation-target">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Function(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f'</span>, IntSort(), IntSort())</span>
<span id="annotated-cell-8-8"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-8-9" class="code-annotation-target">solver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Solver()</span>
<span id="annotated-cell-8-10"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-8-11" class="code-annotation-target">solver.add(f(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-8-12" class="code-annotation-target">solver.add(f(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-8-13" class="code-annotation-target">solver.add(f(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="9" onclick="event.preventDefault();">9</a><span id="annotated-cell-8-14" class="code-annotation-target">solver.add(f(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="annotated-cell-8-15"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="10" onclick="event.preventDefault();">10</a><span id="annotated-cell-8-16" class="code-annotation-target"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> solver.check() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sat:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="11" onclick="event.preventDefault();">11</a><span id="annotated-cell-8-17" class="code-annotation-target">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solver.model()</span>
<span id="annotated-cell-8-18">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="12" onclick="event.preventDefault();">12</a><span id="annotated-cell-8-19" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Solution: f(x) = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(f(x))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, y = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="13" onclick="event.preventDefault();">13</a><span id="annotated-cell-8-20" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"f(3) = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(f(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, f(4) = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(f(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, f(7) = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(f(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-8-21">  </span>
<span id="annotated-cell-8-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="14" onclick="event.preventDefault();">14</a><span id="annotated-cell-8-23" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No solution found"</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-8" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="1" data-code-annotation="1">Import required components from the Z3 solver library.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="4" data-code-annotation="2">Define integer variable <code>x</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="5" data-code-annotation="3">Define integer variable <code>y</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="7" data-code-annotation="4">Define an uninterpreted function <code>f</code> that takes an integer and returns an integer.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="9" data-code-annotation="5">Set up the solver by initializing an instance of the <code>Solver()</code> class.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="11" data-code-annotation="6">Add a constraint specifying that <code>f(x)</code> is equal to <code>y + 2</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="12" data-code-annotation="7">Add a constraint specifying that <code>f(3)</code> must equal <code>5</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="13" data-code-annotation="8">Add a constraint specifying that <code>f(4)</code> must equal <code>6</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="14" data-code-annotation="9">Add a constraint specifying that <code>f(7)</code> must equal <code>10</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="10">10</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="16" data-code-annotation="10">Check if the constraints are satisfiable.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="11">11</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="17" data-code-annotation="11">Retrieve the model (solution) if the constraints are satisfiable.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="12">12</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="19" data-code-annotation="12">Print the solution for <code>f(x)</code> and <code>y</code>. Output: <code>Solution: f(x) = 5, y = 3</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="13">13</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="20" data-code-annotation="13">Print the solution for <code>f(3)</code>, <code>f(4)</code>, and <code>f(7)</code>. Output: <code>f(3) = 5, f(4) = 6, f(7) = 10</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="14">14</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="23" data-code-annotation="14">Print a message if no solution is found.</span>
</dd>
</dl>
<p>If the solver finds a solution, you will see something like:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource plaintext number-lines code-with-copy"><code class="sourceCode"><span id="cb3-1">Solution: f(x) = 5, y = 3</span>
<span id="cb3-2">f(3) = 5, f(4) = 6, f(7) = 10</span></code></pre></div>
<p>This shows that <code>f(3)</code>, <code>f(4)</code>, and <code>f(7)</code> satisfy the imposed constraints, while <code>f(x)</code> is defined symbolically as <code>y + 2</code> for an arbitrary <code>x</code>.</p>
<p>Use cases for uninterpreted functions:</p>
<ul>
<li><p><strong>Abstract Reasoning</strong>: Uninterpreted functions allow you to reason abstractly about the behavior of functions without specifying their exact definitions.</p></li>
<li><p><strong>Formal verification</strong>: In program verification, you can model abstract operations or methods as uninterpreted functions and reason about their effects on program state.</p></li>
<li><p><strong>Theorem proving</strong>: They can be used in automated theorem proving, where certain properties of functions are inferred based on logical constraints.</p></li>
</ul>
</section>
</section>
<section id="sudoku-time" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="sudoku-time">Sudoku time!</h2>
<section id="intro" class="level3">
<h3 class="anchored" data-anchor-id="intro">Intro</h3>
<p><strong>Sudoku</strong> is a logic-based number placement puzzle that can be played on grids of various sizes. The goal is to fill the grid such that each row, each column, and each subgrid contains a complete set of numbers without any repetition.</p>
<p>Sudoku puzzles can be played on any <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20n"> grid, where <img src="https://latex.codecogs.com/png.latex?n"> is the square of an integer (e.g., 4, 9, 16). For example, in a <img src="https://latex.codecogs.com/png.latex?4%20%5Ctimes%204"> Sudoku, you fill the grid with the numbers 1 to 4, in a <img src="https://latex.codecogs.com/png.latex?9%20%5Ctimes%209"> Sudoku (the standard version), you fill the grid with the numbers 1 to 9, and so on.</p>
<p>General Sudoku rules:</p>
<ol type="1">
<li><p>Each row must contain a complete set of numbers from 1 to <img src="https://latex.codecogs.com/png.latex?n">, without repetition.</p></li>
<li><p>Each column must contain a complete set of numbers from 1 to <img src="https://latex.codecogs.com/png.latex?n">, without repetition.</p></li>
<li><p>Each subgrid (which is typically a <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7Bn%7D%20%5Ctimes%20%5Csqrt%7Bn%7D"> box) must also contain a complete set of numbers from 1 to <img src="https://latex.codecogs.com/png.latex?n">, without repetition.</p></li>
</ol>
<p>Grid sizes:</p>
<ul>
<li><p><strong>Mini Sudoku</strong>: This is a smaller version with <img src="https://latex.codecogs.com/png.latex?4%20%5Ctimes%204"> grid, ideal for beginners. The subgrids are <img src="https://latex.codecogs.com/png.latex?2%20%5Ctimes%202">, and the puzzle uses digits 1 to 4.</p></li>
<li><p><strong>Standard Sudoku</strong>: This is the most common version, with <img src="https://latex.codecogs.com/png.latex?9%20%5Ctimes%209"> grid, <img src="https://latex.codecogs.com/png.latex?3%20%5Ctimes%203"> subgrids and digits 1 to 9.</p></li>
<li><p><strong>Large Sudoku</strong>: This uses larger grids, <img src="https://latex.codecogs.com/png.latex?16%20%5Ctimes%2016"> grid, <img src="https://latex.codecogs.com/png.latex?4%20%5Ctimes%204"> subgrids, and digits 1 to 16.</p></li>
<li><p><strong>Extreme Sudoku</strong>: Rarely seen, this massive <img src="https://latex.codecogs.com/png.latex?25%20%5Ctimes%2025"> grid uses <img src="https://latex.codecogs.com/png.latex?5%20%5Ctimes%205"> subgrids and digits 1 to 25, and is extremely challenging.</p></li>
</ul>
<p>The <strong>difficulty of a Sudoku puzzle</strong> depends on several factors:</p>
<ul>
<li><p><strong>Number of pre-filled cells</strong>: Easier puzzles have more numbers pre-filled, leaving fewer cells to solve. Harder puzzles have fewer pre-filled cells, requiring more deduction and logic.</p></li>
<li><p><strong>Type of logical strategies required</strong>:</p>
<ul>
<li><p><strong>Easy puzzles</strong>: Can often be solved using basic strategies like scanning rows, columns, and subgrids for obvious placements.</p></li>
<li><p><strong>Medium puzzles</strong>: May require more advanced techniques like <strong>naked pairs</strong> or <strong>hidden pairs</strong> (where two cells in a row, column, or subgrid must contain specific numbers).</p></li>
<li><p><strong>Hard puzzles</strong>: Often involve techniques like <strong>X-Wing</strong>, <strong>Swordfish</strong>, or <strong>backtracking</strong> where trial and error may be needed to determine the correct number.</p></li>
<li><p><strong>Extreme puzzles</strong>: In extreme cases, solving may require highly complex strategies and involve much deeper logical deductions.</p></li>
</ul></li>
</ul>
</section>
<section id="lets-start-playing" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="lets-start-playing">Let’s start playing</h3>
<p>Here is the Python code for solving a Sudoku <img src="https://latex.codecogs.com/png.latex?9%20%5Ctimes%209"> puzzle<sup>2</sup> using Z3, including a function that takes the puzzle as input and returns the solved puzzle, along with a main function that demonstrates its use.</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;In the world of standard <img src="https://latex.codecogs.com/png.latex?9%20%5Ctimes%209"> Sudoku puzzles, one of the most fascinating mathematical discoveries is the 17-Clue Theorem. In 2012, researchers Gary McGuire, Bastian Tugemann, and Gilles Civario proved through exhaustive computation that 17 is the minimum number of clues required for a standard <img src="https://latex.codecogs.com/png.latex?9%20%5Ctimes%209"> Sudoku puzzle to have a unique solution. See McGuire, G., Tugemann, B., &amp; Civario, G. (2014). There Is No 16-Clue Sudoku: Solving the Sudoku Minimum Number of Clues Problem via Hitting Set Enumeration. Experimental Mathematics, 23(2), 190–217. <a href="https://doi.org/10.1080/10586458.2013.870056">DOI</a></p></div></div><p>Let’s solve the following:</p>
<table class="text-center mx-auto table" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000; border-top: 3px solid #000">5</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-top: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">7</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-top: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-top: 3px solid #000">0</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">6</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px">1</td>
<td style="border: 1px solid #000; padding: 5px">9</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">5</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000; border-left: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">9</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">8</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">6</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000; border-right: 3px solid #000">0</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">8</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px">6</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">3</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px">8</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">1</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000; border-left: 3px solid #000">7</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000; border-right: 3px solid #000">6</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px">6</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px">2</td>
<td style="border: 1px solid #000; padding: 5px">8</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px">4</td>
<td style="border: 1px solid #000; padding: 5px">1</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">9</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">5</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">8</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">7</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">9</td>
</tr>
</tbody>
</table>
<p>Code that leverages Z3 is:</p>
<div class="sourceCode" id="annotated-cell-10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-10-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int, Solver, And, Distinct, sat</span>
<span id="annotated-cell-10-2"></span>
<span id="annotated-cell-10-3"></span>
<span id="annotated-cell-10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to check if the solved Sudoku is correct</span></span>
<span id="annotated-cell-10-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_valid_sudoku(solution):</span>
<span id="annotated-cell-10-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combined row and column checks in a single loop</span></span>
<span id="annotated-cell-10-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>):</span>
<span id="annotated-cell-10-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check distinct values in row</span></span>
<span id="annotated-cell-10-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(solution[i])) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>:  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-10-10" class="code-annotation-target">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="annotated-cell-10-11">    </span>
<span id="annotated-cell-10-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check distinct values in column</span></span>
<span id="annotated-cell-10-13">    col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [solution[j][i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)]</span>
<span id="annotated-cell-10-14"></span>
<span id="annotated-cell-10-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(col)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-10-16" class="code-annotation-target">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="annotated-cell-10-17"></span>
<span id="annotated-cell-10-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check 3x3 subgrids</span></span>
<span id="annotated-cell-10-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="annotated-cell-10-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="annotated-cell-10-21">      subgrid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [solution[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> di][j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dj] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> di <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> dj <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)]</span>
<span id="annotated-cell-10-22"></span>
<span id="annotated-cell-10-23">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(subgrid)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-10-24" class="code-annotation-target">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="annotated-cell-10-25"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-10-26" class="code-annotation-target">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="annotated-cell-10-27"></span>
<span id="annotated-cell-10-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> solve_sudoku(puzzle):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-10-29" class="code-annotation-target">  X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[Int(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"x_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)]</span>
<span id="annotated-cell-10-30">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-10-31" class="code-annotation-target">  solver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Solver()</span>
<span id="annotated-cell-10-32">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-10-33" class="code-annotation-target">  solver.add([And(X[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, X[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)])</span>
<span id="annotated-cell-10-34">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="9" onclick="event.preventDefault();">9</a><span id="annotated-cell-10-35" class="code-annotation-target">  solver.add([X[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> puzzle[i][j] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> puzzle[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="annotated-cell-10-36">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="10" onclick="event.preventDefault();">10</a><span id="annotated-cell-10-37" class="code-annotation-target">  solver.add([Distinct(X[i]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Row distinct</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="11" onclick="event.preventDefault();">11</a><span id="annotated-cell-10-38" class="code-annotation-target">  solver.add([Distinct([X[i][j] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Column distinct</span></span>
<span id="annotated-cell-10-39">  solver.add([Distinct([X[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> di][j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dj] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> di <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> dj <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)])</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="12" onclick="event.preventDefault();">12</a><span id="annotated-cell-10-40" class="code-annotation-target">              <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subgrid distinct</span></span>
<span id="annotated-cell-10-41">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="13" onclick="event.preventDefault();">13</a><span id="annotated-cell-10-42" class="code-annotation-target">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> solver.check() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sat:</span>
<span id="annotated-cell-10-43">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solver.model()</span>
<span id="annotated-cell-10-44"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="14" onclick="event.preventDefault();">14</a><span id="annotated-cell-10-45" class="code-annotation-target">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[model.evaluate(X[i][j]).as_long() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)]</span>
<span id="annotated-cell-10-46"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="15" onclick="event.preventDefault();">15</a><span id="annotated-cell-10-47" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="annotated-cell-10-48"></span>
<span id="annotated-cell-10-49">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="16" onclick="event.preventDefault();">16</a><span id="annotated-cell-10-50" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="annotated-cell-10-51"></span>
<span id="annotated-cell-10-52"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="annotated-cell-10-53">  puzzle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="annotated-cell-10-54">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="annotated-cell-10-55">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="annotated-cell-10-56">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="annotated-cell-10-57">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],</span>
<span id="annotated-cell-10-58">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="annotated-cell-10-59">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>],</span>
<span id="annotated-cell-10-60">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="annotated-cell-10-61">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],</span>
<span id="annotated-cell-10-62">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="17" onclick="event.preventDefault();">17</a><span id="annotated-cell-10-63" class="code-annotation-target">  ]</span>
<span id="annotated-cell-10-64"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="18" onclick="event.preventDefault();">18</a><span id="annotated-cell-10-65" class="code-annotation-target">  solved <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solve_sudoku(puzzle)</span>
<span id="annotated-cell-10-66"></span>
<span id="annotated-cell-10-67">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> solved:</span>
<span id="annotated-cell-10-68">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> solved:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="19" onclick="event.preventDefault();">19</a><span id="annotated-cell-10-69" class="code-annotation-target">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span>
<span id="annotated-cell-10-70"></span>
<span id="annotated-cell-10-71">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the solution is valid</span></span>
<span id="annotated-cell-10-72">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_valid_sudoku(solved):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="20" onclick="event.preventDefault();">20</a><span id="annotated-cell-10-73" class="code-annotation-target">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The solution is valid!"</span>)</span>
<span id="annotated-cell-10-74"></span>
<span id="annotated-cell-10-75">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="21" onclick="event.preventDefault();">21</a><span id="annotated-cell-10-76" class="code-annotation-target">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The solution is not valid!"</span>)</span>
<span id="annotated-cell-10-77"></span>
<span id="annotated-cell-10-78">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="22" onclick="event.preventDefault();">22</a><span id="annotated-cell-10-79" class="code-annotation-target">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No solution found."</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-10" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="1" data-code-annotation="1">Import required components from the Z3 solver library.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="10" data-code-annotation="2">Check distinct values in row: Ensures each row contains distinct values (1 to 9).</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="16" data-code-annotation="3">Check distinct values in column: Ensures each column contains distinct values (1 to 9).</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="24" data-code-annotation="4">Check 3x3 subgrids: Ensures each 3x3 subgrid contains distinct values.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="26" data-code-annotation="5">Return <code>True</code> if the solution is valid, otherwise return <code>False</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="29" data-code-annotation="6">Create a <img src="https://latex.codecogs.com/png.latex?9%20%5Ctimes%209"> matrix of integer variables using Z3’s <code>Int</code> to represent each cell.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="31" data-code-annotation="7">Initialize the Z3 solver to begin solving the problem.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="33" data-code-annotation="8">Add constraints to ensure that each cell value is between 1 and 9.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="35" data-code-annotation="9">Add constraints for the pre-filled cells (the given values from the puzzle) to keep them unchanged.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="10">10</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="37" data-code-annotation="10">Add row constraints: Each row must contain distinct values.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="11">11</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="38" data-code-annotation="11">Add column constraints: Each column must contain distinct values.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="12">12</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="40" data-code-annotation="12">Add subgrid constraints: Each 3x3 subgrid must contain distinct values.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="13">13</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="42" data-code-annotation="13">Check if the Sudoku is solvable using the Z3 solver.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="14">14</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="45" data-code-annotation="14">Extract the solution: If a solution is found, extract it from the model.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="15">15</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="47" data-code-annotation="15">Return the solved puzzle.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="16">16</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="50" data-code-annotation="16">Return <code>None</code> if no solution is found.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="17">17</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="63" data-code-annotation="17">Input Sudoku puzzle: A <img src="https://latex.codecogs.com/png.latex?9%20%5Ctimes%209"> grid where <code>0</code> represents empty cells.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="18">18</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="65" data-code-annotation="18">Solve the puzzle: Call the <code>solve_sudoku()</code> function.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="19">19</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="69" data-code-annotation="19">Print the solved puzzle.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="20">20</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="73" data-code-annotation="20">Check if the solution is valid using the <code>is_valid_sudoku()</code> function.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="21">21</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="76" data-code-annotation="21">Print an error message if the solution is not valid.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="22">22</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="79" data-code-annotation="22">Print “No solution found” if no solution can be found by the solver.</span>
</dd>
</dl>
<p>Running the code, Z3 gives us:</p>
<table class="text-center mx-auto table" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000; border-top: 3px solid #000">5</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-top: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">6</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">7</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-top: 3px solid #000">8</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">9</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-top: 3px solid #000">2</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">6</td>
<td style="border: 1px solid #000; padding: 5px">7</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px">1</td>
<td style="border: 1px solid #000; padding: 5px">9</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">5</td>
<td style="border: 1px solid #000; padding: 5px">3</td>
<td style="border: 1px solid #000; padding: 5px">4</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">8</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000; border-left: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">9</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">8</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">5</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">6</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000; border-right: 3px solid #000">7</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">8</td>
<td style="border: 1px solid #000; padding: 5px">5</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">9</td>
<td style="border: 1px solid #000; padding: 5px">7</td>
<td style="border: 1px solid #000; padding: 5px">6</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px">4</td>
<td style="border: 1px solid #000; padding: 5px">2</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">3</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px">2</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">6</td>
<td style="border: 1px solid #000; padding: 5px">8</td>
<td style="border: 1px solid #000; padding: 5px">5</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px">7</td>
<td style="border: 1px solid #000; padding: 5px">9</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">1</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000; border-left: 3px solid #000">7</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">9</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">8</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">5</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000; border-right: 3px solid #000">6</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">9</td>
<td style="border: 1px solid #000; padding: 5px">6</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px">5</td>
<td style="border: 1px solid #000; padding: 5px">3</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">7</td>
<td style="border: 1px solid #000; padding: 5px">2</td>
<td style="border: 1px solid #000; padding: 5px">8</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">4</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px">8</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">7</td>
<td style="border: 1px solid #000; padding: 5px">4</td>
<td style="border: 1px solid #000; padding: 5px">1</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">9</td>
<td style="border: 1px solid #000; padding: 5px">6</td>
<td style="border: 1px solid #000; padding: 5px">3</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">5</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000; border-bottom: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">5</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">8</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">6</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">7</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">9</td>
</tr>
</tbody>
</table>
</section>
<section id="some-improvements" class="level3">
<h3 class="anchored" data-anchor-id="some-improvements">Some improvements</h3>
<p>Now we’ll modify the code to handle Sudoku grids of different sizes and provide all solutions.</p>
<p>The provided example is a mini Sudoku:</p>
<table class="text-center mx-auto table" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000; border-left: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000; border-right: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000; border-right: 3px solid #000">4</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">0</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000; border-bottom: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">1</td>
</tr>
</tbody>
</table>
<p>And the improved code:</p>
<div class="sourceCode" id="annotated-cell-11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-11-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int, Solver, And, Distinct, Or, sat</span>
<span id="annotated-cell-11-2"></span>
<span id="annotated-cell-11-3"></span>
<span id="annotated-cell-11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to check if a given Sudoku solution is valid</span></span>
<span id="annotated-cell-11-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_valid_sudoku(solution):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-11-6" class="code-annotation-target">  n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(solution)</span>
<span id="annotated-cell-11-7"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-11-8" class="code-annotation-target">  sqrt_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="annotated-cell-11-9">  </span>
<span id="annotated-cell-11-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if each row contains distinct values</span></span>
<span id="annotated-cell-11-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> solution:</span>
<span id="annotated-cell-11-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(row)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> n <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> row): </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-11-13" class="code-annotation-target">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="annotated-cell-11-14">  </span>
<span id="annotated-cell-11-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if each column contains distinct values</span></span>
<span id="annotated-cell-11-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="annotated-cell-11-17">    col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [solution[i][j] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)]  </span>
<span id="annotated-cell-11-18"></span>
<span id="annotated-cell-11-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(col)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> n:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-11-20" class="code-annotation-target">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="annotated-cell-11-21"></span>
<span id="annotated-cell-11-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if each sqrt_n x sqrt_n subgrid contains distinct values</span></span>
<span id="annotated-cell-11-23">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n, sqrt_n):</span>
<span id="annotated-cell-11-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n, sqrt_n):</span>
<span id="annotated-cell-11-25">      subgrid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []  </span>
<span id="annotated-cell-11-26"></span>
<span id="annotated-cell-11-27">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> di <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(sqrt_n):</span>
<span id="annotated-cell-11-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> dj <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(sqrt_n):</span>
<span id="annotated-cell-11-29">          subgrid.append(solution[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> di][j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dj])</span>
<span id="annotated-cell-11-30"></span>
<span id="annotated-cell-11-31">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(subgrid)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> n:  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-11-32" class="code-annotation-target">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="annotated-cell-11-33"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-11-34" class="code-annotation-target">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="annotated-cell-11-35"></span>
<span id="annotated-cell-11-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to solve Sudoku puzzles where size is determined from the puzzle</span></span>
<span id="annotated-cell-11-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> solve_sudoku(puzzle):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-11-38" class="code-annotation-target">  n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(puzzle)</span>
<span id="annotated-cell-11-39">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="9" onclick="event.preventDefault();">9</a><span id="annotated-cell-11-40" class="code-annotation-target">  X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[Int(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"x_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)]</span>
<span id="annotated-cell-11-41">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="10" onclick="event.preventDefault();">10</a><span id="annotated-cell-11-42" class="code-annotation-target">  solver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Solver()</span>
<span id="annotated-cell-11-43">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="11" onclick="event.preventDefault();">11</a><span id="annotated-cell-11-44" class="code-annotation-target">  solver.add([And(X[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, X[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)])</span>
<span id="annotated-cell-11-45">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="12" onclick="event.preventDefault();">12</a><span id="annotated-cell-11-46" class="code-annotation-target">  solver.add([X[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> puzzle[i][j] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> puzzle[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="annotated-cell-11-47">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="13" onclick="event.preventDefault();">13</a><span id="annotated-cell-11-48" class="code-annotation-target">  solver.add([Distinct(X[i]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)])</span>
<span id="annotated-cell-11-49">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="14" onclick="event.preventDefault();">14</a><span id="annotated-cell-11-50" class="code-annotation-target">  solver.add([Distinct([X[i][j] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)])</span>
<span id="annotated-cell-11-51">  </span>
<span id="annotated-cell-11-52">  sqrt_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="annotated-cell-11-53"></span>
<span id="annotated-cell-11-54">  solver.add([Distinct([X[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> di][j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dj] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> di <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(sqrt_n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> dj <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(sqrt_n)])</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="15" onclick="event.preventDefault();">15</a><span id="annotated-cell-11-55" class="code-annotation-target">              <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n, sqrt_n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n, sqrt_n)])</span>
<span id="annotated-cell-11-56">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="16" onclick="event.preventDefault();">16</a><span id="annotated-cell-11-57" class="code-annotation-target">  solutions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-11-58"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="17" onclick="event.preventDefault();">17</a><span id="annotated-cell-11-59" class="code-annotation-target">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> solver.check() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sat:</span>
<span id="annotated-cell-11-60">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solver.model()</span>
<span id="annotated-cell-11-61"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="18" onclick="event.preventDefault();">18</a><span id="annotated-cell-11-62" class="code-annotation-target">    solution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[model.evaluate(X[i][j]).as_long() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)]</span>
<span id="annotated-cell-11-63"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="19" onclick="event.preventDefault();">19</a><span id="annotated-cell-11-64" class="code-annotation-target">    solutions.append(solution)</span>
<span id="annotated-cell-11-65"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="20" onclick="event.preventDefault();">20</a><span id="annotated-cell-11-66" class="code-annotation-target">    solver.add(Or([X[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> solution[i][j] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)]))</span>
<span id="annotated-cell-11-67">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="21" onclick="event.preventDefault();">21</a><span id="annotated-cell-11-68" class="code-annotation-target">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> solutions</span>
<span id="annotated-cell-11-69"></span>
<span id="annotated-cell-11-70"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="annotated-cell-11-71">  puzzle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="annotated-cell-11-72">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],</span>
<span id="annotated-cell-11-73">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="annotated-cell-11-74">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="annotated-cell-11-75">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="22" onclick="event.preventDefault();">22</a><span id="annotated-cell-11-76" class="code-annotation-target">  ]</span>
<span id="annotated-cell-11-77"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="23" onclick="event.preventDefault();">23</a><span id="annotated-cell-11-78" class="code-annotation-target">  solutions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solve_sudoku(puzzle)</span>
<span id="annotated-cell-11-79"></span>
<span id="annotated-cell-11-80">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Found </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(solutions)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> solution(s):"</span>)</span>
<span id="annotated-cell-11-81">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, solution <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(solutions):</span>
<span id="annotated-cell-11-82">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Solution </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:"</span>)</span>
<span id="annotated-cell-11-83"></span>
<span id="annotated-cell-11-84">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> solution:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="24" onclick="event.preventDefault();">24</a><span id="annotated-cell-11-85" class="code-annotation-target">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span>
<span id="annotated-cell-11-86"></span>
<span id="annotated-cell-11-87">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="annotated-cell-11-88">    </span>
<span id="annotated-cell-11-89">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_valid_sudoku(solution):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="25" onclick="event.preventDefault();">25</a><span id="annotated-cell-11-90" class="code-annotation-target">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The solution is valid!"</span>)</span>
<span id="annotated-cell-11-91"></span>
<span id="annotated-cell-11-92">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="26" onclick="event.preventDefault();">26</a><span id="annotated-cell-11-93" class="code-annotation-target">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The solution is not valid!"</span>)</span>
<span id="annotated-cell-11-94"></span>
<span id="annotated-cell-11-95">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-11" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="1" data-code-annotation="1">Import required components from the Z3 solver library.</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="6" data-code-annotation="2">Determine the grid size from the solution passed to <code>is_valid_sudoku</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="8" data-code-annotation="3">Determine subgrid size based on the square root of the grid size (for <img src="https://latex.codecogs.com/png.latex?4%20%5Ctimes%204">, this would be 2x2 subgrids).</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="13" data-code-annotation="4">Check rows: Ensure each row has distinct values between 1 and n.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="20" data-code-annotation="5">Check columns: Ensure each column has distinct values.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="32" data-code-annotation="6">Check subgrids: Ensure each subgrid contains distinct values.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="34" data-code-annotation="7">Return <code>True</code> if all checks pass, meaning the solution is valid.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="38" data-code-annotation="8">Determine puzzle size from the input list. This makes the function adaptable to any Sudoku size (e.g., <img src="https://latex.codecogs.com/png.latex?4%20%5Ctimes%204">, <img src="https://latex.codecogs.com/png.latex?9%20%5Ctimes%209">).<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="40" data-code-annotation="9">Create integer variables to represent each cell in the Sudoku grid.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="10">10</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="42" data-code-annotation="10">Initialize the Z3 solver. # &lt;10&gt;</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="11">11</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="44" data-code-annotation="11">Add constraints to ensure each cell’s value is between 1 and n.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="12">12</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="46" data-code-annotation="12">Add constraints for the pre-filled cells in the puzzle.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="13">13</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="48" data-code-annotation="13">Ensure distinct values in each row.</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="14">14</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="50" data-code-annotation="14">Ensure distinct values in each column.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="15">15</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="55" data-code-annotation="15">Ensure distinct values in each subgrid.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="16">16</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="57" data-code-annotation="16">Initialize list to store all solutions.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="17">17</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="59" data-code-annotation="17">Check if the puzzle is solvable using Z3’s <code>sat</code> check.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="18">18</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="62" data-code-annotation="18">Extract the solution from the model if it’s solvable.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="19">19</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="64" data-code-annotation="19">Store each solution in the <code>solutions</code> list.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="20">20</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="66" data-code-annotation="20">Add constraint to ensure the solver does not return the same solution again.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="21">21</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="68" data-code-annotation="21">Return all found solutions.</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="22">22</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="76" data-code-annotation="22">Define a <img src="https://latex.codecogs.com/png.latex?4%20%5Ctimes%204"> Sudoku puzzle. Empty cells are represented by <code>0</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="23">23</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="78" data-code-annotation="23">Solve the puzzle and automatically determine the size.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="24">24</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="85" data-code-annotation="24">Print each solution.</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="25">25</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="90" data-code-annotation="25">Check if the solution is valid using the <code>is_valid_sudoku()</code> function.</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="26">26</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="93" data-code-annotation="26">Print validation result for each solution.</span>
</dd>
</dl>
<p>The output has two solutions:</p>
<table class="text-center mx-auto table" data-quarto-postprocess="true">
<caption>Solution 1</caption>
<tbody>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000; border-left: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000; border-right: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000; border-right: 3px solid #000">4</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000; border-bottom: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">3</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px">4</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">2</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000; border-bottom: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">1</td>
</tr>
</tbody>
</table>
<p>and</p>
<table class="text-center mx-auto table" data-quarto-postprocess="true">
<caption>Solution 2</caption>
<tbody>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000; border-left: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000; border-right: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000; border-right: 3px solid #000">4</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000; border-bottom: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">2</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px">4</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">3</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000; border-bottom: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">1</td>
</tr>
</tbody>
</table>
<p>Have fun extending code to KenKen o Kakuro puzzles, or others you like! Enjoy!</p>
</section>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<section id="papers" class="level3">
<h3 class="anchored" data-anchor-id="papers">Papers</h3>
<p>Leonardo Moura and Nikolaj Bjørner. 2009. <strong>Satisfiability Modulo Theories: An Appetizer</strong>. Formal Methods: Foundations and Applications: 12th Brazilian Symposium on Formal Methods, SBMF 2009 Gramado, Brazil, August 19-21, 2009 Revised Selected Papers. Springer-Verlag, Berlin, Heidelberg, 23–36. <a href="https://doi.org/10.1007/978-3-642-10452-7_3">DOI</a></p>
<p>Ganzinger, H., Hagen, G., Nieuwenhuis, R., Oliveras, A., Tinelli, C. (2004). <strong>DPLL(T): Fast Decision Procedures</strong>. In: Alur, R., Peled, D.A. (eds) Computer Aided Verification. CAV 2004. Lecture Notes in Computer Science, vol 3114. Springer, Berlin, Heidelberg. <a href="https://doi.org/10.1007/978-3-540-27813-9_14">DOI</a></p>
<p>Barrett, C., Sebastiani, R., Seshia, S. A., &amp; Tinelli, C. (2009). <strong>Satisfiability modulo theories</strong>. In Handbook of Satisfiability (1 ed., pp.&nbsp;825-885). (Frontiers in Artificial Intelligence and Applications; Vol. 185, No.&nbsp;1). IOS Press. <a href="https://doi.org/10.3233/978-1-58603-929-5-825">DOI</a></p>
</section>
<section id="books" class="level3">
<h3 class="anchored" data-anchor-id="books">Books</h3>
<p>Yurichev, D. (2024). <strong>SAT/SMT</strong> by example. Self-published. <a href="https://smt.st/SAT_SMT_by_example.pdf">Online</a>.</p>
<p><em>If you’re curious about SAT (Boolean Satisfiability) and SMT (Satisfiability Modulo Theories) solvers but don’t want to wade through dense theory, SAT/SMT by Example by Dennis Yurichev is a great pick. This book is all about showing you how to use these solvers in real-world scenarios, with loads of practical examples and hands-on exercises. It’s basically the “learn by doing” approach, which is perfect if you want to see how these tools can solve actual problems without getting lost in too much math.</em><br>
<em>One of the best things about this book is how approachable it is. Yurichev explains things in a straightforward way, making it easy for beginners to pick up on the basics. You’ll get examples that walk you through how to use solvers like Z3, a popular SMT solver, and you’ll find the code snippets helpful if you’re the type who likes to tinker. That said, the book doesn’t shy away from diving deeper. If you already have some experience or are looking to understand more complex topics like symbolic execution or program verification, you’ll find plenty here to chew on. The chapters build on each other nicely, so you won’t feel like you’re being thrown into the deep end without a float.</em><br>
<em>This isn’t a book that’s going to overwhelm you with theoretical details. Instead, it’s packed with practical examples—actual problems and code solutions that show how SAT and SMT solvers are used in real applications.</em> <em>One big plus: the book is free! Yurichev made it available online for anyone to download. This makes it super accessible, whether you’re a student, researcher, or hobbyist. It’s great to have a resource like this that doesn’t put a paywall between you and learning, and the fact that it’s frequently updated makes it even better.</em><br>
<em>While the book covers a lot, it’s pretty focused on Z3, so if you’re looking to learn about other solvers, you might need to supplement with other materials. Also, while it’s beginner-friendly, if you’re totally new to programming or logic, some parts might take a couple of reads to really sink in. But Yurichev’s writing style is clear enough that you’ll probably catch on without too much struggle.</em></p>
<p>Kroening, D., &amp; Strichman, O. (2016). <strong>Decision procedures: An algorithmic point of view</strong> (Texts in Theoretical Computer Science. An EATCS Series). Springer-Verlag Berlin Heidelberg. <a href="https://doi.org/10.1007/978-3-662-50497-0">DOI</a></p>
</section>
<section id="tutorials" class="level3">
<h3 class="anchored" data-anchor-id="tutorials">Tutorials</h3>
<p>Bjørner, N., de Moura, L., Nachmanson, L., &amp; Wintersteiger, C.. <strong>Programming Z3</strong>. Microsoft Research. <a href="https://z3prover.github.io/papers/programmingz3.html">Online</a>.</p>
<p><em>This tutorial provides a programmer’s introduction to the Satisfiability Modulo Theories Solver Z3. It describes how to use Z3 through scripts, provided in the Python scripting language, and it describes several of the algorithms underlying the decision procedures within Z3. It aims to broadly cover almost all available features of Z3 and the essence of the underlying algorithms.</em></p>
<p><a href="https://microsoft.github.io/z3guide/"><strong>Z3 Guide</strong></a>.</p>
<p><em>Online tutorial of Z3 from Microsoft.</em></p>
</section>
<section id="standards" class="level3">
<h3 class="anchored" data-anchor-id="standards">Standards</h3>
<p><a href="https://smt-lib.org/"><strong>SMT-LIB</strong></a>.</p>
<p><em><strong>SMT-LIB</strong> is a standard format and set of benchmarks used for specifying and solving problems in the context of <strong>SMT</strong>. The <strong>purpose of SMT-LIB</strong> is to:</em> <em>1. <strong>Standardize the Language</strong>: It provides a uniform language for writing problems and formulas to ensure that different SMT solvers can understand the same input format. This allows solvers to be compared and used interchangeably on the same problem sets.</em><br>
<em>2. <strong>Encourage Solver Development</strong>: By offering a large set of standardized benchmarks, SMT-LIB promotes the development of more efficient SMT solvers, as developers can use these benchmarks to test and improve their tools.</em><br>
<em>3. <strong>Promote Research and Collaboration</strong>: Researchers can use SMT-LIB as a shared resource for testing new theories, algorithms, and solvers. It facilitates collaboration by offering a common platform for problem instances, making it easier to compare results.</em><br>
<em>4. <strong>Provide Tool Support</strong>: SMT-LIB includes support for specifying problems, as well as querying and interacting with SMT solvers, helping in automation and making solvers more accessible in various fields, including verification, artificial intelligence, and formal methods.</em><br>
<em>SMT-LIB is widely used in applications such as software and hardware verification, automated reasoning, formal methods, and program analysis.</em></p>
</section>
<section id="code" class="level3">
<h3 class="anchored" data-anchor-id="code">Code</h3>
<p><a href="https://github.com/Z3Prover/z3"><strong>Z3</strong></a>.</p>
<p><em>Z3 is a theorem prover from Microsoft Research. It is licensed under the MIT license.</em></p>
<p><a href="https://cvc5.github.io/"><strong>cvc5</strong></a>.</p>
<p><em>cvc5 is an efficient open-source automatic theorem prover for Satisfiability Modulo Theories (SMT) problems. It can be used to prove the satisfiability (or, dually, the validity) of first-order formulas with respect to (combinations of) a variety of useful background theories. It further provides a Syntax-Guided Synthesis (SyGuS) engine to synthesize functions with respect to background theories and their combinations.</em></p>


</section>
</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>fun</category>
  <category>mathematics</category>
  <category>Python</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/satisfiability-modulo-theories-sudoku/</guid>
  <pubDate>Wed, 04 Sep 2024 22:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/satisfiability-modulo-theories-sudoku/smt-sudoku.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>The Relationship Between Category Theory, Lambda Calculus, and Functional Programming in Haskell</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/category-theory-functional-programming/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Functional programming is often praised for its mathematical purity, elegance, and compositional nature. Among the languages that embody these principles, <strong>Haskell</strong> stands out for its deep roots in <strong>lambda calculus</strong> and <strong>category theory</strong>. These mathematical frameworks not only shape how Haskell programs are structured but also enable powerful abstractions like <strong>higher-order functions</strong>, <strong>monads</strong>, and <strong>type systems</strong>. Central to this relationship is the concept of <strong>composition</strong>, which serves as the fundamental glue connecting these ideas and facilitating the construction of complex systems from simple components.</p>
<p>This post explores the relationship between category theory, lambda calculus, and Haskell, one of the most widely used functional programming languages, emphasizing how the principle of compositionality underlies both the theoretical and practical aspects of functional programming.</p>
</section>
<section id="lambda-calculus-the-foundation-of-functional-programming" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="lambda-calculus-the-foundation-of-functional-programming">Lambda calculus: the foundation of functional programming</h2>
<p><strong>Lambda calculus</strong> is a formal system developed by <strong>Alonzo Church</strong><sup>1</sup> in the 1930s as a mathematical framework to study functions, their definitions, and applications. It serves as the foundation of <strong>functional programming</strong> because it provides a minimalistic but powerful model of computation based on the notion of <strong>functions</strong>. In lambda calculus, functions are treated as first-class citizens, meaning they can be passed as arguments, returned as results, and composed to form new functions.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;Church A. “An Unsolvable Problem of Elementary Number Theory” <em>American Journal of Mathematics</em> 58, no. 2 (1936): 345-363. DOI: <a href="https://doi.org/10.2307/2371045">10.2307/2371045</a>.</p></div></div><p>Lambda calculus consists of three fundamental constructs, expressed here using Haskell notation:</p>
<ol type="1">
<li><p><strong>Variables</strong>, such as <code>x</code>, which represent identifiers or placeholders for values.</p></li>
<li><p><strong>Abstractions</strong>, like <code>\x -&gt; x + 1</code>, which define anonymous functions that map an input variable, in this case <code>x</code>, to an expression, in this case <code>x + 1</code>. These abstractions encapsulate a computation that can be reused without explicitly naming the function.</p></li>
<li><p><strong>Applications</strong>, such as <code>\x -&gt; x + 1 3</code>, where the function <code>\x -&gt; x + 1</code> is applied to the argument <code>3</code>. This operation results in <code>3 + 1</code>, producing the value <code>4</code>. Applications enable the actual execution of functions by providing them with input values.</p></li>
</ol>
<p>This simplicity allows lambda calculus to model complex computations using only functions, making it a natural fit for functional programming. In Haskell, lambda calculus is reflected in <strong>lambda expressions</strong>, which are anonymous functions used to create function definitions on the fly. For instance, <code>\x -&gt; x + 1</code> is a lambda expression that represents a function taking a single argument <code>x</code> and returning <code>x + 1</code>. Lambda expressions allow functions to be passed as arguments to other functions and returned as results, promoting higher-order functions. For example, in Haskell, you can write a function <code>applyTwice</code>, which takes a function and an argument, and applies the function twice to the argument:</p>
<div class="sourceCode" id="annotated-cell-1" style="background: #f1f3f5;"><pre class="sourceCode numberSource haskell code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode haskell"><a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-1-1" class="code-annotation-target"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">applyTwice ::</span> (a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-1-2" class="code-annotation-target">applyTwice f x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> f (f x)</span>
<span id="annotated-cell-1-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-1-4" class="code-annotation-target">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> applyTwice (\x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-1" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="1" data-code-annotation="1">The type signature of <code>applyTwice</code> indicates that it takes a function <code>(a -&gt; a)</code> as its first argument, and a value of type <code>a</code> as its second argument, and returns a value of type <code>a</code>. The function <code>(a -&gt; a)</code> is a function that takes an argument of type <code>a</code> and returns a result of the same type <code>a</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="2" data-code-annotation="2">The implementation of <code>applyTwice</code> applies the function <code>f</code> twice to the value <code>x</code>. First, it applies <code>f</code> to <code>x</code>, then it applies <code>f</code> again to the result of the first application.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="4" data-code-annotation="3">The <code>result</code> variable calls <code>applyTwice</code> with the lambda expression <code>\x -&gt; x + 1</code>, which is an anonymous function that increments its input by 1. It also passes the value <code>5</code> as the second argument. The result of this operation will be <code>7</code> since the function <code>(\x -&gt; x + 1)</code> is applied twice to <code>5</code>, resulting in <code>6</code> and then <code>7</code>.</span>
</dd>
</dl>
<p>In this example, <code>\x -&gt; x + 1</code> is a lambda expression that is passed to <code>applyTwice</code>, demonstrating how functions can be treated as first-class citizens in Haskell, just as they are in lambda calculus.</p>
<p>A key operation in lambda calculus is <strong>function composition</strong>. It allows us to build complex behavior by chaining simple functions together. For instance, given two functions <code>f :: B -&gt; C</code> (Haskell type annotation syntax for a function <code>f</code> that takes an argument of type <code>B</code> and returns a value of type <code>C</code>) and <code>g :: A -&gt; B</code>, we can compose them into a new function <code>f . g :: A -&gt; C</code>. This operation reflects the core idea of lambda calculus: computation can be expressed by applying and composing functions. The power of this approach lies in its clarity and the way it abstracts away details, focusing instead on how data flows through functions.</p>
<p>In Haskell, this idea is captured by the composition operator <code>(.)</code>, which enables the chaining of functions to create more complex behaviors. Compositionality, as we’ll see, is a central concept that extends from lambda calculus into category theory and functional programming.</p>
<p>To further illustrate the power of function composition, consider the following example in Haskell:</p>
<div class="sourceCode" id="annotated-cell-2" style="background: #f1f3f5;"><pre class="sourceCode numberSource haskell code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode haskell"><a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-2-1" class="code-annotation-target"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">double ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<span id="annotated-cell-2-2">double x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="annotated-cell-2-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-2-4" class="code-annotation-target"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">increment ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<span id="annotated-cell-2-5">increment x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="annotated-cell-2-6"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-2-7" class="code-annotation-target">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (double <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> increment) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-2" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="1" data-code-annotation="1">The <code>double</code> function multiplies its input by 2.</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="4" data-code-annotation="2">The <code>increment</code> function adds 1 to its input.</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="7" data-code-annotation="3">By composing <code>double</code> and <code>increment</code> using the <code>(.)</code> operator, we create a new function that first increments its input and then doubles the result. Applying this composed function to <code>3</code> produces the value <code>8</code>.</span>
</dd>
</dl>
<p>This shows how function composition allows for creating more complex behaviors by combining simpler functions. The <code>(.)</code> operator in Haskell enables this seamless chaining of functions, making code more modular and reusable. Function composition not only simplifies the expression of logic but also encourages the development of smaller, single-purpose functions that can be combined to solve more complex problems.</p>
<p>Beyond these core concepts, lambda calculus also includes more advanced ideas that extend its expressive power. <strong>Alpha conversion</strong> is a technique that allows the renaming of bound variables to avoid clashes in naming, ensuring that variable names do not affect the meaning of expressions. This supports flexibility in manipulating expressions without changing their underlying behavior. Another fundamental operation is <strong>beta reduction</strong>, which involves the application of a function to an argument. This process replaces the formal parameter of the function with the actual argument within the function body, thereby performing the computation that the function defines.</p>
<p>Additionally, <strong>eta conversion</strong> captures the idea of function extensionality, formalizing the notion that two functions are equivalent if they behave identically for all inputs. Finally, <strong>fixed-point combinators</strong><sup>2</sup>, like the famous Y combinator, enable recursive definitions in lambda calculus, which lacks direct recursion. These combinators allow a function to refer to itself, thereby modeling iterative processes purely within the framework of lambda calculus. Each of these concepts enhances the ability of lambda calculus to represent complex computations, highlighting its foundational role in the theory of computation and functional programming.</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;A fixed-point combinator, like the Y combinator, is a higher-order function that enables recursion in systems such as lambda calculus, which inherently lacks direct support for recursive definitions. By allowing a function to call itself, fixed-point combinators enable the modeling of iterative processes within purely functional frameworks, without the need for explicit looping constructs. This concept is essential in both theoretical computer science and functional programming, as it formalizes recursive behavior and showcases the power of higher-order functions. For an in-depth exploration of these ideas, see Barendregt H. P. “The Lambda Calculus: Its Syntax and Semantics” <em>North-Holland</em> (1984). ISBN: 0444875085.</p></div></div></section>
<section id="category-theory-a-higher-level-abstraction" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="category-theory-a-higher-level-abstraction">Category theory: a higher-level abstraction</h2>
<p><strong>Category theory</strong> elevates the ideas of lambda calculus by providing a more abstract framework for reasoning about mathematical structures and their relationships. Introduced by <strong>Samuel Eilenberg</strong> and <strong>Saunders Mac Lane</strong> in the 1940s<sup>3</sup>, category theory focuses on <strong>objects</strong> and <strong>morphisms</strong> (arrows) that represent transformations between these objects. The central idea is to abstractly capture how objects and morphisms interact through <strong>composition</strong> and <strong>identity</strong>.</p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;Eilenberg S., and Mac Lane S. “General Theory of Natural Equivalences” <em>Transactions of the American Mathematical Society</em> 58, no. 2 (1945): 231-294. DOI: <a href="https://doi.org/10.2307/1990284">10.2307/1990284</a>.</p></div></div><p>The core concept in category theory is <strong>composition</strong>: morphisms can be composed in an associative way, and every object has an identity morphism that acts as a neutral element for composition. This abstraction allows us to model complex systems by focusing on the relationships between components rather than their internal details. Composition is the glue that connects objects, ensuring that complex transformations can be constructed from simpler ones in a consistent manner.</p>
<p>In <strong>Haskell</strong>, <strong>types</strong> can be seen as objects, and <strong>functions</strong> as morphisms between these types. The composition of functions in Haskell mirrors the composition of morphisms in category theory. This perspective enables us to reason about programs at a higher level of abstraction, focusing on how different functions interact rather than digging in their internal mechanics.</p>
<section id="functors" class="level3">
<h3 class="anchored" data-anchor-id="functors">Functors</h3>
<p>Before diving into more complex categories, it’s essential to understand <strong>functors</strong>, which are a fundamental concept in category theory and play a crucial role in functional programming. Informally, a functor can be thought of as a structure-preserving map between two categories. It transforms objects and morphisms (arrows) from one category into objects and morphisms in another category while preserving the relationships between them. In simpler terms, if you have a set of objects and arrows that represent relationships in one category, a functor maps those objects and arrows into another category in a way that maintains the same structure.</p>
<p>In category theory, a functor <code>F</code> is a mapping between two categories, say <code>C</code> and <code>D</code>, that assigns to each object <code>A</code> in category <code>C</code> an object <code>F(A)</code> in category <code>D</code>, and to each morphism <code>f: A -&gt; B</code> in <code>C</code>, a morphism <code>F(f): F(A) -&gt; F(B)</code> in <code>D</code>. The functor must also preserve two critical properties: <strong>composition</strong> and <strong>identity</strong>. This means that if you have two composed morphisms <code>f</code> and <code>g</code> in the original category, then <code>F(f . g) = F(f) . F(g)</code> must hold in the target category, and if <code>id_A</code> is the identity morphism for object <code>A</code>, then <code>F(id_A)</code> must be the identity morphism for the object <code>F(A)</code> in the target category.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["A"] --&gt;|"f"| B["B"]
  A --&gt;|"F"| FA["F(A)"]
  B --&gt;|"F"| FB["F(B)"]
  FA --&gt;|"F(f)"| FB
</pre>
</div>
<p></p><figcaption> The functor <code>F</code> maps objects <code>A</code> and <code>B</code> from category <code>C</code> to objects <code>F(A)</code> and <code>F(B)</code> in category <code>D</code>, while also mapping the morphism <code>f: A -&gt; B</code> to <code>F(f): F(A) -&gt; F(B)</code> </figcaption> </figure><p></p>
</div>
</div>
</div>
<p>In Haskell, the <strong>Functor</strong> type class captures this concept, but with an important distinction: Haskell functors are <strong>endofunctors</strong>. An endofunctor is a functor that maps a category to itself. In the case of Haskell, this category is <strong>Hask</strong>, the category of Haskell types and functions. This means that in Haskell, functors map between objects (types) and morphisms (functions) within the same category, i.e., from one Haskell type to another Haskell type, and from one Haskell function to another Haskell function.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["Haskell Type A"] --&gt;|"Haskell Function f"| B["Haskell Type B"]
  A --&gt;|"Functor F"| FA["F(A)"]
  B --&gt;|"Functor F"| FB["F(B)"]
  FA --&gt;|"Functor F(f)"| FB
</pre>
</div>
<p></p><figcaption> The functor <code>F</code> maps objects and morphisms within the same category <code>Hask</code> (the category of Haskell types and functions)</figcaption> </figure><p></p>
</div>
</div>
</div>
<p>In Haskell, functors allow you to apply a function to values inside a structure (e.g., lists, <code>Maybe</code>, <code>Either</code>) without modifying the structure itself. This operation is often described as “lifting” a function to operate on values within a functorial context. For example, if you have a function that operates on integers, and you have a list of integers, a functor allows you to apply that function to every element in the list without altering the list’s overall structure. This concept is formalized in Haskell with the <code>fmap</code> function, which applies a function to the contents of a functor while preserving the functor’s structure.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["List [1,2,3]"] --&gt;|"fmap (+1)"| B["List [2,3,4]"]
  A --&gt;|"Functor Structure"| A
</pre>
</div>
<p></p><figcaption> The functor <code>fmap</code> applies a function to values inside a functor, preserving the structure (e.g., a list or <code>Maybe</code>)</figcaption> </figure><p></p>
</div>
</div>
</div>
<p>For instance, consider the <strong><code>Either</code></strong> functor, which represents computations that might fail:</p>
<div class="sourceCode" id="annotated-cell-3" style="background: #f1f3f5;"><pre class="sourceCode numberSource haskell code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode haskell"><span id="annotated-cell-3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">instance</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Functor</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Either</span> e) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-3-2" class="code-annotation-target">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> _ (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Left</span> err) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Left</span> err</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-3-3" class="code-annotation-target">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> f (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Right</span> val) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Right</span> (f val)</span>
<span id="annotated-cell-3-4"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-3-5" class="code-annotation-target"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">compute ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Either</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<span id="annotated-cell-3-6">compute x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Right</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Left</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Negative number"</span></span>
<span id="annotated-cell-3-7"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-3-8" class="code-annotation-target">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) (compute <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-3-9" class="code-annotation-target">result2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) (compute (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-3" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="2" data-code-annotation="1">When the value is a <code>Left</code> constructor (indicating an error or failure), <code>fmap</code> preserves the structure and returns the <code>Left</code> unchanged. This ensures that no function is applied to the error value.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="3" data-code-annotation="2">When the value is a <code>Right</code> constructor (indicating success), <code>fmap</code> applies the provided function <code>f</code> to the value inside the <code>Right</code> and wraps the result back in the <code>Right</code> constructor, thereby transforming the successful value without altering the <code>Either</code> structure.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="5" data-code-annotation="3">The <code>compute</code> function demonstrates a simple usage of <code>Either</code>. If the input <code>x</code> is positive, it returns <code>Right (x * 2)</code>; otherwise, it returns <code>Left "Negative number"</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="8" data-code-annotation="4"><code>fmap (+1)</code> is applied to the result of <code>compute 10</code>, which produces <code>Right 20</code>. The function <code>(+1)</code> is applied to <code>20</code>, yielding <code>Right 21</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="9" data-code-annotation="5"><code>fmap (+1)</code> is applied to the result of <code>compute (-10)</code>, which produces <code>Left "Negative number"</code>. Since the value is a <code>Left</code>, <code>fmap</code> does not apply the function, and the result remains <code>Left "Negative number"</code>.</span>
</dd>
</dl>
<p>Here is a diagram illustrating the flow and transformations in the provided Haskell code using the <code>Either</code> functor:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["compute 10"] --&gt;|"Right 20"| B["fmap (+1) 20"]
  B --&gt;|"Right 21"| C["result"]
  D["compute (-10)"] --&gt;|"Left 'Negative number'"| E["fmap (+1) 'Negative number'"]
  E --&gt;|"Left 'Negative number'"| F["result2"]
</pre>
</div>
<p></p><figcaption> The diagram represents the behavior of the <code>Either</code> functor, showing how the <code>fmap</code> function applies a transformation only to the <code>Right</code> value (successful result), leaving the <code>Left</code> value (error) unchanged</figcaption> </figure><p></p>
</div>
</div>
</div>
<p>This example illustrates how functors (like the <code>Functor</code> instance for <code>Either</code>) allow us to apply functions to values inside a structure, while preserving the structure itself (<code>Left</code> and <code>Right</code>). It demonstrates the compositional nature of functors (<code>fmap</code>), which is a key concept in both category theory and functional programming in Haskell.</p>
</section>
<section id="monads" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="monads">Monads</h3>
<p>A <strong>monad</strong><sup>4</sup> can be understood informally as a design pattern that allows for chaining operations while handling additional context, such as side effects, failures, or state. In essence, a monad provides a structured way to sequence computations, where each computation may involve extra information (e.g., state, errors, or I/O) without losing the ability to compose functions in a clean and modular way.</p>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;The concept of monads was introduced by <strong>Eugenio Moggi</strong> in his seminal paper titled “Notions of Computation and Monads,” published in 1991. In this paper, Moggi introduced monads as a way to model computational effects (such as state, exceptions, and I/O) in a purely functional programming setting. Moggi’s work had a profound influence on the development of functional programming, especially in languages like Haskell, where monads became a central concept for structuring programs with side effects. Moggi E. “Notions of Computation and Monads.” <em>Information and Computation</em> 93, no. 1 (1991): 55-92. DOI: <a href="https://doi.org/10.1016/0890-5401(91)90052-4">10.1016/0890-5401(91)90052-4</a>.</p></div></div><p>Formally, in category theory, a monad is a specific kind of <strong>endofunctor</strong> (a functor that maps a category to itself) equipped with two natural transformations: <code>η</code> (unit, called <code>return</code> or <code>pure</code> in Haskell) and <code>μ</code> (multiplication, often implemented as <code>join</code> in Haskell). An endofunctor is a functor that maps both objects and morphisms within the same category, typically from <code>Hask</code> (the category of Haskell types and functions) to itself.</p>
<p>These natural transformations follow strict algebraic laws—<strong>associativity</strong> and <strong>identity</strong>—which ensure that monadic operations compose consistently:</p>
<ul>
<li><p><strong>Associativity</strong>: This guarantees that the way functions are chained using the monad does not affect the final result. If you perform three operations in sequence, it doesn’t matter how the operations are grouped.</p></li>
<li><p><strong>Identity</strong>: This ensures that wrapping a value in the monadic context (via <code>return</code>) and then immediately unwrapping it (using <code>&gt;&gt;=</code>) gives back the original value. This law reflects that <code>return</code> serves as a neutral element.</p></li>
</ul>
<p>These laws ensure that monads provide a predictable way to compose and sequence operations, abstracting away concerns about side effects, errors, or context-specific details.</p>
<p>In Haskell, a monad is represented by a type constructor along with two key operations:</p>
<ul>
<li><p><code>return</code> (or <code>pure</code>): This operation injects a value into the monadic context.</p></li>
<li><p><code>&gt;&gt;=</code> (bind): This operation applies a function to the value inside the monad, producing a new monad.</p></li>
</ul>
<p>The combination of these operations allows monads to manage side effects in a controlled way while preserving the composability of functions. This is particularly useful in functional programming, where functions are expected to be pure, meaning that they should not produce side effects or rely on global state. Monads provide a structured way to encapsulate side effects, while keeping the core logic of the program pure and predictable.</p>
<p>For example, the <code>Maybe</code> monad represents computations that may fail. It encapsulates values in a <code>Just</code> constructor if the computation is successful, or returns <code>Nothing</code> if it fails. Similarly, the <code>IO</code> monad is used to encapsulate input/output operations in Haskell, allowing side effects to be handled in a purely functional manner. This enables Haskell developers to work with impure operations, such as I/O, exceptions, or state, without violating the principles of functional programming.</p>
<p>Monads are a beautiful example of how lambda calculus and category theory come together in Haskell. From the lambda calculus perspective, a monad allows functions to be composed cleanly, even when dealing with additional context or side effects. From the category theory perspective, monads provide a structured way to chain computations while adhering to strict algebraic rules, ensuring that operations remain consistent and predictable.</p>
<p>Here’s a simple example in Haskell that demonstrates monadic chaining:</p>
<div class="sourceCode" id="annotated-cell-4" style="background: #f1f3f5;"><pre class="sourceCode numberSource haskell code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode haskell"><a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-4-1" class="code-annotation-target"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">safeDivide ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Maybe</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-4-2" class="code-annotation-target">safeDivide _ <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Nothing</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-4-3" class="code-annotation-target">safeDivide x y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Just</span> (x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`div`</span> y)</span>
<span id="annotated-cell-4-4"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-4-5" class="code-annotation-target"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">monadicComputation ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Maybe</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<span id="annotated-cell-4-6">monadicComputation x y z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-4-7" class="code-annotation-target">  safeDivide x y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;=</span> \result1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-4-8" class="code-annotation-target">  safeDivide result1 z</span>
<span id="annotated-cell-4-9"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-4-10" class="code-annotation-target">result1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> monadicComputation <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-4-11" class="code-annotation-target">result2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> monadicComputation <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-4" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="1" data-code-annotation="1">The <code>safeDivide</code> function returns a <code>Maybe</code> value to handle division safely.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="2" data-code-annotation="2">If the divisor is zero, <code>safeDivide</code> returns <code>Nothing</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="3" data-code-annotation="3">If the divisor is non-zero, <code>safeDivide</code> returns <code>Just (x</code>div<code>y)</code>, representing successful division.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="5" data-code-annotation="4"><code>monadicComputation</code> chains two <code>safeDivide</code> operations using monadic chaining.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="7" data-code-annotation="5">The first division result is bound to <code>result1</code> using the <code>&gt;&gt;=</code> operator.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="8" data-code-annotation="6">The second division operates on <code>result1</code>, continuing the monadic computation.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="10" data-code-annotation="7">Applying <code>monadicComputation</code> with valid inputs results in <code>Just 2</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="11" data-code-annotation="8">Applying <code>monadicComputation</code> with a zero divisor results in <code>Nothing</code>, representing a safe failure.</span>
</dd>
</dl>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["12"] --&gt;|"safeDivide 12 / 2"| B["6"]
  B --&gt;|"safeDivide 6 / 3"| C["2"]
  D["12"] --&gt;|"safeDivide 12 / 0"| E["Nothing"]
</pre>
</div>
<p></p><figcaption> This diagram illustrates monadic chaining with <code>safeDivide</code>, where two divisions are chained together using the <code>&gt;&gt;=</code> operator. When the computation is valid, it continues; otherwise, it returns <code>Nothing</code>.</figcaption> </figure><p></p>
</div>
</div>
</div>
<p>Another example demonstrates monad composition:</p>
<div class="sourceCode" id="annotated-cell-5" style="background: #f1f3f5;"><pre class="sourceCode numberSource haskell code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode haskell"><a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-5-1" class="code-annotation-target"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">addOne ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Maybe</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-5-2" class="code-annotation-target">addOne x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Just</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="annotated-cell-5-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-5-4" class="code-annotation-target"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">multiplyByTwo ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Maybe</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-5-5" class="code-annotation-target">multiplyByTwo x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Just</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="annotated-cell-5-6"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-5-7" class="code-annotation-target"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">composedFunction ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Maybe</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-5-8" class="code-annotation-target">composedFunction x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> addOne x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;=</span> multiplyByTwo</span>
<span id="annotated-cell-5-9"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-5-10" class="code-annotation-target">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> composedFunction <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-5" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="1" data-code-annotation="1">The <code>addOne</code> function wraps the addition of 1 in a <code>Maybe</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-5" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="2" data-code-annotation="2">The implementation returns <code>Just (x + 1)</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-5" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="4" data-code-annotation="3">The <code>multiplyByTwo</code> function wraps the multiplication by 2 in a <code>Maybe</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-5" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="5" data-code-annotation="4">The implementation returns <code>Just (x * 2)</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-5" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="7" data-code-annotation="5"><code>composedFunction</code> represents the composition of <code>addOne</code> and <code>multiplyByTwo</code> using monadic operations.</span>
</dd>
<dt data-target-cell="annotated-cell-5" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="8" data-code-annotation="6">The <code>&gt;&gt;=</code> operator is used to chain the monadic operations, composing the functions.</span>
</dd>
<dt data-target-cell="annotated-cell-5" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="10" data-code-annotation="7">Applying <code>composedFunction</code> to <code>3</code> results in <code>Just 8</code>.</span>
</dd>
</dl>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["3"] --&gt;|"addOne"| B["Just 4"]
  B --&gt;|"multiplyByTwo"| C["Just 8"]
</pre>
</div>
<p></p><figcaption> This diagram illustrates monad composition, where the <code>addOne</code> and <code>multiplyByTwo</code> functions are composed using monadic operations, resulting in a final value of <code>Just 8</code>.</figcaption> </figure><p></p>
</div>
</div>
</div>
<p>These examples illustrate how lambda calculus (through pure functions and function composition) and category theory (through monads and function composition) come together in Haskell. <strong>Purity</strong> in functional programming means that a function’s output is determined solely by its input, with no side effects, such as modifying global state or performing I/O operations. Monads provide a structured way of chaining computations while preserving this functional purity, enabling developers to manage complexity and side effects in a compositional way. Monads encapsulate side effects within their structure, allowing the core logic of the program to remain pure and predictable, ensuring that side effects are controlled and managed explicitly.</p>
</section>
<section id="cartesian-closed-categories" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="cartesian-closed-categories">Cartesian Closed Categories</h3>
<p>One of the foundational structures in category theory, especially relevant to functional programming, is the <strong>cartesian closed category (CCC)</strong><sup>5</sup>. A CCC is a category that has all finite <strong>products</strong> (such as pairs or tuples) and <strong>exponentials</strong> (which correspond to function spaces), providing the necessary categorical framework to model both <strong>product types</strong> and <strong>function types</strong>, essential constructs in functional programming languages like Haskell.</p>
<div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp;The foundational work on combinatory logic, which laid the groundwork for the development of CCCs, can be found in Curry H. B., and Feys R. <em>Combinatory Logic</em>. Vol. 1. Amsterdam: North-Holland, 1958.</p></div></div><p>In a CCC, <strong>product types</strong> represent pairs or tuples of values, analogous to Haskell’s tuple types (e.g., <code>(A, B)</code>), and correspond to the categorical notion of <strong>products</strong>. <strong>Exponential objects</strong> in a CCC represent function types, such as <code>A -&gt; B</code> in Haskell. The exponential object <code>B^A</code> can be thought of as the object of all morphisms (functions) from <code>A</code> to <code>B</code>. This structure supports the functional programming idea of treating functions as first-class citizens, a principle that is central to lambda calculus and Haskell.</p>
<p>The CCC structure includes:</p>
<ul>
<li><p><strong>Product types</strong>: Represented as tuples, equipped with <strong>projections</strong> <code>π₁</code> and <code>π₂</code>, which extract individual elements from the product.</p></li>
<li><p><strong>Exponential objects</strong>: Representing function types, where the exponential object <code>B^A</code> is analogous to the set of all functions from <code>A</code> to <code>B</code>. The exponential object comes with an <strong>evaluation morphism</strong> <code>eval: B^A × A → B</code>, which corresponds to function application.</p></li>
</ul>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["A"] --&gt;|"π₁"| Product["(A, B)"]
  B["B"] --&gt;|"π₂"| Product
  Exponential["B^A"] --&gt;|"eval"| B
  Product --&gt;|"eval"| Exponential
</pre>
</div>
<p></p><figcaption> The diagram illustrates product types and exponential objects in a cartesian closed category, where product types correspond to tuples and exponential objects correspond to function types.</figcaption> </figure><p></p>
</div>
</div>
</div>
<p>CCCs provide a mathematical model for reasoning about programs, allowing programmers to abstractly understand both the types of data and the functions that operate on them. By interpreting Haskell’s type system in terms of CCCs, developers can apply category theory to reason about the composition of functions, the relationships between types, and the construction of more complex systems.</p>
<p>CCCs have direct applications in designing type systems in functional programming languages. For example, the <strong>lambda calculus</strong> can be interpreted within any CCC. This makes CCCs essential for developing languages that need to handle functions, recursion, and complex data types. Additionally, CCCs are foundational in areas like <strong>proof theory</strong> and <strong>logic</strong>, where they provide a framework for representing logical propositions and their proofs. CCCs are also important in <strong>compilers</strong> and <strong>type checkers</strong>, where understanding the relationships between functions and types ensures correctness in program transformations.</p>
</section>
<section id="other-concepts" class="level3">
<h3 class="anchored" data-anchor-id="other-concepts">Other concepts</h3>
<p>Beyond functors, monads, and CCCs, several other concepts from category theory are particularly useful in functional programming, providing deeper abstractions and tools for structuring programs.</p>
<section id="natural-transformations" class="level4">
<h4 class="anchored" data-anchor-id="natural-transformations">Natural transformations</h4>
<p>A <strong>natural transformation</strong> is a mapping between two functors that preserves the structure of the categories involved. In practical terms, it provides a way to transform data between different functorial contexts (e.g., from one container type to another) while ensuring that the relationships between objects and morphisms are maintained. Natural transformations are critical in scenarios where data needs to be transformed consistently across different structures, such as in <strong>data transformation pipelines</strong>, <strong>parallel processing</strong> frameworks, or when dealing with <strong>co-algebraic structures</strong> like streams.</p>
<p>For example, if you have two functors <code>F</code> and <code>G</code> that map objects from one category to another, a natural transformation <code>η</code> provides a way to transform an object <code>F(A)</code> into <code>G(A)</code> for every object <code>A</code>, and this transformation must behave consistently with respect to morphisms (functions) between objects. In Haskell, natural transformations are often represented as polymorphic functions of type <code>(forall a. F a -&gt; G a)</code>. They are essential for building reusable and composable software components that can operate across various contexts while preserving the integrity of transformations.</p>
<p>In real-world programming, natural transformations are used to build modular and scalable systems. For instance, in <strong>functional reactive programming (FRP)</strong>, natural transformations allow smooth transitions between different streams or event handlers. Similarly, in <strong>distributed systems</strong> or <strong>data processing pipelines</strong>, they provide a structured way to transform data across different stages while maintaining consistency and structure.</p>
</section>
<section id="yoneda-lemma" class="level4">
<h4 class="anchored" data-anchor-id="yoneda-lemma">Yoneda lemma</h4>
<p>The <strong>Yoneda lemma</strong> is a deep result in category theory that provides powerful insights into how objects in a category relate to the morphisms (functions) that interact with them. It essentially states that understanding how an object interacts with other objects in a category (through morphisms) is equivalent to understanding the object itself. This lemma is invaluable in functional programming because it gives rise to important techniques for abstraction and optimization.</p>
<p>In programming, the Yoneda lemma underpins many <strong>optimization strategies</strong> and <strong>generic programming</strong> techniques. It helps to abstract over different types and operations, enabling <strong>parametric polymorphism</strong>—a key feature in functional programming languages like Haskell. For example, the Yoneda lemma is used to optimize <strong>free monads</strong> and <strong>free functors</strong> by reducing the complexity of certain computations while preserving correctness. This allows developers to write more general and reusable code that can be specialized or optimized as needed without rewriting core logic.</p>
<p>In <strong>generic programming</strong>, the Yoneda lemma allows developers to write highly flexible and reusable code by focusing on how types and functions relate to each other. It can help optimize function composition, type-level programming, and even transformations in <strong>domain-specific languages (DSLs)</strong>. In short, the Yoneda lemma provides a foundational principle for reasoning about how functions interact with data, allowing for more abstract and efficient code.</p>
</section>
<section id="adjunctions" class="level4">
<h4 class="anchored" data-anchor-id="adjunctions">Adjunctions</h4>
<p><strong>Adjunctions</strong> are another advanced concept that frequently appears in functional programming. An adjunction describes a pair of functors, <code>F</code> and <code>G</code>, that stand in a particular relationship: <code>F</code> is <strong>left adjoint</strong> to <code>G</code>, and <code>G</code> is <strong>right adjoint</strong> to <code>F</code>. This means that for every pair of objects, one in the source category and one in the target category, there is a natural correspondence between morphisms (functions) involving these functors.</p>
<p>Adjunctions are useful when there are two different ways of constructing or representing data, and you want to relate them in a structured way. In programming, adjunctions arise in situations where different levels of abstraction need to be linked or when different representations of the same data must be interconverted. For example, adjunctions are often found in <strong>syntax and semantics</strong> mappings in compilers, where the syntax (as parsed) is related to the semantics (as evaluated) in a consistent way. Similarly, adjunctions appear in <strong>logic programming</strong>, where different representations of logical propositions (e.g., syntactic and semantic views) must be linked.</p>
<p>One common use of adjunctions in Haskell is in the construction of <strong>free monads</strong> and <strong>cofree comonads</strong>, which provide a way to represent recursive computations and state transformations in a modular and composable manner. These structures allow developers to break down complex systems into simpler components while still being able to rebuild or evaluate them using adjunction-based relationships. In compiler design, adjunctions can help map higher-level abstractions (such as syntax trees) to lower-level constructs (such as machine code), providing a formal and consistent way to reason about program translation.</p>
</section>
<section id="limits-and-colimits" class="level4">
<h4 class="anchored" data-anchor-id="limits-and-colimits">Limits and colimits</h4>
<p>Another powerful concept in category theory, frequently used in functional programming, is <strong>limits</strong> and <strong>colimits</strong>. Limits represent a way to “combine” or “unify” several objects and morphisms into a single object that captures all their shared structure. Colimits, on the other hand, generalize the idea of merging or coalescing several objects into a more general structure. These concepts are essential for understanding <strong>recursion</strong>, <strong>folds</strong>, and <strong>unions</strong> in functional programming, where we often want to aggregate data in a structured way.</p>
<p>In Haskell, <strong>folds</strong> (<code>foldr</code>, <code>foldl</code>) can be seen as examples of limits, while operations like <strong>unions</strong> of data structures (e.g., merging sets or lists) are examples of colimits. Understanding limits and colimits allows functional programmers to reason about how to break down or combine complex data types and operations in a systematic and mathematically rigorous way.</p>
</section>
<section id="functor-categories-and-higher-order-functors" class="level4">
<h4 class="anchored" data-anchor-id="functor-categories-and-higher-order-functors">Functor categories and higher-order functors</h4>
<p>As we move into more advanced topics, <strong>functor categories</strong> are another useful concept in both category theory and functional programming. A functor category is a category where the objects are functors, and the morphisms are natural transformations between those functors. This idea is central to the concept of <strong>higher-order functors</strong>—functors that operate on other functors, which frequently arise in functional programming when working with <strong>monad transformers</strong> or <strong>applicative transformers</strong>.</p>
<p>In Haskell, functor categories help organize and structure programs that involve layers of abstraction, such as monad transformer stacks. By understanding how functors compose and interact, developers can build powerful abstractions that allow for composable and scalable designs without losing control over the complexity of the code.</p>
</section>
</section>
</section>
<section id="software-engineering-challenges" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="software-engineering-challenges">Software engineering challenges</h2>
<p>In software engineering, managing complexity while maintaining reliability, maintainability, scalability, and safety is a continuous challenge. A steady stream of innovations at all levels of software development, including new programming languages, software frameworks, and management practices, aims to address these concerns. From a broader perspective of software design, methodologies like <strong>modularization</strong>, <strong>abstraction</strong>, <strong>design patterns</strong>, <strong>SOLID principles</strong>, <strong>domain-driven design (DDD)</strong>, and <strong>microservices architecture</strong> have been introduced to cope with this complexity. One of the key drivers of innovation in software architecture is the concept of <strong>formal composability</strong>, which is grounded in mathematical definitions, such as those found in category theory. Formal composability allows development teams to transcend human cognitive limitations by decomposing complex systems into simpler, mathematically defined components. This rigorous approach not only ensures consistency and correctness but also opens the door to leveraging advanced techniques like machine learning to embrace and manage the growing complexity of modern software systems. Composability enables teams to build scalable, robust systems that can adapt to evolving requirements and environments, forming the foundation of modern software architecture.</p>
<p>Lambda calculus and category theory provide a rigorous, formal foundation for achieving <strong>formal composability</strong> in software engineering. These mathematical frameworks allow developers to decompose complex systems into smaller, composable units, while maintaining a focus on <strong>purity</strong> (functions without side effects) or <strong>controlled impurity</strong> (managing side effects in a predictable and structured manner). This combination of mathematical rigor and composability is one of the most significant contributions of these theories to modern software engineering. It empowers development teams to build modular, scalable, and reliable systems that are easier to reason about, maintain, and adapt in an increasingly complex software landscape. By leveraging formal composability, developers can create systems that are not only robust but also capable of scaling with innovation, embracing the complexity of modern applications while maintaining consistency and correctness.</p>
<section id="modularization" class="level3">
<h3 class="anchored" data-anchor-id="modularization">Modularization</h3>
<p>In software design, <strong>modularization</strong> is a technique that involves breaking down a system into smaller, independent modules that can be developed, tested, and maintained separately. This approach helps manage complexity, improve code maintainability, and enhance collaboration by allowing different teams to work on different parts of the system simultaneously. Lambda calculus and category theory offer a formal foundation for modularization, providing the principles that underpin this approach.</p>
<section id="lambda-calculus-contribution" class="level4">
<h4 class="anchored" data-anchor-id="lambda-calculus-contribution">Lambda calculus contribution</h4>
<p>In lambda calculus, modularization aligns with the concept of <strong>function composition</strong>, where complex operations are constructed by combining simpler functions. Each function represents a self-contained unit of computation, which can be composed with other functions to form more elaborate operations. This mirrors the essence of modularization in software design, where individual components (modules) are designed to be reusable and composable.</p>
<p>One of the key strengths of lambda calculus in supporting modularization is its emphasis on <strong>pure functions</strong>, functions that do not rely on external state and always produce the same output for a given input. Pure functions are inherently modular because they can be tested, reasoned about, and composed without concerns about side effects or hidden dependencies. This makes them ideal building blocks for constructing larger systems, as each function/module can be developed and tested in isolation.</p>
<p>Another important aspect of lambda calculus is <strong>higher-order functions</strong>, which allow functions to be passed as arguments to other functions or returned as results. This capability supports powerful abstractions that enable developers to write more modular and reusable code. By encapsulating behaviors in higher-order functions, developers can create flexible and adaptable modules that can be easily recombined in different contexts. This approach allows for the creation of highly generic, reusable components, making it possible to abstract over patterns of computation and control flow. This level of abstraction goes beyond traditional procedural or object-oriented techniques by allowing developers to define generic algorithms that can operate over a wide variety of data types and structures, leading to more expressive and concise code that can be tailored to a broad range of use cases.</p>
</section>
<section id="category-theory-contribution" class="level4">
<h4 class="anchored" data-anchor-id="category-theory-contribution">Category theory contribution</h4>
<p>Category theory enhances the principles of modularization by providing an abstract framework for reasoning about how different parts of a system interact. Instead of focusing on the internal implementation details of individual components, category theory emphasizes the relationships between these components. In category theory, the fundamental constructs are <strong>objects</strong> and <strong>morphisms</strong> (arrows), which can be thought of as types and functions in programming. This abstraction allows us to think about systems in terms of their interfaces and interactions, promoting a modular design that is independent of specific implementations.</p>
<p>One of the central concepts in category theory that supports modularization is the <strong>functor</strong>. A functor is a structure-preserving map between categories that allows transformations of objects and morphisms while maintaining the relationships between them. In functional programming languages like Haskell, functors enable developers to apply operations to values within specific contexts, without altering the context itself. For example, Haskell provides built-in data types such as <code>Maybe</code>, <code>List</code>, and <code>Either</code>, which are functors:</p>
<ul>
<li><p><strong><code>Maybe</code></strong> represents a computation that might fail, encapsulating a value (<code>Just value</code>) or no value (<code>Nothing</code>).</p></li>
<li><p><strong><code>List</code></strong> represents a collection of values.</p></li>
<li><p><strong><code>Either</code></strong> encapsulates a value that could be of two types (e.g., <code>Left error</code> or <code>Right result</code>).</p></li>
</ul>
<p>These functor types allow operations to be performed on the encapsulated values while preserving the overall structure of the context (e.g., a <code>Maybe</code> or <code>List</code>). This is crucial for modular design because it enables developers to write functions that operate on data within various contexts, such as handling optional values, collections, or errors, without tightly coupling those functions to the specific contexts. This separation of concerns makes systems more flexible, adaptable, and easier to maintain.</p>
<p>Another important concept from category theory is the <strong>monoid</strong>. A monoid is an algebraic structure consisting of a set, a binary composition operation, and an identity element. Monoids are useful in modular systems because they allow operations to be combined consistently. For instance, in Haskell, the list concatenation operation (<code>++</code>) forms a monoid, where the empty list (<code>[]</code>) serves as the identity element. This allows developers to build up complex operations from simpler ones in a consistent and predictable way. Relying on monoidal structures ensures that even as systems grow in complexity, their behavior remains composable and modular.</p>
<p>Building on the ideas of functors and monoids, <strong>monads</strong> provide a powerful abstraction for handling side effects in a modular way. Monads are an extension of functors that add two key operations, <code>return</code> (or <code>pure</code>) and <code>&gt;&gt;=</code> (bind), which allow computations to be chained together while encapsulating side effects. This is especially important in large systems, where different modules may need to interact with the external world (e.g., managing state, performing I/O, or handling exceptions) without compromising the modular and composable nature of the system. In Haskell, monads like <code>IO</code>, <code>State</code>, and <code>Either</code> allow developers to encapsulate effects within specific contexts, ensuring that the core logic of the modules remains pure and isolated from side effects. This makes it easier to test, reason about, and compose different parts of the system.</p>
</section>
<section id="practical-impact" class="level4">
<h4 class="anchored" data-anchor-id="practical-impact">Practical impact</h4>
<p>The principles of lambda calculus and category theory offer concrete tools that developers use to achieve modularity in software design. These tools help build systems that are not only theoretically sound but also effective in real-world software development. Here’s how they contribute to modularization from a software design perspective:</p>
<ol type="1">
<li><p><strong>Scalability</strong>: Function composition enables developers to create complex functionality by combining smaller, simpler functions. By writing individual modules as pure functions that handle specific tasks, developers can compose them to build more sophisticated behavior. This compositional approach is essential for constructing scalable systems, where modular components can be combined to address larger problems without tightly coupling them. Function composition is widely used in <strong>data processing pipelines</strong> (e.g., <strong>ETL pipelines</strong>) where different stages of data transformation are composed into a single flow, as well as in <strong>UI frameworks</strong> (like <strong>React</strong>), where components are composed to build complex user interfaces.</p></li>
<li><p><strong>Testability</strong>: Pure functions are a key tool for ensuring that software modules are highly testable. Developers can isolate each module and test it independently, knowing that the function’s behavior will be predictable. This makes unit testing simpler and debugging more straightforward. Pure functions are essential in <strong>scientific computing</strong> and <strong>financial systems</strong>, where precise and predictable results are crucial. They also form the foundation for <strong>functional programming languages</strong> like Haskell and are integral to <strong>testing frameworks</strong> that rely on isolated unit tests, such as <strong>property-based testing</strong> tools like <a href="https://www.cse.chalmers.se/~rjmh/QuickCheck/"><strong>QuickCheck</strong></a>.</p></li>
<li><p><strong>Reusability</strong>: Higher-order functions allow developers to create more reusable and adaptable code by abstracting common patterns of computation into modules that can be parameterized with other functions. This approach reduces code duplication and makes it easier to maintain and extend software. Higher-order functions are used in <strong>data analysis frameworks</strong> (e.g., <strong>Pandas</strong> in Python or <strong>MapReduce</strong>), where they abstract common operations like filtering, mapping, and reducing over datasets. They are also critical in <strong>stream processing systems</strong> (like <strong>Apache Kafka Streams</strong>), where they allow complex event-handling logic to be abstracted and reused across different parts of the system.</p></li>
<li><p><strong>Managing complexity</strong>: In real-world programming, developers frequently deal with operations that involve context (such as handling optional values, collections, or errors) or side effects (such as state management, I/O, or error handling). To modularize these concerns, developers use patterns that allow functions to operate within various contexts or handle effects in a standardized way. This ensures that core logic remains reusable and composable, even in the presence of complexity. For example, in <strong>asynchronous programming</strong> (e.g., <strong>JavaScript Promises</strong> or <strong>async/await</strong> in Python and JavaScript), these techniques manage complex chains of asynchronous operations while keeping the code modular. Similarly, in <strong>database query languages</strong> (like <strong>LINQ</strong> in C#), they allow developers to compose queries in a modular fashion while managing data retrieval and transformation.</p></li>
<li><p><strong>Abstracting control flow and computation patterns</strong>: The tools provided by category theory help developers abstract control flow and computation patterns in a modular way. For example, instead of hardcoding the order and structure of operations, developers can use abstractions that allow them to define sequences of operations declaratively. This approach is particularly useful in <strong>domain-specific languages</strong> (DSLs) and <strong>workflow engines</strong>, where complex sequences of operations need to be modular and adaptable. These abstractions are also key in <strong>parallel and distributed computing</strong> environments, such as <strong>Google’s TensorFlow</strong> for machine learning or <strong>Apache Spark</strong> for large-scale data processing, where control flow must be expressed in a way that supports parallel execution and scalability.</p></li>
</ol>
</section>
</section>
<section id="abstraction" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="abstraction">Abstraction</h3>
<p><strong>Abstraction</strong> is a fundamental principle in software design that allows developers to hide the complexity of implementation details behind simple, well-defined interfaces. By abstracting away the inner workings of a module, function, or system, developers can focus on high-level design without needing to understand the low-level details of every component. Abstraction facilitates the creation of generic, reusable components that can be adapted to different contexts, making software systems more flexible and easier to maintain.</p>
<section id="levels" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="levels">Levels</h4>
<p>Abstraction in software design operates at multiple levels, and lambda calculus and category theory provide powerful tools for achieving it:</p>
<ol type="1">
<li><p><strong>Low-level abstraction</strong>: At the lowest level, abstraction can be seen in how we define and use <strong>functions</strong> and <strong>data types</strong>. In lambda calculus, the concept of <strong>function abstraction</strong> allows developers to define anonymous functions that encapsulate specific behavior, hiding the implementation details. For example, a lambda expression such as <code>λx. x + 1</code> defines a function that takes an input <code>x</code> and adds <code>1</code> to it. The user of this function doesn’t need to know how it achieves this result, they only need to know the input-output relationship. In functional programming languages like <strong>Haskell</strong>, this low-level abstraction allows developers to build complex logic by composing simple functions, without worrying about the inner workings of each function.</p></li>
<li><p><strong>Mid-level abstraction</strong>: As we move up the abstraction ladder, <strong>modules</strong> and <strong>interfaces</strong> provide a way to encapsulate functionality behind defined contracts. Category theory helps us formalize the relationships between these modules by focusing on the morphisms (functions) that define how different parts of a system interact. This level of abstraction allows developers to treat entire modules as black boxes, with well-defined inputs and outputs, while ensuring that these modules can be easily composed to create larger systems. For example, functors allow developers to apply operations to values within a context (like handling optional values or collections) without needing to modify the underlying data structure. This capability enables programmers to abstract away the details of working with specific data containers, allowing them to focus on the high-level logic of their application. Similarly, monads abstract away the complexity of dealing with side effects (e.g., state, I/O) while maintaining composability, ensuring that even impure operations can be handled in a modular and predictable way.</p></li>
<li><p><strong>High-level abstraction</strong>: At the highest level, abstraction involves defining <strong>architectural patterns</strong> or <strong>domain-specific languages (DSLs)</strong> that allow developers to work with complex systems without needing to know the implementation details of every component. Category theory provides a way to abstractly reason about entire systems, focusing on the relationships between different parts rather than the internal details of those parts. This allows developers to design systems that are <strong>extensible</strong> and <strong>scalable</strong>, aligning with principles like the <strong>open/closed principle</strong><sup>6</sup> from SOLID, which encourages creating software entities that can be extended without modifying existing code. For example, in <strong>domain-driven design (DDD)</strong>, developers abstract the complexity of a specific problem domain by defining <strong>domain models</strong> that capture the essential business logic. This abstraction allows different teams to work on various parts of the system without needing to understand the entire codebase. Category theory helps formalize the relationships between different domain models, ensuring that they can be composed and extended as the system evolves.</p></li>
</ol>
<div class="no-row-height column-margin column-container"><div id="fn6"><p><sup>6</sup>&nbsp;The <strong>open/closed principle (OCP)</strong> is one of the five principles in <strong>SOLID</strong>, a set of design principles in object-oriented programming that guide software developers in creating more maintainable and extendable code. The open/closed principle states that: <em>Software entities (such as classes, modules, functions, etc.) should be open for extension, but closed for modification.</em> This principle encourages developers to design software components in a way that allows them to be extended with new functionality without modifying existing code. The goal is to minimize the risk of introducing bugs into existing, well-tested code by enabling new behavior through extension rather than alteration. This is often achieved through techniques like inheritance, interfaces, or composition. Martin, Robert C. “Agile Software Development: Principles, Patterns, and Practices.” <em>Prentice Hall</em> (2003). ISBN: 0135974445.</p></div></div></section>
<section id="practical-impact-1" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="practical-impact-1">Practical impact</h4>
<p>In practice, lambda calculus has driven the development of functional programming languages like <strong>Haskell</strong>, <strong>Scala</strong>, and <strong>Elm</strong>, which emphasize immutability, pure functions, and composability. These languages have been adopted across a variety of industries where reliability and precision are paramount:</p>
<ul>
<li><p><strong>Finance</strong>: Functional programming is widely used in <strong>algorithmic trading</strong> and <strong>risk management</strong> systems, where correctness and safety are essential. For instance, <strong>Jane Street</strong>, a leading financial firm, employs <strong>OCaml</strong> to build trading platforms that demand high performance and reliability.</p></li>
<li><p><strong>Blockchain</strong>: Haskell’s strong focus on immutability and pure functions has made it a popular choice in the blockchain space. For example, <strong>IOHK</strong>, the company behind the <a href="https://cardano.org/"><strong>Cardano</strong></a> blockchain, uses Haskell to ensure that its code is mathematically sound and secure, a critical requirement for blockchain infrastructure.</p></li>
<li><p><strong>Aerospace</strong>: In industries like aerospace, where safety is of utmost importance, functional programming is used to model and ensure the correctness of complex systems. NASA has historically employed <strong>Lisp</strong> for mission-critical software, and Haskell is being explored for applications that require high assurance of correctness.</p></li>
<li><p><strong>Embedded systems</strong>: <a href="https://forth-standard.org/"><strong>Forth</strong></a>, a stack-based language known for its simplicity and extensibility, has been widely used in <strong>embedded systems</strong> and <strong>real-time applications</strong>. Its minimalistic design allows developers to write efficient, low-level code while maintaining control over hardware resources. Forth’s ability to define new language constructs on the fly has made it a popular choice in domains like <strong>space exploration</strong> (e.g., NASA’s <strong>Forth-based systems</strong>) and <strong>industrial control</strong>.</p></li>
</ul>
<p>Category theory has further extended the functional programming paradigm by providing abstractions that are critical in scaling complex systems. Its principles have been effectively applied in domains such as <strong>asynchronous programming</strong> and <strong>distributed systems</strong>, where managing side effects and ensuring composability are important:</p>
<ul>
<li><p><strong>Web development</strong>: <strong>Facebook</strong>’s <a href="https://reactjs.org/"><strong>React</strong></a> library employs functional programming principles and category theory concepts to manage the complexity of building scalable, responsive user interfaces. React’s component-based architecture makes it easier for developers to create maintainable and reusable UI elements. Moreover, <strong>Elm</strong>, a functional programming language designed for front-end web development, uses abstractions from lambda calculus and category theory to ensure that web applications are highly reliable and easy to maintain. Elm’s strict type system and functional architecture help reduce runtime errors, making it an ideal choice for building robust web applications.</p></li>
<li><p><strong>Data science</strong>: At <strong>X</strong>, functional programming frameworks like <a href="https://github.com/twitter/scalding"><strong>Scalding</strong></a> and <a href="https://github.com/twitter/summingbird"><strong>Summingbird</strong></a> leverage category theory to build scalable and reliable data processing pipelines. Similarly, <a href="https://spark.apache.org/"><strong>Apache Spark</strong></a>, a leading big data processing engine, uses functional principles to efficiently handle vast datasets in distributed environments.</p></li>
<li><p><strong>Reactive frameworks</strong>: <strong>Functional reactive programming (FRP)</strong>, pioneered by <strong>Conal Elliott</strong><sup>7</sup>, uses category theory as its theoretical foundation to model time-varying values and events in a functional way. The challenge with reactive systems (e.g., user interfaces, animations, simulations) is the need to react to events and changing states over time. FRP, and particularly <strong>arrowized FRP</strong><sup>8</sup>, draws heavily on category theory concepts to ensure that computations remain composable and that state and time-dependency can be handled without compromising the functional purity of the program. This is particularly important in real-time systems and UIs, where managing complex event-driven logic becomes overwhelming with traditional programming approaches. Category theory provides a way to formalize these relationships and ensure that the system remains modular and scalable. UI development has many examples of FRP application like Elm, RxJS (React library), ReactiveCocoa and RxSwift, and so on.</p></li>
</ul>
<div class="no-row-height column-margin column-container"><div id="fn7"><p><sup>7</sup>&nbsp;Elliott C., and Hudak P. “Functional Reactive Animation” <em>Proceedings of the International Conference on Functional Programming (ICFP ’97)</em>, 1997. DOI: <a href="https://doi.org/10.1145/258948.25897">10.1145/258948.25897</a>.</p></div><div id="fn8"><p><sup>8</sup>&nbsp;Nilsson H., Courtney A., and Peterson J. “Functional Reactive Programming, Continued.” In <em>Proceedings of the 2002 ACM SIGPLAN Workshop on Haskell (Haskell ’02)</em>, Association for Computing Machinery, New York, NY, USA, 51–64. (2002) <a href="https://doi.org/10.1145/581690.581695">10.1145/581690.581695</a>.</p></div></div><p>The practical impact of these mathematical frameworks is evident in how they enable developers to build systems that are not only more <strong>abstract</strong> and <strong>composable</strong> but also more <strong>resilient</strong>, <strong>maintainable</strong>, and <strong>scalable</strong>. By allowing developers to express complex workflows declaratively, reason about program behavior with mathematical precision, and manage side effects in a controlled manner, these tools have led to the creation of software systems that are easier to maintain and less prone to bugs, even as they grow in complexity.</p>
</section>
</section>
<section id="composability" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="composability">Composability</h3>
<p><strong>Composability</strong> is a fundamental principle in software engineering, driving many advancements in both programming paradigms and software architecture. While composability has long been recognized as a means of managing complexity by dividing systems into smaller, manageable units (echoing the ancient strategy of “divide et impera”), modern approaches have transformed it into something far more powerful, particularly through the use of <strong>formal composability</strong> grounded in mathematical theories like <strong>lambda calculus</strong> and <strong>category theory</strong>. This formal underpinning allows developers to break down complex systems into smaller, composable units that can be reasoned about with mathematical precision, ensuring that systems behave consistently and predictably as they scale.</p>
<p>Lambda calculus and category theory provide a rigorous framework for formal composability, which becomes especially relevant as systems grow in complexity. In traditional software engineering, composability often manifests as design patterns or modular structures, which are useful but can be vague and prescriptive. In contrast, <strong>formal composability</strong> rooted in mathematical theory provides clear, well-defined rules and guarantees. For instance, in functional programming, composability is expressed through function composition and higher-order functions. This allows developers to build complex systems by chaining simple, well-defined components. The power of this approach lies in its mathematical rigor: principles like <strong>confluence</strong> in lambda calculus and <strong>associativity</strong> in category theory ensure that composed functions and systems behave predictably, even as they scale.</p>
<p>This formal approach to composability has far-reaching implications in modern software engineering. In an era where systems are becoming increasingly complex, spanning large codebases, legacy software, and evolving technologies, composability backed by mathematical theory offers several advantages. <strong>Code quality</strong> can be significantly improved, as formal methods ensure that composed components adhere to strict correctness guarantees. Furthermore, <strong>automatic verification</strong> tools can leverage these formal foundations to prove the correctness of complex systems, reducing the need for extensive manual testing.</p>
<p>Another transformative aspect of formal composability is its potential to integrate with <strong>machine learning</strong> and <strong>automated software development</strong>. Since category theory provides a formal framework for defining and composing systems, it allows machine learning models to assist in the development and extension of software by understanding and manipulating these formal structures. This is in stark contrast to traditional software development practices, which often rely on human intuition and experience to apply vague design patterns.</p>
<section id="lambda-calculus-and-category-theory-contributions" class="level4">
<h4 class="anchored" data-anchor-id="lambda-calculus-and-category-theory-contributions">Lambda calculus and category theory contributions</h4>
<p>In lambda calculus, composability is expressed through the concept of <strong>function composition</strong>, which allows developers to combine simple functions to create more complex behaviors. The theoretical strength of lambda calculus lies in its minimalism, only three core constructs (variables, abstractions, and applications) are needed to represent any computation. This simplicity makes the composability of functions not just a practical tool but a <strong>mathematically verified property</strong> of the system. For example, the <strong>Church-Rosser theorem</strong> ensures <strong>confluence</strong>, meaning that if a lambda expression can be reduced to a <strong>normal form</strong>, a fully simplified, terminating expression, then the order of function application does not affect the final outcome. This guarantees <strong>determinism</strong> in function composition, which is crucial for building <strong>reliable and predictable software systems</strong>. In real-world computations, which are typically required to terminate, this property provides strong assurances that composed functions will behave consistently.</p>
<p>Category theory expands on the idea of composability by formalizing it in a more <strong>generalized and abstract framework</strong> that applies across various mathematical domains. One of the most powerful aspects of category theory is the concept of <strong>objects</strong> and <strong>morphisms</strong> (arrows), which are incredibly <strong>generalized constructs</strong>. <strong>Objects</strong> in category theory are not limited to specific data types or structures, they can represent virtually anything, such as sets, types, states, or even entire systems.</p>
<p>This universality allows category theory to model and reason about the relationships between different components of a system, irrespective of their internal structure. By abstracting over the specific details of what an object is, category theory focuses on how objects interact via <strong>morphisms</strong>. This focus on interaction is important because it shifts the attention from the internal complexity of individual components to the relationships and transformations between them. This shift enables more modular and scalable system designs, where the emphasis is on how components work together as a whole, rather than how they function in isolation. By defining interactions formally, category theory allows systems to be composed in a consistent and predictable manner, making it easier to manage complexity and ensure reliability in large-scale or distributed systems. This approach is particularly useful in functional programming, database theory, and even in reasoning about concurrent and asynchronous systems, where the interaction patterns between components are often more critical than the individual operations themselves.</p>
</section>
<section id="practical-impact-2" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="practical-impact-2">Practical impact</h4>
<p>These formal properties of lambda calculus and category theory have profound implications for <strong>formal verification</strong>, <strong>correctness proofs</strong>, and <strong>systematic reasoning</strong> in software engineering:</p>
<ul>
<li><p><strong>Formal verification</strong>: Leveraging the compositionality provided by lambda calculus and category theory, formal verification tools allow developers to rigorously prove properties about their software systems. For instance, in the <strong>Coq</strong> proof assistant, developers can construct and verify mathematical proofs about the behavior of programs. These proofs often rely on compositional reasoning, where smaller, verified components are composed to form larger systems. By guaranteeing that the properties of individual components are preserved through composition, formal verification ensures that the entire system behaves correctly.</p></li>
<li><p><strong>Correctness proofs</strong>: In proof assistants like <strong>Lean</strong> and <strong>Isabelle</strong>, correctness proofs often involve reasoning about the compositional structure of programs. These tools allow developers to define high-level properties and prove that they hold across all possible compositions of the program’s components. The underlying principles of category theory, such as <strong>monoids</strong> and <strong>functors</strong>, are frequently employed to formalize how components interact and to ensure that their composition adheres to specific laws, such as associativity and identity.</p></li>
<li><p><strong>Systematic reasoning</strong>: Category theory also provides tools for reasoning about transformations between different levels of abstraction. For example, <strong>natural transformations</strong> allow developers to map between functors, ensuring that high-level transformations preserve the compositional structure of the system. This is particularly important in <strong>software architecture</strong>, where changes to one part of the system must not violate the integrity of the overall structure. By reasoning systematically about these transformations, developers can ensure that architectural modifications or component substitutions do not introduce errors.</p></li>
</ul>
<p>The practical application of these formal methods can be seen in domains where correctness and reliability are critical. In <strong>safety-critical systems</strong>, such as those governed by standards like <strong>DO-178C</strong> in aerospace and <strong>ISO 26262</strong> in automotive, formal verification is used to ensure that software behaves correctly even in the presence of complex compositions of components. For instance, the <a href="https://compcert.org/"><strong>CompCert</strong></a> C compiler, developed using <strong>Coq</strong>, is formally verified to ensure that the compiled code behaves exactly as specified, with no unexpected side effects from the composition of compilation phases.</p>
<p>Similarly, in <strong>cryptographic protocols</strong> and <strong>blockchain systems</strong>, formal methods ensure that composed cryptographic primitives retain their security properties when combined in larger systems<sup>9</sup>. The composability of these components, verified through formal proofs, guarantees that the overall system remains secure even as new features and protocols are integrated.</p>
<div class="no-row-height column-margin column-container"><div id="fn9"><p><sup>9</sup>&nbsp;See: Backes, M., Pfitzmann, B., and Waidner, M. “Compositional Security for Protocols.” <em>19th IEEE Computer Security Foundations Workshop</em> (2006). DOI: <a href="https://doi.org/10.1109/CSFW.2006.17">10.1109/CSFW.2006.17</a>; Hirai, Y., et al.&nbsp;“A Survey of Formal Methods for Blockchain Smart Contracts.” <em>arXiv preprint arXiv:1908.04868</em> (2019). <a href="https://arxiv.org/abs/1908.04868">arXiv</a></p></div></div></section>
</section>
<section id="future-directions" class="level3">
<h3 class="anchored" data-anchor-id="future-directions">Future directions</h3>
<p>The landscape of software engineering is rapidly evolving, with growing system complexity and ever-increasing demands for reliability, maintainability, and scalability. In this environment, <strong>formal composability</strong> is emerging as a critical tool for tackling these challenges. Traditional composability has always been central to software development, but as systems scale and intertwine with advanced technologies like machine learning, cloud computing, and distributed systems, a more rigorous, mathematically grounded approach becomes essential.</p>
<p>Formal composability, driven by lambda calculus and category theory, is particularly suited to addressing the issues that arise in <strong>large-scale and distributed systems</strong>, <strong>legacy codebases</strong>, and <strong>multidisciplinary projects</strong>. As these systems grow, the need for <strong>mathematical guarantees</strong> around correctness, performance, and security becomes paramount. By leveraging formal composability, software engineers can design systems that are easier to extend, verify, and maintain, reducing the risks associated with manual interventions and human errors.</p>
<p>Moreover, <strong>future software development practices</strong> are likely to be increasingly influenced by <strong>automated reasoning tools</strong> and <strong>machine learning assistants</strong>. These tools thrive in environments where the underlying logic is based on formal structures rather than ambiguous or prescriptive design patterns. Formal composability ensures that even complex systems can be extended and adapted by machines, allowing for automatic code generation, verification, and optimization based on mathematically sound principles. This paves the way for more <strong>autonomous software development processes</strong>, where machines assist developers in navigating the complexities of modern systems, ensuring that the resulting code is not only functional but also robust and scalable.</p>
<p>In essence, formal composability is transforming the future of software engineering, enabling the industry to cope with the growing complexity of systems while leveraging advanced tools to enhance productivity and maintain high standards of quality.</p>
</section>
</section>
<section id="haskell" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="haskell">Haskell</h2>
<p>After exploring the theoretical foundations of lambda calculus and category theory, it’s time to see how these concepts are practically applied in a programming language that embodies them: <a href="https://www.haskell.org/"><strong>Haskell</strong></a><sup>10</sup>. Haskell’s design is deeply influenced by these mathematical principles, making it an ideal language for demonstrating how functional programming can be both elegant and powerful. In this section, we’ll guide you through the basics of Haskell, showing how the theory we’ve discussed comes to life in code. Whether you’re new to functional programming or looking to strengthen your understanding, these examples will help you get started with Haskell, step by step.</p>
<div class="no-row-height column-margin column-container"><div id="fn10"><p><sup>10</sup>&nbsp;Haskell was born out of the need for a standardized, open-source functional programming language that could serve as a platform for both academic research and industrial applications. In the late 1980s, a committee of prominent computer scientists, including <strong>Simon Peyton Jones</strong>, <strong>Philip Wadler</strong>, and <strong>John Hughes</strong>, began working on the language. Their goal was to unify the numerous functional programming languages that were emerging at the time, each with its own features but no single standard. This led to the publication of the first version of the Haskell language specification in 1990. Named after <strong>Haskell Curry</strong>, an American mathematician and logician whose work on combinatory logic contributed to the development of functional programming, Haskell has since evolved through several versions. The language has become renowned for its strong emphasis on immutability, lazy evaluation, and type safety, underpinned by concepts from category theory and lambda calculus. Today, Haskell is maintained and developed by the <strong>Haskell Community</strong> in an open-source model. While <strong>GHC (Glasgow Haskell Compiler)</strong> is the most widely used implementation, developed and maintained by a team led by <strong>Simon Peyton Jones</strong> and <strong>SPJ’s team at Microsoft Research</strong>, contributions come from many individuals across both academia and industry. The <strong>Haskell Foundation</strong>, formed in 2020, plays a key role in organizing the community, maintaining the infrastructure, and promoting the adoption of Haskell in the industry.</p></div></div><section id="lambda-calculus" class="level3">
<h3 class="anchored" data-anchor-id="lambda-calculus">Lambda calculus</h3>
<p>Lambda calculus is at the heart of Haskell, and lambda expressions are a common way to define anonymous functions. For example, the following Haskell code defines and applies a simple lambda expression:</p>
<div class="sourceCode" id="annotated-cell-6" style="background: #f1f3f5;"><pre class="sourceCode numberSource haskell code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode haskell"><a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-6-1" class="code-annotation-target">increment <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> \x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="annotated-cell-6-2"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-6-3" class="code-annotation-target">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> increment <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-6" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="1" data-code-annotation="1">This defines a lambda function <code>\x -&gt; x + 1</code>, which takes an argument <code>x</code> and adds <code>1</code> to it.</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="3" data-code-annotation="2">The function <code>increment</code> is applied to the value <code>5</code>, resulting in <code>6</code>.</span>
</dd>
</dl>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["5"] --&gt;|"\x -&gt; x + 1"| B["6"]
  B --&gt;|"result"| C["6"]
</pre>
</div>
<p></p><figcaption> The diagram illustrates the application of the lambda function <code>increment</code> to the input value <code>5</code>, resulting in <code>6</code> </figcaption> </figure><p></p>
</div>
</div>
</div>
<p>In this simple example, we see the essence of lambda calculus: functions as first-class entities that can be defined and applied without requiring explicit naming. Lambda functions in Haskell correspond to the abstraction and application concepts in lambda calculus.</p>
</section>
<section id="function-composition" class="level3">
<h3 class="anchored" data-anchor-id="function-composition">Function composition</h3>
<p>Function composition is a core principle in both lambda calculus and category theory. In Haskell, the composition operator <code>(.)</code> allows us to chain functions together, creating more complex behavior from simpler components:</p>
<div class="sourceCode" id="annotated-cell-7" style="background: #f1f3f5;"><pre class="sourceCode numberSource haskell code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode haskell"><a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-7-1" class="code-annotation-target">addOne <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> \x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-7-2" class="code-annotation-target">multiplyByTwo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> \x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="annotated-cell-7-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-7-4" class="code-annotation-target">composedFunction <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> addOne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> multiplyByTwo</span>
<span id="annotated-cell-7-5"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-7-6" class="code-annotation-target">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> composedFunction <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-7" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="1" data-code-annotation="1">The <code>addOne</code> function adds <code>1</code> to its input.</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="2" data-code-annotation="2">The <code>multiplyByTwo</code> function multiplies its input by <code>2</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="4" data-code-annotation="3">The <code>composedFunction</code> is the result of composing <code>addOne</code> and <code>multiplyByTwo</code>. The composition works right-to-left, so <code>multiplyByTwo</code> is applied first, followed by <code>addOne</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="6" data-code-annotation="4">Applying <code>composedFunction</code> to <code>3</code> gives the result <code>7</code>.</span>
</dd>
</dl>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["3"] --&gt;|"multiplyByTwo"| B["6"]
  B --&gt;|"addOne"| C["7"]
  C --&gt;|"result"| D["7"]
</pre>
</div>
<p></p><figcaption> This diagram illustrates the composition of two functions: <code>multiplyByTwo</code> followed by <code>addOne</code>, applied to the value <code>3</code> </figcaption> </figure><p></p>
</div>
</div>
</div>
<p>This demonstrates how lambda calculus expresses function composition, a fundamental concept in category theory. In categorical terms, functions are <strong>morphisms</strong> (arrows) between <strong>objects</strong> (data types), and composition allows us to chain these morphisms together.</p>
</section>
<section id="categories" class="level3">
<h3 class="anchored" data-anchor-id="categories">Categories</h3>
<p>In category theory, a <strong>category</strong> consists of <strong>objects</strong> and <strong>morphisms</strong> (arrows) between these objects, with two essential properties: <strong>composition</strong> (associative) and the existence of an <strong>identity morphism</strong> for each object. In Haskell, types can be seen as objects, and functions as morphisms. Let’s explore this idea further:</p>
<div class="sourceCode" id="annotated-cell-8" style="background: #f1f3f5;"><pre class="sourceCode numberSource haskell code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode haskell"><a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-8-1" class="code-annotation-target"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">identity ::</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-8-2" class="code-annotation-target">identity x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="annotated-cell-8-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-8-4" class="code-annotation-target">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> identity <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-8" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="1" data-code-annotation="1">The <code>identity</code> function has the type <code>a -&gt; a</code>, which means it takes a value of any type <code>a</code> and returns a value of the same type.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="2" data-code-annotation="2">The function body simply returns its input unchanged.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="4" data-code-annotation="3">Applying <code>identity</code> to the value <code>10</code> returns <code>10</code>, demonstrating that <code>identity</code> acts as a neutral element for composition.</span>
</dd>
</dl>
<p>In the context of category theory, this <code>identity</code> function represents the identity morphism for any object (type) in the category. The concept of an identity morphism guarantees that for any object, there is an arrow that maps it to itself.</p>
<p>The following diagram shows a concrete example of the identity function in Haskell corresponding to given code:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["10"] --&gt;|"identity"| B["10"]
  B --&gt;|"result"| C["10"]
</pre>
</div>
<p></p><figcaption> This diagram illustrates the identity function, where the input is passed through unchanged</figcaption> </figure><p></p>
</div>
</div>
</div>
</section>
<section id="functors-1" class="level3">
<h3 class="anchored" data-anchor-id="functors-1">Functors</h3>
<p>Functors are an important concept in category theory, and Haskell provides built-in support for them. A functor is a mapping between categories that preserves the structure of objects and morphisms. In Haskell, a <code>Functor</code> is a type class that allows you to apply a function to values inside a context (e.g., a <code>Maybe</code> or a list) without changing the context itself:</p>
<div class="sourceCode" id="annotated-cell-9" style="background: #f1f3f5;"><pre class="sourceCode numberSource haskell code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode haskell"><a class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-9-1" class="code-annotation-target"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">instance</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Functor</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Maybe</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-9-2" class="code-annotation-target">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> _ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Nothing</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Nothing</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-9-3" class="code-annotation-target">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> f (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Just</span> x) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Just</span> (f x)</span>
<span id="annotated-cell-9-4"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-9-5" class="code-annotation-target">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Just</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-9" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="1" data-code-annotation="1">Define a Functor instance for the <code>Maybe</code> type.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="2" data-code-annotation="2">If the value is <code>Nothing</code>, <code>fmap</code> does nothing and returns <code>Nothing</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="3" data-code-annotation="3">If the value is <code>Just x</code>, <code>fmap</code> applies the function <code>f</code> to <code>x</code> and returns the result inside a <code>Just</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="5" data-code-annotation="4">Applying <code>fmap (+1)</code> to <code>Just 5</code> results in <code>Just 6</code>.</span>
</dd>
</dl>
<p>This example demonstrates the functorial behavior of the <code>Maybe</code> type, where functions can be lifted into the context of <code>Maybe</code> without altering the underlying structure. In categorical terms, <code>fmap</code> preserves the structure of the <code>Maybe</code> functor.</p>
<p>Code can be represented as follows:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["Maybe A"] --&gt;|"fmap f"| B["Maybe B"]
  M["Just x"] --&gt;|"fmap (+1)"| N["Just (x + 1)"]
  E["Nothing"] --&gt;|"fmap f"| E["Nothing"]
</pre>
</div>
<p></p><figcaption> A commutative diagram showing how the functor <code>fmap</code> maps the <code>Maybe</code> structure, preserving the context while applying a function to the value</figcaption> </figure><p></p>
</div>
</div>
</div>
</section>
<section id="other-notable-haskell-concepts" class="level3">
<h3 class="anchored" data-anchor-id="other-notable-haskell-concepts">Other notable Haskell concepts</h3>
<p>Beyond basic lambda calculus and category theory concepts, Haskell introduces several advanced features that are rooted in these mathematical foundations. These concepts are implemented through specific Haskell libraries and programming structures that make these abstract ideas concrete and usable in real-world applications.</p>
<p>One such concept is <strong>Monads</strong>, which extend the idea of functors by providing a formal framework for chaining computations that include side effects. In Haskell, monads are central to managing effects such as IO, state, and exceptions in a pure functional context. The <strong><code>Monad</code> type class</strong> is provided in the <code>base</code> library, and instances like <strong><code>Maybe</code></strong>, <strong><code>IO</code></strong>, and <strong><code>Either</code></strong> are common monads that allow for composition of effectful computations. Libraries such as <strong><code>mtl</code></strong> and <strong><code>transformers</code></strong> provide monad transformers, which allow you to stack and combine multiple monadic effects.</p>
<p><strong>Applicative Functors</strong>, a concept that extends functors and lies between functors and monads, are implemented via the <strong><code>Applicative</code> type class</strong> in the <code>base</code> library. Applicative functors are useful for computations where effects are independent and can be applied in parallel. The popular <strong><code>Control.Applicative</code></strong> module contains utilities like <strong><code>&lt;*&gt;</code></strong> that allow for combining effects in an applicative context. Libraries like <strong><code>optparse-applicative</code></strong> use this concept to create complex command-line interfaces in a compositional way.</p>
<p>Haskell also introduces <strong>Arrows</strong>, a generalization of both monads and applicative functors, useful for describing computations with complex input-output relationships. The <strong><code>Arrow</code> type class</strong> in the <code>base</code> library provides an abstraction for computations that are not easily expressible using monads alone. Libraries like <strong><code>Control.Arrow</code></strong> provide combinators for working with arrows, and arrow-based programming is prominent in areas like <strong>functional reactive programming (FRP)</strong>. The <strong><code>Yampa</code></strong> library, for instance, leverages arrows to manage time-varying values, making it useful for games, simulations, and reactive systems.</p>
<p>Another advanced concept is <strong>Lenses</strong>, which provide a composable way to manage and transform immutable data structures. The <strong><code>lens</code></strong> library is the most prominent implementation of this idea in Haskell, providing a powerful abstraction for accessing and modifying nested data structures. Lenses make it easy to work with deeply nested records, a common scenario in real-world applications. Lenses combine functional programming principles with category theory concepts like <strong>functors</strong> and <strong>monoids</strong>, allowing developers to create complex transformations in a modular and reusable way.</p>
<p>Lastly, <strong>Type Classes</strong> in Haskell provide a way to define generic interfaces that can be implemented by multiple types. This concept is closely related to the idea of <strong>categorical products</strong> and <strong>exponentials</strong>, as it allows for polymorphic functions that can operate on various data types in a compositional manner. Libraries like <strong><code>base</code></strong> provide common type classes like <strong><code>Functor</code></strong>, <strong><code>Monad</code></strong>, and <strong><code>Foldable</code></strong>, which are essential for leveraging category theory principles in practical programming.</p>
<p>These advanced concepts, grounded in category theory and lambda calculus, are implemented through a rich ecosystem of Haskell libraries and programming structures. They provide developers with powerful tools for building modular, scalable, and maintainable systems while ensuring correctness and composability at every level.</p>
</section>
</section>
<section id="some-references-for-a-self-study-path" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="some-references-for-a-self-study-path">Some references for a self-study path</h2>
<p>For a solid self-study path into Haskell, category theory, and their applications in secure coding, asynchronous systems, distributed systems, and blockchain, start with resources tailored to functional programming and category theory.</p>
<p><strong>Learn You a Haskell for Great Good!</strong> by Miran Lipovača<sup>11</sup> is a beginner-friendly guide that introduces Haskell with engaging examples, making it an excellent starting point for understanding functional programming. Following that, <strong>“Haskell Programming from First Principles”</strong><sup>12</sup> by Christopher Allen and Julie Moronuki offers a more thorough exploration of Haskell, covering the language’s foundational concepts in depth. As you progress, <strong>Real World Haskell</strong><sup>13</sup> by Bryan O’Sullivan, Don Stewart, and John Goerzen will help bridge the gap between academic knowledge and practical application, particularly in real-world software development scenarios.</p>
<div class="no-row-height column-margin column-container"><div id="fn11"><p><sup>11</sup>&nbsp;Lipovača M. “Learn You a Haskell for Great Good!” <em>No Starch Press</em> (2011). ISBN: 9781593272838.</p></div><div id="fn12"><p><sup>12</sup>&nbsp;Allen C., and Moronuki J. “Haskell Programming from First Principles” <em>Self-published</em> (2016). ISBN: 9780692636946.</p></div><div id="fn13"><p><sup>13</sup>&nbsp;O’Sullivan B., Don Stewart, and Goerzen J. “Real World Haskell” <em>O’Reilly Media</em> (2008). ISBN: 9780596514983.</p></div><div id="fn14"><p><sup>14</sup>&nbsp;Milewski B. “Category Theory for Programmers” <em>Leanpub</em> (2019). ISBN: 9781727640791. See also the <a href="https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/">online</a> version.</p></div><div id="fn15"><p><sup>15</sup>&nbsp;Mac Lane S. “Categories for the Working Mathematician” <em>Springer</em> (1998). ISBN: 9780387984032.</p></div></div><p>To dive into category theory, particularly as it applies to functional programming, <strong>Category Theory for Programmers</strong><sup>14</sup> by Bartosz Milewski is an essential resource. This book demystifies category theory for developers, providing clear explanations with code examples in Haskell. Milewski’s blog series on category theory further supplements this learning with a more informal, hands-on approach. For those interested in understanding category theory at a deeper level, <strong>Categories for the Working Mathematician</strong><sup>15</sup> by Saunders Mac Lane offers a more rigorous mathematical foundation, although it is more abstract and theoretical.</p>
<p>As you build your understanding of Haskell and category theory, you can explore specialized applications in areas like secure coding and blockchain. For secure coding, <strong>Functional Programming in Scala</strong><sup>16</sup> by Paul Chiusano and Runar Bjarnason applies functional programming principles in a way that emphasizes safety and correctness, concepts essential to secure systems. In blockchain, Haskell’s strong typing system and mathematical precision have made it a popular choice, and you can explore <strong>IOHK’s</strong><sup>17</sup> resources on using Haskell for blockchain development, particularly within the Cardano ecosystem. For asynchronous and distributed systems, <strong>Distributed Systems with Node.js: Building Enterprise-Ready Backend Services</strong><sup>18</sup> by Thomas Hunter II explores functional programming patterns in distributed systems, offering a path to scaling your knowledge of Haskell and functional paradigms to complex, real-world systems.</p>
<div class="no-row-height column-margin column-container"><div id="fn16"><p><sup>16</sup>&nbsp;Chiusano P., Bjarnason R. “Functional Programming in Scala” <em>Manning Publications</em> (2014). ISBN: 9781617290657.</p></div><div id="fn17"><p><sup>17</sup>&nbsp;IOHK, the company behind Cardano, uses Haskell for its blockchain development. You can explore their <a href="https://plutus.iohk.io/">Plutus platform</a> for smart contract development using Haskell.</p></div><div id="fn18"><p><sup>18</sup>&nbsp;Hunter II T. “Distributed Systems with Node.js: Building Enterprise-Ready Backend Services.” <em>O’Reilly Media</em> (2020). ISBN: 9781492077299.</p></div><div id="fn19"><p><sup>19</sup>&nbsp;Fong B., and Spivak D.I. “An Invitation to Applied Category Theory: Seven Sketches in Compositionality” <em>Cambridge University Press</em> (2019). DOI: <a href="https://doi.org/10.1017/9781108668804">10.1017/9781108668804</a>. <a href="https://arxiv.org/abs/1803.05316">arXiv</a>.</p></div></div><p>To deepen your understanding of how composability, a core concept in both category theory and software engineering, can be leveraged in real-world applications, <strong>An Invitation to Applied Category Theory: Seven Sketches in Compositionality</strong><sup>19</sup> by Brendan Fong and David Spivak offers an excellent guide. This book emphasizes how category theory, and more specifically compositionality, can be applied across various domains, including software engineering. It provides detailed case studies and examples that demonstrate how formal composability enables us to tackle complex systems with modular, scalable solutions.</p>
<p>Fong and Spivak also taught a <a href="https://ocw.mit.edu/courses/18-s097-applied-category-theory-january-iap-2019/">course</a> at MIT based on this book, where they introduced students to applied category theory with practical applications in mind. The <a href="https://www.youtube.com/playlist?list=PLhgq-BqyZ7i5lOqOqqRiS0U5SwTmPpHQ5">videos</a> from this course are available online, providing a valuable resource for those looking to explore these concepts in greater depth through structured lectures and problem-solving sessions. This combination of book and course materials makes an ideal starting point for developers interested in applying category theory to real-world software engineering challenges, enabling them to design more reliable, maintainable, and scalable systems.</p>
</section>
<section id="other-references" class="level2">
<h2 class="anchored" data-anchor-id="other-references">Other references</h2>
<p>Bradley TD., Terilla J., and Vlassopoulos Y. “An Enriched Category Theory of Language: From Syntax to Semantics” <em>La Matematica 1</em>, 551–580 (2022). DOI: <a href="https://doi.org/10.1007/s44007-022-00021-2">10.1007/s44007-022-00021-2</a>. <a href="https://arxiv.org/abs/2106.07890">arXiv</a>.</p>
<p>Lesani M., Sun C., and Palsberg J. “Safe and efficient hybrid memory management for safe languages” <em>ACM SIGPLAN Notices</em> 49, no. 1 (2014): 55-66. DOI: <a href="https://doi.org/10.1145/2544173.2535872">10.1145/2544173.2535872</a>.</p>
<p>McBride C., and Paterson R. “Applicative programming with effects” <em>Journal of Functional Programming</em> 18, no. 1 (2008): 1-13. DOI: <a href="https://doi.org/10.1017/S0956796807006326">10.1017/S0956796807006326</a>.</p>
<p>Claessen K., and Hughes J. “QuickCheck: a lightweight tool for random testing of Haskell programs” <em>ACM SIGPLAN Notices</em> 35, no. 9 (2000): 268-279. DOI: <a href="https://doi.org/10.1145/357766.351266">10.1145/357766.351266</a>.</p>
<p>Stewart D., and Bergmark A. “Building Reliable Systems with Functional Programming in Haskell” <em>Communications of the ACM</em> 62, no. 11 (2019): 66-75. DOI: <a href="https://doi.org/10.1145/3363825">10.1145/3363825</a>.</p>


</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>haskell</category>
  <category>mathematics</category>
  <category>programming languages</category>
  <category>theory</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/category-theory-functional-programming/</guid>
  <pubDate>Fri, 09 Aug 2024 22:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/category-theory-functional-programming/monad_diagram.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>GPT-4 Anniversary</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/gpt-4-anniversary/</link>
  <description><![CDATA[ 





<section id="it-feels-like-a-lifetime-but-its-only-been-a-year" class="level2">
<h2 class="anchored" data-anchor-id="it-feels-like-a-lifetime-but-its-only-been-a-year">It feels like a lifetime, but it’s only been a year!</h2>
<p>March 2023 marked a turning point in the field of artificial intelligence with the release of <a href="https://openai.com/research/gpt-4">OpenAI’s GPT-4</a>. This powerful language model, boasting significant advancements over its predecessors, sent shockwaves through various industries and ignited discussions about the future of human-machine interaction. One year later, it’s clear that GPT-4’s impact has been wide-ranging and continues to evolve.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/gpt-4-anniversary/sama tweet.png" class="img-fluid figure-img" alt="Sam Altman tweet"></p>
<figcaption>Sam Altman tweet</figcaption>
</figure>
</div>
<p>One of the most notable effects has been the acceleration of AI acceptance. GPT-4’s ability to perform exceptionally on standardized tests, generate human-quality writing, and integrate seamlessly with multimodal data like images and sound, has fostered a sense of legitimacy for large language models. This has emboldened researchers and businesses to explore AI applications with greater confidence.</p>
<p>In the course of evaluating the competencies of GPT-4, OpenAI subjected the model to a series of standardized academic and professional examinations, including the Uniform Bar Exam, the Law School Admission Test (LSAT), the Graduate Record Examination (GRE) Quantitative section, and assorted Advanced Placement (AP) subject tests. GPT-4 demonstrated proficiency across numerous assessments, achieving scores comparable to those of human test-takers. This implies that, were GPT-4 to be evaluated purely on its capacity to perform on these tests, it would possess the qualifications to gain admission into law schools and a broad range of universities.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/gpt-4-anniversary/gpt-4 exams.png" class="img-fluid figure-img" alt="GPT-4 exams results from the March 2023 announcement"></p>
<figcaption>GPT-4 exams results from the March 2023 announcement</figcaption>
</figure>
</div>
<p>Prior LLMs often struggled with tasks requiring an understanding of context spread across long stretches of text. With a context windows from 8k to 32k tokens, GPT-4 was able to analyze a much larger chunk of text, allowing it to grasp complex relationships between ideas and follow long-range dependencies.</p>
<p>On September 25th, 2023, OpenAI <a href="https://openai.com/research/gpt-4v-system-card">announced</a> the rollout of two new features that extend how people can interact with its recent and most advanced model, GPT-4: the ability to ask questions about images and to use speech as an input to a query. Then, on November 6th, 2023, OpenAI announced API access to GPT-4 with Vision. This functionality marked GPT-4’s move into being a multimodal model. This means that the model can accept multiple “modalities” of input – text and images – and return results based on those inputs.</p>
<p>After a year, GPT-4 remains one of the most advanced LLMs, even though the competition is fierce and with formidable opponents. If the rumors are confirmed, in the coming months we will have an even more powerful version that will continue to amaze us, just like the previous ones.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/gpt-4-anniversary/murati-1y.png" class="img-fluid figure-img" alt="Mira Murati one-year anniversary celebration tweet"></p>
<figcaption>Mira Murati one-year anniversary celebration tweet</figcaption>
</figure>
</div>
</section>
<section id="outstanding-achievements" class="level2">
<h2 class="anchored" data-anchor-id="outstanding-achievements">Outstanding achievements</h2>
<section id="the-turing-test" class="level3">
<h3 class="anchored" data-anchor-id="the-turing-test">The Turing Test</h3>
<section id="what-is-about" class="level4">
<h4 class="anchored" data-anchor-id="what-is-about">What is about</h4>
<p>The Turing Test, introduced by British mathematician and computer scientist Alan Turing in 1950, is a benchmark for evaluating a machine’s ability to exhibit intelligent behavior indistinguishable from that of a human. In his seminal paper, “Computing Machinery and Intelligence,” Turing proposed the question, “Can machines think?” and introduced the concept of the “imitation game” as a criterion for machine intelligence. The test involves a human judge engaging in natural language conversations with both a machine and a human without seeing them. If the judge cannot reliably tell the machine from the human, the machine is said to have passed the Turing Test. This test has become a fundamental concept in the philosophy of artificial intelligence, sparking debates about the nature of intelligence and the potential of machines to emulate human-like consciousness and reasoning.</p>
<p>The Turing Test’s significance lies in its simplicity and profound implications. It provides a straightforward criterion for intelligence that does not rely on the machine’s ability to replicate the human brain’s workings but rather on the outcome of its interactions. Passing the Turing Test is considered a milestone for AI, suggesting that the machine can replicate human-like responses under certain conditions, thereby challenging the distinctions between human and machine intelligence.</p>
</section>
<section id="ocean-big-5" class="level4">
<h4 class="anchored" data-anchor-id="ocean-big-5">OCEAN Big-5</h4>
<p>Expanding on the OCEAN Big-5, also known as the Big Five personality traits, it’s a model based on common language descriptors of personality. These traits represent broad dimensions of human personality and include:</p>
<ol type="1">
<li><p><strong>Openness to experience</strong>: Characterized by imagination, creativity, and a willingness to try new things. High openness indicates a person who enjoys novelty, variety, and intellectual pursuits. Lower openness may suggest a more conventional and practical orientation.</p></li>
<li><p><strong>Conscientiousness</strong>: Involves self-discipline, orderliness, and a drive for achievement. Highly conscientious individuals are organized and responsible, often with a strong work ethic. Lower scores may indicate a more relaxed or spontaneous approach to life.</p></li>
<li><p><strong>Extraversion</strong>: Denotes sociability, excitement-seeking, and positive emotions. Extroverts are typically energetic and enjoy being around other people, while introverts (lower extraversion) may prefer solitude and more subdued environments.</p></li>
<li><p><strong>Agreeableness</strong>: Reflects a person’s altruistic, cooperative, and compassionate nature. High agreeableness is associated with trust and helpfulness, whereas lower agreeableness may manifest as skepticism or competitive behavior.</p></li>
<li><p><strong>Neuroticism</strong>: Pertains to emotional stability and the tendency to experience negative emotions. Higher neuroticism scores indicate a greater likelihood of feeling anxious, depressed, or angry, while lower scores suggest a calmer and more resilient disposition.</p></li>
</ol>
<p>These traits provide a framework for understanding human personality and predicting a wide range of behaviors, from academic and occupational success to relationships and well-being. In the context of AI, applying the OCEAN Big-5 to evaluate chatbots like ChatGPT allows researchers to assess how closely these systems mimic human personality traits, contributing to the ongoing exploration of machine “personality” and its implications for human-AI interaction.</p>
</section>
<section id="the-research-from-jackson-et-al." class="level4">
<h4 class="anchored" data-anchor-id="the-research-from-jackson-et-al.">The Research from Jackson et al.</h4>
<p>A research consortium led by Matthew Jackson, who holds the William D. Eberle Professorship of Economics within Stanford University’s School of Humanities and Sciences, conducted an empirical analysis of the behavioral and personality attributes of the AI-driven entities within ChatGPT, employing methodologies derived from psychology and behavioral economics. Their findings, documented in the paper <a href="https://www.pnas.org/doi/10.1073/pnas.2313925121">A Turing test of whether AI chatbots are behaviorally similar to humans</a> published in the Proceedings of the National Academy of Sciences, demonstrated that ChatGPT 4, exhibited indistinguishability from human participants in behavioral assessments. Notably, when the AI opted for atypical human behavioral patterns, it manifested increased levels of cooperativeness and altruism.</p>
<p>This investigative endeavor subjected versions 3 and 4 of ChatGPT to a prevalent personality assessment alongside a series of behavioral experiments designed to forecast socio-economic and ethical decision-making tendencies. These experiments encompassed standardized scenarios that required participants to make choices on dilemmas such as betraying a complicit criminal or allocating monetary resources under various incentive structures. The AI responses were benchmarked against a dataset comprising over 100,000 human participants spanning 50 nations.</p>
<p>Within the OCEAN Big-5, ChatGPT version 4 aligned with the normal human range for these traits but ranked in the lower third percentile in terms of agreeableness compared to the human sample. Despite passing the Turing Test, this level of agreeableness suggests limited social appeal.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/gpt-4-anniversary/pnas.2313925121fig01.jpg" class="img-fluid figure-img" width="600"></p>
<figcaption>“Big Five” personality profiles of ChatGPT-4 and ChatGPT-3 compared with the distributions of human subjects. The blue, orange, and green lines correspond to the median scores of humans, ChatGPT-4, and ChatGPT-3 respectively; the shaded areas represent the middle 95% of the scores, across each of the dimensions. ChatGPT’s personality profiles are within the range of the human distribution, even though ChatGPT-3 scored noticeably lower in Openness.</figcaption>
</figure>
</div>
<p>Comparative analysis between versions 3 and 4 revealed significant advancements in the latter’s performance, with version 3 displaying agreeableness and openness to experience at the lower end of the human spectrum, indicative of a lesser capacity for novel ideas and experiences.</p>
<p>The methodology for assessing AI behavior in the experimental games involved calculating the frequency of specific actions (e.g., equitable distribution of funds) among both human participants and the AI. Subsequently, the researchers compared a randomly selected human action to one from the AI sessions to ascertain the likelihood of human origin. In the majority of these exercises, actions taken by version 4 were more consistently aligned with human behavior than those of version 3, which did not meet the Turing Test criteria.</p>
</section>
</section>
<section id="impact-on-work" class="level3">
<h3 class="anchored" data-anchor-id="impact-on-work">Impact on Work</h3>
<p>The study <a href="https://www.hbs.edu/ris/Publication%20Files/24-013_d9b45b68-9e74-42d6-a1c6-c72fb70c7282.pdf">Navigating the Jagged Technological Frontier: Field Experimental Evidence of the Effects of AI on Knowledge Worker Productivity and Quality</a> by Dell’Acqua et al.&nbsp;explores the impact of artificial intelligence (AI), specifically Large Language Models (LLMs) like GPT-4, on the productivity and quality of work among knowledge workers at Boston Consulting Group (BCG). This comprehensive experiment involved 758 consultants and aimed to understand how AI affects complex, knowledge-intensive tasks.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/gpt-4-anniversary/Distribution-output-quality.png" class="img-fluid figure-img" alt="Distribution of output quality across all the tasks" width="900"></p>
<figcaption>Distribution of output quality across all the tasks. The blue group did not use AI, the green and red groups used AI, the red group got some additional training on how to use AI</figcaption>
</figure>
</div>
<p>The study introduces the concept of a “jagged technological frontier,” suggesting that AI capabilities are uneven across different tasks. Some tasks are significantly enhanced by AI, leading to improved productivity and quality, while others, seemingly similar in difficulty, lie outside AI’s current capabilities and can lead to decreased performance when AI is utilized.</p>
<p>Participants were divided into three groups: a control group with no AI access, a group with access to GPT-4, and a group with GPT-4 access plus a prompt engineering overview. The findings revealed that for tasks within AI’s capabilities, the use of AI led to a notable increase in both the quantity and quality of work. Consultants were able to complete more tasks and with better outcomes, demonstrating that AI can be a powerful tool for augmenting human capabilities in knowledge work.</p>
<p>However, for tasks selected to be outside the AI’s frontier, reliance on AI resulted in a decrease in performance. This highlights the importance of understanding AI’s limitations and suggests that indiscriminate use of AI can have negative consequences.</p>
<p>The study also observed two distinct patterns of AI integration among successful users: “Centaurs,” who strategically divided tasks between themselves and AI, and “Cyborgs,” who integrated AI more fully into their workflow. These findings suggest varying approaches to integrating AI into professional tasks, emphasizing the need for users to adapt their strategies based on the task at hand and AI’s capabilities.</p>
<p>In summary, the study provides empirical evidence on the dual role of AI in enhancing and sometimes detracting from professional knowledge work. It highlights the need for careful consideration of when and how to deploy AI tools, as well as the potential for AI to significantly impact work processes and outcomes within its capabilities. The concept of the jagged technological frontier offers a framework for understanding the complex and evolving relationship between AI and human work, underscoring the importance of navigating this frontier effectively to harness the benefits of AI while mitigating its risks.</p>
</section>
</section>
<section id="march-2024-landscape" class="level2">
<h2 class="anchored" data-anchor-id="march-2024-landscape">March 2024 landscape</h2>
<section id="openai-current-offering" class="level3">
<h3 class="anchored" data-anchor-id="openai-current-offering">OpenAI current offering</h3>
<p>GPT-4 is available in the OpenAI API to <a href="https://help.openai.com/en/articles/7102672-how-can-i-access-gpt-4">paying customers</a>. Like <strong><code>gpt-3.5-turbo</code></strong>, GPT-4 is optimized for chat but works well for traditional completions tasks using the <a href="https://platform.openai.com/docs/api-reference/chat">Chat Completions API</a>. Learn how to use GPT-4 in our <a href="https://platform.openai.com/docs/guides/text-generation">text generation guide</a>.</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th style="text-align: left;"><strong>MODEL</strong></th>
<th style="text-align: left;"><strong>DESCRIPTION</strong></th>
<th style="text-align: left;"><strong>CONTEXT WINDOW</strong></th>
<th style="text-align: left;"><strong>TRAINING DATA</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">gpt-4-0125-preview</td>
<td style="text-align: left;"><strong>GPT-4 Turbo</strong><br>
The latest GPT-4 model intended to reduce cases of “laziness” where the model doesn’t complete a task. Returns a maximum of 4,096 output tokens. <a href="https://openai.com/blog/new-embedding-models-and-api-updates">Learn more</a>.</td>
<td style="text-align: left;">128,000 tokens</td>
<td style="text-align: left;">Up to Dec 2023</td>
</tr>
<tr class="even">
<td style="text-align: left;">gpt-4-turbo-preview</td>
<td style="text-align: left;">Currently points to <code>gpt-4-0125-preview</code>.</td>
<td style="text-align: left;">128,000 tokens</td>
<td style="text-align: left;">Up to Dec 2023</td>
</tr>
<tr class="odd">
<td style="text-align: left;">gpt-4-1106-preview</td>
<td style="text-align: left;">GPT-4 Turbo model featuring improved instruction following, JSON mode, reproducible outputs, parallel function calling, and more. Returns a maximum of 4,096 output tokens. This is a preview model. <a href="https://openai.com/blog/new-models-and-developer-products-announced-at-devday">Learn more</a>.</td>
<td style="text-align: left;">128,000 tokens</td>
<td style="text-align: left;">Up to Apr 2023</td>
</tr>
<tr class="even">
<td style="text-align: left;">gpt-4-vision-preview</td>
<td style="text-align: left;">GPT-4 with the ability to understand images, in addition to all other GPT-4 Turbo capabilities. Currently points to <code>gpt-4-1106-vision-preview</code>.</td>
<td style="text-align: left;">128,000 tokens</td>
<td style="text-align: left;">Up to Apr 2023</td>
</tr>
<tr class="odd">
<td style="text-align: left;">gpt-4-1106-vision-preview</td>
<td style="text-align: left;">GPT-4 with the ability to understand images, in addition to all other GPT-4 Turbo capabilities. Returns a maximum of 4,096 output tokens. This is a preview model version. <a href="https://openai.com/blog/new-models-and-developer-products-announced-at-devday">Learn more</a>.</td>
<td style="text-align: left;">128,000 tokens</td>
<td style="text-align: left;">Up to Apr 2023</td>
</tr>
<tr class="even">
<td style="text-align: left;">gpt-4</td>
<td style="text-align: left;">Currently points to <code>gpt-4-0613</code>. See <a href="https://platform.openai.com/docs/models/continuous-model-upgrades">continuous model upgrades</a>.</td>
<td style="text-align: left;">8,192 tokens</td>
<td style="text-align: left;">Up to Sep 2021</td>
</tr>
<tr class="odd">
<td style="text-align: left;">gpt-4-0613</td>
<td style="text-align: left;">Snapshot of <code>gpt-4</code> from June 13th 2023 with improved function calling support.</td>
<td style="text-align: left;">8,192 tokens</td>
<td style="text-align: left;">Up to Sep 2021</td>
</tr>
<tr class="even">
<td style="text-align: left;">gpt-4-32k</td>
<td style="text-align: left;">Currently points to <code>gpt-4-32k-0613</code>. See <a href="https://platform.openai.com/docs/models/continuous-model-upgrades">continuous model upgrades</a>. This model was never rolled out widely in favor of GPT-4 Turbo.</td>
<td style="text-align: left;">32,768 tokens</td>
<td style="text-align: left;">Up to Sep 2021</td>
</tr>
<tr class="odd">
<td style="text-align: left;">gpt-4-32k-0613</td>
<td style="text-align: left;">Snapshot of <code>gpt-4-32k</code> from June 13th 2023 with improved function calling support. This model was never rolled out widely in favor of GPT-4 Turbo.</td>
<td style="text-align: left;">32,768 tokens</td>
<td style="text-align: left;">Up to Sep 2021</td>
</tr>
</tbody>
</table>
</section>
<section id="openai-pricing" class="level3">
<h3 class="anchored" data-anchor-id="openai-pricing">OpenAI pricing</h3>
<section id="gpt-4-turbo" class="level4">
<h4 class="anchored" data-anchor-id="gpt-4-turbo"><strong>GPT-4 Turbo</strong></h4>
<table class="caption-top table">
<colgroup>
<col style="width: 38%">
<col style="width: 30%">
<col style="width: 30%">
</colgroup>
<tbody>
<tr class="odd">
<td><strong>Model</strong></td>
<td><strong>Input</strong></td>
<td><strong>Output</strong></td>
</tr>
<tr class="even">
<td>gpt-4-0125-preview</td>
<td>$10.00&nbsp;/ 1M tokens</td>
<td>$30.00&nbsp;/ 1M tokens</td>
</tr>
<tr class="odd">
<td>gpt-4-1106-preview</td>
<td>$10.00&nbsp;/ 1M tokens</td>
<td>$30.00&nbsp;/ 1M tokens</td>
</tr>
<tr class="even">
<td>gpt-4-1106-vision-preview</td>
<td>$10.00&nbsp;/ 1M tokens</td>
<td>$30.00&nbsp;/ 1M tokens</td>
</tr>
</tbody>
</table>
</section>
<section id="gpt-4" class="level4">
<h4 class="anchored" data-anchor-id="gpt-4"><strong>GPT-4</strong></h4>
<table class="caption-top table">
<tbody>
<tr class="odd">
<td><strong>Model</strong></td>
<td><strong>Input</strong></td>
<td><strong>Output</strong></td>
</tr>
<tr class="even">
<td>gpt-4</td>
<td>$30.00&nbsp;/ 1M tokens</td>
<td>$60.00&nbsp;/ 1M tokens</td>
</tr>
<tr class="odd">
<td>gpt-4-32k</td>
<td>$60.00&nbsp;/ 1M tokens</td>
<td>$120.00&nbsp;/ 1M tokens</td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="competitors" class="level3">
<h3 class="anchored" data-anchor-id="competitors">Competitors</h3>
<p>Now in 2024, there is a fierce competition from Anthropic, Cohere, Google, and others.</p>
<section id="anthropic" class="level4">
<h4 class="anchored" data-anchor-id="anthropic">Anthropic</h4>
<p><a href="https://www.anthropic.com/news/claude-3-family" title="Claude 3">Claude 3</a> family of models employ various training methods, such as unsupervised learning and <a href="https://arxiv.org/abs/2212.08073" title="Constitutional AI">Constitutional AI</a>. A key enhancement in the Claude 3 family is multimodal input capabilities with text output, allowing users to upload images (e.g., tables, graphs, photos) along with text prompts for richer context and expanded use cases.</p>
<p>Opus, the most powerful model from Anthropic, outperforms GPT-4, GPT-3.5 and Gemini Ultra on a wide range of benchmarks. This includes topping the leaderboard on academic benchmarks like GSM-8k for mathematical reasoning and MMLU for expert-level knowledge.</p>
<p>Sonnet, the mid-range model, offers businesses a more cost-effective solution for routine data analysis and knowledge work, maintaining high performance without the premium price tag of the flagship model. Meanwhile, Haiku is designed to be swift and economical, suited for applications such as consumer-facing chatbots, where responsiveness and cost are crucial factors.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/gpt-4-anniversary/claude-comparison.webp" class="img-fluid figure-img" alt="Comparison of the Claude 3 with leading models" width="900"></p>
<figcaption>Comparison of the Claude 3 with leading models from the Anthropic announcement</figcaption>
</figure>
</div>
<p>In addition, Claude 3 models demonstrate sophisticated computer vision abilities on par with other state-of-the-art models. This new modality opens up use cases where enterprises need to extract information from images, documents, charts and diagrams.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/gpt-4-anniversary/claude-comparison-vision.webp" class="img-fluid figure-img" width="900"></p>
<figcaption>Comparison of the Claude 3 vision capabilities with leading models from the Anthropic announcement</figcaption>
</figure>
</div>
</section>
<section id="cohere" class="level4">
<h4 class="anchored" data-anchor-id="cohere">Cohere</h4>
<p>While OpenAI has garnered widespread attention through the viral phenomenon of its ChatGPT chatbot, Cohere has adopted a more focused strategy, engaging directly with corporate clients to customize its AI models according to their unique requirements. This approach enables Cohere to achieve greater cost efficiency compared to competitors who aim at broad consumer markets.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 31%">
<col style="width: 32%">
<col style="width: 34%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"><strong>Cohere API Pricing</strong></th>
<th style="text-align: left;"><strong>$ / M input tokens</strong></th>
<th style="text-align: left;"><strong>$ / M output tokens</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Command</td>
<td style="text-align: left;">$1.00</td>
<td style="text-align: left;">$2.00</td>
</tr>
<tr class="even">
<td style="text-align: left;">Command-R</td>
<td style="text-align: left;">$0.50</td>
<td style="text-align: left;">$1.50</td>
</tr>
</tbody>
</table>
<p><a href="https://txt.cohere.com/command-r/?_gl=1*1ckv15z*_ga*MTk1NTk5MTAyLjE3MDg5NzkzNzE.*_ga_CRGS116RZS*MTcxMDY3MTUwNC4zLjEuMTcxMDY3MjI0MC4zMS4wLjA." title="Command-R">Command-R</a> integrates seamlessly with Cohere’s Embed and Rerank models, providing retrieval-augmented generation (RAG) functionalities. A distinctive feature of Command-R is its ability to provide explicit citations in its outputs, reducing the occurrence of fabrications and facilitating user access to further information from the original sources.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/gpt-4-anniversary/Multilingual-Evals--1--1.png" class="img-fluid figure-img" alt="Multilingual MMLU from Cohere announcement" width="700"></p>
<figcaption>Multilingual MMLU from Cohere announcement</figcaption>
</figure>
</div>
<p>The capability of Command-R to utilize external tools marks a significant advancement for developers in the corporate sector. This feature permits the model to link with external resources such as search engines, APIs, databases, and functions, thereby enriching its functionality through the utilization of data and operations available via these tools. This aspect is especially beneficial for businesses that store a substantial portion of their data in external repositories.</p>
<p>The adoption of tool usage opens the door to a broad spectrum of new applications. For example, developers can instruct Command-R to suggest a specific tool or a combination thereof, along with guidance on their usage. This enables chatbots to interact with customer relationship management (CRM) systems to update deal statuses or to employ Python interpreters for performing data science tasks. Additionally, it allows for the transformation of user inquiries into search commands for vector databases or search engines, empowering work assistants to autonomously navigate through various databases and platforms to gather pertinent information or execute comparative evaluations.</p>
<p>Tool usage with Command-R involves a four-stage process: initially, developers configure which tools the model can access and the format of interactions (e.g., API calls, JSON-formatted instructions). Command-R then judiciously selects the suitable tools and parameters for these interactions. Subsequently, developers execute these tool interactions, obtaining results, which are then fed back into Command-R to generate the final response.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/gpt-4-anniversary/cohere-tool-use.png" class="img-fluid figure-img" alt="Cohere tool usage" width="900"></p>
<figcaption>Cohere tool usage</figcaption>
</figure>
</div>
<p>Beyond its RAG and tool integration features, Command-R benefits from an extended context window capability of up to 128k tokens and offers competitive pricing for Cohere’s hosted API service. Moreover, the model delivers robust performance across ten primary languages, encompassing English, French, Spanish, Italian, German, Portuguese, Japanese, Korean, Arabic, and Chinese.</p>
</section>
</section>
</section>
<section id="lets-celebrate" class="level2">
<h2 class="anchored" data-anchor-id="lets-celebrate">Let’s Celebrate!</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/gpt-4-anniversary/1-year-image-prompt.png" class="img-fluid figure-img" alt="ChatGPT self-portrait"></p>
<figcaption>ChatGPT self-portrait</figcaption>
</figure>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>generative ai</category>
  <category>machine learning</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/gpt-4-anniversary/</guid>
  <pubDate>Thu, 14 Mar 2024 23:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/gpt-4-anniversary/1-year-image.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Intervento al DABS Day 2024 - Università Ca’ Foscari</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/intervento-dabs-day-2024-ca-foscari/</link>
  <description><![CDATA[ 





<section id="genai-a-venezia" class="level2">
<h2 class="anchored" data-anchor-id="genai-a-venezia">GenAI a Venezia</h2>
<p>Bel pomeriggio presso l’Università Ca’ Foscari di Venezia, ospite del Dipartimento di Economia e dell’evento DABS Day 2024.</p>
<p>Coll’intervento di apertura dell’evento, ho portato una serie di spunti sulla intelligenza artificiale generativa, utili al confronto con i ragazzi, gli altri ospiti e il corpo docente.</p>
<p>Il talk è stato organizzato in 4 sezioni:</p>
<ol type="1">
<li><p>Il contesto: Aspettative tra alti e bassi. Un breve excursus storico per arrivare alla rivouluzione del deep learning e dei transformer.</p></li>
<li><p>Le promesse: sarà un estate perenne? La principale promessa della fase storica corrente e cioè la polivalenza dei nuovi modelli di reti neurali generative.</p></li>
<li><p>Le sfide: grandi guadagni, grandi rischi. La rivoluzione della IA generativa porta con sé molte sfide, tutte proporzionali alle promesse e alle aspettative suscitate.</p></li>
<li><p>Il futuro: IA importante come fuoco per l’umanità. Difficile trovare una metafora per definire l’impatto della IA generativa sull’umanità, ma il fuoco sembra essere la migliore per il CEO di Alphabet (vedi anche mio altro <a href="https://antomon.github.io/posts/ai-important-as-fire/">post</a> sul tema). Quindi, rivolgo uno sguardo alle rivoluzioni tecnologiche precedenti e riporto alcune raccomandazioni per il presente e il futuro prossimo.</p></li>
</ol>
<p>Si possono scaricare le slide in formato <a href="https://github.com/antomon/antomon.github.io/blob/ab2afdffdaa015f1dad52fc0a1de3dd7cc171b35/posts/intervento-dabs-day-2024-ca-foscari/GENAI-TALK-20240311-FULL.pptx" title="PPTX">PPTX</a> (Powerpoint). Presentano delle animazioni, quindi devono essere fruite nella modalità di esecuzione di Powerpoint.</p>
<p>Contattami per:</p>
<ol type="1">
<li><p>Stato e trend della GenAI.</p></li>
<li><p>Applicazioni aziendali della GenAI.</p></li>
<li><p>Selezione di strumenti e creazione di team per l’introduzione e sfruttamento della GenAI.</p></li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/intervento-dabs-day-2024-ca-foscari/brochure.png" class="img-fluid figure-img" alt="Brochure DABS Day"></p>
<figcaption>Brochure DABS Day</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/intervento-dabs-day-2024-ca-foscari/start.png" class="img-fluid figure-img" alt="Si inizia!"></p>
<figcaption>Si inizia!</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/intervento-dabs-day-2024-ca-foscari/aspettative.jpg" class="img-fluid figure-img" alt="Le montagne russe delle aspettative della IA!"></p>
<figcaption>Le montagne russe delle aspettative della IA!</figcaption>
</figure>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>generative ai</category>
  <category>machine learning</category>
  <category>talk</category>
  <category>🇮🇹</category>
  <guid>https://antomon.github.io/posts/intervento-dabs-day-2024-ca-foscari/</guid>
  <pubDate>Wed, 13 Mar 2024 23:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/intervento-dabs-day-2024-ca-foscari/sangiobbe2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>AI important as fire, generative AI as printing press, autonomous agents as wheel?</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/ai-important-as-fire/</link>
  <description><![CDATA[ 





<section id="fire" class="level2">
<h2 class="anchored" data-anchor-id="fire">Fire</h2>
<p>Sundar Pichai, the CEO of Alphabet and Google, has repeatedly made a bold statement regarding the significance of artificial intelligence (AI), comparing its importance to that of fire and electricity. He believes that AI is a “profound technology” and possibly more critical than these monumental discoveries in human history. Pichai’s comparison underscores the transformative potential of AI across all aspects of human life, from healthcare and education to manufacturing and beyond, heralding a new era of innovation and societal change​​.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/ai-important-as-fire/pichai-fire.png" class="img-fluid figure-img" alt="Sundar Pichai in 2018 and 2023"></p>
<figcaption>Sundar Pichai in 2018 and 2023</figcaption>
</figure>
</div>
<p>In a philosophical context, Pichai’s assertion invites us to explore the essence of transformative technologies and their impact on human civilization. The invention of fire was a pivotal moment in human history, providing warmth, protection, and the means to cook food, which significantly altered our nutritional intake and social structures. Similarly, the discovery of electricity revolutionized the industrial world, leading to the modern era of technology and convenience. These inventions not only changed the course of human history but also reshaped our relationship with the world and each other.</p>
<p>Artificial intelligence, according to Pichai, stands on the threshold of being the next great leap, akin to fire and electricity. This comparison is not merely about the utility of AI but its potential to redefine what it means to be human. AI challenges our understanding of intelligence, creativity, and even consciousness, pushing us to reconsider the boundaries between human and machine. The philosophical implications are profound: AI forces us to confront questions about autonomy, ethics, and the nature of the self in a world where machines can learn, make decisions, and potentially understand.</p>
<p>The comparison to fire and electricity also highlights the dual nature of transformative technologies: their capacity to benefit and to harm. Just as fire can warm and destroy, and electricity can illuminate and electrocute, AI holds immense potential for both positive and negative outcomes. It presents ethical dilemmas that humanity must navigate, such as privacy concerns, job displacement, and the potential for autonomous weapons. These challenges require a philosophical approach to ethics, governance, and the development of a societal framework that maximizes the benefits of AI while minimizing its risks.</p>
<p>Pichai’s statement also prompts us to consider the philosophical concept of progress. What does it mean for a technology to be as important as fire or electricity? It suggests a view of human history as a series of technological advancements that fundamentally alter our way of life. However, this perspective raises questions about the nature of progress itself. Is technological advancement inherently good, or does it bring new challenges that we must address? The philosophy of technology explores these questions, examining the relationship between human beings and their tools, and the ways in which technology shapes our values, society, and perception of reality.</p>
<p>In conclusion, Sundar Pichai’s comparison of AI to fire and electricity is not merely a statement about the potential of AI to change our world. It is an invitation to engage in deep philosophical reflection about the nature of technology, progress, and what it means to be human in an age where the boundaries between the natural and artificial are increasingly blurred. As we stand on the cusp of this new technological era, it is imperative that we approach AI with a blend of optimism and caution, guided by ethical considerations and a commitment to shaping a future that benefits all of humanity.</p>
</section>
<section id="printing-press" class="level2">
<h2 class="anchored" data-anchor-id="printing-press">Printing press</h2>
<p>If artificial intelligence (AI) as a whole can be compared to the importance of fire for the development of humanity, then generative AI, one of its most innovative subcategories, might be likened to the invention of the movable type printing press for its potential impact on society and the spread of knowledge.</p>
<p>The invention of the movable type printing press by Johannes Gutenberg in the 15th century marked a turning point for the dissemination of knowledge, culture, and education. It made books and documents more accessible, breaking down the barriers to education and knowledge that had been preserved in an elitist manner in manuscripts. This led to a democratization of knowledge, the spread of ideas, and progress in science, technology, and culture.</p>
<p>Similarly, generative AI has the potential to:</p>
<ul>
<li><p>Democratize content creation: It allows anyone to create complex content, such as texts, images, music, and videos, without necessarily having specialized skills in these areas. This could break down barriers to creative and innovative expression.</p></li>
<li><p>Accelerate innovation: Generative AI can speed up research and development in various fields, generating new ideas, solutions to complex problems, and even scientific discoveries that could take years of human effort.</p></li>
<li><p>Personalize education: It could revolutionize education by providing personalized and interactive educational materials that adapt to the learning level and style of each student, making education more effective and efficient.</p></li>
<li><p>Change in creative work: It will change how creative work is produced and distributed, introducing new tools and methods for artists, writers, designers, and creators in various fields.</p></li>
<li><p>Access to knowledge: It could transform access to information, making it easier for people to obtain complex answers and detailed analyses on vast datasets, similarly to how printing made written knowledge accessible. Just as the invention of the printing press marked the beginning of a new era in the dissemination of knowledge and cultural development, generative AI could usher in an era of unprecedented innovation in the way we generate, share, and interact with human creations and information.</p></li>
</ul>
</section>
<section id="wheel" class="level2">
<h2 class="anchored" data-anchor-id="wheel">Wheel</h2>
<p>Autonomous agents, a distinct category within the broad spectrum of artificial intelligence, can be compared to the invention of the wheel for their potential impact on society and the progress of humanity. While generative AI transforms the way we create and interact with content, autonomous agents change the way we interact with both the physical and digital world by automating tasks and decisions independently.</p>
<p>The invention of the wheel was crucial in the development of human societies, facilitating transportation, trade, and communication. It allowed civilizations to overcome physical limitations, expanding their geographical and cultural horizons.</p>
<p>Similarly, autonomous agents have the potential to:</p>
<ul>
<li><p>Transform transportation and logistics: Autonomous vehicles, drones, and automated delivery systems can revolutionize how we move people and goods, making transportation safer, more efficient, and accessible.</p></li>
<li><p>Industrial and domestic automation: From industrial manufacturing to home management, autonomous agents can take on repetitive or dangerous tasks, improving efficiency and safety at work and in daily life.</p></li>
<li><p>Personalized healthcare assistance: Autonomous robots and virtual assistants can provide personalized support to patients and the elderly, improving access to care and quality of life.</p></li>
<li><p>Environmental and urban management: They can be employed in sustainable resource management, environmental monitoring, and urban infrastructure maintenance, contributing to smarter and more sustainable cities.</p></li>
<li><p>Exploration and research: From space exploration to data collection in inaccessible or hazardous environments on Earth, autonomous agents can go where it is risky or impossible for humans, expanding our understanding of the world and beyond.</p></li>
</ul>
<p>Therefore, autonomous agents promise to be a driving force behind a wide range of advancements in various sectors, potentially revolutionizing our infrastructures, economies, and societies in ways we can only imagine today.</p>
</section>
<section id="final-remarks" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks">Final remarks</h2>
<p>AI, likened to fire and electricity, is posited as not just a tool but a fundamental force reshaping the fabric of human existence. This comparison underscores AI’s dual potential to both illuminate the path forward and, if mishandled, to unleash consequences we’re only beginning to grasp. The essay compellingly argues that AI’s impact transcends technological advancement, urging a philosophical introspection about humanity’s trajectory in this new era.</p>
<p>The analogy of generative AI to the printing press captures its democratizing power over knowledge and creation. Just as the printing press unlocked the gates of knowledge, generative AI promises to democratize creativity, making it accessible to all. This section of the essay envisions a future where barriers to educational, artistic, and scientific endeavors are dismantled, heralding a renaissance of mass creativity and innovation.</p>
<p>Drawing a parallel between autonomous agents and the wheel, the essay highlights how these technologies could redefine mobility, automation, and our interaction with the physical and digital realms. The potential for autonomous agents to transform logistics, healthcare, environmental management, and even explore uncharted territories speaks to their role as enablers of a new phase of human progress.</p>
<p>To summarize:</p>
<ol type="1">
<li><p>The onset of a new human evolutionary era: Beyond technological marvel, AI invites a deeper philosophical inquiry into the essence of human intelligence, creativity, and ethics. As we intertwine our lives with AI, we’re not just shaping technology but redefining what it means to be human.</p></li>
<li><p>Ethical imperatives and governance: The transformative potential of AI, akin to fire’s ability to both warm and destroy, necessitates a careful ethical and regulatory approach. We urge the development of frameworks that balance innovation with safeguarding human dignity and rights.</p></li>
<li><p>Redefining progress: The narratives of AI as fire, generative AI as the printing press, and autonomous agents as the wheel challenge us to reconsider the meaning of progress. We posit that true progress lies not in technological advancement alone but in harnessing these tools for the collective good of humanity.</p></li>
<li><p>A call to action: Finally, this short essay serves as a call to action for policymakers, technologists, and society at large. It underscores the importance of informed, ethical stewardship of AI technologies to ensure they serve as engines of sustainable growth, equity, and human flourishing.</p></li>
</ol>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>essay</category>
  <category>generative ai</category>
  <category>machine learning</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/ai-important-as-fire/</guid>
  <pubDate>Fri, 09 Feb 2024 23:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/ai-important-as-fire/red-face.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Color Space Sampling 101</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/color-space-sampling-101/</link>
  <description><![CDATA[ 





<section id="color-spaces" class="level2">
<h2 class="anchored" data-anchor-id="color-spaces">Color spaces</h2>
<p>Let’s break down the concept of a color space into simple terms first, and then delve into the technical aspects.</p>
<section id="layman-terms" class="level3">
<h3 class="anchored" data-anchor-id="layman-terms">Layman terms</h3>
<p>Imagine you have a huge box of crayons with every color you can think of. A color space is like picking a smaller box from this huge collection. This smaller box contains a specific range of colors that you can use for a particular purpose, like drawing a picture or printing a photograph.</p>
<p>Just like you can’t use the colors outside your chosen crayon box, a color space defines the range of colors (or ‘gamut’) that can be represented or reproduced in a medium, whether it’s a computer screen, a camera, or a printed page. Different color spaces are like different sets of crayons, each suited for different tasks or equipment.</p>
</section>
<section id="technically-speaking" class="level3">
<h3 class="anchored" data-anchor-id="technically-speaking">Technically speaking</h3>
<p>A color space is a specific organization of colors, which in a more formal setting can be described by the mathematics of color models. It’s a three-dimensional model where each color is represented by a unique point within a coordinate system.</p>
<p>Technically, a color space maps out a range of colors in terms of intensity values across different channels (like red, green, blue in RGB color space). It provides a standard by which we can define and reproduce colors across different devices and mediums.</p>
<p>Components of a color space are:</p>
<ul>
<li><p>Primary Colors: These are the reference colors used in a color model. For example, RGB uses red, green, and blue as primary colors.</p></li>
<li><p>Gamut: This is the complete subset of colors that can be accurately represented within a given color space.</p></li>
<li><p>Color model: The underlying mathematical model describing the way colors can be represented as tuples of numbers (e.g., RGB, CMYK, HSL).</p></li>
<li><p>Perceptual uniformity: Some color spaces (like CIELab) are designed to be perceptually uniform. This means that a change of the same amount in a color value should produce a change of about the same visual importance.</p></li>
<li><p>Device-dependent vs device-independent: Color spaces can be device-dependent (like Adobe RGB, specific to monitors and printers) or device-independent (like CIELab), which abstracts color definitions from specific devices, allowing for consistent color reproduction across different devices.</p></li>
<li><p>Standardization: Standards such as sRGB are established to ensure uniform color representation across different digital devices and platforms, crucial in digital media and web content.</p></li>
</ul>
<p>In essence, a color space is a framework that allows for consistent and precise color representation, ensuring that the colors you see and use are the same across various devices and mediums.</p>
</section>
</section>
<section id="rgb-and-srgb-color-spaces" class="level2">
<h2 class="anchored" data-anchor-id="rgb-and-srgb-color-spaces">RGB and sRGB Color Spaces</h2>
<p>The RGB color space, foundational in the realm of digital imaging and display technologies, represents colors through the additive combination of the red (R), green (G), and blue (B) primary colors. For instance, combining red and green light produces yellow, red and blue produce magenta, and green and blue create cyan.</p>
<p>The intensity of each primary color, typically represented by a value ranging from 0 to 255 in digital systems, combines to produce a wide spectrum of colors. This model is intrinsically linked to the way human vision perceives color through cone cells sensitive to these three color wavelengths.</p>
<p>In the digital context, the RGB color space is device-dependent, meaning the exact color rendition can vary across different devices like monitors, cameras, and scanners. This variation stems from differences in how devices are manufactured and the specific characteristics of their RGB color filters. As a result, a color seen on one RGB device might not look exactly the same on another, leading to inconsistencies in color reproduction.</p>
<p>sRGB, which stands for standard Red Green Blue, emerged as a standardization effort to tackle these inconsistencies, especially pertinent in consumer electronics and online content. Developed jointly by HP and Microsoft in 1996, sRGB provides a specific implementation of the RGB color space with well-defined chromaticities for the red, green, and blue primaries. It also specifies a transfer function (or gamma curve), which defines how the numerical values of R, G, and B map to actual luminance levels. In sRGB, this curve is a piecewise function: a linear segment in the darkest shades and a power function in the rest of the range, with a gamma value of approximately 2.2, which is close to the perceptual linearization of human vision.</p>
<p>One of the limitations of sRGB is its relatively narrow color gamut compared to other color spaces like Adobe RGB or ProPhoto RGB. This limitation is particularly evident in highly saturated colors, where sRGB can fail to reproduce the vibrancy seen in the real world or in wider-gamut color spaces. However, its ubiquity and standardization across a wide array of devices and software make it the default choice for web content, consumer electronics, and standard digital photography. Its compatibility and predictability across different platforms ensure that colors rendered in sRGB appear reasonably consistent on most modern displays, which are typically calibrated to this color space.</p>
<p>In current usage, while professional-grade equipment and applications might opt for wider-gamut color spaces like Adobe RGB, sRGB remains the principal color space for web-based content, ensuring that colors are represented uniformly across different viewing platforms. In essence, while RGB lays the foundation for digital color representation, sRGB standardizes this representation for widespread and consistent use in digital media.</p>
<section id="number-of-colors" class="level3">
<h3 class="anchored" data-anchor-id="number-of-colors">Number of Colors</h3>
<p>In both RGB and sRGB color spaces, the total number of colors that can be represented depends on the bit depth per channel. In typical scenarios where each of the RGB channels (Red, Green, Blue) is allocated 8 bits (which is quite common in consumer electronics and digital imagery), each channel can represent 2^8 or 256 distinct levels of intensity.</p>
<p>Since RGB and sRGB both use three channels, the total number of representable colors is calculated by multiplying the number of possibilities in each channel. So, the calculation would be:</p>
<blockquote class="blockquote">
<p>256 (Red) x 256 (Green) x 256 (Blue) = 16,777,216 total colors</p>
</blockquote>
<p>Therefore, both RGB and sRGB color spaces can represent approximately 16.7 million different colors when using an 8-bit per channel system. It’s important to note that this count is the same for both RGB and sRGB because the difference between these two spaces lies not in the number of colors they can represent but in how they interpret these colors (i.e., the color gamut and the mapping of color values to actual colors on a screen).</p>
<p>For images with higher bit depth per channel (like 10-bit, 12-bit, etc.), the total number of representable colors increases exponentially, allowing for a much richer and more nuanced color representation. However, the standard in most common digital applications remains 8-bit per channel.</p>
<p>Here are some examples of how certain colors are represented within this range:</p>
<ol type="1">
<li><p>Red: Pure red is represented as (255, 0, 0). This means the red channel is at its maximum, while green and blue are at their minimum.</p></li>
<li><p>Green: Pure green is (0, 255, 0), with the green channel at maximum and the others at minimum.</p></li>
<li><p>Blue: Pure blue appears as (0, 0, 255), with the blue channel at its maximum.</p></li>
<li><p>Yellow: Yellow is a mix of red and green, so it’s represented as (255, 255, 0).</p></li>
<li><p>Cyan: Cyan is a mix of green and blue, shown as (0, 255, 255).</p></li>
<li><p>Magenta: Magenta combines red and blue, represented as (255, 0, 255).</p></li>
<li><p>Black: Black is the absence of color in the RGB space, so all channels are at their minimum: (0, 0, 0).</p></li>
<li><p>White: White is the combination of all colors at their maximum intensity, so it’s (255, 255, 255).</p></li>
<li><p>Gray: Shades of gray are created when all three channels have equal intensity. For example, a medium gray might be (128, 128, 128).</p></li>
<li><p>Orange: Orange can vary in shade but is generally a mix of red and some green, such as (255, 165, 0).</p></li>
</ol>
<p>These examples provide a basic understanding of how different colors are represented in the RGB color space. By adjusting the intensity values of the red, green, and blue channels, a wide range of colors can be created.</p>
</section>
<section id="display-standards" class="level3">
<h3 class="anchored" data-anchor-id="display-standards">Display Standards</h3>
<p>The standard for most consumer TVs and monitors is typically an 8-bit per channel RGB color system. This means that each of the three color channels (Red, Green, Blue) can display 256 levels of intensity (from 0 to 255), resulting in 16,777,216 possible colors (256^3 = 16,777,216). This is often referred to as “True Color” or “24-bit color” (8 bits x 3 channels).</p>
<p>However, there is an increasing trend towards higher bit depths in newer, higher-end TVs and monitors, especially those geared towards professional use or high-quality entertainment experiences. These include:</p>
<ol type="1">
<li><p>10-bit color depth: With 10 bits per channel, a display can produce 1,024 levels of intensity per channel, resulting in a total of about 1.07 billion colors (1,024^3). This is significant for professional-grade monitors used in color-critical tasks like photo and video editing.</p></li>
<li><p>12-bit color depth: Some very high-end and specialized monitors and TVs offer 12-bit color, with 4,096 levels per channel, totaling around 68.7 billion colors (4,096^3). These are less common and are typically used in professional and cinematic settings.</p></li>
<li><p>HDR (high dynamic range): Modern high-end TVs and some monitors support HDR standards like HDR10, Dolby Vision, or HDR10+, which often use a 10-bit or even 12-bit color depth. HDR doesn’t just increase the number of colors; it also enhances the contrast and brightness, leading to a more dynamic and realistic image.</p></li>
<li><p>Wide color gamut: Apart from bit depth, many newer displays also support a wider color gamut (such as DCI-P3 or Rec. 2020), meaning they can display a broader range of colors than the traditional sRGB gamut.</p></li>
</ol>
<p>It’s important to note that to fully utilize these higher color depths and wider gamuts, the content being displayed (like movies, TV shows, or games) must also be created to support these standards, and the device’s hardware and software must be compatible with these advanced color features.</p>
</section>
<section id="complementary-colors" class="level3">
<h3 class="anchored" data-anchor-id="complementary-colors">Complementary Colors</h3>
<p>A complementary color is defined as a color that, when combined with a given color, produces a neutral color (white, gray, or black). Complementary colors are positioned opposite each other on the color wheel, a tool used to represent the relationships between colors.</p>
<p>In the RGB model, which is used for light-emitting sources like computer screens, the primary colors are red, green, and blue. The complementary color of red is cyan (a mix of green and blue), green’s complementary color is magenta (a mix of red and blue), and blue’s complementary color is yellow (a mix of red and green). When combined in this model, a color and its complementary produce white light. For example, combining red light with cyan light will result in white light.</p>
</section>
<section id="other-notations-for-rgb-color-space" class="level3">
<h3 class="anchored" data-anchor-id="other-notations-for-rgb-color-space">Other Notations for RGB Color Space</h3>
<section id="hex" class="level4">
<h4 class="anchored" data-anchor-id="hex">HEX</h4>
<p>HEX color notation is a staple in web and digital design, providing a succinct way to represent RGB colors. It encodes RGB values into a 6-digit hexadecimal number, prefaced by a hash symbol. Each pair of digits in this format, ranging from 00 to FF, corresponds to the red, green, and blue components of a color. This compact and efficient representation makes HEX particularly popular in coding and digital design environments.</p>
</section>
<section id="decimal" class="level4">
<h4 class="anchored" data-anchor-id="decimal">Decimal</h4>
<p>Decimal color notation is another way to describe RGB colors, similar to HEX but using decimal numbers. It presents colors with three values, each ranging from 0 to 255, for the red, green, and blue components. This approach is particularly user-friendly in programming and digital contexts, where working with decimal numbers is common.</p>
</section>
</section>
</section>
<section id="cmy-and-cmyk-color-spaces" class="level2">
<h2 class="anchored" data-anchor-id="cmy-and-cmyk-color-spaces">CMY and CMYK Color Spaces</h2>
<p>The CMY and CMYK color models are primarily used in color printing and are fundamentally different from the RGB color model, which is used in electronic displays. Both CMY and CMYK are based on the subtractive color model, unlike the additive nature of RGB.</p>
<section id="cmy" class="level3">
<h3 class="anchored" data-anchor-id="cmy">CMY</h3>
<p>CMY operates on the subtractive principle where colors are created by subtracting light. This model is based on the way light is absorbed and reflected off surfaces. It uses cyan, magenta, and yellow as its primary colors. These are the complementary colors of red, green, and blue (RGB), respectively.</p>
<p>In CMY, colors are created by partially or entirely subtracting the primary colors of light. For example, subtracting green from white light leaves magenta, subtracting red gives cyan, and subtracting blue yields yellow.</p>
<p>CMY is used in color printing. By combining varying amounts of cyan, magenta, and yellow, a wide range of colors can be reproduced. When all three colors are combined at their full intensity, they theoretically produce black, but in practice, they produce a muddy dark brown or gray.</p>
</section>
<section id="cmyk" class="level3">
<h3 class="anchored" data-anchor-id="cmyk">CMYK</h3>
<p>CMYK adds a fourth component, “key” (black), to the CMY model. The ‘K’ component is used because pure black cannot be created reliably through the combination of CMY inks due to imperfections in ink pigments. Adding black ink allows for deeper, more accurate, and consistent blacks.</p>
<p>CMYK creates colors through a subtractive process by layering different amounts of cyan, magenta, yellow, and black ink on paper. The more ink used, the darker the color becomes. Black ink in CMYK is also more economical and provides better shadow detail than CMY, making it a more efficient color model for full-color printing.</p>
</section>
<section id="differences-with-rgb" class="level3">
<h3 class="anchored" data-anchor-id="differences-with-rgb">Differences with RGB</h3>
<p>The most important difference is that RGB is an additive color model used in electronic displays, where colors are created by combining light. CMY and CMYK are subtractive, used in printing, where colors are created by subtracting light. Or, with different words, RGB is used for digital screens like monitors, TVs, and cameras, where light is emitted directly. CMY and CMYK are used in printing on physical media, where light is reflected.</p>
<p>In RGB, black is the absence of light, while in CMYK, black is a separate ink component for deeper and more uniform blacks.</p>
</section>
</section>
<section id="hsl-and-hsv-color-spaces" class="level2">
<h2 class="anchored" data-anchor-id="hsl-and-hsv-color-spaces">HSL and HSV Color Spaces</h2>
<p>Both HSL (hue, saturation, lightness) and HSV (hue, saturation, value) are color models used to represent the RGB color space in terms that are more intuitive for humans to understand and manipulate. These models describe colors in terms of their shade (hue), intensity (saturation), and brightness (lightness/value):</p>
<ul>
<li><p>HSL:</p>
<ul>
<li><p>Hue: Represents the type of color, or the color itself. It is typically measured in degrees around a color wheel, with red at 0°, green at 120°, and blue at 240°.</p></li>
<li><p>Saturation: Indicates the intensity or purity of the color. In HSL, saturation ranges from 0%, which is a shade of gray, to 100%, which is the full color.</p></li>
<li><p>Lightness: Also known as luminance, lightness defines how light or dark a color is. A lightness of 0% is black, 50% is the true color, and 100% is white.</p></li>
</ul></li>
<li><p>HSV:</p>
<ul>
<li><p>Hue: Similar to HSL, it defines the color itself.</p></li>
<li><p>Saturation: Measures the intensity or vibrancy of the color. It ranges from 0%, which is completely unsaturated (gray), to 100%, which is the most saturated form of the color.</p></li>
<li><p>Value: Also known as brightness, it represents the brightness or darkness of the color. A value of 0% is black, and 100% is the brightest form of the color.</p></li>
</ul></li>
</ul>
<section id="differences-with-rgb-1" class="level4">
<h4 class="anchored" data-anchor-id="differences-with-rgb-1">Differences with RGB</h4>
<p>RGB represents colors by specifying the intensity of each primary color, making it less intuitive for tasks like adjusting brightness or saturation. HSL and HSV are transformations of the RGB color model designed to be more intuitive for human perception. They allow for easier adjustments of color properties like shade, intensity, and brightness.</p>
<p>HSL and HSV are often used in color picker tools in graphic design software because they offer a more user-friendly way to select and manipulate colors. Moreover, they separate the chromatic information (hue and saturation) from the achromatic information (lightness/value), unlike RGB where all three parameters mix chromatic and achromatic components.</p>
<p>While RGB is suited for electronic displays and color mixing with light, HSL and HSV are more suited for tasks that involve adjusting and fine-tuning colors, like in graphic design and photo editing. In essence, HSL and HSV are used to represent the same colors as RGB but in a way that aligns more closely with how people think about and perceive colors. This makes them particularly useful in interfaces and applications where users need to make precise adjustments to color properties.</p>
</section>
</section>
<section id="yiq-and-yuv-color-spaces" class="level2">
<h2 class="anchored" data-anchor-id="yiq-and-yuv-color-spaces">YIQ and YUV Color Spaces</h2>
<p>YIQ and YUV are color spaces primarily used in the broadcasting industry, particularly in television systems. Both are designed to split a color signal into luminance and chrominance components, but they are used in different television standards.</p>
<p>The YIQ color space was predominantly used in the NTSC color television system, mainly in North America. In YIQ, ‘Y’ stands for the luminance component, which represents the brightness of the image. The ‘I’ and ‘Q’ components represent the chrominance or color information. ‘I’ carries information about the orange-cyan range, while ‘Q’ carries information about the green-magenta range. The separation of luminance and chrominance in YIQ allowed NTSC broadcasts to be compatible with black-and-white televisions. Luminance (Y) could be displayed by black-and-white TVs, while color TVs could use all three components (Y, I, Q) to display the full color image.</p>
<p>YUV is similar to YIQ in that it also separates the color signal into luminance (Y) and two chrominance components (U and V). YUV is used in the PAL and SECAM color television systems, prevalent in Europe and other parts of the world. The ‘Y’ component, like in YIQ, represents the image brightness. ‘U’ represents the blue-luminance difference, and ‘V’ represents the red-luminance difference. This separation was also designed for compatibility with black-and-white TVs, with the added advantage of better color quality compared to NTSC, although at a slightly lower resolution.</p>
<p>Both YIQ and YUV were developed to maximize the efficiency of color transmission in broadcasting and to ensure backward compatibility with black-and-white television systems. They differ from RGB, which is used in electronic displays and combines red, green, and blue light to produce colors. While RGB is more straightforward for generating colors electronically, YIQ and YUV are more efficient for broadcasting purposes because they separate the brightness of the image from the color information, which can be more efficiently compressed and transmitted.</p>
<p>The use of YIQ has declined with the shift towards digital broadcasting, which often uses other color spaces like YCbCr. YUV, on the other hand, is still relevant in many video processing applications and is closely related to the YCbCr color space used in digital video.</p>
</section>
<section id="cie-color-spaces" class="level2">
<h2 class="anchored" data-anchor-id="cie-color-spaces">CIE Color Spaces</h2>
<p>The International Commission on Illumination, known as CIE (Commission Internationale de l’Éclairage), is a significant organization in the field of color and lighting standards. CIE has introduced several critical color spaces, including XYZ, CIELab, and CIELCh, each serving unique purposes in color science.</p>
<section id="xyz" class="level3">
<h3 class="anchored" data-anchor-id="xyz">XYZ</h3>
<p>The CIE XYZ color space, established in 1931, is foundational in the field of colorimetry. It’s a device-independent model representing color perceptions of a standard observer. In XYZ, ‘X’ represents a mix of cone response curves, ‘Y’ denotes luminance, and ‘Z’ corresponds to blue stimulation. This color space serves as a reference, allowing for the translation of colors between different systems and devices. The gamut of XYZ encompasses all perceivable colors, making it a comprehensive standard for color representation.</p>
</section>
<section id="cielab" class="level3">
<h3 class="anchored" data-anchor-id="cielab">CIELab</h3>
<p>The CIELab (or Lab) color space, introduced in 1976, with its broad gamut and perceptually uniform characteristics, is designed to encompass the entire range of colors visible to the human eye. This extensive gamut means it can represent colors that are outside the range of many display systems and printers.</p>
<p>In CIELab:</p>
<ul>
<li><p>The ‘L’ component (lightness) ranges from 0 to 100, where 0 represents black, and 100 represents white. This vertical axis accounts for the luminance of colors.</p></li>
<li><p>The ‘a’ component operates on a green to red axis. Negative values of ‘a’ indicate green, while positive values indicate red.</p></li>
<li><p>The ‘b’ component works on a blue to yellow axis, with negative values representing blue and positive values indicating yellow.</p></li>
</ul>
<p>This structure allows for a precise and detailed representation of colors. For example:</p>
<ul>
<li><p>A strong green might be denoted as (L=50, a=-50, b=50), representing a mid-level lightness with a strong green component and a touch of yellow.</p></li>
<li><p>A deep red could be represented as (L=40, a=60, b=30), indicating a darker shade (lower lightness) with a dominant red component and some yellow.</p></li>
</ul>
<p>The notation in CIELab is quite distinct from RGB. While RGB specifies the intensity of red, green, and blue light to create colors (like RGB(255, 0, 0) for bright red), CIELab describes colors in terms of lightness and color-opponent dimensions, which align more closely with the human perception of colors.</p>
<p>This perceptual uniformity – where a given numerical change corresponds to a roughly equal perceptual change in color – is a key feature of CIELab. It ensures that when colors are altered or compared in this space, the perceived differences are consistent across the color spectrum.</p>
<p>CIELab’s broad gamut and perceptual uniformity make it a preferred choice in industries where accurate color differentiation and measurement are critical, like paint manufacturing, textile production, and quality control in various product design processes. It’s also commonly used in digital imaging and photography for color correction and editing, as it offers more intuitive control over color adjustments than RGB.</p>
<p>A classic example of colors that can be represented in CIELab but are often outside the gamut of many RGB devices are certain highly saturated cyans and blues. For instance, a very bright, saturated cyan might be represented in CIELab as something like (L=90, a=-40, b=-15). This color would be extremely vivid and might not be accurately displayed on a standard RGB monitor, which would struggle to reproduce its intensity and saturation. Similarly, some extremely bright and saturated yellows and greens can also fall outside the typical RGB gamut. These colors are so vivid that they can only be seen under intense lighting conditions, such as direct sunlight, and cannot be fully replicated on standard digital displays.</p>
</section>
<section id="cielch" class="level3">
<h3 class="anchored" data-anchor-id="cielch">CIELCh</h3>
<p>CIELCh is a color space closely related to CIELab but represented in cylindrical coordinates instead of Cartesian ones. It’s derived from the CIELab color space and is designed to represent color in a way that’s more intuitive and aligned with how humans perceive color changes.</p>
<p>In CIELCh, the components represent:</p>
<ol type="1">
<li><p>L (lightness): Just like in CIELab, ‘L’ in CIELCh represents the lightness of the color, with 0 being black and 100 being white.</p></li>
<li><p>C (chroma): This is essentially the saturation of the color. Chroma in CIELCh is derived from the a* and b* components of CIELab. It represents the vividness or intensity of the color. Higher chroma values indicate more intense, vivid colors, while lower chroma values result in duller, more washed-out colors.</p></li>
<li><p>h (hue angle): Instead of using the a* and b* Cartesian coordinates to define the hue, CIELCh uses an angle in a cylindrical space. This hue angle starts from the positive a* axis and is usually measured in degrees (0° to 360°). Different values correspond to different hues (colors), similar to positions on a traditional color wheel. For example, 0° or 360° represents red/magenta, 90° represents yellow, 180° represents green, and 270° represents blue.</p></li>
</ol>
<p>The transformation from CIELab to CIELCh is a conversion from Cartesian to cylindrical coordinates. The lightness (L) remains the same, but the a* and b* values in CIELab are converted to chroma (C) and hue (h) in CIELCh. The formulae for these conversions involve trigonometric functions where chroma (C) is calculated as the square root of (a*^2 + b*^2), and the hue angle (h) is calculated using the arctan function.</p>
<p>CIELCh is useful in various applications that require intuitive color adjustment and selection. The cylindrical representation makes it easier to understand and manipulate hue and saturation independently of lightness, which aligns more closely with how people think about and use color, especially in fields like graphic design, painting, and digital media.</p>
<p>This color space is particularly favored for tasks where color harmony and balance are important, as it allows for a straightforward manipulation of color relationships and contrasts.</p>
</section>
<section id="cieluv" class="level3">
<h3 class="anchored" data-anchor-id="cieluv">CIELUV</h3>
<p>CIELUV is a color space introduced by the International Commission on Illumination (CIE) to enable more effective color communication, especially for light emitting or reflecting surfaces. It’s part of the CIE 1976 color spaces, which also include CIELab.</p>
<p>The name CIELUV comes from the CIE L<em>u</em>v* color space. It’s designed similarly to CIELab, with ‘L’ representing lightness. However, while CIELab uses ‘a’ and ‘b’ for color-opponent dimensions, CIELUV uses ‘u*’ and ‘v*’ for chromaticity. These dimensions are based on the CIE 1960 u-v chromaticity diagram, which is a projection of the CIE XYZ color space.</p>
<p>CIELUV is particularly useful for applications like lighting design, video, and other emissive display applications where color gamut is crucial. One of its strengths lies in its ability to accurately represent highly saturated colors, a limitation in the CIELab color space.</p>
<p>In terms of technical details, the ‘L’ in CIELUV represents the perceived lightness, similar to CIELab. The ‘u*’ and ‘v*’ coordinates, however, are calculated differently, focusing on chromaticity. This difference stems from the way the two color spaces project the XYZ space into the color-opponent dimensions. In CIELUV, these projections are designed to better represent the way we perceive color in light-emitting sources.</p>
<p>When comparing CIELUV to CIELab, the key difference lies in their treatment of chromaticity and the types of applications they’re best suited for. CIELab is generally preferred for surface colors (like paint or ink), where color is a result of light reflecting off an object. In contrast, CIELUV is more suited for light-emitting sources (like displays or lights), where color is produced by light itself.</p>
<p>Both color spaces derive from the XYZ model and share the lightness dimension (L*). However, their approach to chromaticity makes them suitable for different applications and types of color processing. CIELUV’s emphasis on chromaticity makes it a valuable tool in industries dealing with light sources, displays, and environments where the light’s color itself is the primary concern.</p>
</section>
<section id="lchab" class="level3">
<h3 class="anchored" data-anchor-id="lchab">LCH(ab)</h3>
<p>The LCH(ab) color space, often simply referred to as LCH, is a color model derived from the CIELab color space. It represents colors in a more intuitive way compared to the Cartesian coordinates (a* and b*) used in CIELab. The LCH color model is based on cylindrical coordinates rather than Cartesian coordinates and consists of three components:</p>
<ol type="1">
<li><p>Lightness (L): Similar to the L* in CIELab, it represents the lightness of the color, where 0 is black, 100 is white, and values in between represent various shades of gray.</p></li>
<li><p>Chroma (C): Chroma in LCH is analogous to saturation in other color models. It represents the intensity or purity of the color. Higher chroma values indicate more vibrant colors, while lower values result in more muted tones.</p></li>
<li><p>Hue (H): Hue is represented as an angle (in degrees) around a color wheel. It defines the type of color (such as red, blue, green, yellow, etc.). In LCH, hue starts at 0 degrees for red and moves through the spectrum, with green at 120 degrees, blue at 240 degrees, and so forth.</p></li>
</ol>
<p>The LCH color space is particularly useful in applications where understanding and manipulating the color relationships and harmonies are important. It’s often used in graphic design, painting, and digital media for this reason. By separating the color components in this way, LCH allows designers to adjust hue and chroma independently of lightness, which can be more intuitive than working with the a* and b* coordinates in CIELab.</p>
<p>In essence, LCH(ab) offers a perceptually-based approach to color representation, aligning closely with how humans perceive and interpret color differences, making it a valuable tool in color-sensitive work.</p>
</section>
</section>
<section id="color-space-as-a-mathematical-space-subset" class="level2">
<h2 class="anchored" data-anchor-id="color-space-as-a-mathematical-space-subset">Color Space as a Mathematical Space Subset</h2>
<p>The concept of whether color spaces are subsets of integer or real mathematical spaces can be understood in terms of how they represent color values and the precision with which they operate.</p>
<ol type="1">
<li><p>RGB: RGB, commonly used in digital displays and imaging, typically uses integer values in practical applications, especially in 8-bit per channel systems where each color (Red, Green, Blue) is represented by an integer from 0 to 255. However, in more precise applications, such as high dynamic range (HDR) imaging or in professional color grading, RGB values can be represented in a floating-point format (real numbers), allowing for a finer gradation and a wider range of color intensities.</p></li>
<li><p>CIELab and CIELuv: Both CIELab and CIELuv are part of the CIE 1976 color space. They are generally considered to be subsets of the real number space. The L*, a*, b* (CIELab) and L*, u*, v* (CIELuv) coordinates are typically represented as real numbers to allow for a high degree of precision, which is crucial in color matching and colorimetric applications. This representation aligns with their design as perceptually uniform spaces, where small changes in values correspond to consistent perceptual differences in color.</p></li>
<li><p>HEX: The HEX color notation, used predominantly in web design, is based on integer values. It is essentially a hexadecimal representation of RGB values, where each color channel is represented by two hexadecimal digits, corresponding to an integer value between 0 and 255.</p></li>
<li><p>CIE XYZ: The CIE XYZ color space, which serves as a foundation for many other color spaces, including CIELab and CIELuv, represents colors using real numbers. This representation allows for a high degree of precision and is important for scientific and industrial applications where accurate color measurement and reproduction are necessary.</p></li>
<li><p>YIQ, YUV, and others: Used primarily in broadcasting and video processing, these color spaces often use real numbers for greater precision, especially in professional applications. However, for standard television broadcast and consumer electronics, these values are typically quantized into integer values.</p></li>
</ol>
<p>In summary, while practical implementations of these color spaces in digital devices often use integer values for ease of processing and storage, the theoretical models of most advanced color spaces, especially those used in colorimetry and professional applications, rely on real numbers for greater precision and a more accurate representation of color.</p>
</section>
<section id="color-spaces-conversion-libraries" class="level2">
<h2 class="anchored" data-anchor-id="color-spaces-conversion-libraries">Color Spaces Conversion Libraries</h2>
<section id="python-colormath" class="level3">
<h3 class="anchored" data-anchor-id="python-colormath">python-colormath</h3>
<p><a href="https://python-colormath.readthedocs.io/en/latest/" title="python-colormath">python-colormath</a> is a simple Python module that spares the user from directly dealing with color math. Some features include:</p>
<ul>
<li><p>Support for a wide range of color spaces. A good chunk of the CIE spaces, RGB, HSL/HSV, CMY/CMYK, and many more.</p></li>
<li><p>Conversions between the various color spaces. For example, XYZ to sRGB, Spectral to XYZ, CIELab to Adobe RGB.</p></li>
<li><p>Calculation of color difference. All CIE Delta E functions, plus CMC.</p></li>
<li><p>Chromatic adaptations (changing illuminants).</p></li>
<li><p>RGB to hex and vice-versa.</p></li>
<li><p>16-bit RGB support.</p></li>
<li><p>Runs on Python 2.7 and Python 3.3+.</p></li>
</ul>
<p>To convert a color from sRGB to CIELab using the Python <code>colormath</code> library, you first need to ensure that <code>colormath</code> is installed in your Python environment. You can install it using pip:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install colormath</span></code></pre></div>
<p>Once <code>colormath</code> is installed, you can use it to perform the conversion. Here’s a simple example:</p>
<div class="sourceCode" id="annotated-cell-2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> colormath.color_objects <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sRGBColor, LabColor, XYZColor, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="annotated-cell-2-2">                                    LCHabColor, LCHuvColor, HSVColor, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="annotated-cell-2-3">                                    CMYColor, CMYKColor</span>
<span id="annotated-cell-2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> colormath.color_conversions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> convert_color</span>
<span id="annotated-cell-2-5"></span>
<span id="annotated-cell-2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define an sRGB color (is_upscaled=True if you're using 0-255 range)</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-2-7" class="code-annotation-target">rgb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sRGBColor(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">128.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">128.</span>, is_upscaled<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="annotated-cell-2-8"></span>
<span id="annotated-cell-2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the sRGB color to other color spaces</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-2-10" class="code-annotation-target">lab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> convert_color(rgb, LabColor)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CIELab</span></span>
<span id="annotated-cell-2-11">xyz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> convert_color(rgb, XYZColor)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># XYZ </span></span>
<span id="annotated-cell-2-12">lch_ab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> convert_color(rgb, LCHabColor) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LCH(ab)</span></span>
<span id="annotated-cell-2-13">lch_uv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> convert_color(rgb, LCHuvColor) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LCH(uv)</span></span>
<span id="annotated-cell-2-14">hsv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> convert_color(rgb, HSVColor)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># HSV</span></span>
<span id="annotated-cell-2-15">cmy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> convert_color(rgb, CMYColor)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CMY</span></span>
<span id="annotated-cell-2-16">cmyk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> convert_color(rgb, CMYKColor)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CMYK</span></span>
<span id="annotated-cell-2-17"></span>
<span id="annotated-cell-2-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the colors in different color spaces  </span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-2-19" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CIELab: "</span>, lab)</span>
<span id="annotated-cell-2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CIELab:  LabColor (lab_l:29.7843 lab_a:58.9285 lab_b:-36.4932) </span></span>
<span id="annotated-cell-2-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XYZ: "</span>, xyz)         </span>
<span id="annotated-cell-2-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># XYZ:  XYZColor (xyz_x:0.1280 xyz_y:0.0615 xyz_z:0.2093)</span></span>
<span id="annotated-cell-2-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LCH(ab): "</span>, lch_ab)  </span>
<span id="annotated-cell-2-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LCH(ab):  LCHabColor (lch_l:29.7843 lch_c:69.3132 lch_h:328.2310)</span></span>
<span id="annotated-cell-2-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LCH(uv): "</span>, lch_uv)  </span>
<span id="annotated-cell-2-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LCH(uv):  LCHuvColor (lch_l:29.7843 lch_c:67.8446 lch_h:307.7154)</span></span>
<span id="annotated-cell-2-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HSV: "</span>, hsv)         </span>
<span id="annotated-cell-2-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># HSV:  HSVColor (hsv_h:300.0000 hsv_s:1.0000 hsv_v:0.5020)</span></span>
<span id="annotated-cell-2-29"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CMY: "</span>, cmy)         </span>
<span id="annotated-cell-2-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CMY:  CMYColor (cmy_c:0.4980 cmy_m:1.0000 cmy_y:0.4980)</span></span>
<span id="annotated-cell-2-31"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CMYK: "</span>, cmyk)       </span>
<span id="annotated-cell-2-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CMYK:  CMYKColor (cmyk_c:0.0000 cmyk_m:1.0000 cmyk_y:0.0000 cmyk_k:0.4980)</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-2" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="7" data-code-annotation="1">An sRGB color is defined with the red, green, and blue components. If you’re using values in the 0-255 range, set <code>is_upscaled=True</code> so that <code>colormath</code> knows to scale them down to 0-1.</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="10" data-code-annotation="2">The <code>convert_color</code> function is used to convert the defined sRGB color to the CIELab color space.</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="19" data-code-annotation="3">Finally, the resulting CIELab color is printed out. Other conversions follow.</span>
</dd>
</dl>
<p>The output will be the CIELab representation of the given sRGB color. Keep in mind that <code>colormath</code> handles these conversions assuming standard conditions and may not account for specific display or lighting characteristics unless explicitly specified.</p>
</section>
<section id="other-libraries" class="level3">
<h3 class="anchored" data-anchor-id="other-libraries">Other Libraries</h3>
<p>There are several other libraries in Python and other programming languages that can be used to convert between color spaces. Here are a few notable ones:</p>
<ol type="1">
<li><p>OpenCV (Python, C++, Java): Primarily known for its extensive functionalities in computer vision, OpenCV also offers color space conversion functions. It can handle conversions between various color spaces, including RGB, HSV, CIELab, and more.</p></li>
<li><p>Pillow (Python): The Pillow library, which is an extension of the Python Imaging Library (PIL), includes functions for converting images between different color spaces.</p></li>
<li><p>Color.js (JavaScript): A JavaScript library for color conversion and manipulation, it supports a wide range of color spaces and is particularly useful for web development.</p></li>
<li><p>D3.js (JavaScript): While primarily a library for producing interactive data visualizations, D3.js also includes methods for color space conversion, useful in the context of web design and visualizations.</p></li>
<li><p>Tinycolor (JavaScript): A small, fast library for color manipulation and conversion in JavaScript. It supports RGB, HSV, HSL, and HEX formats.</p></li>
<li><p>Colorspacious (Python): A Python library designed to convert and manipulate various color spaces with a focus on perceptual uniformity and color difference calculations.</p></li>
<li><p>Matplotlib (Python): Although mainly a plotting library, Matplotlib in Python can convert colors between RGB and other color spaces as part of its plotting functionalities.</p></li>
</ol>
<p>Each of these libraries has its own set of features and strengths, and the choice of library can depend on the specific requirements of your project, such as the programming language you’re using, the color spaces you need to work with, and the level of precision or control you need over the color conversion process.</p>
</section>
</section>
<section id="python-script-for-cielab-color-sampling-and-conversion" class="level2">
<h2 class="anchored" data-anchor-id="python-script-for-cielab-color-sampling-and-conversion">Python Script for CIELab Color Sampling and Conversion</h2>
<p>The Python script is designed to uniformly sample the CIELab color space and convert these samples to RGB. It also finds the nearest CIELab color to a given target color, either in CIELab or RGB space, and saves comparison charts. The script contains several key functions:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">generate_uniform_lab_samples(n_samples)</span></code></pre></div>
<p>This function generates uniformly distributed samples in the CIELab color space. It calculates the number of points per dimension based on the cubic root of the total number of desired samples, creating a grid of points in the CIELab space. If more points are generated than needed, it randomly samples from these points to get the desired number.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">lab_to_rgb(lab_arr)</span></code></pre></div>
<p>This function converts a batch of CIELab values to RGB and marks any colors that are approximated due to out-of-gamut issues. It uses the <code>skimage</code> library for the CIELab to RGB conversion and checks for any warnings during the conversion process, specifically looking for “negative Z values” which indicate an approximation.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">rgb_to_lab(rgb)</span></code></pre></div>
<p>This function converts an RGB color to the CIELab color space. It normalizes the RGB values (assuming they are in the 0-255 range) and uses the <code>colormath</code> library to perform the conversion.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">create_color_chart_with_spacing(lab_samples, rgb_samples, approx_flags, square_size_cm, spacing_cm, label_font_size, text_spacing_cm, save_path)</span></code></pre></div>
<p>This function creates a square image containing color squares with spacing between them. Each square represents a color sample. It calculates the total image size considering the spacing and text space and then uses <code>matplotlib</code> to create and save the image.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">find_nearest_color_lab(target_lab, generated_lab_samples)</span></code></pre></div>
<p>This function finds the nearest CIELab color to a given target color among generated samples using Delta E. It compares the target color with each generated sample using the <code>delta_e_cie2000</code> function from the <code>colormath</code> library.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">save_comparison_chart(target_lab, nearest_lab, square_size, spacing, save_path)</span></code></pre></div>
<p>This function saves an image with two squares: one for the target color and one for the nearest CIELab color. It draws the squares and saves the image using <code>matplotlib</code>.</p>
<p>The script also includes a section at the end for generating samples, converting them, and saving comparison charts.</p>
<p>This code is a comprehensive tool for exploring and visualizing the CIELab color space, its conversion to RGB, and the assessment of color proximity within this space.</p>
<p>Download the <a href="https://github.com/antomon/antomon.github.io/blob/b6d9822757db56d5906f1b3f8e6bb6e3040e7c3a/_static/posts/colors-101/cielab_sampler.ipynb">Jupyter notebook</a> or open it in Colab (click on the badge below) to sample the CIELab space and get the nearest sample of a given color.</p>
<p><a href="https://colab.research.google.com/github/antomon/antomon.github.io/blob/b6d9822757db56d5906f1b3f8e6bb6e3040e7c3a/_static/posts/colors-101/cielab_sampler.ipynb"><img src="https://colab.research.google.com/assets/colab-badge.svg" class="img-fluid" alt="Open In Colab"></a></p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p><a href="https://cie.co.at/" title="CIE website">CIE website</a>: International Commission on Illumination official website</p>
<p><a href="http://www.brucelindbloom.com/" title="Bruce Justin Lindbloom's website">Bruce Justin Lindbloom’s website</a>: useful for color spaces conversion formulas</p>
<p><a href="https://johnthemathguy.blogspot.com/" title="John the Math Guy's website">John the Math Guy’s website</a>: outstanding resource for color theory</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Python</category>
  <category>theory</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/color-space-sampling-101/</guid>
  <pubDate>Fri, 26 Jan 2024 23:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/color-space-sampling-101/colors101.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Python: Bridging the Gap Between Human Thought and Machine Code</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/python-as-interface/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In the rapidly evolving landscape of computer programming, the choice of programming language significantly influences the efficiency, readability, and maintainability of software projects. Among the myriad of programming languages available, Python has emerged as a dominant force, celebrated for its simplicity, readability, and versatility. This essay posits that Python functions as an “interface language” between human cognitive processes and machine execution, thus acting as an effective medium that bridges the interaction between humans and machines.</p>
<p>The concept of an “interface language” implies that a programming language serves as a medium that not only translates human intent into machine-readable code but also abstracts the complexities of lower-level programming. Python excels in these aspects through its design philosophy, high-level abstractions, and ability to serve as a wrapper for other languages, allowing developers to leverage the substantial effort invested in building state-of-the-art software.</p>
</section>
<section id="abstraction-and-human-machine-interaction" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="abstraction-and-human-machine-interaction">Abstraction and human-machine interaction</h2>
<section id="simplified-syntax-and-readability" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="simplified-syntax-and-readability">Simplified syntax and readability</h3>
<p>Python’s simplified syntax and emphasis on readability make it a more human-friendly interface compared to languages like C++ or Fortran. This quality is crucial for developers aiming to solve complex problems without being bogged down by cumbersome boilerplate code or language-specific intricacies.</p>
<p>The fundamental constructs of Python, such as conditions, loops, and sequences of actions, are rooted in control flow theory, which dictates the order in which instructions are executed. These constructs are based on structured programming principles, a paradigm introduced in the late 1960s by computer scientists like Edsger Dijkstra <sup>1</sup>. Structured programming advocates the use of simple, understandable flow constructs, including sequence, selection (conditions), and iteration (loops), which enhance program clarity and reliability <sup>2</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;Dijkstra, E. W. (1968). Go To Statement Considered Harmful. <em>Communications of the ACM</em>, 11(3), 147-148. <a href="https://doi.org/10.1145/362929.362947">DOI</a></p></div><div id="fn2"><p><sup>2</sup>&nbsp;Hoare, C. A. R. (1972). Notes on Data Structuring. In <em>Structured Programming</em>, edited by O.-J. Dahl, E. W. Dijkstra, and C. A. R. Hoare. Academic Press.</p></div></div><p>In imperative programming languages like Python, control flow constructs explicitly direct the computer on how to perform tasks step-by-step, akin to giving a series of commands. This imperative nature closely mirrors how humans solve problems logically: by breaking them down into discrete steps. These basic constructs are fundamental because they allow programmers to express problem-solving processes in a structured manner, directly communicating the flow of operations to the machine.</p>
<p>Consider the following example, where Python is used to read and process a CSV file:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> csv</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data.csv'</span>, newline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> csvfile:</span>
<span id="cb1-4">  reader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.DictReader(csvfile)</span>
<span id="cb1-5"></span>
<span id="cb1-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> reader:</span>
<span id="cb1-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>], row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>])</span></code></pre></div>
<p>This code reads data from a CSV file and prints the ‘Name’ and ‘Age’ columns for each row, demonstrating Python’s straightforward syntax and built-in support for common file operations. The syntax is designed to be as intuitive as possible, minimizing the mental overhead required to understand and maintain code.</p>
</section>
<section id="comparison-with-human-language" class="level3">
<h3 class="anchored" data-anchor-id="comparison-with-human-language">Comparison with human language</h3>
<p>Here, the comparison is with general characteristics of human languages. We specifically use English because it was the choice of Guido van Rossum, who invented Python.</p>
<section id="parallels-between-python-and-english-grammar" class="level4">
<h4 class="anchored" data-anchor-id="parallels-between-python-and-english-grammar">Parallels between Python and English grammar</h4>
<p>A formal comparison between English grammar and Python syntax reveals several interesting parallels. In English, conditional statements often take the form of <em>If [condition], then [action], otherwise [alternative action].</em> Python follows a similar structure with its <code>if-else</code> statements. For instance, in English, we might say: <em>If it is raining, take an umbrella; otherwise, wear sunglasses.</em> In Python, this directly translates into code:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_raining:</span>
<span id="cb2-2">  take_umbrella()</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-5">  wear_sunglasses()</span></code></pre></div>
<p>The grammatical structure of English sentences involving conditions, loops, or sequences of actions aligns closely with Python’s keywords and syntax. Just as English uses conjunctions like <em>and</em> and <em>or</em> to combine clauses, Python uses the same words (<code>and</code>, <code>or</code>) to combine logical expressions. Similarly, loops in English and Python demonstrate close parallels. In English, we might say: <em>For each item in the basket, check if it is ripe.</em> In Python, this would be represented with a <code>for</code> loop:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> basket:</span>
<span id="cb3-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> item.is_ripe():</span>
<span id="cb3-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ripe item found"</span>)</span></code></pre></div>
<p>Python also uses <code>while</code> loops to express repeated actions until a condition is met, akin to statements like “While it is raining, stay inside.” In Python, this would translate to:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> is_raining:</span>
<span id="cb4-2">  stay_inside()</span></code></pre></div>
<p>These constructs allow for a direct mapping between natural language instructions and programming logic, making Python code intuitive and easier to understand.</p>
<p>In English, imperative sentences are used to issue commands, such as <em>Print the report.</em> Python similarly uses function calls to issue commands to the computer, such as <code>print("Report")</code>. This similarity makes Python code feel more intuitive, particularly to beginners, as it mirrors the structure of natural human language.</p>
</section>
<section id="hierarchical-structures-in-python-and-english-grammar" class="level4">
<h4 class="anchored" data-anchor-id="hierarchical-structures-in-python-and-english-grammar">Hierarchical structures in Python and English grammar</h4>
<p>The syntactic model of Python can be compared to the hierarchical structures of English grammar, particularly through the concepts of hypotaxis and parataxis. In Python, the hierarchy begins with instructions, which are analogous to sentences in English. Instructions in Python contain expressions, which can be compared to clauses that convey additional meaning within a sentence. At the lowest level, tokens in Python serve as the building blocks of expressions, much like phrases or individual words contribute to the structure of a clause.</p>
<p>Hypotaxis in English refers to the use of subordinate clauses, where one part of a sentence depends on another, creating a layered, hierarchical relationship. This kind of hierarchy is reflected in Python through its use of nested code blocks, such as functions within functions, conditionals within loops, and other nested constructs. These nested relationships in Python are akin to hypotactic structures in English, where different parts of the code depend on one another, creating complexity. For example:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> condition:</span>
<span id="cb5-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> items:</span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb5-4">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(item)</span></code></pre></div>
<p>In this example, the <code>for</code> loop and the <code>if</code> statement are subordinate to the outer <code>if</code> statement, much like dependent clauses add depth to a sentence in English.</p>
<p>In contrast, parataxis involves placing clauses side by side without subordination, often connected by conjunctions like ‘and’ or ‘but.’ In Python, this is represented by sequential code statements at the same indentation level, executed one after another without hierarchical dependency. For example:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Start processing"</span>)</span>
<span id="cb6-2"></span>
<span id="cb6-3">process_data()</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Processing complete"</span>)</span></code></pre></div>
<p>Here, each statement is independent, akin to paratactic clauses in English, allowing for a straightforward, linear flow of execution. This comparison highlights how Python’s syntactic model mirrors natural language constructs, making it easier for programmers to follow the logic of the code, just as readers follow the flow of a well-written sentence. The hierarchical relationship between instructions, expressions, and tokens in Python maps effectively to sentences, clauses, and phrases in English, offering a natural and intuitive way to structure both code and thought processes.</p>
</section>
</section>
<section id="readability-beyond-syntax-the-pythonic-way" class="level3">
<h3 class="anchored" data-anchor-id="readability-beyond-syntax-the-pythonic-way">Readability beyond syntax: the Pythonic way</h3>
<p>Another complementary aspect of Python’s design philosophy is the “Pythonic” way of writing code. This concept refers to a set of idiomatic practices that maintain a high level of readability and embody key design principles in the code itself. The notion of being Pythonic emphasizes simplicity, clarity, and conciseness—traits that align well with the language’s guiding principle that “Readability counts,” as stated in The Zen of Python by Tim Peters. Formal syntax and semantics alone do not ensure that these design principles translate into readable and clean code; the Pythonic way is needed to bridge this gap.</p>
<p>Writing Pythonic code means leveraging Python’s constructs in an elegant and efficient manner. For example, using list comprehensions instead of loops to create lists or using context managers (e.g., <code>with</code> statements) to handle resources like files results in cleaner and more maintainable code. Pythonic code often reads like a natural language description of the problem being solved, making it accessible to a broad range of developers, from beginners to experienced programmers.</p>
<p>Consider the following example, which demonstrates a Pythonic way to filter even numbers from a list:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">numbers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span>
<span id="cb7-2"></span>
<span id="cb7-3">even_numbers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [num <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> numbers <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<p>This approach is preferred over a traditional loop-based solution because it is more concise and easier to understand at a glance. The Pythonic way of writing code ensures that codebases remain readable, maintainable, and aligned with Python’s core philosophy, making the language not only powerful but also enjoyable to use.</p>
</section>
</section>
<section id="python-as-a-wrapper-for-lower-level-languages" class="level2">
<h2 class="anchored" data-anchor-id="python-as-a-wrapper-for-lower-level-languages">Python as a wrapper for lower-level languages</h2>
<p>In the preceding chapter, we saw that Python’s syntax, semantics, and best practices make it one of the easiest interfaces between humans and machines. This ease of use positions Python as an ideal language for both novice and expert developers, bridging the gap between conceptual understanding and effective software implementation.</p>
<p>Python’s strength as an “interface language” is also epitomized by its capacity to seamlessly wrap and integrate more complex programming languages such as C, C++, and Fortran. This functionality allows developers to employ Python as a high-level interface while leveraging the computational efficiency and fine-grained control of lower-level languages, thereby facilitating the integration of mature and highly optimized libraries without requiring direct manipulation of their intricacies. Python effectively abstracts the low-level complexity of these languages, making powerful tools and optimizations available to a broader audience of developers, including those who may not have extensive experience with system-level programming.</p>
<p>For instance, the <code>NumPy</code> library is largely implemented in C but exposes a Pythonic interface that allows users to perform advanced numerical computations without needing to write a single line of C code. This exemplifies Python’s role in making complex, highly optimized routines accessible through an easy-to-use API. Python serves as an intuitive wrapper, abstracting the complexities of optimized C code and enabling developers to concentrate on the algorithmic and structural aspects of their applications, rather than managing low-level details such as memory allocation and pointer arithmetic. This is particularly important in domains like data science, machine learning, and numerical analysis, where the focus is often on rapid prototyping and experimentation rather than dealing with intricate implementation details. The ability to interface with C/C++ allows developers to harness computational power while enjoying Python’s readability and conciseness, thereby achieving a balance between performance and development efficiency.</p>
<p>Furthermore, the ability to wrap lower-level languages allows Python to serve as an entry point for using sophisticated libraries that were previously accessible only to specialized developers. This accessibility has accelerated innovation across many industries, enabling researchers, scientists, and developers to leverage high-performance codebases without the need for extensive retraining. The availability of optimized, pre-existing code wrapped in Python lowers development costs, minimizes implementation time, and fosters collaboration across fields that historically relied on different programming paradigms.</p>
<section id="extending-cc-with-python" class="level3">
<h3 class="anchored" data-anchor-id="extending-cc-with-python">Extending C/C++ with Python</h3>
<p>Python’s versatility is further demonstrated in its role as an extension mechanism for existing applications written in C or C++. By employing Python, developers can bridge performance-critical components with more flexible, higher-level program logic. Computationally intensive modules can be implemented in C or C++, while Python orchestrates the broader application. This modular approach allows developers to leverage the best aspects of both worlds: the raw performance of C/C++ and the flexibility and ease of Python.</p>
<p>Libraries such as <code>ctypes</code>, <code>cffi</code>, or tools like <code>SWIG</code> facilitate the seamless integration of C functions, enabling efficient interoperability and reducing development complexity by automatically generating bindings where needed. <code>ctypes</code> provides a straightforward mechanism for calling functions in shared libraries, allowing Python programs to invoke compiled C code directly. Meanwhile, <code>cffi</code> offers a more sophisticated interface, enabling developers to interface with C code in a way that is both more idiomatic and safer, ensuring type correctness and reducing potential runtime errors.</p>
<p><code>SWIG</code> (Simplified Wrapper and Interface Generator) is another invaluable tool in this ecosystem, particularly when working with large and complex C/C++ codebases. It automates the generation of wrapper code, enabling Python to interact with existing C/C++ libraries with minimal manual intervention. This kind of automation is crucial in large projects, where writing bindings by hand would be prohibitively time-consuming and error-prone. The ability to combine Python with C/C++ allows for a highly adaptable workflow, where developers can optimize critical sections of their codebase without sacrificing overall productivity and maintainability.</p>
<p>This extensibility has led to widespread adoption of Python in fields such as robotics, embedded systems, and real-time computing, where high performance is often a requirement but the ease of development and rapid prototyping are also highly valued. By enabling a hybrid development model, Python empowers developers to build systems that are both powerful and flexible, with critical performance-sensitive components written in C/C++ while the overall application logic and orchestration are handled by Python. This approach not only streamlines development but also ensures that the end product is optimized for performance without compromising on maintainability.</p>
</section>
<section id="extending-fortran-with-python" class="level3">
<h3 class="anchored" data-anchor-id="extending-fortran-with-python">Extending Fortran with Python</h3>
<p>Python also extends the reach of Fortran, a language renowned for its numerical performance, by using <code>f2py</code>, a utility within the <code>NumPy</code> ecosystem. Through <code>f2py</code>, developers can integrate high-performance Fortran routines into Python applications with minimal effort. This capability allows the combination of Fortran’s computational efficiency with Python’s readability and ease of use, creating a powerful paradigm for applications that demand both speed and maintainability.</p>
<p>Fortran has historically been the language of choice for numerical computing due to its highly optimized compilers and efficient handling of mathematical operations. By utilizing <code>f2py</code>, Python developers can invoke these well-established routines without needing to rewrite algorithms in Python or C, preserving the computational efficiency that Fortran offers. This is particularly beneficial in scientific research and high-performance computing, where existing Fortran codebases may contain decades of domain-specific optimizations that are impractical to replicate. Python, through <code>f2py</code>, effectively breathes new life into these legacy systems, allowing modern developers to build on the foundational work of earlier generations.</p>
<p>Additionally, the integration between Fortran and Python is not just about performance—it is also about accessibility. By providing a high-level interface to Fortran code, Python makes these sophisticated numerical methods accessible to researchers and scientists who may not be well-versed in Fortran but are comfortable with Python. This democratizes the use of powerful numerical tools, enabling a wider range of practitioners to leverage high-performance algorithms in their work without needing to engage with the underlying complexities of Fortran code. This synergy between Python and Fortran enhances productivity in research environments, where rapid experimentation and iteration are crucial.</p>
<p>Moreover, the combination of Python and Fortran has been instrumental in bridging the gap between modern software development practices and traditional scientific programming. Many legacy Fortran applications, which remain critical to disciplines like fluid dynamics, astrophysics, and climate modeling, can now be integrated with modern data analysis workflows in Python. Notable Fortran libraries such as LAPACK, BLAS, and ARPACK are extensively used by widespread Python libraries like <code>SciPy</code> and <code>NumPy</code>. These Fortran libraries provide highly optimized routines for linear algebra, eigenvalue problems, and other numerical computations, which are crucial for scientific research. This hybrid approach helps preserve the value of decades of Fortran development while augmenting it with Python’s extensive ecosystem for visualization, data manipulation, and machine learning. By extending Fortran’s reach, Python allows these fields to evolve without sacrificing their foundational computational tools.</p>
</section>
<section id="other-bindings" class="level3">
<h3 class="anchored" data-anchor-id="other-bindings">Other bindings</h3>
<p>Python supports a variety of other important bindings, which further demonstrate its flexibility and widespread applicability in different computing environments.</p>
<p>One such notable binding is with Java via <code>JPype</code> and <code>Jython</code>. <code>JPype</code> allows Python to call Java code directly and even use Java objects as if they were native Python objects. This interoperability is particularly useful in environments where Java is already prevalent, such as enterprise software ecosystems. <code>Jython</code>, on the other hand, is an implementation of Python in Java, allowing Python code to run on the Java Virtual Machine (JVM) and seamlessly integrate with Java libraries.</p>
<p>Another important binding is with Erlang through the <code>Pyrlang</code> library, which allows Python to interact with the Erlang virtual machine. This capability is particularly valuable in building distributed, concurrent systems, where Erlang’s strengths are utilized alongside Python’s ease of use.</p>
<p>Python also has strong bindings with Julia, especially through the <code>PyJulia</code> package. Julia, known for its speed in numerical computations, can be integrated with Python, allowing developers to take advantage of Julia’s performance while using Python’s extensive libraries for data analysis, visualization, and more. This integration makes it possible to combine the best features of both languages in scientific computing applications.</p>
<p>Another widely used binding is with Go, facilitated by <code>gopy</code>. This allows Python to call Go functions and benefit from Go’s capabilities in building fast, concurrent programs, while still leveraging Python’s higher-level abstractions and extensive package ecosystem.</p>
<p>Similarly, Python’s interoperability with Lisp is facilitated by libraries like <code>CLPython</code>, which allows Lisp programs to call Python functions and vice versa. These bindings make Python a universal tool for integrating technologies, bridging ecosystems, and creating highly versatile software solutions.</p>
</section>
<section id="python-as-a-glue-language" class="level3">
<h3 class="anchored" data-anchor-id="python-as-a-glue-language">Python as a glue language</h3>
<p>Python’s characterization as a “glue language” aptly captures its proficiency in binding disparate systems and libraries, often implemented in different programming languages. This attribute makes Python particularly valuable in domains such as scientific computing and data analysis, where the need to integrate legacy codebases—often written in Fortran or C—is prevalent. The ability to unify different software components, regardless of their underlying implementation languages, is a cornerstone of Python’s versatility and is a major reason for its widespread adoption in multidisciplinary fields.</p>
<p>The <code>SciPy</code> ecosystem serves as a quintessential example of Python’s role as a glue language; many of its foundational components are underpinned by Fortran libraries that are exposed to users via Python interfaces. This integration allows researchers and engineers to capitalize on the numerical efficiency of Fortran while interacting with these components through Python’s expressive and flexible syntax. In these contexts, Python functions as an intermediary, bridging the gap between highly optimized, domain-specific routines and user-friendly, accessible code, thereby positioning itself as an indispensable tool for developing sophisticated, high-performance applications.</p>
<p>Furthermore, Python’s role as a glue language extends beyond simply interfacing with compiled code. It is also instrumental in orchestrating complex workflows that involve multiple tools and systems. In data science, for example, Python is often used to preprocess data, call optimized C/C++ or Fortran routines for heavy computation, and then visualize the results using libraries like <code>matplotlib</code>. This orchestration capability allows Python to serve as the connective tissue of a larger computational pipeline, integrating diverse tools into a cohesive workflow.</p>
<p>In modern software architectures, Python’s ability to serve as a glue language is also evident in its use within microservices and distributed systems. Python’s extensive standard library and the availability of numerous third-party packages make it an ideal choice for writing service interfaces, APIs, and automation scripts that interact with different parts of a distributed system. By using Python to bind together different components—whether they are services, databases, or computational modules—developers can create systems that are both modular and scalable.</p>
<p>Python’s glue capabilities are further enhanced by its compatibility with other high-level tools and platforms. For example, Python can interact seamlessly with Java through libraries like <code>Py4J</code>, enabling the integration of Python scripts within Java applications. This is particularly valuable in enterprise environments, where Java often serves as the backbone of large-scale applications, while Python is used for data analysis, machine learning, and scripting tasks. By bridging these two ecosystems, Python facilitates a hybrid development model that leverages the strengths of both languages.</p>
<p>Moreover, Python’s role as a glue language is not limited to computational libraries and services but also extends to integrating emerging technologies and paradigms. In artificial intelligence and machine learning, for example, Python is the language of choice for prototyping models that leverage specialized hardware like GPUs and TPUs. Python frameworks like <code>TensorFlow</code> and <code>PyTorch</code> provide bindings to optimized C++ backends, enabling efficient execution while allowing developers to iterate quickly. Python’s flexibility and ease of integration make it possible to interface with both established software systems and cutting-edge hardware accelerators, thereby bridging traditional computing with next-generation technologies.</p>
</section>
</section>
<section id="understanding-python-through-an-epistemic-lens" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="understanding-python-through-an-epistemic-lens">Understanding Python through an epistemic lens</h2>
<p>An epistemic level of interpretation refers to the way knowledge is represented, acquired, and processed within a system<sup>3</sup> <sup>4</sup>. In the context of programming languages, it involves examining how a language enables programmers to model, manipulate, and reason about information and concepts. Applying this to Python, we can define an epistemic level of interpretation by exploring how Python’s features facilitate the expression of knowledge and support human cognitive processes in problem-solving<sup>5</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;Goldman, A. I. (1979). <em>Theory of Human Knowledge</em>. Routledge &amp; Kegan Paul.</p></div><div id="fn4"><p><sup>4</sup>&nbsp;Nonaka, I. (1994). A Dynamic Theory of Organizational Knowledge Creation. <em>Organization Science</em>, 5(1), 14-37. <a href="https://doi.org/10.1287/orsc.5.1.14">DOI</a></p></div><div id="fn5"><p><sup>5</sup>&nbsp;Bunge, M. (1974). <em>Treatise on Basic Philosophy: Volume 1: Semantics I: Sense and Reference</em>. D. Reidel Publishing Company. <a href="https://doi.org/10.1007/978-94-010-9920-2">DOI</a></p></div><div id="fn6"><p><sup>6</sup>&nbsp;Lakoff, G., &amp; Johnson, M. (1999). <em>Philosophy In The Flesh: The Embodied Mind and Its Challenge to Western Thought</em>. Basic Books.</p></div><div id="fn7"><p><sup>7</sup>&nbsp;Hutchins, E. (1995). <em>Cognition in the Wild</em>. MIT Press.</p></div></div><p>Python’s design aligns closely with human ways of thinking, making it an effective tool for representing knowledge structures and reasoning processes. This alignment can be understood through cognitive theories such as embodied cognition, which suggests that cognitive processes are deeply rooted in the body’s interactions with the world<sup>6</sup>, and distributed cognition, which emphasizes that cognitive processes extend beyond the individual to include tools and environments<sup>7</sup>. Python’s intuitive syntax and high-level abstractions allow it to effectively serve as an extension of human cognitive processes, facilitating problem-solving and reasoning. This alignment is evident in several key aspects of the language:</p>
<ol type="1">
<li><p><strong>Expressive syntax</strong>: Python’s syntax is concise and resembles natural language or mathematical notation, allowing programmers to translate their thoughts into code with minimal friction.</p></li>
<li><p><strong>Abstraction mechanisms</strong>: Python supports various abstraction mechanisms like functions, classes, and modules, enabling developers to encapsulate complex ideas and reuse code effectively.</p></li>
<li><p><strong>Dynamic typing</strong>: The dynamic type system allows for flexible manipulation of data without the need for explicit type declarations, mirroring how humans often think abstractly about data.</p></li>
<li><p><strong>First-class functions and higher-order programming</strong>: Functions in Python are first-class citizens, allowing for functional programming paradigms that facilitate a pure style of coding.</p></li>
<li><p><strong>Support for multiple programming paradigms</strong>: Python’s versatility extends to its support for multiple programming paradigms, including procedural, object-oriented, and functional programming. This flexibility allows developers to choose the paradigm that best aligns with their problem-solving approach, mirroring the adaptability of human cognition in selecting appropriate methods to tackle various challenges.</p></li>
</ol>
<section id="python-as-a-tool-for-knowledge-representation" class="level3">
<h3 class="anchored" data-anchor-id="python-as-a-tool-for-knowledge-representation">Python as a tool for knowledge representation</h3>
<p>Python’s features make it suitable for representing complex knowledge domains, such as in artificial intelligence, data science, and computational linguistics. The language allows for the creation of models that closely align with theoretical constructs, effectively providing an epistemic bridge between abstract concepts and their computational implementations. This bridge is built through Python’s intuitive syntax, extensive library support, and high-level abstractions, which enable users to translate domain-specific knowledge into executable code with minimal friction. The advantage of this bridge lies in its ability to simplify complex problem-solving processes, enhance accessibility for non-expert programmers, and reduce the cognitive load required to translate theoretical knowledge into computational solutions.</p>
<blockquote class="blockquote">
<p>An example is represented by graph structures. Graphs are fundamental structures in computer science and mathematics used to model relationships. Python’s data structures and object-oriented features make it straightforward to represent graphs, which are relevant for modeling numerous physical and logical structures, such as network topologies, social connections, dependency graphs, and biological systems. This versatility highlights Python’s effectiveness in various fields where complex relationships need to be visualized and analyzed.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Graph:</span>
<span id="cb8-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb8-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb8-4"></span>
<span id="cb8-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a vertex to the graph</span></span>
<span id="cb8-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add_vertex(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, vertex):</span>
<span id="cb8-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> vertex <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph:</span>
<span id="cb8-8">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph[vertex] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-9"></span>
<span id="cb8-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add an edge between two vertices</span></span>
<span id="cb8-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add_edge(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, vertex1, vertex2):</span>
<span id="cb8-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> vertex1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> vertex2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph:</span>
<span id="cb8-13">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph[vertex1].append(vertex2)</span>
<span id="cb8-14">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph[vertex2].append(vertex1)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming an undirected graph</span></span>
<span id="cb8-15"></span>
<span id="cb8-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if an edge exists between two vertices</span></span>
<span id="cb8-17">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> has_edge(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, vertex1, vertex2):</span>
<span id="cb8-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> vertex2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph.get(vertex1, [])</span>
<span id="cb8-19"></span>
<span id="cb8-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Depth First Search (DFS) traversal</span></span>
<span id="cb8-21">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> dfs(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, start, visited<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb8-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> visited <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb8-23">      visited <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb8-24"></span>
<span id="cb8-25">    visited.add(start)</span>
<span id="cb8-26">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(start, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span>
<span id="cb8-27"></span>
<span id="cb8-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> neighbor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph[start]:</span>
<span id="cb8-29">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> neighbor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> visited:</span>
<span id="cb8-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dfs(neighbor, visited)</span>
<span id="cb8-31"></span>
<span id="cb8-32">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Breadth First Search (BFS) traversal</span></span>
<span id="cb8-33">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> bfs(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, start):</span>
<span id="cb8-34">    visited <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb8-35">    queue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [start]</span>
<span id="cb8-36">    visited.add(start)</span>
<span id="cb8-37"></span>
<span id="cb8-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> queue:</span>
<span id="cb8-39">      vertex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> queue.pop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-40">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(vertex, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span>
<span id="cb8-41"></span>
<span id="cb8-42">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> neighbor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph[vertex]:</span>
<span id="cb8-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> neighbor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> visited:</span>
<span id="cb8-44">          queue.append(neighbor)</span>
<span id="cb8-45">          visited.add(neighbor)</span>
<span id="cb8-46"></span>
<span id="cb8-47">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find all connected components</span></span>
<span id="cb8-48">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> connected_components(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb8-49">    visited <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb8-50">    components <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-51"></span>
<span id="cb8-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vertex <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph:</span>
<span id="cb8-53">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> vertex <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> visited:</span>
<span id="cb8-54">        component <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-55">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._dfs_component(vertex, visited, component)</span>
<span id="cb8-56">        components.append(component)</span>
<span id="cb8-57"></span>
<span id="cb8-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> components</span>
<span id="cb8-59"></span>
<span id="cb8-60">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Helper function for DFS within a component</span></span>
<span id="cb8-61">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _dfs_component(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, vertex, visited, component):</span>
<span id="cb8-62">    visited.add(vertex)</span>
<span id="cb8-63">    component.append(vertex)</span>
<span id="cb8-64"></span>
<span id="cb8-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> neighbor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph[vertex]:</span>
<span id="cb8-66">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> neighbor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> visited:</span>
<span id="cb8-67">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._dfs_component(neighbor, visited, component)</span>
<span id="cb8-68"></span>
<span id="cb8-69">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the graph</span></span>
<span id="cb8-70">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> display_graph(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb8-71">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vertex <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph:</span>
<span id="cb8-72">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vertex<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(v) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph[vertex]])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-73"></span>
<span id="cb8-74"></span>
<span id="cb8-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb8-76">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Graph()</span>
<span id="cb8-77">g.add_vertex(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>)</span>
<span id="cb8-78">g.add_vertex(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>)</span>
<span id="cb8-79">g.add_vertex(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>)</span>
<span id="cb8-80">g.add_vertex(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'D'</span>)</span>
<span id="cb8-81">g.add_vertex(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'E'</span>)</span>
<span id="cb8-82"></span>
<span id="cb8-83">g.add_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>)</span>
<span id="cb8-84">g.add_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>)</span>
<span id="cb8-85">g.add_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'D'</span>)</span>
<span id="cb8-86">g.add_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'D'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'E'</span>)</span>
<span id="cb8-87"></span>
<span id="cb8-88"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the graph</span></span>
<span id="cb8-89">g.display_graph()</span>
<span id="cb8-90"></span>
<span id="cb8-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if an edge exists</span></span>
<span id="cb8-92"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Edge A-B:"</span>, g.has_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>))</span>
<span id="cb8-93"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Edge A-E:"</span>, g.has_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'E'</span>))</span>
<span id="cb8-94"></span>
<span id="cb8-95"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Traverse the graph using DFS</span></span>
<span id="cb8-96"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">DFS traversal starting from A:"</span>)</span>
<span id="cb8-97">g.dfs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>)</span>
<span id="cb8-98"></span>
<span id="cb8-99"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Traverse the graph using BFS</span></span>
<span id="cb8-100"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">BFS traversal starting from A:"</span>)</span>
<span id="cb8-101">g.bfs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>)</span>
<span id="cb8-102"></span>
<span id="cb8-103"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find and display all connected components</span></span>
<span id="cb8-104"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Connected Components:"</span>)</span>
<span id="cb8-105">components <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> g.connected_components()</span>
<span id="cb8-106"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, component <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(components, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb8-107">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Component </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>component<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<p>In this example, the code closely mirrors the conceptual understanding of a graph, facilitating reasoning about the structure and behavior of the graph within the program.</p>
</blockquote>
</section>
<section id="facilitating-epistemic-practices-through-libraries" class="level3">
<h3 class="anchored" data-anchor-id="facilitating-epistemic-practices-through-libraries">Facilitating epistemic practices through libraries</h3>
<p>Python’s extensive ecosystem of libraries supports epistemic practices by providing tools that align with domain-specific knowledge representations. This relationship can be linked to cognitive load theory, which emphasizes how domain-specific libraries reduce the cognitive burden for users by providing tailored, high-level abstractions that simplify complex tasks. For instance, libraries like Pandas and NumPy allow for data manipulation and numerical computations that are essential in scientific inquiry.</p>
<blockquote class="blockquote">
<p>Example: Data analysis with Pandas</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data</span></span>
<span id="cb9-4">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb9-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Alice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bob'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Charlie'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'David'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Eve'</span>],</span>
<span id="cb9-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>],</span>
<span id="cb9-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Score'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">87</span>]</span>
<span id="cb9-8">}</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create DataFrame</span></span>
<span id="cb9-11">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(data)</span>
<span id="cb9-12"></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the DataFrame</span></span>
<span id="cb9-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DataFrame:"</span>)</span>
<span id="cb9-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df)</span>
<span id="cb9-16"></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate mean age and mean score</span></span>
<span id="cb9-18">mean_age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>].mean()</span>
<span id="cb9-19">mean_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Score'</span>].mean()</span>
<span id="cb9-20"></span>
<span id="cb9-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Mean Age: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_age<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Mean Score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_score<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-23"></span>
<span id="cb9-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter rows where the score is above 90</span></span>
<span id="cb9-25">high_scorers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Score'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>]</span>
<span id="cb9-26"></span>
<span id="cb9-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">High Scorers (Score &gt; 90):"</span>)</span>
<span id="cb9-28"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(high_scorers)</span></code></pre></div>
<p>Here, the code allows researchers to work with data at a high level of abstraction, focusing on the analysis rather than the underlying computational details.</p>
</blockquote>
</section>
<section id="python-and-cognitive-alignment" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="python-and-cognitive-alignment">Python and cognitive alignment</h3>
<p>Python’s design facilitates cognitive alignment by reducing the gap between mental models and their implementation in code. This concept can be further explained through mental model theory or cognitive fit theory, both of which provide a theoretical foundation for understanding how Python’s syntax and abstractions support alignment between a programmer’s conceptual understanding and the actual code implementation. This concept can be further explained through mental model theory, which posits that individuals create internal representations of systems to understand and predict their behavior<sup>8</sup>. Python’s syntax and abstractions align well with these mental models, thereby reducing cognitive load and enhancing the ease with which programmers can translate conceptual ideas into functional code. This is achieved through:</p>
<div class="no-row-height column-margin column-container"><div id="fn8"><p><sup>8</sup>&nbsp;Johnson-Laird, P. N. (1983). <em>Mental Models: Towards a Cognitive Science of Language, Inference, and Consciousness</em>. Harvard University Press.</p></div></div><ul>
<li><p><strong>Readability</strong>: Code that is easy to read and understand reduces cognitive load by minimizing the mental effort required to comprehend its purpose and logic. Pythonic code emphasizes clear, straightforward constructs that align with natural language, thereby allowing developers to quickly grasp the functionality without excessive interpretation. This reduction in cognitive load is particularly important for complex projects, as it enables developers to focus more on solving problems rather than deciphering convoluted code.</p></li>
<li><p><strong>Intuitive error handling</strong>: Python’s exception handling allows developers to manage errors in a way that reflects logical reasoning, including handling unexpected conditions gracefully. By using <code>try-except</code> blocks, developers can anticipate potential errors and implement appropriate fallback mechanisms, ensuring that the program can continue running or fail gracefully without crashing. This capability to manage unforeseen issues lowers the cognitive burden by making error management more predictable and structured, which is particularly useful in complex systems.</p></li>
<li><p><strong>Garbage collection</strong>: Python’s garbage collection mechanism automatically handles memory management by reclaiming unused memory, thereby freeing developers from the complex task of manual memory allocation and deallocation. This feature not only reduces the risk of memory leaks and segmentation faults but also allows developers to focus on higher-level problem-solving without worrying about low-level resource management. By abstracting away these intricate details, garbage collection contributes to lowering the cognitive load required for efficient coding.</p></li>
<li><p><strong>Modularization</strong>: Python’s modularization capabilities are crucial as they allow developers to create reusable libraries and modules with well-defined functionality. This modular approach helps in abstracting away implementation details, enabling developers to use and understand high-level components without delving into the intricacies of the underlying code. By providing a clear separation of concerns, modularization promotes cleaner, more maintainable code and reduces the mental effort required to comprehend large and complex codebases.</p></li>
<li><p><strong>Interactive development</strong>: The availability of interactive shells like IPython and Jupyter notebooks supports exploratory programming and immediate feedback, which are important for knowledge acquisition and hypothesis testing.</p></li>
</ul>
</section>
<section id="implications-for-learning-and-problem-solving" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="implications-for-learning-and-problem-solving">Implications for learning and problem solving</h3>
<p>By operating at an epistemic level, Python serves as an effective educational tool, enabling learners to focus on problem-solving strategies and conceptual understanding rather than syntactic complexities. This approach aligns with constructivist learning theory, which posits that learners build new knowledge on top of existing cognitive structures by actively engaging with content. Python’s design reduces extraneous cognitive load, as suggested by Cognitive Load Theory<sup>9</sup>, allowing learners to concentrate on essential problem-solving processes. This supports the development of computational thinking skills and promotes a deeper engagement with the material.</p>
<div class="no-row-height column-margin column-container"><div id="fn9"><p><sup>9</sup>&nbsp;Sweller, J. (1988). Cognitive Load During Problem Solving: Effects on Learning. <em>Cognitive Science</em>, 12(2), 257-285. <a href="https://doi.org/10.1207/s15516709cog1202_4">DOI</a></p></div></div><blockquote class="blockquote">
<p>Example: Simulating physical systems</p>
<p>In physics education, Python can be used to simulate and visualize systems, aiding in the comprehension of complex concepts.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulating a simple harmonic oscillator</span></span>
<span id="cb10-5">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb10-6">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sin(t)</span>
<span id="cb10-7"></span>
<span id="cb10-8">plt.plot(t, x)</span>
<span id="cb10-9">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Simple Harmonic Motion'</span>)</span>
<span id="cb10-10">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb10-11">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Displacement'</span>)</span>
<span id="cb10-12">plt.show()</span></code></pre></div>
<p>This code helps students visualize the motion, reinforcing their understanding through both computational and graphical representations.</p>
</blockquote>
</section>
<section id="enhancing-epistemic-access-through-community-and-documentation" class="level3">
<h3 class="anchored" data-anchor-id="enhancing-epistemic-access-through-community-and-documentation">Enhancing epistemic access through community and documentation</h3>
<p>Python’s comprehensive documentation and supportive community contribute to its epistemic accessibility. Resources like the Python Enhancement Proposals (PEPs), tutorials, and forums provide avenues for knowledge sharing and collective learning. The Python Enhancement Proposal (PEP) process is a key element of Python’s evolution. PEPs are design documents that describe new features or changes to Python, offering a formalized way for the community to propose, discuss, and implement language improvements. This structured process, managed by the Python Software Foundation (PSF), ensures that Python evolves in a coherent and organized manner, balancing innovation with stability. Over the years, the PEP process has brought significant changes to Python, such as the transition to Python 3 (PEP 3000) and the ongoing efforts to remove the Global Interpreter Lock (GIL) (PEP 703). These changes have enhanced Python’s compatibility, performance, and usability, reflecting the community-driven approach that keeps Python aligned with the needs of its users.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Python’s unique position as an interface language lies in its ability to bridge the cognitive gap between human reasoning and machine execution. By leveraging its simplified syntax, high-level abstractions, and support for multiple programming paradigms, Python effectively reduces cognitive load and enables developers—both professional and non-professional—to focus on problem-solving rather than the intricacies of machine-level programming. Its design philosophy, epitomized in the concept of ‘Pythonic’ code, ensures that readability and maintainability are prioritized, thereby fostering cleaner, more efficient software development.</p>
<p>The parallels between Python and natural language, particularly English, make Python an accessible language for newcomers and experienced developers alike. This natural alignment facilitates an intuitive coding experience, where the translation of human thought processes into machine instructions feels seamless. The epistemic lens through which Python operates not only supports cognitive alignment but also enhances accessibility through its ecosystem of libraries, community-driven documentation, and well-structured evolution via Python Enhancement Proposals (PEPs).</p>
<p>The evolution of Python, through key changes such as the transition to Python 3 and the ongoing efforts to remove the Global Interpreter Lock (GIL), reflects a commitment to continuous improvement while staying true to its core principles. Python’s adaptability and capacity to serve as a glue language in various domains—ranging from artificial intelligence and data science to education—underscore its versatility and enduring relevance in the software development landscape.</p>
<p>In conclusion, Python’s role as an interface language extends beyond mere syntax; it embodies a philosophical approach to programming that prioritizes human cognitive compatibility. By reducing barriers between human thought and machine logic, Python not only facilitates efficient software development but also fosters an inclusive programming culture where knowledge representation and problem-solving are accessible to a broad audience. The language’s continued evolution ensures that it remains at the forefront of modern computing, bridging the gap between abstract human cognition and concrete machine execution in an ever-changing technological world.</p>
</section>
<section id="other-references" class="level2">
<h2 class="anchored" data-anchor-id="other-references">Other references</h2>
<p>Bartlett, F. C. (1932). <em>Remembering: A Study in Experimental and Social Psychology</em>. Cambridge University Press.</p>
<p>Chinn, C. A., Buckland, L. A., &amp; Samarapungavan, A. (2011). Expanding the dimensions of epistemic cognition: Arguments from philosophy and psychology. <em>Educational Psychologist</em>, 46(3), 141-167. <a href="10.1080/00461520.2011.587722">DOI</a></p>
<p>Turkle, S., &amp; Papert, S. (1990). Epistemological pluralism and the revaluation of the concrete. <em>Journal of Mathematical Behavior</em>, 9(1), 3-33. <a href="http://web.mit.edu/sturkle/www/epistemologicalpluralism.html">URL</a></p>


</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>essay</category>
  <category>Python</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/python-as-interface/</guid>
  <pubDate>Tue, 21 Jun 2022 22:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/python-as-interface/programming-human-languages.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Harnessing Focus: Merging AI and Market Dynamics</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/attentions/</link>
  <description><![CDATA[ 





<section id="prologue" class="level2">
<h2 class="anchored" data-anchor-id="prologue">Prologue</h2>
<p>In his seminal work, <em>The Principles of Psychology</em>, William James profoundly observed, “My experience is what I agree to attend to. Only those items which I notice shape my mind—without selective interest, experience is an utter chaos” (James, 1890). This statement encapsulates the essence of how attention shapes our reality. Our selective focus not only filters the overwhelming influx of information but also constructs the very framework of our knowledge and experience. This insight forms the bedrock of my exploration into the relationship between attention mechanisms in natural language processing (NLP) and attention economics.</p>
<p>The act of attending is more than just a cognitive process; it is a fundamental determinant of how we perceive, interpret, and interact with the world. James’s reflection on attention reveals that our conscious experience is a curated narrative, constructed from the myriad stimuli we choose to acknowledge. This selective process is crucial not only in shaping individual cognition but also in driving the collective knowledge within various fields.</p>
<p>This essay is born out of my fascination with how such a seemingly simple concept—the act of paying attention—can bridge two ostensibly disparate domains: the technical intricacies of NLP and the economic principles governing human focus. Both fields, though distinct in their methodologies and applications, fundamentally rely on the efficient allocation of attention. Whether it is an AI model sifting through vast datasets to find relevance or an economist studying how people allocate their cognitive resources, the underlying principle remains the same: our attention is the gatekeeper of our experience and knowledge.</p>
<p>By exploring these connections, I aim to uncover how advancements in understanding attention can enrich both artificial intelligence and economic theories, ultimately enhancing our ability to manage and utilize information in an era of unprecedented data abundance. This journey through the intersections of cognitive science, technology, and economics underscores a personal quest to understand how the meticulous act of attending shapes not just individual minds, but the collective progression of human knowledge.</p>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In an era characterized by information overload, the concept of <strong>attention</strong> has gained paramount importance across various disciplines. From cognitive science to computer engineering and economics, the mechanisms of focusing on relevant information while filtering out the irrelevant have become a central area of study. This essay explores the fascinating parallel between attention mechanisms in natural language processing (NLP) and the theory of attention economics, two seemingly disparate fields that share a common foundation in the management of information resources.</p>
<p>Attention, in cognitive science, refers to the mental process of selectively concentrating on specific aspects of the environment while ignoring others. This fundamental cognitive ability has inspired the development of attention mechanisms in NLP, i.e., computational models that allow artificial systems to focus on the most relevant parts of input data. Concurrently, in the realm of economics, a novel approach known as <strong>attention economics</strong> has emerged, treating human attention as a scarce and valuable commodity in an information-rich world (Davenport &amp; Beck, 2001).</p>
<p>The parallel development of attention mechanisms in NLP and the theory of attention economics offers profound insights into both human cognition and artificial intelligence, with far-reaching implications for information management and technology design. This essay aims to explore these connections, highlighting how the attention paradigm serves as a bridge between computational models and economic theory, potentially reshaping our understanding of information processing in both human and artificial systems.</p>
</section>
<section id="attention-mechanisms" class="level2">
<h2 class="anchored" data-anchor-id="attention-mechanisms">Attention mechanisms</h2>
<p>Attention mechanisms in NLP are sophisticated computational techniques that allow AI models to dynamically focus on specific parts of the input data when performing language-related tasks. Inspired by human cognitive processes, these mechanisms enable AI systems to assign varying levels of importance, or “attention weights,” to different elements in a sequence, typically words or phrases in a sentence.</p>
<p>The core principle behind attention mechanisms is the ability to weigh the relevance of different input elements contextually. This allows the model to prioritize important information and de-emphasize less relevant details, leading to improved performance across various language tasks (Vaswani et al., 2017). Attention mechanisms work by creating query, key, and value representations of the input data. The model then calculates attention scores by comparing the query with the keys and uses these scores to weigh the values. This process allows the model to focus on different parts of the input with varying intensity, mimicking the way humans selectively focus on certain aspects of information while processing language.</p>
<section id="historical-development" class="level3">
<h3 class="anchored" data-anchor-id="historical-development">Historical development</h3>
<p>The concept of attention in NLP emerged as a solution to the limitations of traditional sequence-to-sequence models, particularly in machine translation. In 2014, Bahdanau et al.&nbsp;introduced the first attention mechanism in their seminal paper “Neural Machine Translation by Jointly Learning to Align and Translate” (Bahdanau et al., 2014). This breakthrough allowed models to selectively focus on parts of the source sentence while generating each word of the translation, significantly improving translation quality.</p>
<p>The evolution of attention mechanisms accelerated rapidly after this initial breakthrough. In 2015, Xu et al.&nbsp;introduced the concept of “soft” and “hard” attention in the context of image captioning, further expanding the applicability of attention mechanisms. Soft attention allows the model to consider all parts of the input with varying weights, while hard attention focuses on specific parts of the input with discrete choices.</p>
<p>The year 2017 marked a significant milestone with the introduction of the Transformer model by Vaswani et al.&nbsp;in their paper “Attention Is All You Need” (Vaswani et al., 2017). This model relied entirely on attention mechanisms without using recurrent or convolutional layers, demonstrating unprecedented efficiency and performance in various NLP tasks. The Transformer’s use of self-attention and multi-head attention enabled parallel processing of inputs and capturing long-range dependencies, setting a new standard for NLP models.</p>
<p>The success of the Transformer architecture led to the development of powerful pre-trained language models such as BERT (Bidirectional Encoder Representations from Transformers) by Devlin et al.&nbsp;in 2018 and GPT (Generative Pre-trained Transformer) by OpenAI. BERT introduced bidirectional attention, allowing the model to consider the context from both directions, which significantly improved tasks like question answering and named entity recognition. GPT focused on unidirectional generative tasks, excelling in text generation and language modeling.</p>
<p>Recent developments have continued to build on these foundations. Models like T5 (Text-to-Text Transfer Transformer) unified various NLP tasks into a single framework, and Retrieval-Augmented Generation (RAG) combined attention mechanisms with retrieval systems, enabling models to access and integrate external knowledge dynamically. These advancements have further solidified the importance of attention mechanisms in modern NLP.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart LR
    classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
    linkStyle default stroke:#0000ff,stroke-width:2px

    A[Attention Mechanisms] --&gt; B[Sequence-to-Sequence Models]
    B --&gt; C[Machine Translation]
    C --&gt; D[Neural Machine Translation by Bahdanau et al., 2014]
    D --&gt; E[Soft and Hard Attention by Xu et al., 2015]
    E --&gt; F[Transformer Model by Vaswani et al., 2017]
    F --&gt; G[BERT by Devlin et al., 2018]
    F --&gt; H[GPT by OpenAI, 2018]
    G --&gt; I[Bidirectional Attention]
    H --&gt; J[Unidirectional Generation]
    I --&gt; K[Improved Question Answering]
    I --&gt; L[Enhanced Named Entity Recognition]
    J --&gt; M[Advanced Text Generation]
    F --&gt; N[T5]
    N --&gt; O[Unified NLP Framework]
    F --&gt; P[RAG]
    P --&gt; Q[Dynamic External Knowledge Integration]
</pre>
</div>
<p></p><figcaption> Historical development of attention mechanisms</figcaption> </figure><p></p>
</div>
</div>
</div>
</section>
<section id="applications" class="level3">
<h3 class="anchored" data-anchor-id="applications">Applications</h3>
<p>Attention mechanisms have found widespread applications across numerous NLP tasks, revolutionizing performance throughout the field. In machine translation, these mechanisms have been particularly transformative. They allow models to focus on relevant words in the source language when generating each word in the target language, significantly improving the fluency and accuracy of translations (Bahdanau et al., 2014). This capability is especially valuable when dealing with languages that have different word orders, as the model can dynamically align relevant parts of the input and output sequences.</p>
<p>Text summarization has also benefited greatly from attention mechanisms. Models equipped with these mechanisms can identify and focus on the most important sentences or phrases in a document, enabling the creation of more coherent and informative summaries. This ability to distill the essence of longer texts into concise summaries has proven invaluable in various applications, from news aggregation to academic research.</p>
<p>In the realm of question answering, attention mechanisms have led to more sophisticated and context-aware systems. These models can efficiently locate and focus on relevant information within a given text to answer specific questions. This has resulted in more accurate and nuanced responses, as the model can weigh the importance of different parts of the input text in relation to the question at hand (Devlin et al., 2018).</p>
<p>Sentiment analysis has seen significant improvements with the introduction of attention mechanisms. Models can now focus on words or phrases that are most indicative of sentiment, leading to more accurate classification of the overall sentiment expressed in a piece of text. This enhanced capability has found applications in areas such as social media monitoring, customer feedback analysis, and market research.</p>
<p>Speech recognition systems have also leveraged attention mechanisms to great effect. These mechanisms help align audio signals with text transcriptions, enhancing the accuracy of speech-to-text systems. This has led to more robust and reliable voice recognition technologies, improving user experiences in applications ranging from virtual assistants to transcription services.</p>
<p>In the field of named entity recognition, attention mechanisms have proven invaluable. They allow models to better identify and classify named entities by focusing on contextual cues, leading to more accurate extraction of important information such as names, organizations, and locations from unstructured text (Devlin et al., 2018).</p>
<p>Text generation tasks, including story generation and conversational AI, have been revolutionized by attention mechanisms. These mechanisms help models maintain coherence and context over long sequences of text, resulting in more natural and contextually appropriate generated content. This has led to significant advancements in chatbots, creative writing assistance, and other generative language tasks (Brown et al., 2020).</p>
<p>Moreover, attention mechanisms have found applications in document classification, where they help models focus on the most relevant parts of long documents to determine their category or topic. In machine reading comprehension, these mechanisms enable models to better understand and reason about complex passages of text, leading to more human-like comprehension abilities.</p>
<p>The versatility of attention mechanisms has also led to their adoption in multimodal tasks that combine language with other forms of data. For instance, in image captioning, attention allows models to focus on relevant parts of an image while generating descriptive text. Similarly, in video understanding tasks, attention mechanisms help models align textual descriptions or questions with relevant frames or segments of video.</p>
<p>As research in NLP continues to advance, the applications of attention mechanisms continue to expand, touching virtually every aspect of language processing and understanding. Their ability to dynamically focus on relevant information has made them a fundamental component in the ongoing quest to create more intelligent and human-like language processing systems.</p>
</section>
<section id="technical-details" class="level3">
<h3 class="anchored" data-anchor-id="technical-details">Technical details</h3>
<p>The development of various attention models has been driven by the need to address specific limitations of preceding models and to enhance the capabilities of NLP systems. Each type of attention mechanism builds on previous concepts, offering improvements and specialized functionalities for different tasks.</p>
<p>Self-Attention, also known as scaled dot-product attention, was a major innovation introduced in the Transformer paper by Vaswani et al.&nbsp;(2017). Self-Attention allows a model to consider the relationships between all words in a sentence, regardless of their position. It works by assigning importance scores to each word in relation to every other word.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart LR
    classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
    linkStyle default stroke:#0000ff,stroke-width:2px

    A[Input Sequence] --&gt; B[Query]
    A --&gt; C[Key]
    A --&gt; D[Value]
    B --&gt; E[Attention Scores]
    C --&gt; E
    E --&gt; F[Weighted Sum]
    D --&gt; F
    F --&gt; G[Output]
</pre>
</div>
<p></p><figcaption> Multi-Head Attention mechanism</figcaption> </figure><p></p>
</div>
</div>
</div>
<p>In this process, each word generates a query, key, and value. The query of each word is compared with the keys of all words to produce attention scores, which are then used to create a weighted sum of the values. Self-Attention captures long-range dependencies effectively and allows parallel processing, leading to faster training times. It also provides interpretability through attention weights. However, it is computationally expensive for very long sequences due to quadratic scaling with sequence length and requires large amounts of data and compute resources.</p>
<p>To enhance the model’s capacity to learn different aspects of relationships between words, Multi-Head Attention was introduced in the same Transformer paper. Multi-Head Attention extends the idea of self-attention by performing multiple self-attention operations in parallel. Each “head” can focus on different aspects of the relationship between words, such as grammar, semantics, or context. The results from all heads are then combined to produce the final output.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart TD
    classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
    linkStyle default stroke:#0000ff,stroke-width:2px

    A[Input] --&gt; B[Head 1]
    A --&gt; C[Head 2]
    A --&gt; D[Head 3]
    B --&gt; E[Combine]
    C --&gt; E
    D --&gt; E
    E --&gt; F[Output]
</pre>
</div>
<p></p><figcaption> Cross-Head Attention mechanism</figcaption> </figure><p></p>
</div>
</div>
</div>
<p>Multi-Head Attention enhances the model’s ability to focus on different types of relationships simultaneously, improving its robustness and flexibility, and increasing its representational capacity (Vaswani et al., 2017). However, it is more computationally intensive due to multiple attention heads and has higher memory consumption, requiring more hardware resources.</p>
<p>Cross-Attention, another key mechanism introduced in the Transformer paper, is used in the encoder-decoder structure of the Transformer. It is crucial in tasks that involve translating from one sequence to another, such as in machine translation. Cross-Attention allows the model to focus on relevant parts of the input sequence (from the encoder) when generating each word of the output sequence (in the decoder).</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart LR
    classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
    linkStyle default stroke:#0000ff,stroke-width:2px

    A[Input Sequence] --&gt; B[Encoder]
    B --&gt; C[Cross-Attention]
    D[Output So Far] --&gt; E[Decoder]
    E --&gt; C
    C --&gt; F[Next Output Word]
</pre>
</div>
<p></p><figcaption> Sparse Attention mechanism</figcaption> </figure><p></p>
</div>
</div>
</div>
<p>Cross-Attention enables effective mapping between different sequences, improving translation quality and facilitating the handling of alignment in sequence-to-sequence tasks. However, its complexity increases with the length of input and output sequences, requiring significant computational resources for large-scale translations.</p>
<p>To efficiently handle very long sequences, Sparse Attention was introduced by Child et al.&nbsp;(2019) as an improvement upon Self-Attention. Sparse Attention reduces the number of word pairs considered, focusing instead on a strategic subset. This can be based on proximity (attending to nearby words), fixed patterns (attending to every nth word), or learned patterns of importance. Sparse Attention reduces computational load, making it feasible to handle very long sequences while maintaining the ability to capture essential dependencies with fewer computations. However, it may miss some important relationships if the sparsity pattern is not well-chosen and can be complex to implement and optimize effectively.</p>
<p>These attention mechanisms have dramatically enhanced the ability of NLP models to understand and generate language. By allowing models to dynamically focus on relevant information and capture complex relationships within data, attention mechanisms have become fundamental to modern NLP architectures. They enable models to better grasp context, handle long-range dependencies, and produce more coherent and contextually appropriate outputs across a wide range of language tasks.</p>
</section>
<section id="novelty-and-success" class="level3">
<h3 class="anchored" data-anchor-id="novelty-and-success">Novelty and success</h3>
<p>The introduction of attention mechanisms marked a significant paradigm shift in NLP. Their novelty lies in several key aspects. Unlike previous models that processed all input elements equally, attention mechanisms allow models to dynamically focus on relevant parts of the input. This mimics human cognitive processes more closely, as we naturally focus on specific words or phrases when understanding or translating language (Vaswani et al., 2017). Additionally, attention mechanisms, especially in models like the Transformer, allow for parallel processing of input sequences, in contrast to recurrent neural networks (RNNs) that process inputs sequentially. This parallelization was made possible by advancements in hardware, particularly GPUs and TPUs, which significantly accelerated the training and inference processes. The synergy between attention mechanisms and modern hardware has been crucial in handling the large-scale computations required by models like GPT-3. Moreover, attention allows models to capture relationships between words regardless of their distance in the input sequence, addressing a major limitation of RNNs and convolutional neural networks (CNNs). Furthermore, the attention weights provide a degree of interpretability, allowing researchers to visualize which parts of the input the model is focusing on for each output.</p>
<p>Attention mechanisms added several critical capabilities to NLP that were present in earlier models but lacked the success seen with GPT. For instance, traditional sequence-to-sequence models struggled with maintaining context over long texts, often leading to loss of important information. The introduction of the Transformer architecture was a game-changer. Transformers, leveraging self-attention mechanisms, efficiently handled long-range dependencies and context, a task that RNNs and LSTMs found challenging.</p>
<p>The success of attention mechanisms can be attributed to several factors. Attention-based models consistently outperform previous state-of-the-art models across a wide range of NLP tasks, from machine translation to text summarization. For example, BERT (Devlin et al., 2018) and GPT-3 (Brown et al., 2020) have set new benchmarks in numerous NLP tasks. The ability to process inputs in parallel allows attention-based models to scale efficiently to larger datasets and more complex tasks. The use of multi-head attention in the Transformer model enables it to learn different aspects of the data simultaneously. The same basic attention mechanism can be adapted for various NLP tasks with minimal task-specific modifications. For example, BERT’s bidirectional attention allows it to understand context from both directions, making it highly effective for tasks like question answering and sentiment analysis. The concept of attention aligns with our understanding of human cognition, making these models more intuitive and potentially more aligned with how our brains process language. Attention mechanisms, particularly in Transformer-based models, work exceptionally well with pre-training on large corpora. This has led to powerful language models like BERT and GPT, which can be fine-tuned for specific tasks with impressive results. For instance, GPT-3’s success in generating coherent and contextually appropriate text can be attributed to its extensive pre-training on diverse datasets, followed by fine-tuning. Furthermore, the development of models like Retrieval-Augmented Generation (RAG) by Lewis et al.&nbsp;(2020) showcases the combination of attention mechanisms with retrieval systems. RAG combines pre-trained language models with a retrieval component, allowing the model to access and integrate external knowledge dynamically. This hybrid approach significantly enhances the model’s ability to generate accurate and contextually rich responses by retrieving relevant documents or information during the generation process.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart LR
    classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
    linkStyle default stroke:#0000ff,stroke-width:2px

    A[Attention Mechanisms] --&gt; B[Dynamic Focus]
    A --&gt; C[Parallelization]
    A --&gt; D[Long-range Dependencies]
    A --&gt; E[Interpretability]
    A --&gt; F[Improved Performance]
    A --&gt; G[Scalability]
    A --&gt; H[Versatility]
    A --&gt; I[Biological Plausibility]
    A --&gt; J[Synergy with Pre-training]
    A --&gt; K[Enhanced Capabilities with RAG]
</pre>
</div>
<p></p><figcaption> Novelty and success of attention mechanisms</figcaption> </figure><p></p>
</div>
</div>
</div>
<p>The combination of these novel features and success factors has led to attention mechanisms becoming a cornerstone of modern NLP. They have enabled more nuanced understanding and generation of language, pushing the boundaries of what’s possible in artificial language processing. As research continues, attention mechanisms are likely to evolve further, potentially leading to even more sophisticated language models that can better capture the complexities and nuances of human communication.</p>
</section>
</section>
<section id="attention-economics" class="level2">
<h2 class="anchored" data-anchor-id="attention-economics">Attention economics</h2>
<section id="definition-and-core-principles" class="level3">
<h3 class="anchored" data-anchor-id="definition-and-core-principles">Definition and core principles</h3>
<p>Attention economics is an approach to managing information that recognizes human attention as a scarce and valuable commodity. In an environment abundant with information, the primary challenge becomes not the acquisition of information but the allocation of attention. This theory underscores the scarcity of attention in contrast to the overwhelming availability of information, emphasizing the need to allocate it efficiently.</p>
<p>A fundamental principle of attention economics is the concept of attention as a scarce resource. Unlike information, which can be produced and replicated infinitely, human attention is inherently limited. This limitation elevates the value of attention, making it a critical focus for individuals and organizations alike. Consequently, various stimuli—from advertisements to social media content—compete fiercely for individuals’ attention. This competition necessitates that individuals make deliberate choices about where to direct their attention, thus making attention allocation a significant aspect of personal and professional decision-making processes. Moreover, attention is viewed as a form of capital; the ability to capture and sustain attention can be monetized, influencing business models and marketing strategies (Davenport &amp; Beck, 2001).</p>
</section>
<section id="historical-context" class="level3">
<h3 class="anchored" data-anchor-id="historical-context">Historical context</h3>
<p>The concept of attention economics emerged in response to the dramatic increase in available information during the late 20th and early 21st centuries. The advent of the internet and digital media exponentially increased the accessibility and volume of information, shifting the primary challenge from obtaining information to managing and prioritizing it effectively.</p>
<p>Nobel laureate Herbert Simon laid the groundwork for attention economics in a pivotal 1971 speech, where he observed that “a wealth of information creates a poverty of attention” (Simon, 1971). Simon highlighted the paradox where the abundance of information leads to a scarcity of attention, emphasizing that in an information-rich world, attention becomes the limiting factor in consumption. This insight laid the theoretical foundation for what would later become attention economics.</p>
<p>Building on Simon’s ideas, Michael Goldhaber coined the term “attention economy” in 1997. Goldhaber articulated that human attention is treated as a scarce and valuable commodity, arguing that in a society overflowing with information, attention becomes the new currency. He posited that the ability to attract and hold attention is essential for success in various fields, from business to media to personal interactions. Goldhaber’s work underscored the need to adapt traditional economic models to account for the scarcity of human attention (Goldhaber, 1997).</p>
<p>Thomas Davenport further developed the concept in his book “The Attention Economy: Understanding the New Currency of Business,” bringing these ideas into mainstream business thinking and highlighting how businesses can thrive by effectively managing and capturing attention (Davenport &amp; Beck, 2001). Yochai Benkler explored the broader implications of attention economics within networked information environments, adding depth to the theoretical landscape and emphasizing the role of social networks and digital platforms in the attention economy (Benkler, 2006).</p>
</section>
<section id="cognitive-basis" class="level3">
<h3 class="anchored" data-anchor-id="cognitive-basis">Cognitive basis</h3>
<p>The cognitive basis of attention economics lies in understanding how the human brain processes and prioritizes information. Cognitive science reveals that humans have a limited capacity for attention and must constantly filter and prioritize incoming stimuli to function effectively. This selective attention process is governed by neural mechanisms that help focus cognitive resources on the most relevant and significant information while ignoring distractions.</p>
<p>Research in cognitive psychology and neuroscience has shown that attention is influenced by factors such as salience, relevance, and context. Salient stimuli—those that stand out due to their intensity, novelty, or contrast—tend to capture attention more readily. Relevance, determined by personal interests and goals, also plays a crucial role in attention allocation. Additionally, the context in which information is presented can affect how attention is directed and maintained.</p>
<p>These cognitive principles have profound effects on individual and group beliefs. By capturing attention, information can influence perceptions, attitudes, and behaviors. For instance, repeated exposure to specific ideas or narratives can shape beliefs and reinforce existing biases. At a group level, the collective focus on particular topics can drive public discourse and societal norms. Understanding these cognitive mechanisms allows for the development of strategies to manage and direct attention effectively, both in beneficial ways and in ways that can manipulate or mislead.</p>
</section>
<section id="applications-1" class="level3">
<h3 class="anchored" data-anchor-id="applications-1">Applications</h3>
<p>In marketing, attention economics has profoundly influenced advertising strategies. The need to capture attention in a crowded media landscape has led to innovations such as native advertising and influencer marketing. These techniques are designed to engage audiences more effectively by integrating promotional content seamlessly into users’ everyday experiences (Eckler &amp; Bolls, 2011).</p>
<p>User interface design is another area significantly impacted by the principles of attention economics. Designers focus on simplicity, clarity, and strategic use of visual elements to guide users’ attention, enhancing usability and engagement. Websites, apps, and software interfaces are meticulously crafted to capture and sustain user attention by minimizing distractions and emphasizing important features (Nielsen &amp; Loranger, 2006).</p>
<p>In the realm of information management, attention economics has inspired new approaches to knowledge management within organizations. Effective filtering, prioritization, and presentation of information are essential to ensure that critical data receives the necessary attention amidst the vast amounts of available information (Davenport, 2005).</p>
<p>Social media platforms like Facebook, Twitter, and Instagram operate as attention marketplaces where content competes for user engagement. These platforms are designed to maximize user attention through algorithms that prioritize engaging content, fostering prolonged interaction and repeat visits (Kietzmann et al., 2011).</p>
<p>Content creation has also been shaped by attention economics, evident in the prevalence of clickbait headlines and sensationalist content. These tactics aim to capture initial attention, which is crucial for success in an environment where numerous pieces of content vie for visibility and engagement (Blom &amp; Hansen, 2015).</p>
<p>Understanding attention economics is essential in today’s information-saturated world. It provides a framework for analyzing how individuals, organizations, and technologies compete for and allocate the limited resource of human attention. Marketers have exploited attention economics to generate substantial revenues by developing strategies that capture and monetize user engagement. However, this same framework has been leveraged by bad actors, including state-backed propaganda efforts and terrorist organizations, to manipulate public perception, spread misinformation, and incite violence (Benkler et al., 2018; Byman, 2015). Recognizing both the beneficial and malicious uses of attention economics is crucial for developing strategies to safeguard the integrity of information and protect the public from manipulation.</p>
<p>The relevance of attention economics is further underscored by its profound impact on the growth and revenue models of big tech companies. Platforms like Google, Facebook, and YouTube have built their business empires on the ability to capture and monetize user attention through targeted advertising and engagement-driven content algorithms. This focus on maximizing user attention has fueled their unprecedented growth and reshaped entire sectors. Traditional media industries, such as television and newspapers, have been significantly outshined by these digital platforms, which have become dominant forces in the advertising market. The shift towards an attention-driven economy highlights the transformative power of managing and leveraging human attention in the digital age.</p>
</section>
</section>
<section id="bridging-nlp-and-attention-economics" class="level2">
<h2 class="anchored" data-anchor-id="bridging-nlp-and-attention-economics">Bridging NLP and attention economics</h2>
<section id="conceptual-overlap" class="level3">
<h3 class="anchored" data-anchor-id="conceptual-overlap">Conceptual overlap</h3>
<p>The conceptual overlap between attention mechanisms in NLP and attention economics centers on the efficient allocation and prioritization of limited resources. In the realm of NLP, attention mechanisms are designed to allocate computational resources to the most pertinent parts of the input data, thereby optimizing performance and enhancing efficiency (Vaswani et al., 2017). Similarly, attention economics focuses on how individuals and organizations allocate their finite cognitive resources to the most relevant and valuable pieces of information. Both fields grapple with the challenge of managing scarcity: in NLP, the scarcity is in computational power and data processing capabilities, whereas in attention economics, it is the finite nature of human attention (Davenport &amp; Beck, 2001).</p>
</section>
<section id="improving-attention-mechanisms" class="level3">
<h3 class="anchored" data-anchor-id="improving-attention-mechanisms">Improving attention mechanisms</h3>
<p>The cognitive basis studied in attention economics and computational neuroscience provides valuable insights that can enhance how machine learning models ingest and process information. These insights contribute to two main areas: improving how tokens are transformed into meaning and improving how AI systems correctly respond to user requests.</p>
<section id="improving-token-to-meaning-transformation" class="level4">
<h4 class="anchored" data-anchor-id="improving-token-to-meaning-transformation">Improving token-to-meaning transformation</h4>
<p>The cognitive principles from attention economics can help enhance the transformation of tokens into meaning. Jakobson’s model of language functions is particularly relevant here, as it identifies key components necessary for effective communication:</p>
<ul>
<li><p>Cognitive insights can help NLP models better understand the context in which a word or phrase is used. This understanding improves the model’s ability to disambiguate meanings and provide more accurate interpretations.</p></li>
<li><p>Attention mechanisms can be refined to more effectively map tokens to the common code or language understood by both the sender (addresser) and receiver (addressee). This involves enhancing the model’s understanding of syntax, semantics, and pragmatics, ensuring that the generated meaning aligns with human language conventions.</p></li>
<li><p>By integrating principles from cognitive neuroscience, NLP models can improve their ability to construct coherent messages that accurately convey intended meanings. This involves not just stringing tokens together but ensuring that the overall message makes sense within the given context.</p></li>
</ul>
<p>For instance, in language translation, an enhanced attention mechanism can focus on cultural context and idiomatic expressions that are crucial for accurate translations, improving the quality and relevance of the output (Bahdanau et al., 2014).</p>
</section>
<section id="improving-response-to-user-requests" class="level4">
<h4 class="anchored" data-anchor-id="improving-response-to-user-requests">Improving response to user requests</h4>
<p>Attention economics and cognitive neuroscience can also enhance how AI systems respond to user requests by optimizing attention allocation to ensure relevant and valuable responses. This involves several components from Jakobson’s model:</p>
<ul>
<li><p>Understanding the sender’s intent is crucial for generating appropriate responses. Insights from cognitive science can help NLP models infer the sender’s goals and priorities, improving the relevance of the responses.</p></li>
<li><p>Tailoring responses to the receiver’s needs and preferences is essential for effective communication. By analyzing user interaction patterns and preferences, AI systems can prioritize responses that are most likely to satisfy the user’s needs.</p></li>
<li><p>Ensuring effective communication requires maintaining a connection between the sender and receiver. Attention mechanisms can be designed to keep track of the ongoing conversation context, ensuring continuity and coherence in multi-turn interactions.</p></li>
</ul>
<p>For example, in question answering systems, attention mechanisms inspired by cognitive principles can maintain and leverage context over extended interactions, much like humans do when engaging in a conversation. This capability is critical for tasks such as document summarization and customer service, where understanding the broader context significantly enhances performance (Vaswani et al., 2017).</p>
<p>By understanding how humans allocate their cognitive resources, AI systems can be developed to prioritize and filter information more effectively. This alignment with human cognitive processes leads to more sophisticated attention mechanisms in NLP that can handle information in a manner akin to human attention patterns.</p>
</section>
</section>
<section id="practical-implications" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications">Practical implications</h3>
<p>Incorporating principles from attention economics into the design of AI systems can significantly enhance their functionality. By optimizing AI models to prioritize information that is not only relevant but also contextually valuable, these systems can more closely mimic human decision-making processes. This approach can lead to AI systems that are not just efficient but also more intuitive and effective in real-world applications.</p>
<p>Understanding the principles of attention allocation can also lead to substantial improvements in human-machine interaction. AI systems designed with attention economics in mind can present information in a manner that aligns with human cognitive patterns. This alignment enhances user experience and engagement by ensuring that information is presented clearly and at the right time, reducing cognitive overload and increasing the efficiency of interactions.</p>
<p>Both attention mechanisms in NLP and attention economics emphasize the importance of filtering and prioritizing information. In environments saturated with data, AI systems can be designed to mimic human attention allocation by filtering out irrelevant data and prioritizing what is most important. This capability ensures that users receive the most pertinent information without being overwhelmed by the sheer volume of available data.</p>
<p>Leveraging attention mechanisms and economic principles can greatly enhance personalized content delivery. By understanding user preferences and attention patterns, AI systems can deliver content that is tailored to engage users more effectively. This personalized approach increases user satisfaction and retention by ensuring that the content meets individual needs and interests, thereby creating a more compelling user experience.</p>
<p>Moreover, insights from attention economics can improve how meaning and agency are embodied in language, benefiting attention mechanisms in NLP. Attention economics teaches us how individuals value and allocate their cognitive resources, which can inform the development of NLP systems that more accurately reflect human prioritization of information. By applying these principles, NLP models can be designed to focus not just on syntactic relevance but also on the contextual and pragmatic importance of information, much like humans do.</p>
<p>The logical steps linking attention economics to improvements in NLP start with understanding human attention allocation. Attention economics provides a framework for understanding how humans allocate their limited cognitive resources to different stimuli based on relevance and value. By integrating these principles, AI systems can be developed to prioritize and filter information in ways that align with human cognitive processes. This leads to more sophisticated attention mechanisms in NLP that not only process language based on syntactic importance but also incorporate contextual and pragmatic factors, mimicking human attention patterns. These enhanced NLP systems can interact with users in a more human-like manner, understanding and responding to nuances in language that reflect deeper meaning and intention. Finally, AI systems can leverage this understanding to deliver personalized and contextually relevant content, improving user engagement and satisfaction.</p>
</section>
<section id="adversarial-implications" class="level3">
<h3 class="anchored" data-anchor-id="adversarial-implications">Adversarial implications</h3>
<p>The relationship between attention economics and NLP also extends to adversarial usage, particularly in the realm of social media. Bad actors, including state-backed propaganda efforts and terrorist organizations, have leveraged these principles to manipulate public perception and influence individuals and groups (Byman, 2015). By understanding how attention is allocated, adversaries can craft messages that capture and exploit human attention, disseminating misleading or harmful information more effectively.</p>
<p>Social media platforms are prime targets for such manipulation, given their ability to rapidly spread information and engage vast audiences. Bad actors use sophisticated strategies to create compelling content that can distract, mislead, or radicalize users. These tactics not only threaten individual users but also pose broader societal risks, including the destabilization of communities and the erosion of trust in information sources (Benkler et al., 2018).</p>
<p>To counter these threats, it is essential to build robust mechanisms that protect users interacting with digital agents. This involves developing advanced AI systems capable of detecting and mitigating malicious content and influence campaigns. By integrating principles from attention economics, these systems can better identify patterns of manipulation and prioritize the filtering of harmful content.</p>
<p>Moreover, enhancing user education and awareness about attention manipulation can empower individuals to make more informed decisions about the information they consume and share. By fostering a deeper understanding of how their attention can be exploited, users can become more resilient to manipulation efforts.</p>
<p>The dual-edged nature of attention mechanisms highlights the need for ethical considerations in their deployment. Developing strategies that balance the benefits of attention optimization with safeguards against misuse is crucial for protecting the integrity of information and maintaining public trust.</p>
</section>
<section id="future-research-directions" class="level3">
<h3 class="anchored" data-anchor-id="future-research-directions">Future research directions</h3>
<p>Collaborative research between experts in NLP and economists can yield novel insights and methodologies for managing attention in both human and artificial systems. Such cross-disciplinary studies can uncover new ways to optimize attention allocation, benefiting both fields and leading to more advanced and effective solutions.</p>
<p>Developing more sophisticated attention models that incorporate economic principles can significantly advance AI systems. These models can better mimic human cognition and decision-making processes, leading to AI that not only processes information efficiently but also understands and responds to contextual nuances in a human-like manner.</p>
<p>Exploring the ethical implications of attention management, particularly in AI systems, is crucial for ensuring that these technologies are developed and deployed responsibly. Addressing ethical considerations can help safeguard user autonomy and well-being, ensuring that AI systems respect and enhance human experiences rather than exploit or manipulate them.</p>
</section>
</section>
<section id="conclusions" class="level2">
<h2 class="anchored" data-anchor-id="conclusions">Conclusions</h2>
<p>The attention paradigm serves as a powerful bridge between NLP and economic theory, offering profound insights into the management of information resources. By exploring the parallels between attention mechanisms in NLP and attention economics, we gain a deeper understanding of both human cognition and artificial intelligence. This interdisciplinary approach not only enhances our theoretical knowledge but also has practical implications for the design of more efficient and human-centric technologies. As we continue to navigate an information-rich world, the integration of these fields will be crucial in shaping the future of information management and technology design. This convergence is especially relevant in an era where big tech companies have leveraged attention economics to drive their growth, overshadowing traditional media sectors such as television and newspapers. By harnessing the power of attention, these companies have revolutionized revenue models and reshaped entire industries, demonstrating the transformative impact of managing and monetizing attention in the digital age. Conversely, recognizing the potential for adversarial use of these principles underscores the importance of developing strategies to safeguard the integrity of information and protect the public from manipulation.</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p>James, W. (1890). <em>The Principles of Psychology</em>, Vol. 1. New York: Henry Holt and Company. Retrieved from <a href="https://www.gutenberg.org/ebooks/57628">Project Gutenberg</a>.</p>
<p>Bahdanau, D., Cho, K., &amp; Bengio, Y. (2014). <a href="https://arxiv.org/abs/1409.0473">Neural Machine Translation by Jointly Learning to Align and Translate</a>. <em>arXiv preprint arXiv:1409.0473</em>.</p>
<p>Vaswani, A., Shazeer, N., Parmar, N., Uszkoreit, J., Jones, L., Gomez, A. N., Kaiser, Ł., &amp; Polosukhin, I. (2017). <a href="https://papers.nips.cc/paper/7181-attention-is-all-you-need.pdf">Attention Is All You Need</a>. <em>Advances in Neural Information Processing Systems, 30</em>, 5998-6008.</p>
<p>Child, R., Gray, S., Radford, A., &amp; Sutskever, I. (2019). <a href="https://arxiv.org/abs/1904.10509">Generating Long Sequences with Sparse Transformers</a>. <em>arXiv preprint arXiv:1904.10509</em>.</p>
<p>Benkler, Y. (2006). The Wealth of Networks: How Social Production Transforms Markets and Freedom. Yale University Press.</p>
<p>Benkler, Y., Faris, R., &amp; Roberts, H. (2018). Network Propaganda: Manipulation, Disinformation, and Radicalization in American Politics. Oxford University Press.</p>
<p>Blom, J. N., &amp; Hansen, K. R. (2015). <a href="https://www.sciencedirect.com/science/article/abs/pii/S0378216614001826">Click Bait: Forward-Reference as Lure in Online News Headlines</a>. <em>Journal of Pragmatics</em>, 76, 87-100.</p>
<p>Byman, D. (2015). Al Qaeda, the Islamic State, and the Global Jihadist Movement: What Everyone Needs to Know. Oxford University Press.</p>
<p>Davenport, T. H. (2005). Thinking for a Living: How to Get Better Performances and Results from Knowledge Workers. Harvard Business School Press.</p>
<p>Davenport, T. H., &amp; Beck, J. C. (2001). The Attention Economy: Understanding the New Currency of Business. Harvard Business School Press.</p>
<p>Eckler, P., &amp; Bolls, P. (2011). <a href="https://www.tandfonline.com/doi/abs/10.1080/15252019.2011.10722180">Spreading the Virus: Emotional Tone of Viral Advertising and Its Effect on Forwarding Intentions and Attitudes</a>. <em>Journal of Interactive Advertising</em>, 11(2), 1-11.</p>
<p>Goldhaber, M. H. (1997). <a href="https://firstmonday.org/ojs/index.php/fm/article/view/519/440">The Attention Economy and the Net</a>. <em>First Monday</em>, 2(4).</p>
<p>Kietzmann, J. H., Hermkens, K., McCarthy, I. P., &amp; Silvestre, B. S. (2011). <a href="https://www.sciencedirect.com/science/article/abs/pii/S0007681311000061">Social Media? Get Serious! Understanding the Functional Building Blocks of Social Media</a>. <em>Business Horizons</em>, 54(3), 241-251.</p>
<p>Nielsen, J., &amp; Loranger, H. (2006). Prioritizing Web Usability. New Riders.</p>
<p>Simon, H. A. (1971). Designing Organizations for an Information-Rich World. In Martin Greenberger (Ed.), <em>Computers, Communications, and the Public Interest</em> (pp.&nbsp;37-72). The Johns Hopkins Press.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>machine learning</category>
  <category>essay</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/attentions/</guid>
  <pubDate>Mon, 18 Apr 2022 22:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/attentions/attentions.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Controllo delle Partite IVA in Excel Tramite il Servizio VIES</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/controllo-piva-vies-api/</link>
  <description><![CDATA[ 





<section id="introduzione" class="level2">
<h2 class="anchored" data-anchor-id="introduzione">Introduzione</h2>
<p>Un cliente aveva qualche migliaia di Partite IVA europee da controllare e la sindrome del buon samaritano mi ha costretto a spolverare il VBA per poter sfruttare lo strumento client più amato nelle aziende: Excel!</p>
<p>Questa guida, pertanto, ti mostra come utilizzare un file Excel per controllare la validità delle Partite IVA tramite il servizio <a href="https://ec.europa.eu/taxation_customs/vies/#/vat-validation"><strong>VIES</strong></a> (VAT Information Exchange System).</p>
<p>Il post è diviso in due parti: la prima è pensata per gli utenti che non hanno esperienza di programmazione, ma hanno un minimo di conoscenza di Excel e la seconda è per chi ha conoscenze di base in <strong>VBA</strong> e vuole modificare o personalizzare il file Excel o il codice.</p>
</section>
<section id="come-utilizzare-il-file-excel" class="level2">
<h2 class="anchored" data-anchor-id="come-utilizzare-il-file-excel">Come utilizzare il file Excel</h2>
<p>Questa sezione è per chi vuole semplicemente utilizzare il foglio Excel già predisposto per controllare le Partite IVA senza la necessità di modificare il codice.</p>
<section id="esecuzione-del-controllo" class="level3">
<h3 class="anchored" data-anchor-id="esecuzione-del-controllo">Esecuzione del controllo</h3>
<p>Passaggi per eseguire il controllo delle Partite IVA:</p>
<ol type="1">
<li><p><strong>Apri il file Excel</strong>: Assicurati di scaricare e aprire il file <a href="CONTROLLO-PARTITE-IVA-CON-VIES.xlsm">Excel</a>.</p></li>
<li><p><strong>Inserisci i dati delle Partite IVA</strong>:</p>
<ul>
<li><p>Vai al foglio specificato nella cella <strong>B3</strong> del foglio <strong>CONFIGURAZIONE</strong>.</p></li>
<li><p>In questo foglio troverai le seguenti colonne:</p>
<ul>
<li><strong>Colonna A (CODICE PAESE)</strong>: Inserisci il codice del paese (es. IT per Italia, FR per Francia, etc.).</li>
<li><strong>Colonna B (P.IVA)</strong>: Inserisci il numero di Partita IVA da controllare.</li>
<li><strong>Colonna C (ESITO CONTROLLO CON VIES)</strong>: I risultati del controllo effettuato tramite il servizio VIES appariranno qui.</li>
<li><strong>Colonna D (ESITO CONTROLLO SINTATTICO (NON LIMITANTE))</strong>: Qui verrà riportato il risultato del controllo sintattico della Partita IVA, ovvero se il formato è valido o meno, basato su una regex (non blocca l’esecuzione del controllo VIES).</li>
</ul></li>
</ul></li>
<li><p><strong>Clicca sul bottone per eseguire il controllo</strong>:</p>
<ul>
<li><p>Nel foglio <strong>CONFIGURAZIONE</strong>, troverai un bottone a forma di <strong>triangolo nero</strong>, simile al tasto “Play” di un lettore multimediale.</p></li>
<li><p><strong>Clicca sul bottone</strong> per avviare il controllo delle Partite IVA.</p></li>
</ul></li>
<li><p><strong>Interpreta i risultati</strong>:</p>
<ul>
<li><p>Una volta avviato il controllo, i risultati verranno visualizzati:</p>
<ul>
<li><strong>Colonna C</strong>: Mostra il risultato del controllo tramite il servizio VIES.</li>
<li><strong>Colonna D</strong>: Mostra se il formato della Partita IVA è valido o meno (controllo sintattico). Se il controllo sintattico è positivo, apparirà “Valida”, se è negativo apparirà “Non valida”.</li>
</ul></li>
<li><p>Alla fine del processo, comparirà una <strong>finestra di riepilogo</strong> che mostra il numero totale di Partite IVA controllate, quante sono risultate valide o non valide, gli errori riscontrati, e le Partite IVA vuote.</p></li>
</ul></li>
</ol>
</section>
<section id="riepilogo-dei-messaggi" class="level3">
<h3 class="anchored" data-anchor-id="riepilogo-dei-messaggi">Riepilogo dei messaggi</h3>
<p>Al termine dell’esecuzione, il sistema visualizzerà una finestra di dialogo che mostrerà il seguente riepilogo:</p>
<ul>
<li><p><strong>Numero di P.IVA controllate</strong>: Numero totale di Partite IVA processate.</p></li>
<li><p><strong>Valide in VIES</strong>: Partite IVA che risultano valide dopo il controllo con il servizio VIES.</p></li>
<li><p><strong>Non valide in VIES</strong>: Partite IVA che risultano non valide nel servizio VIES (potrebbero non essere registrate o essere errate).</p></li>
<li><p><strong>Errori</strong>: Numero di errori riscontrati durante il controllo (ad esempio, problemi con il servizio VIES o con i dati).</p></li>
<li><p><strong>Vuote</strong>: Numero di righe in cui la Partita IVA non era presente o la cella era vuota.</p></li>
<li><p><strong>Efficienza</strong>: Velocità di controllo espressa in Partite IVA per minuto.</p></li>
</ul>
</section>
</section>
<section id="personalizzare-e-modificare-il-codice" class="level2">
<h2 class="anchored" data-anchor-id="personalizzare-e-modificare-il-codice">Personalizzare e modificare il codice</h2>
<p>Questa sezione è pensata per chi ha già una conoscenza di base di <strong>VBA</strong> e desidera personalizzare o modificare il codice VBA per adattarlo alle proprie necessità.</p>
<section id="struttura-del-codice" class="level3">
<h3 class="anchored" data-anchor-id="struttura-del-codice">Struttura del Codice</h3>
<p>Il codice VBA esegue principalmente due controlli:</p>
<ol type="1">
<li><p><strong>Validazione del formato della Partita IVA</strong>: Utilizza un’espressione regolare (regex) per verificare che il formato della Partita IVA sia conforme alle regole del paese.</p></li>
<li><p><strong>Controllo tramite VIES</strong>: Invia una richiesta al servizio VIES per verificare se la Partita IVA è valida.</p></li>
</ol>
</section>
<section id="come-modificare-il-codice-vba" class="level3">
<h3 class="anchored" data-anchor-id="come-modificare-il-codice-vba">Come modificare il codice VBA</h3>
<ol type="1">
<li><p><strong>Aprire l’editor VBA</strong>:</p>
<ul>
<li><p>Premi <code>ALT + F11</code> per aprire l’editor VBA.</p></li>
<li><p>Nel pannello a sinistra, troverai un modulo chiamato <strong>Modulo1</strong> o simile. Qui è contenuto tutto il codice.</p></li>
</ul></li>
<li><p><strong>Controllo sintattico</strong></p></li>
</ol>
<p>Il controllo sintattico del formato della Partita IVA non blocca il controllo tramite VIES. Anche se il controllo fallisce (ad esempio, se il formato è errato), la richiesta al servizio VIES verrà comunque effettuata. Il risultato del controllo sintattico viene inserito nella <strong>Colonna D (ESITO CONTROLLO SINTATTICO (NON LIMITANTE))</strong>. Se il formato è valido, apparirà “Valida”, altrimenti “Non valida”.</p>
</section>
<section id="modifica" class="level3">
<h3 class="anchored" data-anchor-id="modifica">Modifica</h3>
<p>Se desideri modificare o aggiungere una regex per un nuovo paese, segui questi passaggi:</p>
<ol type="1">
<li><p>Vai nel foglio <strong>CONFIGURAZIONE</strong>.</p></li>
<li><p>Inserisci il <strong>codice del paese</strong> nella colonna A (es. “PT” per il Portogallo).</p></li>
<li><p>Inserisci il pattern <strong>regex</strong> corretto nella colonna B per validare il formato delle Partite IVA del paese specifico (ad esempio, per il Portogallo, potrebbe essere <code>^\d{9}$</code>).</p></li>
<li><p>Salva e chiudi.</p></li>
</ol>
<p>Il codice VBA utilizzerà automaticamente la regex inserita per validare il formato delle Partite IVA per quel paese.</p>
<p>Altre configurazioni:</p>
<ul>
<li><p><strong>Numero massimo di righe da controllare</strong>: Se nella cella <strong>B1</strong> del foglio <strong>CONFIGURAZIONE</strong> non viene inserito un valore, la macro controllerà tutte le righe con Partite IVA fino alla prima riga vuota. Se viene inserito un numero, controllerà solo quel numero di righe.</p></li>
<li><p><strong>Codice paese predefinito</strong>: Se una Partita IVA non ha un codice paese associato (colonna A vuota), verrà usato il codice predefinito specificato nella cella <strong>B2</strong> del foglio <strong>CONFIGURAZIONE</strong>.</p></li>
</ul>
</section>
</section>
<section id="riassumendo" class="level2">
<h2 class="anchored" data-anchor-id="riassumendo">Riassumendo</h2>
<p>Questa guida ti permette di utilizzare un file Excel per controllare le Partite IVA europee tramite il servizio VIES. Se sei un utente che non ha familiarità con la programmazione, puoi facilmente utilizzare il file cliccando semplicemente su un bottone. Se hai invece conoscenze di VBA, puoi personalizzare il codice o modificare il file per adattarlo meglio alle tue esigenze specifiche, come l’aggiunta di nuovi paesi o la modifica dei messaggi restituiti.</p>
<p>In questo modo, puoi automatizzare il controllo delle Partite IVA e risparmiare tempo nella gestione dei dati aziendali.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>tools</category>
  <category>personal productivity</category>
  <category>🇮🇹</category>
  <guid>https://antomon.github.io/posts/controllo-piva-vies-api/</guid>
  <pubDate>Sun, 21 Nov 2021 23:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/controllo-piva-vies-api/spreadsheet-checks.webp" medium="image" type="image/webp"/>
</item>
</channel>
</rss>
