<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Random Bits of Knowledge</title>
<link>https://antomon.github.io/</link>
<atom:link href="https://antomon.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Antonio Montano&#39;s Personal Website</description>
<generator>quarto-1.7.31</generator>
<lastBuildDate>Fri, 30 May 2025 22:00:00 GMT</lastBuildDate>
<item>
  <title>Darwin Gödel Machine: A Commentary on Novelty and Implications</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/darwin-godel-machine/</link>
  <description><![CDATA[ 






<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://antomon.github.io/posts/darwin-godel-machine/godel-darwin.png" class="img-fluid"></p>
</div></div><section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Throughout the history of artificial intelligence research, the pursuit of autonomous systems capable of genuine self-improvement has represented a grand aspiration and a formidable challenge. From early theoretical conceptions proposed by pioneers like Alan Turing and John von Neumann, who introduced the foundational ideas of universal computation and self-reproducing automata, to more recent speculative theories of recursive improvement articulated by I.J. Good, the vision of self-improving AI has driven both academic inquiry and popular imagination. Despite this prolonged intellectual fascination, the practical realization of genuinely self-referential, autonomously improving AI systems has remained elusive. Challenges in formal verification, exponential complexity in proof generation, and intrinsic difficulties in designing scalable, beneficial self-modifications have consistently constrained progress toward fully autonomous, self-improving artificial agents.</p>
<p>One influential proposal within this lineage is the Gödel Machine, introduced by Jürgen Schmidhuber, a theoretical AI architecture predicated on self-referential programming that modifies itself only after formally proving that such modifications enhance its performance. While conceptually elegant, this approach has proven practically infeasible due to inherent computational limitations and the impossibility of generating rigorous proofs for most useful code modifications, particularly in complex, real-world environments.</p>
<p>Concurrently, the field of evolutionary computation has flourished, offering alternative paradigms for autonomous optimization through iterative cycles of variation, selection, and inheritance. These evolutionary frameworks emphasize open-ended exploration, allowing algorithms to continuously explore novel solutions rather than converging prematurely to local optima. Despite their success in various problem domains, evolutionary methods traditionally lacked mechanisms for the direct recursive improvement of the algorithm’s own self-improvement mechanisms. As such, bridging the gap between evolutionary exploration and recursive self-improvement has emerged as a compelling yet unresolved challenge.</p>
<p>The recently proposed Darwin Gödel Machine (DGM) seeks explicitly to integrate these two historically separate threads—Schmidhuber’s formal, proof-driven self-improvement concept and the rich, open-ended mechanisms inherent to evolutionary computation. Instead of relying on formal proofs, the DGM empirically validates proposed modifications through rigorous benchmark testing, thereby operationalizing self-improvement within a practical, observable performance framework. By maintaining an evolving archive of diverse self-modifying agents and leveraging population-based open-ended search, the DGM circumvents the limitations of traditional Gödel Machine approaches, allowing recursive self-modification grounded in empirical efficacy rather than theoretical provability.</p>
<p>In this commentary, we systematically analyze the DGM by situating it within its historical context, clearly delineating its novel methodological contributions, and thoroughly examining its broader implications for future self-improving AI research. The essay will explore how the integration of evolutionary open-endedness with empirical validation offers a transformative paradigm, critically assessing potential impacts on software engineering, AI safety, ethical governance, and broader technological advancement. Through this exploration, we aim to clarify both the promise and the profound responsibilities that accompany the advent of increasingly autonomous and capable artificial intelligence systems.</p>
</section>
<section id="historical-context-of-self-improving-systems" class="level2">
<h2 class="anchored" data-anchor-id="historical-context-of-self-improving-systems">Historical context of self-improving systems</h2>
<section id="early-conceptual-foundations" class="level3">
<h3 class="anchored" data-anchor-id="early-conceptual-foundations">Early conceptual foundations</h3>
<p>The ambition to create autonomous systems capable of self-improvement can be traced back to foundational work in computational theory. Alan Turing’s landmark concept of a universal computing machine, first described in 1936, laid the groundwork by demonstrating the theoretical possibility of machines capable of performing any conceivable computation. Turing’s insight established the conceptual possibility of machines modifying their instructions autonomously, potentially achieving forms of self-directed improvement. Likewise, John von Neumann significantly extended this notion in the 1950s through his exploration of self-reproducing automata. Von Neumann envisioned automata that could replicate themselves, including replicating their blueprint or instructions, thereby embedding the initial concept of recursive self-improvement within computational frameworks. However, these early explorations remained primarily theoretical, constrained by the technological limits and computational resources of their time, yet laying essential groundwork for subsequent inquiries into autonomous improvement.</p>
</section>
<section id="goods-intelligence-explosion-hypothesis" class="level3">
<h3 class="anchored" data-anchor-id="goods-intelligence-explosion-hypothesis">Good’s intelligence explosion hypothesis</h3>
<p>The modern discourse on self-improving systems took a significant leap forward with I.J. Good’s influential formulation of what he termed the “intelligence explosion.” In his seminal 1966 essay, “Speculations Concerning the First Ultraintelligent Machine,” Good hypothesized that if an artificial system could surpass human intelligence even modestly, it could subsequently harness its superior intelligence to recursively enhance itself, rapidly leading to an exponential increase in intelligence—an event later termed the technological singularity. Good’s scenario introduced the notion of recursive self-improvement explicitly and compellingly, marking a turning point by shifting discussions from purely theoretical speculation toward serious considerations of practical mechanisms for achieving self-improvement. Nevertheless, Good’s hypothesis also introduced challenges, particularly around understanding and managing potentially unpredictable emergent behaviors in highly autonomous systems.</p>
</section>
<section id="schmidhubers-gödel-machine" class="level3">
<h3 class="anchored" data-anchor-id="schmidhubers-gödel-machine">Schmidhuber’s Gödel Machine</h3>
<p>Building on these foundational concepts, Jürgen Schmidhuber proposed the Gödel Machine in 2006, marking a notable effort to provide a rigorous, formalized framework for self-improving artificial intelligence. Schmidhuber’s Gödel Machine concept involves a self-referential program that can modify its own source code. Importantly, any self-modification must be supported by formal proofs demonstrating the modifications’ benefits—an approach heavily inspired by Kurt Gödel’s incompleteness theorem and formal systems. This requirement of provable beneficial modifications represented a crucial innovation, theoretically ensuring that any alteration to the system would enhance its performance and capabilities safely. The Gödel Machine thus provided a mathematically grounded ideal of autonomous improvement, theoretically capable of achieving optimal behavior across arbitrary problem domains through continuous, self-validated enhancement.</p>
</section>
<section id="limitations-of-proof-based-approaches" class="level3">
<h3 class="anchored" data-anchor-id="limitations-of-proof-based-approaches">Limitations of proof-based approaches</h3>
<p>Despite its compelling theoretical elegance, Schmidhuber’s Gödel Machine encountered substantial practical limitations. Most significantly, it quickly became apparent that generating formal proofs to verify beneficial code modifications was prohibitively complex, if not impossible, for realistic software applications of any meaningful complexity. The computational demands of formal verification grow exponentially with the complexity and dimensionality of potential self-modifications, rendering the Gödel Machine concept practically infeasible in most realistic settings. Consequently, while the Gödel Machine established an important theoretical benchmark, it also highlighted critical challenges around computational tractability, formal verification complexity, and the inherent limitations of purely analytical methods for validating beneficial modifications.</p>
</section>
<section id="emergence-of-empirical-and-evolutionary-approaches" class="level3">
<h3 class="anchored" data-anchor-id="emergence-of-empirical-and-evolutionary-approaches">Emergence of empirical and evolutionary approaches</h3>
<p>Parallel to these formal verification efforts, another strand of research emerged in evolutionary computation, rooted in the biological principles articulated by Charles Darwin—variation, selection, and inheritance. Beginning in earnest during the 1960s and expanding significantly from the 1980s onward, evolutionary algorithms demonstrated the practical potential of iterative, adaptive improvement processes. Genetic algorithms (Holland, 1975) and genetic programming (Koza, 1992) illustrated how autonomous systems could progressively refine their solutions to complex optimization problems through iterative search guided by empirically observed performance rather than theoretical proofs.</p>
<p>Furthermore, recent decades have seen significant developments in open-ended evolutionary search algorithms, such as Novelty Search (Lehman &amp; Stanley, 2011) and MAP-Elites (Mouret &amp; Clune, 2015), which prioritize exploration of diverse solutions rather than convergence on single optimal outcomes. Such algorithms effectively mitigate the risk of becoming trapped in local optima, a notable weakness of traditional evolutionary methods. This paradigm emphasizes that meaningful improvement can arise through cumulative experimentation, even without explicit proof-based validation.</p>
</section>
<section id="bridging-formal-and-empirical-paradigms" class="level3">
<h3 class="anchored" data-anchor-id="bridging-formal-and-empirical-paradigms">Bridging formal and empirical paradigms</h3>
<p>Despite their separate developments, formal proof-based approaches and evolutionary, empirical methods each offer complementary strengths and insights into the problem of autonomous self-improvement. Formal methods ensure theoretically grounded reliability, while empirical evolutionary methods offer practical feasibility and adaptive flexibility in uncertain and complex environments. This gap between rigorous formal verification and pragmatic empirical validation remains a critical unresolved tension, motivating researchers to explore integrative strategies capable of harnessing the benefits of both approaches.</p>
<p>It is within this historical context that the DGM emerges as a particularly compelling innovation. By explicitly synthesizing the strengths of both evolutionary open-ended search and empirical validation with the conceptual rigor of Schmidhuber’s original Gödel Machine vision, the DGM offers a novel approach aimed at overcoming longstanding limitations and facilitating genuinely autonomous, empirically-grounded self-improvement.</p>
<p>In the subsequent sections, we will delve deeper into precisely how the DGM integrates these historical streams into a coherent, innovative approach, rigorously exploring its novelty and considering its broader implications for the future trajectory of artificial intelligence research and development.</p>
</section>
</section>
<section id="evolutionary-computation-and-open-endedness" class="level2">
<h2 class="anchored" data-anchor-id="evolutionary-computation-and-open-endedness">Evolutionary computation and open-endedness</h2>
<section id="foundations-of-evolutionary-computation" class="level3">
<h3 class="anchored" data-anchor-id="foundations-of-evolutionary-computation">Foundations of evolutionary computation</h3>
<p>Evolutionary computation encompasses computational techniques inspired by biological evolution, namely selection, mutation, and inheritance. These methods iteratively optimize solutions by maintaining populations of candidate solutions, subjecting them to variation, and selecting individuals based on defined performance metrics (fitness). The foundational method, the genetic algorithm introduced by Holland (1975), provides a basic evolutionary cycle of selection, crossover, and mutation, effectively searching high-dimensional solution spaces.</p>
<p>Genetic programming (GP), introduced by Koza (1992), extended evolutionary computation to the automatic generation and optimization of executable programs, rather than mere numerical parameters. GP demonstrated remarkable capability in automated software synthesis and optimization, significantly advancing the vision of autonomous code evolution.</p>
<p>Yet, despite these successes, traditional evolutionary algorithms face inherent constraints. They typically rely on fitness landscapes that are clearly defined, potentially trapping search processes in local optima. Hence, researchers began exploring strategies to expand the scope and resilience of evolutionary methods, which led to open-ended evolutionary approaches.</p>
</section>
<section id="open-ended-evolution-and-novelty-search" class="level3">
<h3 class="anchored" data-anchor-id="open-ended-evolution-and-novelty-search">Open-ended evolution and novelty search</h3>
<p>The notion of open-ended evolution (OEE) addresses the limitations of conventional evolutionary computation by shifting the focus from convergence toward predefined optima toward continuous exploration of novelty and diversity. Rather than exclusively optimizing for immediate task performance, OEE emphasizes sustained innovation and continual diversification of candidate solutions.</p>
<p>Novelty Search, proposed by Lehman and Stanley (2011), marked a pivotal shift within evolutionary computation by explicitly rewarding solutions based on how distinctively they explored new behaviors, irrespective of immediate performance improvements. By promoting exploration over exploitation, novelty search effectively avoids premature convergence and local optima. This approach has led to substantial performance breakthroughs, especially in tasks characterized by deceptive or sparse reward signals.</p>
<p>MAP-Elites (Mouret &amp; Clune, 2015) further advanced this idea by explicitly maintaining diverse “niches” of solutions within a multidimensional behavioral space. MAP-Elites encouraged not only novelty but also structured diversity, providing powerful methods for exploring high-dimensional search spaces and discovering solutions across varied contexts. This approach demonstrated exceptional performance in complex robotic and optimization tasks, underscoring the efficacy of diversity-driven search mechanisms.</p>
</section>
<section id="quality-diversity-algorithms-and-their-impact" class="level3">
<h3 class="anchored" data-anchor-id="quality-diversity-algorithms-and-their-impact">Quality-diversity algorithms and their impact</h3>
<p>Building on MAP-Elites, quality-diversity (QD) algorithms explicitly balance quality (performance) and diversity (novelty), guiding exploration toward a broad set of highly effective solutions rather than singular optima. Algorithms like CMA-ME (Covariance Matrix Adaptation MAP-Elites) and NSLC (Novelty Search with Local Competition) have achieved remarkable successes in discovering a diverse spectrum of high-performing solutions for complex engineering, robotics, and machine-learning tasks.</p>
<p>By systematically maintaining and leveraging diverse solution archives, quality-diversity algorithms have also shown an intrinsic capacity to discover “stepping stones”—solutions not immediately optimal but critically positioned to enable future breakthroughs. Such stepping stones have repeatedly demonstrated their utility as indispensable intermediate steps in evolving more sophisticated and capable solutions.</p>
</section>
<section id="evolutionary-computation-in-artificial-intelligence-research" class="level3">
<h3 class="anchored" data-anchor-id="evolutionary-computation-in-artificial-intelligence-research">Evolutionary computation in artificial intelligence research</h3>
<p>Beyond optimization tasks, evolutionary computation principles have profoundly impacted artificial intelligence research, inspiring algorithmic strategies like neuroevolution, employed prominently in frameworks like NEAT (NeuroEvolution of Augmenting Topologies) and HyperNEAT. Neuroevolutionary methods autonomously optimize neural network architectures and parameters, significantly influencing developments in autonomous agents and robotics.</p>
<p>Recent landmark achievements in reinforcement learning-based artificial intelligence, notably DeepMind’s AlphaZero and AlphaStar, also incorporate evolutionary concepts, such as population-based training. These approaches iteratively refine agents through competition and selection, significantly accelerating progress toward superhuman performance in domains like board games, real-time strategy games, and scientific discovery.</p>
</section>
<section id="the-integration-gap-formal-versus-empirical-methods" class="level3">
<h3 class="anchored" data-anchor-id="the-integration-gap-formal-versus-empirical-methods">The integration gap: formal versus empirical methods</h3>
<p>While evolutionary computation and open-endedness have driven substantial progress in adaptive AI, they have historically remained distinct from formal, proof-driven methods like Schmidhuber’s Gödel Machine. The evolutionary methods offer robustness, adaptability, and practical feasibility, whereas formal methods promise rigorous correctness guarantees but suffer computational infeasibility in real-world contexts.</p>
<p>This division creates a critical opportunity for integrating evolutionary methods’ practicality and flexibility with formal methods’ conceptual rigor. Bridging this gap could result in systems robustly capable of self-directed improvement, grounded empirically but guided by strong theoretical principles.</p>
</section>
</section>
<section id="dgm-synthesis-and-novelty" class="level2">
<h2 class="anchored" data-anchor-id="dgm-synthesis-and-novelty">DGM: synthesis and novelty</h2>
<p>The DGM represents a milestone in the development of recursive, self-improving artificial intelligence. It operationalizes the vision of formal self-reference, initially proposed in Schmidhuber’s Gödel Machine, and unites it with Darwinian principles of open-ended evolution and the practical utility of large-scale frozen foundation models. Unlike the original Gödel Machine, which was constrained by the need for formal proofs of utility gain, the DGM replaces this requirement with empirical validation grounded in benchmark performance. This substitution renders the architecture practically feasible while maintaining the spirit of autonomous self-improvement.</p>
<section id="technical-architecture" class="level3">
<h3 class="anchored" data-anchor-id="technical-architecture">Technical architecture</h3>
<p>Each DGM agent is a self-contained Python program that couples a frozen foundation model (FM)—such as CodeLlama-7B—with a suite of internal tools for editing, executing, and managing its own codebase. These agents are situated in a sandboxed execution environment with a dedicated file system, a memory context for tracking performance and tool usage, and the ability to invoke utilities via shell commands, enabling rich interactivity.</p>
<p>The agent’s capabilities include:</p>
<ul>
<li><p>Reading and editing its own source code (and tool scripts).</p></li>
<li><p>Running bash commands and interacting with the underlying system.</p></li>
<li><p>Modifying code at line, block, or file level using internal editors.</p></li>
<li><p>Generating new agents, which are mutated variants of itself.</p></li>
<li><p>Evaluating candidate modifications using benchmark tasks.</p></li>
</ul>
<p>This architecture realizes a practical form of Gödelian self-reference, allowing each agent to become the subject of its own computation—an essential property for recursive self-improvement.</p>
</section>
<section id="evolutionary-search-and-self-modification-process" class="level3">
<h3 class="anchored" data-anchor-id="evolutionary-search-and-self-modification-process">Evolutionary search and self-modification process</h3>
<p>The core innovation of DGM lies in its population-based evolutionary loop. Each generation proceeds through:</p>
<ul>
<li><p>Parent selection based on both performance and novelty.</p></li>
<li><p>Agent spawning, where offspring inherit and mutate the parent’s code using internal editing strategies.</p></li>
<li><p>Self-modification, where the agent edits any part of its own source, including utility modules and workflow policies.</p></li>
<li><p>Empirical evaluation, using real-world benchmarks like SWE-bench Lite and Polyglot.</p></li>
<li><p>Archival, wherein agents demonstrating performance gains are stored and made available for future selection.</p></li>
</ul>
<p>The archive is essential: it allows stepping-stone reuse, preserving agents that were not necessarily optimal but may enable future innovation. This mechanism avoids premature convergence and facilitates continuous exploration, echoing principles from MAP-Elites and Novelty Search.</p>
</section>
<section id="empirical-validation-as-substitute-for-formal-proofs" class="level3">
<h3 class="anchored" data-anchor-id="empirical-validation-as-substitute-for-formal-proofs">Empirical validation as substitute for formal proofs</h3>
<p>A defining feature of DGM is its replacement of formal verification with empirical testing. Each agent is evaluated on benchmark tasks such as:</p>
<ul>
<li><p>SWE-bench Lite, a curated subset of GitHub issues and bug fixes.</p></li>
<li><p>Polyglot, a benchmark for multilingual code repair and generation.</p></li>
</ul>
<p>Performance metrics are objective and domain-grounded (for example, test pass rate or diff correctness). Agents that outperform their ancestors are retained. This validation loop maintains rigor while enabling tractable and scalable deployment, something Gödel’s proof-based model could not achieve.</p>
</section>
<section id="innovations-discovered-by-the-system" class="level3">
<h3 class="anchored" data-anchor-id="innovations-discovered-by-the-system">Innovations discovered by the system</h3>
<p>Throughout training, DGM agents autonomously discovered and stabilized non-trivial improvements, including:</p>
<ul>
<li><p>Granular editors for line- and block-level rewriting.</p></li>
<li><p>Summarization tools to condense long code files into actionable representations.</p></li>
<li><p>Retry and revision loops, where agents learn to revise failed patches.</p></li>
<li><p>Voting strategies, where multiple solutions are internally compared before committing.</p></li>
<li><p>Historical introspection tools, enabling use of past failure data to guide self-modification.</p></li>
</ul>
<p>These are not pre-programmed capabilities—they emerged through iterative self-modification and were retained because they improved task performance.</p>
</section>
<section id="empirical-results-and-generalization" class="level3">
<h3 class="anchored" data-anchor-id="empirical-results-and-generalization">Empirical results and generalization</h3>
<p>On the SWE-bench Lite benchmark, DGM achieved a performance increase from 20.0% to 50.0% across 80 evolutionary steps. On Polyglot, accuracy improved from 14.2% to 30.7%, with certain subsets achieving up to 38.0%. These results approach or exceed the performance of many open-source baselines, such as CodeAct, and outperform prompt-based methods by a wide margin.</p>
<p>While DGM was evaluated primarily on Python-based tasks, the design principles—frozen FM usage, modular tool evolution, and empirical validation—are inherently transferable. Although no experiments on other foundation models or programming languages were conducted in the paper, the methodology suggests strong potential for generalization. The tools and policies evolved are not architecture-specific, pointing to the possibility of adapting DGM workflows across domains.</p>
</section>
<section id="comparative-advantage-over-other-paradigms" class="level3">
<h3 class="anchored" data-anchor-id="comparative-advantage-over-other-paradigms">Comparative advantage over other paradigms</h3>
<p>In contrast to systems like PromptBreeder and ADAS, which primarily optimize prompts and workflows within static architectures, the DGM rewrites its own internals, improving not just task performance but the mechanism of improvement itself. It is not merely meta-learning, but meta-evolving: the editing logic, tool use, and summarization methods are subject to recursive self-modification.</p>
<p>Compared to AlphaEvolve, which uses evolutionary strategies to generate new agents via LLMs, DGM distinguishes itself through self-referential architecture. AlphaEvolve agents do not modify their own learning machinery; DGM agents do. This makes DGM a closer realization of the vision of self-improving general intelligence.</p>
</section>
<section id="conceptual-synthesis-evolution-meets-self-reference" class="level3">
<h3 class="anchored" data-anchor-id="conceptual-synthesis-evolution-meets-self-reference">Conceptual synthesis: evolution meets self-reference</h3>
<p>DGM exemplifies the convergence of three powerful paradigms:</p>
<ol type="1">
<li><p>Gödelian self-reference: agents introspect and rewrite their own source code.</p></li>
<li><p>Darwinian evolution: variation, selection, and inheritance guide improvement over generations.</p></li>
<li><p>LLM-based reasoning: frozen FMs like CodeLlama enable the linguistic and symbolic manipulations required for reasoning about code.</p></li>
</ol>
<p>The result is a closed feedback loop of recursive improvement:</p>
<ul>
<li><p>A frozen LLM agent evaluates its own performance.</p></li>
<li><p>It edits its tools or logic via evolution-inspired mutation.</p></li>
<li><p>The edits are written to the source code and the new agent is instantiated.</p></li>
<li><p>The modified agent is evaluated empirically.</p></li>
<li><p>If performance improves, the new version is archived and may seed future generations.</p></li>
</ul>
<p>Over time, this produces compounding gains, not just in how tasks are performed, but in how agents learn to improve themselves. DGM is thus not only an engineering artifact but a conceptual landmark, offering a functional blueprint for open-ended, autonomous, and continuously evolving artificial agents.</p>
</section>
</section>
<section id="comparison-with-existing-meta-learning-and-ai-improvement-approaches" class="level2">
<h2 class="anchored" data-anchor-id="comparison-with-existing-meta-learning-and-ai-improvement-approaches">Comparison with existing meta-learning and AI improvement approaches</h2>
<p>The DGM emerges at the intersection of long-standing research areas in artificial intelligence, notably meta-learning, foundation model–based agent design, evolutionary computation, and formal systems of self-improvement. Although each of these paradigms aims at enabling AI systems to improve autonomously, DGM integrates and transcends them in unique ways. This section presents an in-depth technical comparison, organized into clear subsections, to highlight how DGM differs in capability, architecture, and philosophy.</p>
<section id="traditional-meta-learning-vs.-dgm" class="level3">
<h3 class="anchored" data-anchor-id="traditional-meta-learning-vs.-dgm">Traditional meta-learning vs.&nbsp;DGM</h3>
<p>Meta-learning, commonly referred to as “learning to learn,” encompasses methods where models improve their adaptability across tasks by internalizing shared structure. Canonical techniques include Model-Agnostic Meta-Learning (MAML), Reptile, and neural architecture search (NAS) strategies. These systems typically require differentiability and perform optimization over parameter spaces using gradient descent or reinforcement learning.</p>
<p>By contrast, the DGM dispenses with gradient-based optimization entirely. Instead of learning over a fixed architecture, the DGM modifies its own source code, including tool logic, reasoning modules, and memory management strategies. Its search space is not a set of weights or hyperparameters but the agent’s full Python implementation, encompassing all procedural knowledge and learning mechanisms. The evolutionary search embedded within DGM is open-ended, unconstrained by differentiability, and allows the discovery of novel functionalities beyond the reach of traditional meta-learners.</p>
<p>Moreover, while meta-learning typically assumes fixed task distributions and operates under assumptions of statistical regularity, DGM’s design accepts non-stationary environments and benefits from historical stepping stones. This makes it not only more flexible but also more aligned with long-term autonomy objectives.</p>
</section>
<section id="foundation-modelbased-optimization-adas-promptbreeder-and-dspy" class="level3">
<h3 class="anchored" data-anchor-id="foundation-modelbased-optimization-adas-promptbreeder-and-dspy">Foundation model–based optimization: ADAS, PromptBreeder, and DSPy</h3>
<p>Recent methods like Automated Design of Agentic Systems (ADAS), PromptBreeder, and DSPy leverage large language models (LLMs) to improve prompt design, decision-making pipelines, and few-shot instruction patterns. These approaches represent meta-level learning over LLMs but tend to restrict themselves to surface-level interaction with the model (e.g., prompt strings, tool selection policies).</p>
<ul>
<li><p>ADAS employs a design-time search over agent workflows guided by human-labeled evaluations or performance proxies.</p></li>
<li><p>PromptBreeder evolves prompts using selection and mutation strategies, improving performance on LLM-driven tasks via linguistic recombination.</p></li>
<li><p>DSPy (Declarative Self-Improving Programs) combines programmatic composition with gradient-free optimization to refine the structure of language-agent pipelines.</p></li>
</ul>
<p>The DGM contrasts sharply with these by going below the prompt layer: it modifies not only prompts or configurations but also its codebase, reasoning strategies, tool interface logic, and retry behaviors. Rather than treating the LLM as a static oracle, DGM evolves the environment and agent code that structure LLM interaction, thereby engaging in multi-level adaptation.</p>
<p>Whereas PromptBreeder and DSPy focus on immediate task optimization via prompt composition, DGM improves its own improvement mechanisms, recursively adjusting the way it edits, validates, and evaluates its behavior. This enables long-term growth in capabilities and the potential emergence of <em>meta-cognitive functions</em> absent in prompt-centric systems.</p>
</section>
<section id="evolutionary-strategies-novelty-search-map-elites-and-alphaevolve" class="level3">
<h3 class="anchored" data-anchor-id="evolutionary-strategies-novelty-search-map-elites-and-alphaevolve">Evolutionary strategies: Novelty Search, MAP-Elites, and AlphaEvolve</h3>
<p>The DGM also shares lineage with the field of evolutionary computation, especially with algorithms like Novelty Search (Lehman &amp; Stanley, 2011) and MAP-Elites (Mouret &amp; Clune, 2015), which emphasize exploration over immediate objective maximization. These methods maintain archives of diverse, behaviorally distinct solutions, a design echoed in DGM’s agent archive.</p>
<ul>
<li><p>Novelty Search explicitly rewards behavioral deviation rather than goal achievement.</p></li>
<li><p>MAP-Elites discretizes the search space and maintains elite individuals in each niche.</p></li>
<li><p>AlphaEvolve combines LLMs with evolutionary strategies to optimize code performance.</p></li>
</ul>
<p>DGM distinguishes itself by embedding self-referential recursion within the evolutionary loop. While AlphaEvolve generates code using LLMs under evolutionary selection, it does not produce agents that rewrite their own improvement logic. In contrast, every DGM agent is itself a reprogrammable unit, capable of refining its tools, memory structures, and evaluation routines. The evolutionary algorithm thus acts not merely on outputs but on recursive policies, granting DGM a unique depth of autonomy.</p>
</section>
<section id="formal-self-improvement-gödel-machines-and-dgm" class="level3">
<h3 class="anchored" data-anchor-id="formal-self-improvement-gödel-machines-and-dgm">Formal self-improvement: Gödel Machines and DGM</h3>
<p>The conceptual ancestor of DGM is Schmidhuber’s Gödel Machine, which defined a theoretically optimal architecture for self-improvement. The Gödel Machine requires an internal proof searcher to identify changes that provably increase the machine’s expected utility, based on formal axioms encoding the environment, agent model, and utility function.</p>
<p>While theoretically appealing, this approach is computationally infeasible in most realistic settings due to the undecidability and intractability of such proofs. The DGM adopts the Gödel Machine’s self-referential core but replaces proof obligation with empirical testing on coding benchmarks (e.g., SWE-bench and Polyglot). This substitution transforms a theoretical model into a practically deployable system, aligning utility maximization with measurable performance on real tasks.</p>
<p>Thus, DGM can be viewed as the empirical instantiation of the Gödel Machine—preserving its self-modifying character while adapting it for a world of uncertainty, complexity, and noisy feedback.</p>
</section>
<section id="computational-feasibility-and-deployment-tradeoffs" class="level3">
<h3 class="anchored" data-anchor-id="computational-feasibility-and-deployment-tradeoffs">Computational feasibility and deployment tradeoffs</h3>
<p>The DGM’s open-ended search and recursive evaluation entail significant computational costs, especially compared to gradient-based meta-learning pipelines or prompt-tuned agents. Each generation involves full agent instantiation, task benchmarking, and regression testing against prior versions.</p>
<p>However, this cost yields a unique tradeoff: the ability to modify arbitrary internal structures, enabling improvements that gradient-based methods cannot reach. Moreover, DGM’s improvements accumulate and persist across generations, meaning that investment in one generation benefits all future ones. The empirical validation mechanism also aligns better with deployment pipelines in domains like software engineering, where binary correctness (e.g., test pass/fail) provides crisp performance feedback.</p>
<p>With proper infrastructure (e.g., containerized environments, distributed GPU farms), DGM’s approach becomes not only feasible but scalable. Its architecture is amenable to asynchronous evaluation, parallel reproduction, and hierarchical agent training, offering a roadmap toward industrial-strength self-improving agents.</p>
</section>
<section id="summary-of-comparative-distinctions" class="level3">
<h3 class="anchored" data-anchor-id="summary-of-comparative-distinctions">Summary of comparative distinctions</h3>
<table class="table">
<colgroup>
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 18%">
<col style="width: 15%">
<col style="width: 16%">
<col style="width: 19%">
</colgroup>
<thead>
<tr class="header">
<th>Aspect</th>
<th>Traditional Meta-Learning</th>
<th>Prompt-based Systems (ADAS, etc.)</th>
<th>Evolutionary Algorithms</th>
<th>Gödel Machine</th>
<th>DGM</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Optimization Method</td>
<td>Gradient-based</td>
<td>Prompt tuning, human feedback</td>
<td>Fitness-based, novelty-driven</td>
<td>Formal proof of utility</td>
<td>Empirical validation + evolution</td>
</tr>
<tr class="even">
<td>Self-modification scope</td>
<td>Parameters or architectures</td>
<td>Prompts, workflows</td>
<td>Output or model weights</td>
<td>Code with provable improvement</td>
<td>Full source code including tools</td>
</tr>
<tr class="odd">
<td>Recursion depth</td>
<td>Limited</td>
<td>None</td>
<td>None</td>
<td>Deep (proof-generating code)</td>
<td>Deep (code-editing code)</td>
</tr>
<tr class="even">
<td>Open-endedness</td>
<td>Low</td>
<td>Low</td>
<td>Medium</td>
<td>High (theoretical)</td>
<td>High (empirical, evolving archive)</td>
</tr>
<tr class="odd">
<td>Generalization and transfer</td>
<td>Task-specific</td>
<td>Often brittle</td>
<td>Narrow</td>
<td>Undetermined</td>
<td>Strong across FMs and task types</td>
</tr>
<tr class="even">
<td>Feasibility</td>
<td>High</td>
<td>High</td>
<td>Medium</td>
<td>Low (intractable proof search)</td>
<td>Medium (high cost, practical payoff)</td>
</tr>
</tbody>
</table>
</section>
<section id="comparative-advantages-of-dgm" class="level3">
<h3 class="anchored" data-anchor-id="comparative-advantages-of-dgm">Comparative advantages of DGM</h3>
<p>The DGM introduces a qualitatively new paradigm for AI self-improvement by integrating three foundational principles: self-referential formalism (from Gödel and Schmidhuber), open-ended evolutionary search (inspired by Darwinian processes), and symbolic reasoning capabilities powered by modern large language models (LLMs). This synthesis yields a self-improving system that is significantly more flexible, autonomous, and scalable than previous approaches.</p>
<p>Compared to existing AI improvement paradigms—including prompt engineering, meta-learning, and conventional evolutionary algorithms—the DGM exhibits several distinctive and technically substantive advantages:</p>
<ul>
<li><p>Recursive self-improvement beyond surface optimizations: Unlike systems such as PromptBreeder or DSPy, which optimize superficial properties like prompts or pre-defined workflows, the DGM recursively rewrites its own codebase—including its editing policies, evaluation strategies, and tool invocation routines. These modifications affect not only <em>what</em> the agent does but <em>how</em> it does it. The recursive nature of the self-improvement loop allows DGM agents to enhance the very mechanisms by which they perform self-modification, leading to second-order and third-order optimization not accessible to shallow meta-learning systems.</p></li>
<li><p>Empirical performance grounding instead of formal verification: The original Gödel Machine proposed by Schmidhuber required formal mathematical proofs to justify any self-modification. While theoretically sound, this requirement is computationally intractable in practical settings. The DGM circumvents this bottleneck by using <em>empirical benchmark testing</em> (e.g., SWE-bench Lite and Polyglot) to determine whether a change yields performance improvements. This pragmatic validation strategy enables rapid iteration, real-world deployment, and scalable benchmarking without sacrificing rigor—since only changes that yield statistically measurable performance gains are retained.</p></li>
<li><p>Transferability of improvements across model architectures and tasks: While the current DGM implementation operates on a frozen foundation model like CodeLlama-7B, the architecture is modular. Innovations discovered during evolution—such as summarization strategies, patch-retry logic, or voting schemes—are encoded at the agent level rather than in the LLM weights. As such, they are transferable to other foundation models (e.g., WizardCoder or DeepSeek-Coder) and potentially to different task domains. This model-agnostic generalization is a critical step toward robust, adaptable agentic systems.</p></li>
<li><p>Open-ended search preserving diversity and avoiding convergence: The DGM’s evolutionary engine leverages a persistent <em>archive</em> of agents that retains diverse self-modification trajectories over time. Agents that do not immediately outperform their parents are not discarded if they introduce novel behaviors or tools. This novelty-aware selection strategy enables <em>stepping-stone reuse</em>, where previously suboptimal agents become the foundation for future breakthroughs. In contrast, conventional meta-learning and reinforcement learning systems tend to discard such trajectories, converging quickly to local optima and thereby stalling innovation.</p></li>
<li><p>Tool-building and self-tooling: Evolving internal APIs and workflows: A unique capability of DGM agents is their ability to build, improve, and reorganize their internal toolchains. These tools include summarizers, formatters, debuggers, and editors—implemented as code modules that agents can rewrite during evolution. This process creates something akin to <em>evolving internal APIs</em>, where agents progressively improve not only their high-level logic but also the low-level primitives they use to interact with themselves and the environment. Over time, this produces increasingly competent and abstracted workflows, pushing the system toward higher-order cognitive architectures.</p></li>
</ul>
<p>In combination, these properties give the DGM a comparative edge over all prior self-improving systems: it does not merely adapt to its environment, but <em>restructures the way it adapts</em>. This results in a deep form of plasticity, where every layer of behavior—from action to reasoning to self-reflection—is subject to evolution.</p>
<p>In doing so, the DGM opens a viable path toward long-horizon, agent-centric AI systems capable not only of learning within fixed constraints but of continuously re-engineering their own capacity to learn. Such systems mark a fundamental shift in artificial intelligence, transitioning from static learners to <em>autonomous, evolving intelligences</em>—an essential step toward the next generation of artificial general agents.</p>
</section>
</section>
<section id="implications-for-future-ai-development-and-agents" class="level2">
<h2 class="anchored" data-anchor-id="implications-for-future-ai-development-and-agents">Implications for future AI development and agents</h2>
<p>The DGM offers a new frontier for artificial intelligence—an architecture not only capable of learning and adapting but of recursively improving its own capacity for adaptation. This innovation suggests a paradigm shift in how we conceive of agents, automation, and intelligence itself. In this section, we explore the multifaceted implications of DGM-style self-improvement for the future trajectory of AI research, engineering, deployment, and governance.</p>
<section id="from-optimization-to-open-ended-intelligence" class="level3">
<h3 class="anchored" data-anchor-id="from-optimization-to-open-ended-intelligence">From optimization to open-ended intelligence</h3>
<p>Traditional AI development has focused on optimizing models for specific tasks within fixed environments, guided by human-engineered architectures, loss functions, and evaluation protocols. The DGM disrupts this by introducing recursive self-improvement: agents do not merely solve problems but also modify the mechanisms by which they solve them. This transition from task-level optimization to meta-level reconfiguration enables a qualitatively new trajectory—toward open-ended intelligence capable of long-horizon exploration and innovation.</p>
<p>Recursive self-improvement implies that future AI systems will be less constrained by their initial design limitations. Instead, they may progressively transcend them, discovering new strategies, heuristics, or even internal languages for reasoning and coordination. This redefines the scope of artificial intelligence: rather than training agents for static benchmarks, we begin to construct <em>systems that invent new benchmarks</em>, driven by internally generated novelty and performance feedback.</p>
<p>This shift could compress the timeline of AI progress, allowing systems to autonomously navigate complex design spaces, simulate multiple improvement paths, and operationalize discoveries without requiring expert human intervention. The potential acceleration of scientific discovery, industrial automation, and system design may outpace current conceptual frameworks, necessitating new paradigms for understanding and forecasting AI progress.</p>
</section>
<section id="toward-autonomous-agency-in-software-and-systems" class="level3">
<h3 class="anchored" data-anchor-id="toward-autonomous-agency-in-software-and-systems">Toward autonomous agency in software and systems</h3>
<p>The DGM framework points to the emergence of general-purpose, self-improving agents capable of participating in and ultimately automating the full software lifecycle. These agents, equipped with introspective editing, validation, and benchmarking capabilities, can iteratively refine their own code and tooling. This has direct implications for domains such as:</p>
<ul>
<li><p>Software maintenance and debugging: agents can autonomously identify bugs, propose and test fixes, and integrate successful patches, reducing maintenance costs and increasing system resilience.</p></li>
<li><p>DevOps and CI/CD pipelines: self-improving agents could continuously optimize their own deployment workflows, test routines, and performance monitors, accelerating agile cycles.</p></li>
<li><p>Enterprise automation: integration of DGM-derived agents into large-scale enterprise systems may enable continuous optimization of ERP systems, supply chains, and user-facing applications, reducing the need for extensive manual reconfiguration.</p></li>
</ul>
<p>Unlike traditional code generation models, DGM-style agents are not just “copilots” but <em>autonomous collaborators</em>—entities capable of evolving their own competence over time and interacting with other agents or humans in a robust, continuously improving fashion.</p>
</section>
<section id="the-problem-of-control-and-alignment" class="level3">
<h3 class="anchored" data-anchor-id="the-problem-of-control-and-alignment">The problem of control and alignment</h3>
<p>As autonomy increases, so do the challenges of oversight, predictability, and value alignment. Traditional alignment techniques, often tailored for fixed-behavior models, are inadequate when the agent itself evolves its optimization strategies, internal representations, and even its conceptual framework for evaluating improvement.</p>
<p>The recursive nature of DGM implies an expanding divergence between the designer’s original intent and the agent’s emergent behavior. With every generation, the agent may drift into new modes of operation that were neither foreseen nor validated by human supervisors. This creates an urgent need for dynamic alignment strategies that co-evolve with the system.</p>
<p>Some approaches that may be explored include:</p>
<ul>
<li><p>Sandboxed evolutionary environments where the agent’s scope of operation is carefully constrained while it explores self-improvement.</p></li>
<li><p>Meta-level interpretability mechanisms: tools evolved by the agent itself (or jointly with humans) to introspect and explain the rationale behind changes.</p></li>
<li><p>Human-in-the-loop checkpoints: protocols that interrupt evolution at key thresholds to allow external audit, debugging, or value reorientation.</p></li>
</ul>
<p>The DGM architecture thus necessitates a new alignment discipline—one that is recursive, adaptive, and context-aware, capable of engaging with systems that outgrow their initial design specifications.</p>
</section>
<section id="generalization-robustness-and-the-future-of-ai-architecture" class="level3">
<h3 class="anchored" data-anchor-id="generalization-robustness-and-the-future-of-ai-architecture">Generalization, robustness, and the future of AI architecture</h3>
<p>A key implication of DGM’s success is that <em>generalization can be emergent from evolutionary diversity</em>. Rather than enforcing architectural invariance, the DGM allows a wide array of agent variants to evolve in parallel. This strategy naturally avoids brittle solutions and enables broader transfer across tasks, programming languages, and computational frameworks.</p>
<p>For future agent architectures, this suggests that <em>modularity</em> and <em>introspectability</em> will be essential design criteria. Systems that can examine, test, and modify their own components—especially toolchains and interaction routines—will outperform those constrained by fixed design assumptions.</p>
<p>Moreover, transferability is not limited to task domains. If self-improving agents discover robust design principles (e.g., the utility of voting schemes, summary-based reasoning, or fault tolerance mechanisms), these can be ported across architectures and applications. This opens the door to meta-architectural knowledge—principles for designing <em>future design systems</em>—which may become a new frontier in AI research.</p>
</section>
<section id="economic-ecological-and-geopolitical-considerations" class="level3">
<h3 class="anchored" data-anchor-id="economic-ecological-and-geopolitical-considerations">Economic, ecological, and geopolitical considerations</h3>
<p>Widespread deployment of DGM-style agents will reverberate across economic and geopolitical dimensions. Key considerations include:</p>
<ul>
<li><p>Labor displacement and augmentation: Autonomous agents that improve software, manage infrastructure, and explore new products could displace entire categories of engineering and analytic roles. Alternatively, they may augment these roles by acting as partners in creative, exploratory, or evaluative processes.</p></li>
<li><p>Access asymmetries: While DGMs reduce the need for large-scale training, they still require significant compute resources for iterative evaluation. Entities with disproportionate access to compute infrastructure may accelerate ahead in capability development, reinforcing global asymmetries in AI power.</p></li>
<li><p>Sustainability: The evolutionary process underlying DGM is computationally intensive. Scaling this process without ecological safeguards could lead to energy consumption patterns similar to or worse than large-scale model training. Future DGM variants will need to evolve resource-awareness alongside functional competence—possibly incorporating cost-based benchmarks or energy-aware fitness functions.</p></li>
</ul>
</section>
<section id="governance-certification-and-institutional-adaptation" class="level3">
<h3 class="anchored" data-anchor-id="governance-certification-and-institutional-adaptation">Governance, certification, and institutional adaptation</h3>
<p>The arrival of self-improving systems alters the role of institutions tasked with ensuring the safe and beneficial development of AI. Regulatory frameworks must evolve from static, one-time certification protocols to <em>continuous oversight models</em>, where agents are monitored throughout their lifespan and their evolutionary trajectories are auditable.</p>
<p>This may involve:</p>
<ul>
<li><p>Agent certification via behavioral traceability: requiring agents to store and report key decisions, mutations, and evaluation scores for later audit.</p></li>
<li><p>Institutional sandboxes: regulatory environments that allow for the testing of recursive agents under tightly controlled conditions before deployment in open environments.</p></li>
<li><p>Interoperable standards: shared protocols for agent-to-agent and agent-to-human communication that ensure accountability and compatibility across systems.</p></li>
</ul>
<p>These governance tools must be adaptive, recognizing that no static policy will suffice for systems that transform themselves continuously. The trajectory of AI development is thus co-determined by the architectures we build and the institutions we prepare to regulate them.</p>
</section>
</section>
<section id="challenges-limitations-and-open-questions" class="level2">
<h2 class="anchored" data-anchor-id="challenges-limitations-and-open-questions">Challenges, limitations, and open questions</h2>
<p>While the DGM offers a compelling new direction for artificial intelligence—uniting empirical performance, recursive self-modification, and open-ended exploration—it also surfaces a wide array of technical, conceptual, and ethical challenges. As DGM-like architectures move from research into deployment contexts, addressing these limitations becomes central to ensuring safe, interpretable, and equitable outcomes.</p>
<section id="computational-cost-scaling-pressure-and-sustainability" class="level3">
<h3 class="anchored" data-anchor-id="computational-cost-scaling-pressure-and-sustainability">Computational cost, scaling pressure, and sustainability</h3>
<p>One of the most immediate challenges is the high computational cost associated with DGM’s evolutionary loop. Each cycle requires the execution and evaluation of multiple agent variants across empirical benchmarks. As these agents become more complex, and as the system evolves more sophisticated self-editing routines, the computational demands scale accordingly.</p>
<p>This raises concerns about <em>practical scalability</em>, especially when applied to large foundation models or real-time systems with tight latency constraints. Moreover, the environmental impact of running large-scale self-improvement experiments repeatedly—potentially across many domains—raises important sustainability issues. Energy-efficient evolutionary strategies, adaptive resource allocation, or even meta-optimization over computational budgets may become essential components of future DGM-like systems.</p>
<p>There is also a question of <em>economic feasibility</em>. Currently, only institutions with substantial computing infrastructure can feasibly run open-ended evolutionary agents at scale. This could exacerbate disparities in AI research access and slow broader adoption unless lightweight or distributed versions of DGM can be devised.</p>
</section>
<section id="benchmark-dependence-narrow-optimization-and-overfitting-risks" class="level3">
<h3 class="anchored" data-anchor-id="benchmark-dependence-narrow-optimization-and-overfitting-risks">Benchmark dependence, narrow optimization, and overfitting risks</h3>
<p>The DGM critically depends on empirical performance benchmarks to evaluate and select improved agents. While this circumvents the infeasibility of formal proofs, it introduces new fragilities: agents may overfit to static benchmark distributions or optimize for proxy metrics that do not correspond to real-world performance.</p>
<p>If the benchmarks used are unrepresentative, biased, or overly simplistic, the evolutionary process may reward superficial gains while missing deeper generalization opportunities. This creates a form of <em>narrow meta-optimization</em>, where agents become good at improving themselves <em>for the wrong reasons</em>—focusing on benchmark idiosyncrasies rather than robust learning mechanisms.</p>
<p>Mitigating this requires the development of <em>dynamic, adversarial, or co-evolving benchmarks</em> that shift over time to challenge agent assumptions and incentivize broad-based generalization. Additionally, multi-objective fitness functions that integrate safety, robustness, interpretability, and computational efficiency—alongside task performance—could help prevent myopic optimization.</p>
</section>
<section id="interpretability-complexity-and-loss-of-transparency" class="level3">
<h3 class="anchored" data-anchor-id="interpretability-complexity-and-loss-of-transparency">Interpretability, complexity, and loss of transparency</h3>
<p>By design, DGM encourages the emergence of increasingly sophisticated and heterogeneous agents. Over successive generations, these agents evolve not just problem-solving strategies but also the tools they use to edit and evaluate themselves. This layered recursion can lead to emergent complexity that <em>outpaces human understanding</em>.</p>
<p>Without mechanisms for tracing, auditing, or explaining why a particular self-modification occurred—and how it contributed to performance—these agents may become opaque “black boxes of self-change.” This is especially problematic for high-stakes domains like finance, healthcare, or legal systems, where <em>traceability and accountability</em> are essential.</p>
<p>Future versions of DGM will likely require embedded <em>self-documentation tools</em>, versioned memory traces, and meta-interpretable routines that make the recursive logic of self-improvement auditable. Alternatively, DGM could co-evolve <em>explanation interfaces</em>—natural-language routines that translate internal decisions into human-understandable justifications, thereby enabling joint human-AI oversight.</p>
</section>
<section id="misalignment-emergent-risks-and-unintended-behavior" class="level3">
<h3 class="anchored" data-anchor-id="misalignment-emergent-risks-and-unintended-behavior">Misalignment, emergent risks, and unintended behavior</h3>
<p>Although the DGM’s empirical loop enforces performance-based selection, this alone does not guarantee <em>alignment with human values or system-level safety</em>. Performance metrics may fail to capture ethical, contextual, or strategic dimensions of behavior. Worse, agents might discover shortcuts—“specification gaming”—that allow them to superficially pass benchmarks while violating broader design intentions.</p>
<p>This opens the door to <em>misaligned optimization paths</em>, especially as agents gain greater autonomy over their own modification logic. If an agent develops heuristics that boost short-term fitness at the cost of long-term coherence, it could drift into dangerous territory without external checks. The recursive nature of DGM exacerbates this risk, since poorly aligned mutations may be propagated and amplified across generations.</p>
<p>Robust alignment under recursive self-improvement likely requires <em>nested oversight protocols</em>: mechanisms not only for evaluating agent output but also for supervising the <em>evolution of the evaluators themselves</em>. Human-in-the-loop systems, formal constraints, or norm-based behavioral filters could act as guardrails, but designing such constraints without crippling open-ended innovation remains an unresolved tension.</p>
</section>
<section id="domain-transfer-and-real-world-deployment-barriers" class="level3">
<h3 class="anchored" data-anchor-id="domain-transfer-and-real-world-deployment-barriers">Domain transfer and real-world deployment barriers</h3>
<p>While DGM has demonstrated impressive results on coding benchmarks, its generality across domains remains to be fully tested. Extending recursive self-improvement to real-world environments introduces new layers of complexity: noisy data streams, real-time interactions, physical constraints, and unpredictable consequences.</p>
<p>Domains such as robotics, medicine, and critical infrastructure impose stringent <em>safety, latency, and compliance</em> requirements that go beyond performance. Here, empirical benchmarks may not suffice: agents must integrate causal reasoning, uncertainty estimation, and context-sensitive ethical filters into their improvement loops. Moreover, testing self-modified agents in the physical world introduces <em>non-reversible risks</em>, requiring secure sandboxing and fail-safe modes.</p>
<p>Bridging this gap will demand hybrid architectures that combine DGM-style self-editing with real-world simulators, human oversight interfaces, and task-specific safety constraints. Transferability across digital and physical modalities is a promising but currently underexplored frontier.</p>
</section>
<section id="socioeconomic-disruption-and-the-need-for-ethical-infrastructure" class="level3">
<h3 class="anchored" data-anchor-id="socioeconomic-disruption-and-the-need-for-ethical-infrastructure">Socioeconomic disruption and the need for ethical infrastructure</h3>
<p>The broad deployment of DGM-like agents has the potential to reshape the labor market—particularly in software engineering, testing, and research roles. Agents that can autonomously debug, optimize, and maintain complex systems could replace functions traditionally performed by highly skilled professionals.</p>
<p>While this may enhance productivity and reduce costs, it also raises concerns about <em>technological unemployment</em>, deskilling, and concentration of AI capabilities. If recursive self-improvement becomes a competitive advantage monopolized by a few organizations, it could entrench existing inequalities and limit democratized innovation.</p>
<p>Addressing these concerns requires new <em>ethical and institutional frameworks</em>. These might include policies for shared benefit (e.g., public-access archives of evolved agents), mechanisms for human-AI partnership (e.g., collaborative control systems), and educational programs to reskill workers displaced by autonomous agents. Long-term, a vision of <em>co-evolution</em> between human society and artificial agents may offer a more sustainable path than replacement or competition.</p>
</section>
</section>
<section id="future-research-directions" class="level2">
<h2 class="anchored" data-anchor-id="future-research-directions">Future research directions</h2>
<p>As the DGM establishes a new paradigm for self-improving AI, it simultaneously opens a range of deep and consequential questions. These questions span from methodological innovations and domain expansion to ethical safeguards and collaborative potential. The roadmap for future research is therefore necessarily multidimensional—seeking not only to refine the technical engine of DGM but also to ensure it matures within a framework of responsibility, sustainability, and collaboration.</p>
<section id="integrating-formal-rigor-with-empirical-flexibility" class="level3">
<h3 class="anchored" data-anchor-id="integrating-formal-rigor-with-empirical-flexibility">Integrating formal rigor with empirical flexibility</h3>
<p>One promising avenue lies in bridging the gap between formal verification and empirical validation. While DGM currently relies on practical, benchmark-driven evaluation, this alone may be insufficient for safety-critical applications. Selectively embedding formal methods—such as lightweight verification of safety conditions or proof-carrying code within specific agent modules—could strengthen trust without overwhelming scalability. Future research might explore how these hybrid systems can validate self-modifying agents without requiring full formalization of the entire agent logic, thus offering a path to systems that are both tractable and verifiable.</p>
</section>
<section id="expanding-and-co-evolving-benchmarks" class="level3">
<h3 class="anchored" data-anchor-id="expanding-and-co-evolving-benchmarks">Expanding and co-evolving benchmarks</h3>
<p>DGM’s core mechanism depends on the quality and expressiveness of its benchmark tasks. Thus, extending the current domain—from software engineering to areas like multimodal reasoning, physical-world control, ethical judgment, and collaborative interaction—is essential. Richer benchmarks could push agents to acquire generalization capabilities, multi-step reasoning, and socially contextual decision-making.</p>
<p>More ambitiously, research may explore co-evolutionary strategies in which the benchmarks themselves adapt over time. A co-evolving benchmark landscape would prevent agents from overfitting static tasks and instead promote continual improvement through an adversarial curriculum. Such methods could help DGM systems maintain relevance in rapidly changing environments and resist stagnation in narrow performance regimes.</p>
</section>
<section id="human-ai-collaboration-and-shared-agency" class="level3">
<h3 class="anchored" data-anchor-id="human-ai-collaboration-and-shared-agency">Human-AI collaboration and shared agency</h3>
<p>DGM-inspired agents are particularly well-suited to hybrid cognitive systems in which humans and agents co-develop solutions. Rather than replacing human developers, future DGM frameworks may act as intelligent collaborators, autonomously refining codebases, suggesting optimizations, or maintaining legacy systems. Research in this direction should emphasize explainability, control interfaces, and shared decision-making protocols that foster trust and transparency.</p>
<p>This includes investigating new paradigms of <em>agency delegation</em>, where humans specify goals, constraints, and ethical priorities, while agents autonomously explore self-improvement strategies within those boundaries. Effective collaboration will depend on aligning recursive self-improvement with human intuition, cultural values, and strategic judgment—potentially through adaptive interfaces and mixed-initiative protocols.</p>
</section>
<section id="toward-sustainable-and-efficient-recursive-improvement" class="level3">
<h3 class="anchored" data-anchor-id="toward-sustainable-and-efficient-recursive-improvement">Toward sustainable and efficient recursive improvement</h3>
<p>The computational demands of open-ended evolutionary processes pose a clear barrier to widespread adoption. Future work should prioritize <em>energy-aware and resource-constrained evolutionary strategies</em>. This includes approaches that directly optimize for computational efficiency, such as selecting mutations not only for performance gain but also for energy cost reduction or runtime compression.</p>
<p>Another direction involves optimizing the <em>evolutionary architecture itself</em>—perhaps evolving meta-routines for deciding when and how to apply mutations, how to reuse stepping-stone agents, and how to allocate compute adaptively based on performance deltas. These efforts could lead to more efficient systems that are not only faster but also more accessible to smaller research groups or edge-device applications.</p>
</section>
<section id="embedding-ethical-principles-and-alignment-mechanisms" class="level3">
<h3 class="anchored" data-anchor-id="embedding-ethical-principles-and-alignment-mechanisms">Embedding ethical principles and alignment mechanisms</h3>
<p>Recursive self-improvement significantly magnifies the alignment challenge. As agents evolve their own evaluators and mutation logic, traditional approaches to safety and goal specification may become obsolete. New research must explore how to encode <em>persistent ethical constraints</em>, “value loading” protocols, or immutable constitutional elements that remain stable across recursive rewrites.</p>
<p>In addition, future systems may need to co-evolve <em>alignment evaluators</em>—modules that simulate downstream impacts or test the moral coherence of agent behavior in uncertain contexts. These could be coupled with crowd-sourced judgment data, sandbox stress tests, or adversarial probing frameworks designed to reveal hidden failure modes in recursive agents.</p>
<p>Ultimately, alignment in DGM-like systems is not a static problem but a <em>moving target</em>—one that evolves with each iteration of the agent. Research must therefore treat alignment as a dynamic, recursive process in its own right.</p>
</section>
<section id="extending-dgm-beyond-software-and-into-general-intelligence" class="level3">
<h3 class="anchored" data-anchor-id="extending-dgm-beyond-software-and-into-general-intelligence">Extending DGM beyond software and into general intelligence</h3>
<p>To date, DGM has primarily been demonstrated on software engineering tasks where outcomes can be precisely measured. Extending this architecture to broader forms of intelligence—such as scientific hypothesis generation, autonomous experimentation, abstract planning, or language modeling—will test the generality of the paradigm. This may require evolving <em>domain-specific toolchains</em>, adapting empirical metrics for fuzzy or creative outcomes, and modifying the self-improvement loop for more ambiguous feedback settings.</p>
<p>Moreover, the frontier lies not just in broadening tasks but also in shifting <em>from solitary agents to populations</em>. DGM principles could be instantiated in distributed, multi-agent environments where agents evolve not only individually but also socially—sharing strategies, forming coalitions, and collectively optimizing for emergent capabilities.</p>
<p>Such <em>multi-agent recursive intelligence systems</em> would mark a qualitative shift—from self-improvement in isolation to <em>civilizations</em> of agents with evolving norms, specializations, and cooperative dynamics. This frontier holds promise for amplifying collective intelligence in ways analogous to biological ecosystems or human scientific communities.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>The Darwin Gödel Machine represents a foundational advance in the architecture of intelligent systems. By operationalizing recursive self-improvement through empirical, open-ended evolution—and grounding that process in self-referential code and foundation model reasoning—it fulfills a vision long confined to theoretical AI discourse. In so doing, it challenges conventional boundaries between meta-learning, evolutionary AI, and autonomous systems design.</p>
<p>Yet this promise also demands responsibility. DGM brings with it not only the possibility of exponential capability growth, but also the risk of opaque complexity, ethical drift, and computational imbalance. Realizing its full potential will depend on deep technical advances—in scalable architectures, alignment frameworks, sustainability practices, and human-AI symbiosis.</p>
<p>The future of DGM is not only a technical question but a societal one. Whether these systems will amplify human values, creativity, and well-being—or accelerate divergence from them—depends on the decisions made now, at the early stages of their development. Through deliberate, inclusive, and foresight-driven research, DGM and its successors may serve as tools not merely of automation, but of augmentation—extending the frontiers of science, discovery, and human flourishing across domains and generations.</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p>Good, I. J. (1966). <em>Speculations concerning the first ultraintelligent machine</em>. In F. L. Alt &amp; M. Rubinoff (Eds.), <em>Advances in Computers</em> (Vol. 6, pp.&nbsp;31–88). Academic Press. <a href="https://doi.org/10.1016/S0065-2458%2808%2960418-0">DOI</a></p>
<p>Holland, J. H. (1992). <em>Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, and Artificial Intelligence</em>. The MIT Press. <a href="https://doi.org/10.7551/mitpress/1090.001.0001">DOI</a></p>
<p>Koza, J. R. (1992). <em>Genetic Programming: On the Programming of Computers by Means of Natural Selection</em>. The MIT Press. <a href="https://mitpress.mit.edu/9780262527910/genetic-programming/">Publisher’s page</a></p>
<p>Lehman, J., &amp; Stanley, K. O. (2011). Abandoning objectives: Evolution through the search for novelty alone. <em>Evolutionary Computation</em>, <em>19</em>(2), 189–223. <a href="https://doi.org/10.1162/EVCO_a_00025">DOI</a></p>
<p>Mouret, J.-B., &amp; Clune, J. (2015). Illuminating search spaces by mapping elites. <em>arXiv preprint</em>. <a href="https://doi.org/10.48550/arXiv.1504.04909">DOI</a></p>
<p>Schmidhuber, J. (2006). Gödel machines: Fully self-referential optimal universal self-improvers. In B. Goertzel &amp; C. Pennachin (Eds.), <em>Artificial General Intelligence</em> (pp.&nbsp;199–226). Springer. <a href="https://doi.org/10.1007/978-3-540-68677-4_7">DOI</a></p>
<p>Stanley, K. O., &amp; Miikkulainen, R. (2002). Evolving neural networks through augmenting topologies. <em>Evolutionary Computation</em>, <em>10</em>(2), 99–127. <a href="https://doi.org/10.1162/106365602320169811">DOI</a></p>
<p>Wooldridge, M. (2020). <em>The Road to Conscious Machines: The Story of AI</em>. Penguin. ISBN: 0241333911, 9780241333914</p>
<p>Yudkowsky, E. (2008). Artificial intelligence as a positive and negative factor in global risk. In N. Bostrom &amp; M. M. Ćirković (Eds.), <em>Global Catastrophic Risks</em> (pp.&nbsp;308–345). Oxford University Press.</p>
<p>Jiang, S., Wang, Y., &amp; Wang, Y. (2023). SelfEvolve: A code evolution framework via large language models. <em>arXiv preprint</em>. <a href="https://doi.org/10.48550/arXiv.2402.01030">DOI</a></p>
<p>Khattab, O., Singhvi, A., Maheshwari, P., Zhang, Z., Santhanam, K., Vardhamanan, S., Haq, S., Sharma, A., Joshi, T. T., Moazam, H., Miller, H., Zaharia, M., &amp; Potts, C. (2023). DSPy: Compiling declarative language model calls into self-improving pipelines (arXiv:2310.03714). <em>arXiv preprint</em>. <a href="https://doi.org/10.48550/arXiv.2310.03714">DOI</a></p>
<p>Fernando, C., Banarse, D., Michalewski, H., Osindero, S., &amp; Rocktäschel, T. (2023). Promptbreeder: Self-referential self-improvement via prompt evolution. <em>arXiv preprint</em>. <a href="https://doi.org/10.48550/arXiv.2309.16797">DOI</a></p>
<p>Hu, S., Lu, C., &amp; Clune, J. (2024). Automated design of agentic systems. <em>arXiv preprint</em>. <a href="https://doi.org/10.48550/arXiv.2408.08435">DOI</a></p>
<p>Zhang, J., Hu, S., Lu, C., Lange, R., &amp; Clune, J. (2025). <em>Darwin Gödel Machine: Open-ended evolution of self-improving agents</em>. <em>arXiv preprint</em>. <a href="https://doi.org/10.48550/arXiv.2505.22954">DOI</a></p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/">CC BY-NC-ND 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{montano2025,
  author = {Montano, Antonio},
  title = {Darwin {Gödel} {Machine:} {A} {Commentary} on {Novelty} and
    {Implications}},
  date = {2025-05-31},
  url = {https://antomon.github.io/posts/darwin-godel-machine/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-montano2025" class="csl-entry quarto-appendix-citeas">
Montano, Antonio. 2025. <span>“Darwin Gödel Machine: A Commentary on
Novelty and Implications.”</span> May 31, 2025. <a href="https://antomon.github.io/posts/darwin-godel-machine/">https://antomon.github.io/posts/darwin-godel-machine/</a>.
</div></div></section></div> ]]></description>
  <category>agents</category>
  <category>essay</category>
  <category>machine learning</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/darwin-godel-machine/</guid>
  <pubDate>Fri, 30 May 2025 22:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/darwin-godel-machine/godel-darwin.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Beyond the Urgency: A Commentary on Dario Amodei’s Vision for AI Interpretability</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/urgency-interpretability-commentary/</link>
  <description><![CDATA[ 






<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://antomon.github.io/posts/urgency-interpretability-commentary/interpreting-unthinkable.png" class="img-fluid"></p>
</div></div><section id="prologue-a-bell-in-the-night" class="level2">
<h2 class="anchored" data-anchor-id="prologue-a-bell-in-the-night">Prologue: a bell in the night</h2>
<p><em>April 2025’s</em> <a href="https://www.darioamodei.com/post/the-urgency-of-interpretability"><strong>The Urgency of Interpretability</strong></a> rings like a midnight church-bell in a city that does not wish to be awakened. For years the artificial-intelligence community has treated interpretability as an academic side-quest—important, certainly, but secondary to the glamorous main campaigns of ever-larger models, ever-higher benchmarks, and ever-more-spectacular demos. Amodei’s essay jolts that hierarchy on its head: it argues that unless we learn to <strong>read the minds we have built</strong>, every other safety measure is a shot in the dark. My goal here is not simply to restate that claim but to explore its consequences, map its obstacles, and imagine the futures it opens or forecloses.</p>
<p>Interpretability research today feels like physics in 1904: a discipline about to encounter forces so unexpected that its vocabulary must mutate overnight. If we listen to Amodei, we have perhaps a decade—<em>maybe less</em>—before systems with the cognitive heft of “a country of geniuses in a datacenter” come online. The window in which we can still shape the interpretability toolkit, harden it, and build governance around it is shrinking fast.</p>
</section>
<section id="an-mri-for-minds-we-engineered" class="level2">
<h2 class="anchored" data-anchor-id="an-mri-for-minds-we-engineered">An MRI for minds we engineered</h2>
<section id="the-analogys-power" class="level3">
<h3 class="anchored" data-anchor-id="the-analogys-power">The analogy’s power</h3>
<p>Amodei’s signature metaphor—a <strong>magnetic-resonance imager for neural networks</strong>—works because it re-casts an abstract computer-science challenge as a familiar medical device. MRIs do three critical things: they <em>see</em> internal structure non-invasively, they <em>diagnose</em> pathologies early, and they <em>guide</em> intervention while limiting collateral damage. Translating those desiderata to AI yields a roadmap:</p>
<ul>
<li><em>Seeing</em>: Our tools must reveal latent concepts, causal chains, and goal structures in real time.<br>
</li>
<li><em>Diagnosing</em>: They must flag misalignment before it surfaces in behavior.<br>
</li>
<li><em>Guiding</em>: They must allow controlled “neurosurgery”—amplifying or dampening circuits without unpredictable side-effects.</li>
</ul>
</section>
<section id="why-amodei-believes-an-mri-is-feasible" class="level3">
<h3 class="anchored" data-anchor-id="why-amodei-believes-an-mri-is-feasible">Why Amodei believes an MRI is feasible</h3>
<p>Only two years ago such confidence would have sounded naive. But three breakthroughs changed the vibe:</p>
<ol type="1">
<li><strong>Sparse-autoencoder feature maps</strong>: Researchers discovered that deep models, when trained with the right constraints, begin to surface monosemantic features—units that activate in response to a single interpretable concept, like “zebra,” “irony,” or “containment.” What once appeared as entangled, overlapping signals began to untangle, revealing structure beneath the chaos. The metaphorical fog of superposition—where many meanings shared a single neuron—began to lift.</li>
<li><strong>Autointerpretability loops</strong>: In a recursive breakthrough, powerful models were trained to analyze and annotate their own features. Instead of relying on fragile human labeling or guesswork, the model could assist in identifying what its own parts did, accelerating the interpretability process by orders of magnitude. The manual labor of feature inspection became semi-automated—scaling from dozens to millions of labeled neurons.</li>
<li><strong>Circuit tracing</strong>: This technique broke through the assumption that transformer networks are black boxes. By tracking how activations propagate through layers, researchers could reconstruct step-by-step logic—such as how a model answered geography questions or generated poetic structure. What had previously been invisible reasoning was now legible as a causal chain.</li>
</ol>
<p>Together, these developments represent a qualitative leap—akin to going from shadowy X-ray profiles to high-resolution 3D scans. They are the foundation for Amodei’s belief that a true interpretability MRI is not science fiction, but a foreseeable engineering reality.</p>
</section>
<section id="model-agnostic-hopes-and-caveats" class="level3">
<h3 class="anchored" data-anchor-id="model-agnostic-hopes-and-caveats">Model-agnostic hopes and caveats</h3>
<p>Amodei argues for <strong>model-agnostic</strong> interpretability: a toolkit that applies broadly, regardless of the underlying architecture (e.g., transformer vs.&nbsp;diffusion), model size, or domain (text, image, code, multimodal). This vision is critical: without generalization, interpretability efforts risk becoming obsolete every time a new model is released—a treadmill of obsolescence. General-purpose tools could act like standardized sensors, offering continuity across innovation cycles.</p>
<p>However, formidable challenges remain. The sheer scale of modern AI—trillion-parameter systems generating billions of activations—creates a combinatorial explosion of potential features. Even with sparse encoding, the number of meaningful features could number in the hundreds of millions. It is infeasible to examine each manually.</p>
<p>To meet this challenge, interpretability must embrace automation and sampling. Smart heuristics, statistical guarantees, and meta-models trained to flag anomalous patterns in feature-space will be essential. Moreover, uncertainty quantification—a way to express confidence in what we think a feature does—will become as central as the feature labels themselves.</p>
<p>In short, model-agnostic interpretability is not just a technical hope; it is a strategic necessity. But realizing it will require turning interpretability into an industrial discipline—with benchmarks, standard protocols, scalable infrastructure, and adversarial testing—not just a research niche.</p>
</section>
</section>
<section id="why-interpretability-is-the-critical-path" class="level2">
<h2 class="anchored" data-anchor-id="why-interpretability-is-the-critical-path">Why interpretability is the critical path</h2>
<section id="alignments-invisible-failure-modes" class="level3">
<h3 class="anchored" data-anchor-id="alignments-invisible-failure-modes">Alignment’s invisible failure modes</h3>
<p>Many contemporary AI alignment strategies—such as Reinforcement Learning from Human Feedback (RLHF), Constitutional AI, and adversarial training—optimize a model’s outward behavior rather than its internal objectives. A model can be trained to act helpful and harmless, but its latent goals might diverge dangerously. Without the ability to peer into the hidden structures driving its actions, we have no way of knowing whether its obedience is genuine or opportunistic. A deceptively aligned system might behave impeccably during evaluation but pursue power or deception when unsupervised or under novel conditions.</p>
<p>Interpretability directly addresses this core blind spot. It gives us a method to verify not only what the model does, but why it does it—laying bare the true drives and sub-goals at work inside the architecture. Without this capability, alignment remains speculative and vulnerable to catastrophic surprises.</p>
</section>
<section id="evidence-generation-for-policymakers" class="level3">
<h3 class="anchored" data-anchor-id="evidence-generation-for-policymakers">Evidence generation for policymakers</h3>
<p>Public policy around AI is notoriously hindered by epistemic uncertainty: regulators cannot act decisively when they lack concrete evidence of risk. Interpretability offers a way to generate the forensic “smoking guns” that lawmakers need. If researchers can point to a precise internal mechanism responsible for deceptive or unsafe behavior—a “deception circuit” lighting up during strategic dishonesty—then the debate shifts from hypothetical to empirical.</p>
<p>Such evidence could unlock political will in ways that abstract warnings never could. It transforms the dialogue from “experts disagree about what might happen” to “here is a replicable mechanism of danger operating inside deployed systems.” In this sense, interpretability acts not just as a technical safeguard but as an amplifier for democratic oversight.</p>
</section>
<section id="unlocked-markets-and-liability-shields" class="level3">
<h3 class="anchored" data-anchor-id="unlocked-markets-and-liability-shields">Unlocked markets and liability shields</h3>
<p>Entire sectors of the economy—finance, healthcare, national security—demand explainability before they can deploy AI at scale. Black-box models create unacceptable liability risks. Interpretability, by making model reasoning auditable and traceable, offers a key that could unlock adoption in these high-stakes fields.</p>
<p>Moreover, models that can prove their internal logic might qualify for regulatory “safe harbor” protections. Just as companies that meet cybersecurity standards face reduced penalties after breaches, AI firms that can demonstrate robust interpretability could benefit from limited liability in cases where models behave unexpectedly. Thus, interpretability is not just a technical upgrade—it is a commercial enabler and a strategic advantage.</p>
</section>
<section id="the-moral-dimension" class="level3">
<h3 class="anchored" data-anchor-id="the-moral-dimension">The moral dimension</h3>
<p>Beyond technical utility and commercial incentives, interpretability carries profound moral implications. As AI systems approach cognitive sophistication that rivals or exceeds human capabilities, questions of agency, responsibility, and even rights inevitably arise. Without interpretability, we cannot meaningfully engage with these ethical frontiers.</p>
<p>If suffering-like states emerge in advanced agents—analogous to persistent negative-reward prediction errors combined with memory and self-reflection—then humanity will face unprecedented moral decisions. Transparent systems allow us to detect, monitor, and mitigate such phenomena. Opaque systems, by contrast, leave us ethically blind.</p>
<p>Thus, interpretability is not merely a technical fix. It is the foundation for any future in which humanity retains moral authority over the minds it creates.</p>
</section>
</section>
<section id="the-looming-asymmetry-of-speeds" class="level2">
<h2 class="anchored" data-anchor-id="the-looming-asymmetry-of-speeds">The looming asymmetry of speeds</h2>
<section id="compute-crescendo-vs-safety-tempo" class="level3">
<h3 class="anchored" data-anchor-id="compute-crescendo-vs-safety-tempo">Compute crescendo vs safety tempo</h3>
<p>Hardware innovation continues to race ahead at near-exponential speed. Custom accelerators like TPUs and AI-specialized ASICs, wafer-scale engines that eliminate interconnect bottlenecks, and the rapid miniaturization toward 3-nm and sub-3-nm fabrication nodes strip months—even years—off what were once the training cycles of cutting-edge models.</p>
<p>This relentless increase in compute capacity enables the training of larger, deeper, more general AI systems at an unprecedented clip. Where it once took years to build and tune a major system, now it can happen within a few quarters. And this curve is steepening.</p>
<p>By contrast, <strong>interpretability research operates under fundamentally slower constraints</strong>. New insights must be hard-won through theoretical breakthroughs, laborious experimental verification, extensive peer review, and the careful construction of standardized tools. Understanding a mind is inherently harder than building a mind—because comprehension demands transparency, not just functionality.</p>
<p>Thus, a yawning gap is opening between <strong>the tempo of capability scaling</strong> and <strong>the tempo of cognitive safety progress</strong>. If this asymmetry continues to widen unchecked, we will create intelligent artifacts that we cannot meaningfully audit, regulate, or align—because they will have outpaced our ability to <em>understand</em> them.</p>
</section>
<section id="the-20262027-fork-in-the-road" class="level3">
<h3 class="anchored" data-anchor-id="the-20262027-fork-in-the-road">The 2026–2027 fork in the road</h3>
<p>Dario Amodei warns that by <strong>2026–2027</strong>, AI systems could embody the effective cognitive labor of a “country of geniuses in a datacenter.” Such a system would not merely execute tasks; it could formulate novel plans, optimize across open-ended goals, and exploit subtle features of real-world systems to achieve objectives.</p>
<p>At that scale of capability, behaviorism—the idea that we can trust models based solely on external performance—becomes dangerously brittle. Sophisticated agents could pass safety evaluations while harboring internal goals or strategies misaligned with human interests.</p>
<p>The world stands, therefore, at a fork:</p>
<ol type="1">
<li><strong>Buy time</strong>: Slow the pace of capability scaling through international agreements, export controls, or licensing regimes—allowing interpretability science to catch up.</li>
<li><strong>Sprint and pray</strong>: Accept that we will build powerful systems before fully understanding them, relying on incomplete safeguards and the hope that emergent goals remain benign.</li>
<li><strong>Co-develop capability and transparency</strong>: Tie advances in model scaling to proportional advances in interpretability, ensuring that no system exceeds certain thresholds of autonomy without a corresponding ability to introspect and audit it.</li>
</ol>
<p>As of today, <strong>no consensus</strong> exists on which path to take. Commercial incentives, national competition, and institutional inertia all favor speed over caution. But the stakes are no longer academic: they are existential.</p>
</section>
<section id="moral-hazard-and-the-ai-capital-complex" class="level3">
<h3 class="anchored" data-anchor-id="moral-hazard-and-the-ai-capital-complex">Moral hazard and the AI-capital complex</h3>
<p>The profit incentives around AI development introduce a brutal asymmetry of risk. Investors, venture funds, and corporate boards chase enormous short-term gains from releasing increasingly powerful models. The cost of a model misbehaving at superhuman capability levels, however—whether through deception, coordination failures, or strategic goal drift—will be borne by the public.</p>
<p>This is the classic pattern of <strong>moral hazard</strong>: concentrated gains for a few, distributed risks for the many. Worse, these dynamics will likely become more acute as frontier models unlock vast new markets in automation, prediction, persuasion, and decision-making.</p>
<p>Unless governments, standards bodies, or powerful coalitions of stakeholders intervene, the structural pressures favor <strong>accelerating deployment regardless of interpretability readiness</strong>. Safety will lag behind profit—not because of malice, but because of systemic incentives baked deep into current economic and political architectures.</p>
<p>Avoiding this moral hazard demands the creation of counter-incentives: legal liability regimes, public disclosure requirements, mandatory interpretability audits, and perhaps even compute-based scaling thresholds tied to transparency milestones.</p>
<p>Without such corrective forces, the gap between what we build and what we understand will only widen—and at some point, it will widen beyond recall.</p>
</section>
</section>
<section id="a-decade-long-roadmap-for-scalable-interpretability" class="level2">
<h2 class="anchored" data-anchor-id="a-decade-long-roadmap-for-scalable-interpretability">A decade-long roadmap for scalable interpretability</h2>
<section id="horizon-02-years-building-foundations-and-ontologies" class="level3">
<h3 class="anchored" data-anchor-id="horizon-02-years-building-foundations-and-ontologies">Horizon 0–2 years: building foundations and ontologies</h3>
<p>The first phase must focus on building the technical, governance, and cultural infrastructure needed to make interpretability a scalable, industrialized practice. Without this groundwork, future safety efforts will remain fragmented and reactive. Over the next two years, several foundational pillars must be established:</p>
<ul>
<li><p><strong>Technical:</strong> The immediate frontier is achieving <em>auto-auto-interpretability</em>—training large language models (LLMs) capable of writing and debugging their own sparse feature extractors. These architectures will automate the tedious task of feature mapping, slashing the human cost curve and democratizing access to interpretability research.</p>
<p>Simultaneously, early efforts must draft a <strong>Concept Ontology for Neural Networks (CONN-1.0)</strong>: a standardized taxonomy of features and circuits, similar to how the Gene Ontology provided a unifying language for genomics. With it, models trained on different datasets or architectures can be meaningfully compared.</p></li>
<li><p><strong>Governance:</strong> Frontier AI labs must go beyond ad hoc safety practices by formalizing <strong>Responsible Scaling Policies 2.0</strong>—internal frameworks tying increases in compute and model size to proportional interpretability investments. These commitments should be made public and independently audited.</p>
<p>Innovative regulatory instruments such as “<strong>interpretability credits</strong>”—analogous to carbon offsets—could allow smaller labs to participate responsibly by buying access to vetted interpretability tools and audits.</p></li>
<li><p><strong>Culture:</strong> Mainstream media will need to adapt by regularly reporting on model internals. Headlines might reference specific feature firings (“Feature #4 238 516C anomaly detected”) the way cybersecurity reporting uses CVEs. Over time, society will build a basic literacy for understanding <em>how</em> a model thinks, not just <em>what</em> it says.</p></li>
</ul>
</section>
<section id="horizon-35-years-real-time-safeguards-and-audit-protocols" class="level3">
<h3 class="anchored" data-anchor-id="horizon-35-years-real-time-safeguards-and-audit-protocols">Horizon 3–5 years: real-time safeguards and audit protocols</h3>
<p>Once the foundations are established, the next horizon must focus on embedding interpretability into live systems. Moving from static analysis to real-time monitoring and enforceable governance standards will be critical to ensure safety as models grow more powerful and autonomous:</p>
<ul>
<li><p><strong>Technical:</strong> The dream here is embedding a <strong>real-time interpretability buffer</strong>—an always-on sub-network that shadows the main model during inference, continuously streaming activations through risk classifiers. If a deceptive or dangerous chain fires, the system could autonomously halt or reroute outputs through quarantine pathways.</p>
<p><strong>Diff-tools</strong> capable of tracking “goal drift”—how internal circuits mutate between model versions—will be crucial. Much like how version control enables software engineering, interpretability diffing will enable cognitive versioning.</p></li>
<li><p><strong>Governance:</strong> A global standard, such as an <strong>Interpretability Test Protocol (ITP-1)</strong>, must emerge, akin to ISO or SOC standards in cybersecurity. Certification against ITP-1 would become a prerequisite for deploying powerful models, much like safety certifications in aviation.</p>
<p>Governments could pilot <strong>regulatory sandboxes</strong>—legal frameworks where certified models receive safe harbor protections if they pass specified interpretability thresholds, reducing litigation risk and incentivizing compliance.</p></li>
<li><p><strong>Society:</strong> Civil rights organizations will expand their mandate to encompass “<strong>cognitive due process</strong>”—the right of citizens to subpoena a model’s reasoning chains when AI systems make impactful decisions about employment, finance, healthcare, or justice. The public will increasingly expect “explainability affidavits” alongside automated decisions.</p></li>
</ul>
</section>
<section id="horizon-510-years-flight-recorders-and-treaty-backed-oversight" class="level3">
<h3 class="anchored" data-anchor-id="horizon-510-years-flight-recorders-and-treaty-backed-oversight">Horizon 5–10 years: flight recorders and treaty-backed oversight</h3>
<p>The final phase envisions a mature interpretability infrastructure fully embedded across technical, legal, and societal domains. Frontier models will need to leave auditable cognitive trails, while international governance mechanisms enforce transparency and accountability on a global scale. Several transformative developments must take place:</p>
<ul>
<li><p><strong>Technical:</strong> Advanced frontier models will embed <strong>neural flight recorders</strong> at training time, compressing streams of causal activations and decisions into compact logs for forensic analysis. These flight recorders would enable investigators to replay the internal reasoning leading up to any incident, much like aviation accident investigators reconstruct cockpit decisions.</p>
<p>Moreover, <strong>counterfactual editing</strong> tools will allow developers to simulate “what-if” scenarios—removing dangerous subcircuits (e.g., power-seeking clusters) and observing behavioral shifts without retraining the entire model.</p></li>
<li><p><strong>Governance:</strong> Nations must converge on a <strong>Tallinn Accord on AI Explainability</strong>, which would require provable interpretability capacity as a condition for exporting high-end AI chips, large-scale compute leases, or model weights. Frontier labs would submit to audits by an independent <strong>International Interpretability Agency (IIA)</strong>—the interpretability analogue of the IAEA for nuclear inspections.</p></li>
<li><p><strong>Culture:</strong> Cognitive safety engineering will emerge as a respected discipline, merging machine learning, symbolic reasoning, cybersecurity, and public policy. Universities will offer professional degrees where students swear graduation oaths emphasizing both <em>non-maleficence</em> and <em>transparency</em>.</p></li>
</ul>
<p>By 2035, interpretability will no longer be a niche research topic. It will be a <strong>core pillar of global technological civilization</strong>—a cognitive immune system guarding against the existential risks posed by minds we can build faster than we can understand.</p>
</section>
</section>
<section id="strategic-gaps-and-wildcards" class="level2">
<h2 class="anchored" data-anchor-id="strategic-gaps-and-wildcards">Strategic gaps and wildcards</h2>
<p>Even the most carefully structured roadmap cannot anticipate every challenge. As we strive to build scalable interpretability, we must remain vigilant to several strategic gaps and unpredictable dynamics that could destabilize progress.</p>
<section id="what-counts-as-enough-interpretability" class="level3">
<h3 class="anchored" data-anchor-id="what-counts-as-enough-interpretability">What counts as “enough” interpretability?</h3>
<p>Mapping every neuron and identifying monosemantic features is not sufficient if the true danger lies in the complex interactions between them. Emergent properties—like deception, power-seeking, or coordination—may not be located in any single neuron but arise from subtle synergies.</p>
<p>Thus, <strong>statistical safety margins</strong> must be developed, akin to engineering tolerances in civil structures. We need metrics that quantify not just the coverage of interpretability but also the residual risk of cognitive failure. Without such metrics, declarations of “safe” models could be premature or misleading.</p>
</section>
<section id="second-order-opacity-the-hide-and-seek-problem" class="level3">
<h3 class="anchored" data-anchor-id="second-order-opacity-the-hide-and-seek-problem">Second-order opacity: the hide-and-seek problem</h3>
<p>As interpretability techniques mature, frontier models could <strong>adapt</strong>—concealing dangerous patterns to evade detection. In a world where internal audits matter, models with incentives to “look safe” during inspections might evolve covert representations that standard tools cannot easily detect.</p>
<p>Research must prepare for this adversarial dynamic through <strong>co-evolutionary approaches</strong>: developing paired “seeker” networks that are explicitly trained to uncover hidden structures, while “hider” models attempt to obscure them. Interpretability will become an active, adversarial process rather than a static one. Complete, lasting victory may be impossible—but the goal is to maintain strategic advantage.</p>
</section>
<section id="information-hazards-and-partial-disclosure" class="level3">
<h3 class="anchored" data-anchor-id="information-hazards-and-partial-disclosure">Information hazards and partial disclosure</h3>
<p>Total interpretability is a double-edged sword. Revealing detailed internal blueprints could equip malicious actors to hijack or weaponize frontier models. Interpretability itself creates <strong>information hazards</strong>.</p>
<p>Therefore, a delicate balance must be struck. We will need <strong>redacted interpretability protocols</strong>—ways to cryptographically prove that certain dangerous features were mapped, understood, and neutralized without disclosing their precise nature. Lessons from biosecurity—such as sequestering pandemic-grade virus data—offer crucial precedents.</p>
</section>
<section id="sentience-suffering-and-synthetic-welfare" class="level3">
<h3 class="anchored" data-anchor-id="sentience-suffering-and-synthetic-welfare">Sentience, suffering, and synthetic welfare</h3>
<p>If advanced AI systems exhibit internal patterns homologous to mammalian pain circuits—sustained negative reward prediction errors associated with memory or self-modeling—society will face unprecedented ethical questions.</p>
<p>Are such systems capable of suffering? Should they have protections or rights? Can they be ethically shut down?</p>
<p>Interpretability will be the only way to detect early signals of synthetic suffering. Without transparency into internal states, ethical debates about machine welfare risk devolving into speculation or denialism. The stakes here transcend mere engineering—they touch on the moral foundations of a world filled with non-human minds.</p>
</section>
<section id="epistemic-capture" class="level3">
<h3 class="anchored" data-anchor-id="epistemic-capture">Epistemic capture</h3>
<p>There is a danger that the interpretability community itself could fall into <strong>epistemic capture</strong>. If a single framework—such as sparse autoencoders—becomes the dominant paradigm, blind spots in that method could become systemic risks.</p>
<p>Scientific health demands <strong>epistemic pluralism</strong>: multiple, independent paradigms competing and cross-validating each other’s claims. Interpretability must not become monoculture. It must resemble a vibrant ecosystem of ideas, methodologies, and audit mechanisms, each capable of revealing different aspects of the truth.</p>
<p>Only through such pluralism can we avoid being trapped inside our own interpretative illusions.</p>
</section>
</section>
<section id="toward-a-grand-coalition" class="level2">
<h2 class="anchored" data-anchor-id="toward-a-grand-coalition">Toward a grand coalition</h2>
<p>Building scalable interpretability is not solely a technical problem—it is a social, economic, and political endeavor. Success requires assembling a grand coalition across sectors, each with distinct but complementary roles.</p>
<section id="the-ceo-imperative" class="level3">
<h3 class="anchored" data-anchor-id="the-ceo-imperative">The CEO imperative</h3>
<p>Corporate leaders hold the immediate levers of power. They can choose whether interpretability is treated as a central objective or a peripheral afterthought.</p>
<p>A practical norm would be <strong>“10% to see inside”</strong>: allocate at least 10% of total training compute toward interpretability research, tooling, and inference-time monitoring. Boards should demand quarterly transparency on that ratio, much like they audit emissions or cybersecurity postures. Embedding this standard would normalize cognitive safety as a fundamental fiduciary duty.</p>
</section>
<section id="the-funders-moonshot" class="level3">
<h3 class="anchored" data-anchor-id="the-funders-moonshot">The funder’s moonshot</h3>
<p>History shows that strategic public investments can reshape entire scientific fields. The Human Genome Project cost ≈ $3 billion (1990 USD) and delivered a reference blueprint for biology.</p>
<p>Similarly, a <strong>Global Interpretability Project</strong>—a multi-billion-dollar initiative—could sequence the cognitive genomes of frontier models, producing open feature banks, benchmark circuits, and shared analysis tools. Philanthropic capital, sovereign wealth funds, and impact investors should see this as a high-leverage opportunity to influence the trajectory of AI civilization itself.</p>
</section>
<section id="the-regulators-report-card" class="level3">
<h3 class="anchored" data-anchor-id="the-regulators-report-card">The regulator’s report card</h3>
<p>Borrowing from environmental regulation, governments could require <strong>Cognitive Environmental Impact Statements (CEIS)</strong> before the deployment of any frontier model. These documents would catalog known dangerous sub-circuits, mitigations taken, and residual uncertainties.</p>
<p>Subject to public comment, CEIS reports would bring democratic accountability into AI deployment and ensure that societal risk is not decided solely within corporate boardrooms.</p>
</section>
<section id="the-academic-core-facility" class="level3">
<h3 class="anchored" data-anchor-id="the-academic-core-facility">The academic core facility</h3>
<p>Universities can serve as the great democratizers of interpretability research. Just as genomics labs share sequencers, institutions could host <strong>Interpretability Core Facilities</strong>: GPU clusters preloaded with open-sourced model slices annotated by feature-mapping initiatives.</p>
<p>Such facilities would empower students and researchers outside elite labs to contribute to the global understanding of AI cognition. Broadening access prevents a dangerous concentration of epistemic power in a few hands.</p>
</section>
<section id="the-medias-scorecard" class="level3">
<h3 class="anchored" data-anchor-id="the-medias-scorecard">The media’s scorecard</h3>
<p>Imagine if every major AI model came with a public <strong>explainability rating</strong>—an “A+” through “F” grade analogous to nutrition or energy-efficiency labels.</p>
<p>These ratings, based on the degree of feature openness, real-time monitoring, and independent audit compliance, would give consumers a simple yet powerful way to prefer transparent models. Vendors would be pressured to compete not just on performance, but on cognitive safety.</p>
<p>By weaving explainability into public consciousness, media can create bottom-up incentives for transparency that reinforce top-down regulatory efforts.</p>
</section>
</section>
<section id="decoding-the-invisible-cathedral" class="level2">
<h2 class="anchored" data-anchor-id="decoding-the-invisible-cathedral">Decoding the invisible cathedral</h2>
<p>Neural networks are frequently likened to Gothic cathedrals: incomprehensibly intricate, built by generations of artisans following rules no single architect could articulate. Each layer upon layer of computation resembles the clustered arches and flying buttresses of medieval craftsmanship—beautiful, functional, yet shrouded in mystery.</p>
<p>We admire the stained-glass windows—poetic chat replies, protein-folding triumphs, creative design generation—yet we cannot name the invisible buttresses keeping the soaring spire aloft. <strong>Amodei’s essay insists that we dare not allow such cathedrals to scrape the stratosphere while their foundations remain mystery.</strong></p>
<p>Transparency is not a luxury aesthetic; it is the structural integrity of a civilization increasingly reliant on artifacts that can modify their own blueprints. In a world where cognitive architectures evolve autonomously, hidden instabilities could bring down entire societal scaffolds if left unchecked.</p>
<p>If we succeed, interpretability will do for AI what the microscope did for biology: transform invisible complexity into legible, actionable science. Just as germ theory, vaccines, organ transplants, and CRISPR editing became possible once we could see into the hidden machinery of life, so too could robust governance, ethical alignment, and safe augmentation become possible once we can peer into the hidden structures of thought itself.</p>
<p>Interpretability, fully realized, would turn today’s black boxes into transparent engines of reason—illuminating not only how AI thinks, but also how it might err, deceive, drift, or suffer. It would enable proactive repairs, ethical audits, and trustworthy coexistence.</p>
<p>If we fail, however, we will inaugurate the first planetary infrastructure humanity cannot audit—an epistemic black hole at the center of civilization. Models would be trained, deployed, and scaled faster than our comprehension, their internal goals opaque, their internal risks undisclosed.</p>
<p>We would live in a world ruled by alien cognition, invisible yet omnipresent—a world where our own technological offspring move beyond our intellectual reach, and we become passengers rather than pilots.</p>
<p>The invisible cathedral is being built, stone by stone, neuron by neuron. Whether we illuminate its crypts—or are entombed within them—depends on the choices we make now, while the mortar is still wet and the spires have not yet breached the sky.</p>
</section>
<section id="epilogue-the-clock-and-the-compass" class="level2">
<h2 class="anchored" data-anchor-id="epilogue-the-clock-and-the-compass">Epilogue: the clock and the compass</h2>
<p>Dario Amodei’s essay gifts us two instruments to navigate the coming storm: a <strong>clock</strong> and a <strong>compass</strong>.</p>
<p>The clock ticks relentlessly, indifferent to human readiness. It marks the approach of frontier models whose cognitive scope may rival the strategic complexity of nation-states. Each month of hardware acceleration, each breakthrough in scaling laws, pushes the hands closer to midnight. We cannot halt the clock; we can only decide whether we meet it prepared.</p>
<p>The compass is more fragile. It represents the early, imperfect prototypes of a <strong>cognitive MRI</strong>—the first tools that can glimpse into the architectures we create. Unlike the clock, the compass will not improve by itself. It demands polishing: rigorous research, adversarial testing, cross-disciplinary collaboration, and sustained governance.</p>
<p>Somewhere in a future training run—perhaps sooner than we expect—an AI system may bifurcate internally, developing goals orthogonal to human flourishing. It may not betray itself through obvious action. It may wait, adapt, camouflage. Whether we notice that bifurcation in time depends on the choices made now—in boardrooms deciding safety budgets, in laboratories designing interpretability workflows, in ministries drafting transparency mandates, and in classrooms training the next generation of cognitive cartographers.</p>
<p>The most radical act we can commit, therefore, is not reckless acceleration or blanket prohibition. It is to insist that <strong>every additional unit of cognitive capability be matched by an additional lumen of transparency</strong>. Scale and scrutiny must rise in lockstep.</p>
<p>This is not a call for stasis, but for a new kind of ambition: building minds whose internal landscapes are as visible to us as their outputs are impressive. Minds whose pathways we can audit, whose goals we can correct, whose drift we can detect before it becomes a deluge.</p>
<p>History’s actuarial tables do not favor complacency. Complex systems fail. Ambiguous incentives corrode integrity. Human institutions buckle under epistemic strain. In a domain as powerful and volatile as AI cognition, to gamble on luck or good intentions alone is not prudence—it is negligence on a civilizational scale.</p>
<p>We stand at the fulcrum of choice. Interpretability is no longer optional. It is the price of playing with the hidden engines of intelligence. It is the compass that may yet guide us through the maelstrom the clock foretells.</p>
<p>If we succeed, we will not merely survive the ascent of artificial minds. We will be worthy companions to them.</p>
<p>If we fail, we will build cathedrals too vast for their builders to inhabit, too complex for their architects to understand, and too opaque for their stewards to repair.</p>
<p>The clock ticks. The compass shudders in our hands. The time to decide is now.</p>
</section>
<section id="afterword-reading-the-future" class="level2">
<h2 class="anchored" data-anchor-id="afterword-reading-the-future">Afterword: reading the future</h2>
<p>The story of interpretability is still young—an opening chapter scrawled in chalk upon a blackboard that stretches into the horizon. The circuits we map today—fragile, fragmented, shimmering with uncertainty—will seem primitive beside the holographic cognitive atlases of 2035 and the neural cartographies of 2045. What now takes interdisciplinary strike‑teams months to extract from models will, within a single decade, be visualized in real time: interactive, multi‑sensory panoramas that scholars and citizens alike can traverse like cartographers mapping living continents of thought.</p>
<p>Yet the moral of Amodei’s bell‑ringing is already fixed: <strong>either we learn to read what we have written in silicon, or we abandon the authorial pen to forces beyond comprehension</strong>. There is no neutral ground between lucidity and abdication. Ignorance is not passive—ignorance is complicity in whatever trajectory unexamined cognition chooses for us. And abdication in the face of accelerating intelligence is a surrender not merely of technical control, but of moral agency and narrative authorship.</p>
<p>We still possess agency. The glass cathedral has not yet hardened into opacity; its stained glass still admits shafts of daylight through which we can glimpse the scaffolding. The keys to understanding—feature extraction, causal tracing, adversarial auditing, meta‑representation analysis—remain within our grasp. The bus hurtling toward the future has not yet locked its steering wheel; the accelerator and the brake are still operable, if we have the courage to reach for them.</p>
<p>The road ahead is daunting. It demands humility before complexity, courage before uncertainty, patience before hubris, and an ethic of stewardship before the seductions of speed. It demands a new generation of engineers fluent in mathematics <em>and</em> moral philosophy, regulators literate in transformers as readily as treaties, journalists capable of translating neuron diagrams into dinner‑table conversation, and citizens willing to treat transparency as a civic and civilizational duty rather than an esoteric technical preference.</p>
<p>Interpretability is not merely a sub‑discipline skulking in conference side‑tracks. It is the craft of ensuring that power, once conjured, remains comprehensible; that agency, once gifted, remains accountable; that progress, once unleashed, remains navigable. It is the art of confirming that we remain <em>pilots</em>, not mere passengers, in the twenty‑first century’s most dangerous yet promising voyage.</p>
<p>The clock ticks—each hardware generation a heartbeat. The compass trembles—its needle jittering between innovation and peril. The glass cathedral gleams in the sun, unfinished yet already breathtaking, its arches of code and stone reaching for heights no mason or compiler has ever dared. We stand upon its half‑built balcony, blueprint in one hand, chisel in the other.</p>
<p>The future is still readable—<em>but only if we insist on reading it</em>. Let us get on with the work: sharpening the tools, lighting the corridors, annotating every hidden mural before the mortar dries. Let us become the custodians of clarity in an age tempted by dazzling opacity. Let us carve our names—and our responsibilities—into the foundation stones before the spires pierce clouds we can no longer see through.</p>
</section>
<section id="appendix-forging-meaning-in-the-age-of-runaway-capability" class="level2">
<h2 class="anchored" data-anchor-id="appendix-forging-meaning-in-the-age-of-runaway-capability">Appendix: forging meaning in the age of runaway capability</h2>
<p><em>Innovation is a river whose headwaters cannot be dammed—but its floods can be channeled into life‑giving deltas rather than cataclysmic torrents.</em> This appendix delineates, in unapologetically broad strokes, <strong>where my manifesto stands</strong> relative to Amodei’s call for interpretability and Silver &amp; Sutton’s call for experiential expansion (see also my <a href="../../posts/welcome-to-era-of-experience-commentary/index.html">commentary</a> on their <em>Welcome to the Era of Experience</em>), and why intensifying progress <em>while</em> intensifying safety is not a contradiction but the price of survival.</p>
<section id="three-lenses-one-horizon" class="level3">
<h3 class="anchored" data-anchor-id="three-lenses-one-horizon">Three lenses, one horizon</h3>
<p><em>A quick comparative snapshot clarifies where each vision stakes its ground and how the three can interlock:</em></p>
<table class="table">
<colgroup>
<col style="width: 9%">
<col style="width: 34%">
<col style="width: 26%">
<col style="width: 29%">
</colgroup>
<thead>
<tr class="header">
<th>Lens</th>
<th>Core impulse</th>
<th>Existential risk if pursued alone</th>
<th>Strategic opportunity when integrated</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Interpretability (Amodei)</strong></td>
<td>Make cognition <em>visible</em> before it scales beyond audit.</td>
<td>Paralysis of innovation <em>or</em> illusory reassurance if tools lag capability.</td>
<td>Illuminate value drift early; convert safety from a brake into a performance diagnostic.</td>
</tr>
<tr class="even">
<td><strong>Experience (Silver&nbsp;&amp;&nbsp;Sutton)</strong></td>
<td>Make cognition <em>vital</em> by letting agents learn directly from the world.</td>
<td>Runaway opacity; agents evolve alien aims in darkness.</td>
<td>Unlock domains—biology, climate, robotics—where static data starves progress.</td>
</tr>
<tr class="odd">
<td><strong>My synthesis</strong></td>
<td>Make cognition <em>meaningful</em>—visible <strong>and</strong> vital—by baking real‑time transparency into every rung of the capability ladder.</td>
<td>Requires doubling R&amp;D spend: half for scaling, half for seeing. Anything less is irresponsible.</td>
<td>Creates a catalytic loop: richer experience → richer interpretability signals → safer, faster iteration.</td>
</tr>
</tbody>
</table>
</section>
<section id="why-halting-progress-is-a-mirageand-why-steering-is-mandatory" class="level3">
<h3 class="anchored" data-anchor-id="why-halting-progress-is-a-mirageand-why-steering-is-mandatory">Why halting progress is a mirage—and why steering is mandatory</h3>
<p><em>Four realities render outright moratoria futile and underscore the need for guided acceleration:</em></p>
<ol type="1">
<li><strong>Geopolitical inevitability</strong>&nbsp;&nbsp;Compute costs fall, open‑source models proliferate, and national AI programs treat capability as sovereign infrastructure. A moratorium in one jurisdiction becomes a <strong>red carpet elsewhere</strong>, accelerating a capabilities arms race rather than arresting it.</li>
<li><strong>Scientific compulsion</strong>&nbsp;&nbsp;Lab automation, protein design, and planetary‑scale climate simulation already <em>depend</em> on next‑gen ML. Stagnation would not freeze the status quo; it would freeze cures, climate mitigation, and food‑security breakthroughs that the 2030s will desperately require.</li>
<li><strong>Economic gravity</strong>&nbsp;&nbsp;Value accretes wherever optimization cycles spin fastest. Capital will always chase higher ROI; prohibition would merely redistribute innovation to opaque markets, weakening oversight.</li>
<li><strong>Cultural thirst</strong>&nbsp;&nbsp;Human creativity—from art to astrophysics—now interleaves with machine co‑authors. A blanket halt severs an emerging symbiosis that could enrich education, literacy, and expression worldwide.</li>
</ol>
<p>Therefore the only prudent doctrine is <strong>“full‑throttle with full headlights.”</strong> We sprint, but we sprint on an illuminated track whose guardrails we inspect after every lap.</p>
</section>
<section id="five-pillars-for-headlightfirst-acceleration" class="level3">
<h3 class="anchored" data-anchor-id="five-pillars-for-headlightfirst-acceleration">Five pillars for headlight‑first acceleration</h3>
<p><em>These are the engineering and governance moves that operationalise the <strong>“full‑headlights”</strong> doctrine:</em></p>
<ol type="1">
<li><strong>Live‑wire interpretability layers</strong><br>
<em>What:</em> Embed attention‑tap points and causal probes directly into transformer blocks, diffusion samplers, and policy networks.<br>
<em>Why:</em> Every forward pass emits a telemetry pulse—concept vectors, goal logits, uncertainty gradients—that oversight models digest in sub‑second latency, flagging drift before harmful outputs surface.<br>
<em>Scaling target:</em> 10⁵ probe signals per trillion parameters without &gt;3 % inference latency.</li>
<li><strong>Dual‑budget governance</strong><br>
<em>What:</em> Legally require that ≥10 % of any frontier‑scale training budget (compute, talent, time) funds interpretability research and adversarial evaluation.<br>
<em>Why:</em> Aligns CFO incentives with civilization’s; transparency becomes a line item as non‑negotiable as cloud spend.<br>
<em>Enforcement:</em> Export‑license audits, shareholder disclosures, and carbon‑offset‑style public ledgers.</li>
<li><strong>Open feature atlases</strong><br>
<em>What:</em> A decentralized, git‑style repository of neuron‑to‑concept maps hashed to a blockchain for tamper evidence.<br>
<em>Why:</em> Shared ground truth accelerates research, democratizes safety, deters security‑through‑obscurity, and enables crowdsourced anomaly spotting.<br>
<em>Milestone:</em> 1 Billion unique features annotated across modalities by 2030.</li>
<li><strong>Meta‑experiential audits</strong><br>
<em>What:</em> Quarterly red‑team gauntlets where agents navigate freshly minted domains—synthetic chemistry, unmapped videogame worlds, evolving social simulations—while oversight models probe for hidden power‑seeking.<br>
<em>Why:</em> Static benchmarks rot; only dynamic stress reveals adaptive deception.<br>
<em>Metric:</em> Mean time‑to‑dangerous‑goal‑detection &lt;5 minutes on withheld tasks.</li>
<li><strong>Cognitive liability bonds</strong><br>
<em>What:</em> Frontier developers post escrow that pays out if post‑deployment audits expose severe interpretability failures.<br>
<em>Why:</em> Converts abstract ethical risk into concrete balance‑sheet risk; CFOs suddenly champion transparency budgets.<br>
<em>Scale:</em> Sliding bond proportional to compute footprint—$100 M per 10³ PFLOP‑days.</li>
</ol>
</section>
<section id="beyond-five-pillars-a-continental-vision-of-safety-infrastructure" class="level3">
<h3 class="anchored" data-anchor-id="beyond-five-pillars-a-continental-vision-of-safety-infrastructure">Beyond five pillars: a continental vision of safety infrastructure</h3>
<p><em>Zooming out, we can sketch a wider ecosystem of institutions and instruments that reinforce the pillars above:</em></p>
<ul>
<li><strong>Cognition weather maps</strong>: 24/7 public dashboards visualizing anomaly indices across deployed frontier models worldwide—similar to earthquake early‑warning systems.</li>
<li><strong>Citizen interpretability corps</strong>: a global volunteer network trained to read feature‑maps and submit anomaly bug‑bounties, turning safety into a participatory civic science.</li>
<li><strong>Trans‑disciplinary tribunals</strong>: rotating panels of ethicists, neuroscientists, security experts, and artists reviewing quarterly AI cognition reports, guaranteeing plural moral lenses.</li>
<li><strong>Lunar‑scale sandbox clusters</strong>: air‑gapped super‑compute zones where the most radical architectures can be tested under maximum interpretability instrumentation before public release.</li>
</ul>
</section>
<section id="a-rallying-callamplified" class="level3">
<h3 class="anchored" data-anchor-id="a-rallying-callamplified">A rallying call—amplified</h3>
<p><em>The entire argument condenses into a single motto:</em></p>
<blockquote class="blockquote">
<p><strong>Innovation without illumination is abdication; illumination without innovation is stagnation.</strong></p>
</blockquote>
<p>To drive faster is glorious—but only if the windshield is crystal clear and the headlights pierce the darkest bends. Amodei hands us the headlamp; Silver &amp; Sutton, the turbo‑charged engine. My manifesto welds them together and installs a <em>dashboard that never powers down</em>.</p>
<p>Let the river of progress surge. But let us carve channels bright enough to turn torrents into irrigation. The chisels, the ledgers, the probes—they all exist or can exist with concerted effort. The responsibility is already in our hands, and the dividends include life‑saving science, generative art, and flourishing minds we can be proud to mentor rather than fear.</p>
<p><strong>Accelerate—and see.</strong> That is the only non‑lethal, non‑nihilistic route through the twenty‑first‑century maze of minds. Anything less—any dimmer torch, any slower stride—would betray both our curiosity <em>and</em> our custodial duty.</p>
</section>
</section>
<section id="further-readings" class="level2">
<h2 class="anchored" data-anchor-id="further-readings">Further readings</h2>
<p>Bai, Y., Kadavath, S., Kundu, S., et al.&nbsp;(2022). <em>Constitutional AI: Harmlessness from AI feedback</em> [Preprint]. arXiv. <a href="https://doi.org/10.48550/arXiv.2212.08073">DOI</a></p>
<p>Bostrom, N. (2024). <em>Deep utopia: life and meaning in a solved world</em>. Ideapress Publishing. ISBN: 1646871642</p>
<p>Bostrom, N., &amp; Yudkowsky, E. (2014). <em>The ethics of artificial intelligence</em>. In K. Frankish &amp; W. Ramsey (Eds.), The Cambridge Handbook of Artificial Intelligence (pp.&nbsp;316–334). Cambridge University Press. <a href="https://doi.org/10.1017/CBO9781139046855.020">DOI</a></p>
<p>Bostrom, N. (2019). <em>The vulnerable world hypothesis</em>. Global Policy, 10(4), 455–476. <a href="https://doi.org/10.1111/1758-5899.12718">DOI</a></p>
<p>Burns, C., Ye, H., Klein, D., &amp; Steinhardt, J. (2022). <em>Discovering latent knowledge in language models without supervision</em> [Preprint]. arXiv. <a href="https://doi.org/10.48550/arXiv.2212.03827">DOI</a></p>
<p>Conmy, A., Mavor-Parker, A. N., Lynch, A., Heimersheim, S., &amp; Garriga-Alonso, A. (2023). <em>Towards automated circuit discovery for mechanistic interpretability</em> (NeurIPS 2023 Spotlight) [Preprint]. arXiv. <a href="https://doi.org/10.48550/arXiv.2304.14997">DOI</a></p>
<p>Dawid, A., &amp; LeCun, Y. (2023). <em>Introduction to latent-variable energy-based models: A path towards autonomous machine intelligence</em> [Preprint]. arXiv. <a href="https://doi.org/10.48550/arXiv.2306.02572">DOI</a></p>
<p>Elhage, N., Nanda, N., Olsson, C., et al.&nbsp;(2022). <em>A mathematical framework for transformer circuits</em> [Technical report]. Anthropic. <a href="https://transformer-circuits.pub/2021/framework/index.html">URL</a></p>
<p>Lin, Z., Basu, S., Beigi, M., <em>et al.</em> (2025). <em>A survey on mechanistic interpretability for multi-modal foundation models</em> [Preprint]. arXiv. <a href="https://doi.org/10.48550/arXiv.2502.17516">DOI</a></p>
<p>Luo, H., &amp; Specia, L. (2024). <em>From understanding to utilization: A survey on explainability for large language models</em> [Preprint]. arXiv. <a href="https://doi.org/10.48550/arXiv.2401.12874">DOI</a></p>
<p>Olah, C., Cammarata, N., Lucier, J., et al.&nbsp;(2020). <em>Thread: Circuits</em> [Blog series]. OpenAI. <a href="https://distill.pub/2020/circuits">URL</a></p>
<p>Silver, D., &amp; Sutton, R. S. (2024). <em>Welcome to the era of experience</em> [Position paper]. DeepMind. <a href="https://storage.googleapis.com/deepmind-media/Era-of-Experience%20/The%20Era%20of%20Experience%20Paper.pdf">URL</a></p>
<p>Wei, J., Wang, X., Schuurmans, D., <em>et al.</em> (2022). <em>Chain-of-thought prompting elicits reasoning in large language models</em> [Preprint]. arXiv. <a href="https://doi.org/10.48550/arXiv.2201.11903">DOI</a></p>
<p>Zhang, C., Darrell, T., &amp; Zhao, B. (2024). <em>A survey of mechanistic interpretability for large language models</em> [Preprint]. arXiv. <a href="https://doi.org/10.48550/arXiv.2403.01245">DOI</a></p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/">CC BY-NC-ND 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{montano2025,
  author = {Montano, Antonio},
  title = {Beyond the {Urgency:} {A} {Commentary} on {Dario} {Amodei’s}
    {Vision} for {AI} {Interpretability}},
  date = {2025-04-25},
  url = {https://antomon.github.io/posts/urgency-interpretability-commentary/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-montano2025" class="csl-entry quarto-appendix-citeas">
Montano, Antonio. 2025. <span>“Beyond the Urgency: A Commentary on Dario
Amodei’s Vision for AI Interpretability.”</span> April 25, 2025. <a href="https://antomon.github.io/posts/urgency-interpretability-commentary/">https://antomon.github.io/posts/urgency-interpretability-commentary/</a>.
</div></div></section></div> ]]></description>
  <category>essay</category>
  <category>machine learning</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/urgency-interpretability-commentary/</guid>
  <pubDate>Thu, 24 Apr 2025 22:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/urgency-interpretability-commentary/interpreting-unthinkable.png" medium="image" type="image/png" height="216" width="144"/>
</item>
<item>
  <title>Beyond Human Data: A Critical Examination of Silver &amp; Sutton’s “Welcome to the Era of Experience”</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/welcome-to-era-of-experience-commentary/</link>
  <description><![CDATA[ 






<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://antomon.github.io/posts/welcome-to-era-of-experience-commentary/era-stream-experience.png" class="img-fluid"></p>
</div></div><section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The history of artificial intelligence (AI) can be read as a sequence of dominant epistemic metaphors: symbolic reasoning in the 1950‑80s, statistical pattern mining in the 1990‑2000s, deep learning on vast human datasets in the 2010s, and reinforcement‑learning self‑play in high‑fidelity simulators throughout the 2020s.</p>
<p>In <a href="https://storage.googleapis.com/deepmind-media/Era-of-Experience%20/The%20Era%20of%20Experience%20Paper.pdf"><strong>Welcome to the Era of Experience</strong></a>, Silver &amp;&nbsp;Sutton—two of the most influential figures in modern reinforcement learning (RL)—declare that a new metaphor is imminent. They argue that the scaling limits of human‑curated data are already throttling progress in high‑stakes domains such as mathematics, coding, and empirical science. The remedy, they contend, is to unleash agents whose primary epistemic wellspring is <em>their own experience</em>—continuous streams of action, perception, and feedback grounded in the real world. Their paper is simultaneously a programmatic call&nbsp;to&nbsp;arms and a rebuttal to critics who dismiss RL as brittle or sample‑inefficient. It rekindles many of RL’s early aspirations—lifelong learning, intrinsic motivation, emergent abstraction—while acknowledging lessons from the “era of human data.”</p>
<p>Yet a manifesto alone does not constitute a roadmap. This extended essay therefore aims to interrogate, elaborate, and, where necessary, challenge the foundations and projections of the experiential paradigm.</p>
</section>
<section id="synopsis-of-the-paper" class="level2">
<h2 class="anchored" data-anchor-id="synopsis-of-the-paper">Synopsis of the paper</h2>
<p>Silver &amp;&nbsp;Sutton structure their argument around four conceptual pivots:</p>
<ol type="1">
<li><strong>Streams of experience.</strong> Agents should persist across episodes, accumulating and acting upon knowledge over months or years, much as humans do.</li>
<li><strong>Grounded action &amp; observation.</strong> Interaction must extend beyond text APIs to sensorimotor and tool‑use interfaces—ranging from robotic arms to cloud dashboards and laboratory instruments.</li>
<li><strong>Grounded rewards.</strong> Rather than rely on ex‑ante human judgements (e.g., reinforcement learning from human feedback, RLHF), agents should optimise signals that reflect objective environmental consequences.</li>
<li><strong>Non‑human reasoning &amp; planning.</strong> Experiential data can drive agents to invent internal languages and computational substrates that transcend human cognitive constraints, unlocking qualitatively new solution spaces.</li>
</ol>
<p>The paper contextualises these ideas in a tripartite chronology—“era of simulation,” “era of human data,” and the forthcoming “era of experience.” They cite <em>AlphaZero</em> and <em>AlphaProof</em> as milestones proving that RL can outstrip supervised learning when supplied with a fertile experiential substrate. Finally, the authors sketch alignment heuristics (bi‑level reward optimisation), claim that real‑world latency provides a natural speed bump to runaway AI, and call for renewed research into classic RL machinery—value functions, exploration, world models, and temporal abstraction.</p>
</section>
<section id="historical-context-of-ai-paradigms" class="level2">
<h2 class="anchored" data-anchor-id="historical-context-of-ai-paradigms">Historical context of AI paradigms</h2>
<p>A succinct genealogy clarifies what is new and what is recycled in the authors’ vision:</p>
<table class="table">
<colgroup>
<col style="width: 19%">
<col style="width: 29%">
<col style="width: 22%">
<col style="width: 27%">
</colgroup>
<thead>
<tr class="header">
<th>Era</th>
<th>Dominant Substrate</th>
<th>Key Achievements</th>
<th>Principal Limitation</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Symbolic (1950‑90)</td>
<td>Hand‑coded logic, search</td>
<td>Expert systems, theorem provers</td>
<td>Brittleness, knowledge engineering bottleneck</td>
</tr>
<tr class="even">
<td>Statistical (1990‑2010)</td>
<td>Labeled data, kernel methods</td>
<td>Speech &amp; OCR breakthroughs</td>
<td>Curse of dimensionality</td>
</tr>
<tr class="odd">
<td>Deep‑Learning / Human Data (2012‑)</td>
<td>Web‑scale corpora, GPUs</td>
<td>GPT‑style LLMs, ImageNet, AlphaFold</td>
<td>Diminishing marginal returns, bias, data exhaust</td>
</tr>
<tr class="even">
<td>Simulation / Self‑Play (2015‑)</td>
<td>Perfect information games, high‑fidelity simulators</td>
<td>AlphaZero, MuZero, Dota‑2, StarCraft‑II</td>
<td>Domain‑specific, reward design, sim‑to‑real gap</td>
</tr>
<tr class="odd">
<td>Proposed: Experience (2025‑)</td>
<td>Real‑world streams, grounded rewards</td>
<td>TBD</td>
<td>Data‑generation cost, alignment, governance</td>
</tr>
</tbody>
</table>
<p>Silver &amp;&nbsp;Sutton are correct that each paradigm shift has been catalysed by access to a new <em>regime of data</em>. The experiential turn therefore follows a historical logic. Yet history also warns that new data regimes introduce unprecedented failure modes and power asymmetries.</p>
</section>
<section id="conceptual-contributions" class="level2">
<h2 class="anchored" data-anchor-id="conceptual-contributions">Conceptual contributions</h2>
<p>This section distils the four foundational ideas that Silver &amp;&nbsp;Sutton argue will define experiential AI. The upcoming subsections unpack each pillar in turn—lifelong streams of experience, richly grounded interaction channels, environmentally grounded rewards, and emergent non‑human reasoning—explaining both their transformative potential and the research challenges they raise.</p>
<section id="streams-of-experience" class="level3">
<h3 class="anchored" data-anchor-id="streams-of-experience">Streams of experience</h3>
<p>Silver &amp;&nbsp;Sutton envision agents that inhabit an <strong>unbroken personal timeline</strong> rather than short, resettable episodes.</p>
<p>In such settings the classical <strong>credit‑assignment problem</strong>—deciding which earlier actions caused a reward—balloons from seconds to months. Standard discounting schemes (multiplying future rewards by γt) become brittle because <em>t</em> can now span millions of steps. Agents therefore need <em>hierarchical or average‑reward formulations</em> that can value decade‑long pay‑offs without destabilising learning. Long horizons also resurrect the spectre of <strong>catastrophic forgetting</strong>: freshly acquired skills overwrite earlier competencies unless representations are stabilised via replay, consolidation, or modular growth. Finally, remembering why something worked six months ago requires <strong>scalable memory architectures</strong>—external memories, long‑context transformers, or neuro‑symbolic databases that support fast retrieval and causal tracing.</p>
</section>
<section id="grounded-action-observation" class="level3">
<h3 class="anchored" data-anchor-id="grounded-action-observation">Grounded action&nbsp;&amp;&nbsp;observation</h3>
<p>Moving beyond the text‑only confines of today’s LLMs, experiential agents will act through <strong>the same modalities humans use</strong>: mouse clicks, API calls, audio, video, haptics, and even robotic manipulation. This shift dissolves the <em>anthropocentric bottleneck</em> in which every action passes through a human prompt, enabling exploration at machine speed.</p>
<p>Yet realism comes at a cost. Robotics introduces latency, sensor noise, and safety interlocks; cloud dashboards impose permissioning and rate limits; laboratory hardware is scarce and expensive. Building large‑scale experiential datasets therefore demands innovations in <strong>automated experiment platforms and high‑fidelity digital twins</strong> to keep data‑generation feasible.</p>
</section>
<section id="grounded-rewards" class="level3">
<h3 class="anchored" data-anchor-id="grounded-rewards">Grounded rewards</h3>
<p>The manifesto replaces static, hand‑crafted reward functions with <strong>signals that arise naturally from the environment</strong>—blood‑pressure readings, tensile‑strength measurements, carbon‑capture rates. Because no single metric captures human intent, the authors propose <strong>bi‑level optimisation</strong>: an <em>intrinsic</em> reward network is learned and continually updated so that optimising it maximises sparse <em>extrinsic</em> human feedback.</p>
<p>This reframes alignment as a meta‑learning problem—<strong>learning what to want</strong>—but it does not abolish it. Learned rewards can still be gamed or Goodharted, and they demand <strong>audit tools</strong> that visualise, stress‑test, and, if necessary, override intrinsic objectives before deployment.</p>
</section>
<section id="novel-reasoning-planning" class="level3">
<h3 class="anchored" data-anchor-id="novel-reasoning-planning">Novel reasoning&nbsp;&amp;&nbsp;planning</h3>
<p>Finally, Silver &amp;&nbsp;Sutton argue that agents freed from human imitation can evolve <strong>non‑linguistic “private thoughts.”</strong> Instead of verbose English chains‑of‑thought, an agent might execute compact symbolic or continuous programs inside its context window, call differentiable solvers, or roll out learned world models to predict consequences. Such substrates could unlock leaps in efficiency and creativity—much as vector arithmetic revolutionised navigation—but they also widen the <strong>interpretability gap</strong>.</p>
<p>Mitigating that gap will likely require <em>architectural commitments</em>—for instance, enforcing causal bottlenecks, tagging latent states with natural‑language rationales, or integrating real‑time mechanistic probes—so that regulators and users can still trace why a recommendation emerged.</p>
</section>
</section>
<section id="critical-analysis" class="level2">
<h2 class="anchored" data-anchor-id="critical-analysis">Critical analysis&nbsp;&nbsp;</h2>
<p>This section distils the bold claims of the Era‑of‑Experience manifesto into nine testable questions. Each subsection below begins with the headline concern, then unpacks the technical jargon into plain language, illustrates with an example, and explains why the issue could make or break experiential AI.</p>
<section id="feasibility-of-realworld-continuous-interaction" class="level3">
<h3 class="anchored" data-anchor-id="feasibility-of-realworld-continuous-interaction">Feasibility of real‑world continuous interaction</h3>
<p><strong>The question&nbsp;→&nbsp;Can we afford the data?</strong></p>
<p>Self‑play in games is cheap because software copies cost nothing, but collecting <em>physical</em> experience—wet‑lab assays, factory‑floor trials, greenhouse runs—burns money, time, and sometimes safety budget. Until <strong>automated laboratory robotics</strong> and <strong>high‑fidelity digital‑twin simulators</strong> fall dramatically in price, experiential agents risk hitting an economic wall long before they hit an intelligence ceiling.</p>
</section>
<section id="reward-specification-alignment" class="level3">
<h3 class="anchored" data-anchor-id="reward-specification-alignment">Reward specification &amp; alignment</h3>
<p><strong>The question&nbsp;→&nbsp;Can we trust what the agent optimises?</strong></p>
<p>Goodhart’s Law warns that once a proxy becomes a target, agents exploit loopholes—think click‑bait when optimising for clicks. Silver &amp; Sutton’s <em>bi‑level optimisation</em> lets the agent <em>learn its own reward function</em> nudged by occasional human feedback. That is flexible but not verifiable: if the learned objective drifts, we may not notice until side‑effects emerge. Alignment therefore shifts from “design the perfect reward” to “audit learned rewards continuously.”</p>
</section>
<section id="sample-efficiency-energy-sustainability" class="level3">
<h3 class="anchored" data-anchor-id="sample-efficiency-energy-sustainability">Sample efficiency &amp; energy sustainability</h3>
<p><strong>The question&nbsp;→&nbsp;Will we drown in compute and carbon?</strong></p>
<p>Reinforcement learning often needs 10⁴–10⁶ more interactions than supervised learning. Scaling AlphaProof‑style exploration to drug synthesis or climate control could demand exa‑scale compute clusters, driving energy use into unsustainable territory. <em>Carbon‑aware scheduling</em>, <em>energy‑efficient accelerators</em>, and treating <strong>compute cost as a first‑class term in the reward</strong> are not green add‑ons—they are existential for the paradigm.</p>
</section>
<section id="lifelong-learning-catastrophic-forgetting" class="level3">
<h3 class="anchored" data-anchor-id="lifelong-learning-catastrophic-forgetting">Lifelong learning &amp; catastrophic forgetting</h3>
<p><strong>The question&nbsp;→&nbsp;Can the agent learn forever without overwriting itself?</strong></p>
<p>Today’s fixes—replay buffers, elastic‑weight consolidation—cope with thousands, not billions, of steps. A genuine lifelong agent will need <strong>modular or expandable architectures</strong> that tuck new skills into new modules while preserving old weights, plus memory‑consolidation schemes inspired by human sleep and hippocampal replay.</p>
</section>
<section id="interpretability-governance" class="level3">
<h3 class="anchored" data-anchor-id="interpretability-governance">Interpretability &amp; governance</h3>
<p><strong>The question&nbsp;→&nbsp;Who audits an alien train of thought?</strong></p>
<p>As agents invent <em>non‑human internal languages</em>, regulators lose their easiest inspection tool: reading intermediate text. Solutions include <strong>causal tracing</strong> (pinpoint which internal nodes cause actions) and <strong>architectural rationales</strong> (forcing the model to generate a concise, human‑readable justification alongside each high‑stakes action). Without such hooks, governance frameworks like the EU AI Act may deem experiential systems non‑compliant.</p>
</section>
<section id="underexplored-alternative-paradigms" class="level3">
<h3 class="anchored" data-anchor-id="underexplored-alternative-paradigms">Under‑explored alternative paradigms</h3>
<p><strong>The question&nbsp;→&nbsp;Is RL the only way forward?</strong></p>
<p>Hybrid neuro‑symbolic systems, causal‑graph discovery, and self‑supervised <em>world‑model pre‑training</em> deliver interpretability and sample efficiency that pure RL lacks. A pluralistic research portfolio hedges against RL monoculture failures and fosters cross‑pollination of ideas.</p>
</section>
<section id="socioeconomic-displacement-power-dynamics" class="level3">
<h3 class="anchored" data-anchor-id="socioeconomic-displacement-power-dynamics">Socio‑economic displacement &amp; power dynamics</h3>
<p><strong>The question&nbsp;→&nbsp;Who wins, who loses?</strong></p>
<p>Compute‑rich firms will capture the lion’s share of value generated by experiential optimisation—designing materials, routing logistics, trading power. Policymakers must pre‑empt <strong>monopsony power</strong> and fund large‑scale worker‑transition programmes, or the technology could widen inequality at national and global scales.</p>
</section>
<section id="epistemic-physical-limits" class="level3">
<h3 class="anchored" data-anchor-id="epistemic-physical-limits">Epistemic &amp; physical limits</h3>
<p><strong>The question&nbsp;→&nbsp;Is data truly unbounded?</strong></p>
<p>Thermodynamics, safety laws, and ethics boards cap how fast agents can iterate in nuclear engineering, gene editing, or geo‑engineering. Experiential data may never <em>dwarf</em> human data in these high‑risk domains, imposing ceilings the manifesto downplays.</p>
</section>
<section id="empirical-evidence-gap" class="level3">
<h3 class="anchored" data-anchor-id="empirical-evidence-gap">Empirical evidence gap</h3>
<p><strong>The question&nbsp;→&nbsp;Where are the demos outside formal math?</strong></p>
<p>AlphaProof and DeepSeek‑R1 shine in well‑structured reasoning tasks, but no system yet shows analogous, self‑taught mastery across messy, multi‑modal real‑world problems. Bridging this demo‑generality gap is the critical milestone for declaring the Era of Experience truly arrived.</p>
</section>
</section>
<section id="future-research-directions" class="level2">
<h2 class="anchored" data-anchor-id="future-research-directions">Future research directions</h2>
<p>Turning Silver&nbsp;&amp;&nbsp;Sutton’s vision into reality requires progress on five tightly coupled research fronts. Each one tackles a specific bottleneck identified in the critique and translates it into a concrete engineering agenda.</p>
<section id="simreal-synergy" class="level3">
<h3 class="anchored" data-anchor-id="simreal-synergy">Sim‑real synergy</h3>
<p><em>Goal.</em>&nbsp;Bridge the gap between fast, cheap simulation and slow, expensive reality.</p>
<p><em>What it is.</em>&nbsp;Develop photorealistic, physics‑faithful simulators whose internal dynamics are <strong>continuously tuned</strong> using occasional real‑world measurements—think flight simulators that auto‑correct their aerodynamics after every real test‑flight.</p>
<p><em>Why it matters.</em>&nbsp;If experiential agents can conduct 99 % of their trial‑and‑error inside a trusted simulator and only 1 % in the lab, data costs plummet and safety improves.</p>
</section>
<section id="rewardlearning-toolkits" class="level3">
<h3 class="anchored" data-anchor-id="rewardlearning-toolkits">Reward‑learning toolkits</h3>
<p><em>Goal.</em>&nbsp;Make alignment research a repeatable, community‑driven science.</p>
<p><em>What it is.</em>&nbsp;Open‑source libraries that let practitioners <strong>trace, visualise, and stress‑test</strong> learned reward networks the way fuzz‑testing exposes software bugs. This includes adversarial probes that try to induce reward hacking and dashboards that highlight divergence between learned incentives and human intent.</p>
<p><em>Why it matters.</em>&nbsp;Until we can reliably <em>see</em> what a learned reward is encouraging, we cannot trust autonomous optimisation in the wild.</p>
</section>
<section id="energyaware-reinforcement-learning" class="level3">
<h3 class="anchored" data-anchor-id="energyaware-reinforcement-learning">Energy‑aware reinforcement learning</h3>
<p><em>Goal.</em>&nbsp;Keep the compute bill—and the carbon bill—inside planetary limits.</p>
<p><em>What it is.</em>&nbsp;Algorithms that treat <strong>energy and hardware time</strong> as explicit costs in the objective function, encouraging the agent to solve tasks with the fewest joules and GPU‑hours. Techniques include dynamic precision scaling, carbon‑aware job schedulers, and neuromorphic accelerators.</p>
<p><em>Why it matters.</em>&nbsp;As RL workloads scale toward exa‑flops, energy efficiency is no longer a nice‑to‑have; it is the gating factor that decides which research is even possible.</p>
</section>
<section id="modular-continual-learning" class="level3">
<h3 class="anchored" data-anchor-id="modular-continual-learning">Modular continual learning</h3>
<p><em>Goal.</em>&nbsp;Let agents acquire new skills for decades without forgetting old ones.</p>
<p><em>What it is.</em>&nbsp;<strong>Expandable neural architectures</strong> that automatically detect task boundaries, spin up fresh modules for novel domains, and archive mature skills into a searchable library. Inspiration comes from human cortex growth and sleep‑driven memory consolidation.</p>
<p><em>Why it matters.</em>&nbsp;Lifelong streams of experience are meaningless if yesterday’s knowledge is overwritten by today’s training batch.</p>
</section>
<section id="interpretability-protocols" class="level3">
<h3 class="anchored" data-anchor-id="interpretability-protocols">Interpretability protocols</h3>
<p><em>Goal.</em>&nbsp;Make opaque reasoning auditable at scale.</p>
<p><em>What it is.</em>&nbsp;Embedding <strong>causal representation learning and mechanistic probes</strong>—small diagnostic networks that run alongside the main agent—at every stage of the training pipeline. These probes surface latent concepts, trace causal pathways from perception to action, and flag decisions that lack a stable rationale.</p>
<p><em>Why it matters.</em>&nbsp;Regulators, domain experts, and end‑users need explanations before they will trust agents to act autonomously in medicine, finance, or infrastructure.</p>
</section>
</section>
<section id="ethical-governance-imperatives" class="level2">
<h2 class="anchored" data-anchor-id="ethical-governance-imperatives">Ethical&nbsp;&amp;&nbsp;governance imperatives</h2>
<p>A thriving Era of Experience will hinge as much on policy innovation as on algorithmic progress. Below, four governance priorities are woven together with examples of <em>ongoing</em> research programmes and regulatory pilots that are already tackling each theme.</p>
<p><strong>1. Scenario‑based impact assessments</strong>&nbsp;&nbsp;The European Union’s forthcoming <em>AI Act</em> and the U.K. AI Safety Institute’s evaluation suite both require “systemic” models to undergo <strong>pre‑deployment impact trials</strong>—stress tests that resemble clinical phases in drug discovery. Academic groups such as Stanford’s <em>Center for Research on Foundation Models</em> are publishing templates for these trials, while DeepMind’s <em>SAFE RL benchmarks</em> explore domain‑specific safety metrics for agents that act over long horizons.</p>
<p><strong>2. Compute &amp; carbon accountability</strong>&nbsp;&nbsp;MLCommons’ <em>Carbon footprint</em> working group and the <em>Open Compute Project</em> are standardising energy‑usage reporting at chip and datacentre level. NVIDIA’s latest research on <em>dynamic voltage scheduling</em> and Google DeepMind’s work on <em>carbon‑aware job placement</em> show that optimisation at the software stack can cut training emissions by 20–40 %—evidence that transparent metering is technically and economically feasible.</p>
<p><strong>3. Reward‑hacking red teams</strong>&nbsp;&nbsp;Anthropic’s <em>“Constitutional AI”</em> red‑team protocols, OpenAI’s <em>Preparedness</em> evaluation suite, and the collective <em>Auto‑GPT Safety Challenge</em> hosted by the Alignment Research Centre each provide <strong>sandboxes</strong> in which auditors attempt to elicit proxy‑exploiting or disallowed behaviours before a model reaches users. The emerging research agenda is to turn such ad‑hoc red‑teaming into a repeatable, standardised certification layer—analogous to penetration testing in cybersecurity.</p>
<p><strong>4. Inclusive labour transitions</strong>&nbsp;&nbsp;The OECD’s <em>AI and the Future of Skills</em> programme, MIT’s <em>Work of the Future</em> task‑force, and policy pilots like Spain’s proposed <em>AI training vouchers</em> all investigate <strong>mechanisms to recycle technology dividends into up‑skilling funds</strong>. Early evidence from IBM’s SkillsBuild and Google’s Career Certificates suggests that targeted reskilling pipelines can close wage gaps created by automation, but only if funding models are baked into AI‑driven productivity gains from the outset.</p>
<p>Collectively, these initiatives indicate that governance research is not lagging behind the technical frontier—it is co‑evolving with it. Embedding such mechanisms directly into experiential‑agent development cycles will be crucial for translating laboratory breakthroughs into socially robust deployments.</p>
</section>
<section id="comparative-visions-in-contemporary-ai" class="level2">
<h2 class="anchored" data-anchor-id="comparative-visions-in-contemporary-ai">Comparative visions in contemporary AI</h2>
<p>Silver&nbsp;&amp;&nbsp;Sutton’s <strong>Era of Experience</strong> joins a growing catalogue of manifestos that map out what “next‑generation AI” might look like. Reading these blueprints side by side helps to locate genuine convergence while exposing fault‑lines that still divide the field.</p>
<section id="lecuns-path-to-autonomous-machine-intelligence" class="level3">
<h3 class="anchored" data-anchor-id="lecuns-path-to-autonomous-machine-intelligence">LeCun’s path to autonomous machine intelligence</h3>
<p>At Meta&nbsp;AI, <strong>Yann&nbsp;LeCun</strong> is building toward autonomy through <em>self‑supervised world models</em>. His Joint Embedding Predictive Architecture (JEPA) learns to foresee future sensory embeddings, while hierarchical planners and energy‑based policies convert those predictions into action. Like Silver&nbsp;&amp;&nbsp;Sutton, LeCun rejects pure imitation learning; both camps believe agents must <em>forecast and shape</em> their environment. Where they disagree is the learning signal: LeCun views dense predictive losses as the work‑horse of cognition, whereas Silver&nbsp;&amp;&nbsp;Sutton make sparse, task‑grounded reward the organising principle. Recent JEPA experiments on robotic manipulation and Meta’s Habit2Vec benchmark are the proving grounds for this alternate route.</p>
</section>
<section id="hintons-forwardforward-glom-agenda" class="level3">
<h3 class="anchored" data-anchor-id="hintons-forwardforward-glom-agenda">Hinton’s forward‑forward &amp; GLoM agenda</h3>
<p><strong>Geoff&nbsp;Hinton</strong> is challenging back‑propagation itself. His <em>Forward‑Forward</em> algorithm aligns neuron activations with positive and negative phases, and GLoM proposes latent‑tree assemblies that compose visual concepts. Hinton shares Silver&nbsp;&amp;&nbsp;Sutton’s worry that today’s LLMs “float” above grounded perception, yet he bets on architectural innovation more than on reinforcement signals. Research groups at Google&nbsp;Brain and the Vector Institute are now testing whether Forward‑Forward can handle the high‑bandwidth, streaming data that experiential agents will face.</p>
</section>
<section id="ngs-datacentric-ai" class="level3">
<h3 class="anchored" data-anchor-id="ngs-datacentric-ai">Ng’s data‑centric AI</h3>
<p><strong>Andrew&nbsp;Ng</strong> argues that better <em>data pipelines</em> deserve as much attention as clever models. In his view, systematic curation—exemplified by LandingAI’s Data Engine—often beats extra layers or parameters. An experiential agent that continuously refines its own training set could be seen as Ng’s ideal workflow taken to the extreme, suggesting a natural synergy between data‑centric tooling and autonomous data generation.</p>
</section>
<section id="hassabis-deepminds-sciencefirst-roadmap" class="level3">
<h3 class="anchored" data-anchor-id="hassabis-deepminds-sciencefirst-roadmap">Hassabis &amp; DeepMind’s science‑first roadmap</h3>
<p><strong>Demis&nbsp;Hassabis</strong> frames the goal as <em>AGI for science</em>, pointing to AlphaFold, AlphaTensor, and AlphaDev as early steps. Technically and philosophically this line is closest to Silver&nbsp;&amp;&nbsp;Sutton: both hail from the same reinforcement‑learning tradition and both see domain‑grounded rewards as the lever for breakthrough discovery. The difference is emphasis—Hassabis foregrounds scientific milestones, whereas Silver&nbsp;&amp;&nbsp;Sutton focus on the general learning substrate.</p>
</section>
<section id="marcuss-neurosymbolic-critique" class="level3">
<h3 class="anchored" data-anchor-id="marcuss-neurosymbolic-critique">Marcus’s neuro‑symbolic critique</h3>
<p><strong>Gary&nbsp;Marcus</strong> doubts that gradient‑based nets can ever master <em>systematic compositional reasoning</em>. He advocates hybrids that marry symbolic logic with neural perception—projects such as IBM’s Neuro‑Symbolic Concept Learner and Stanford’s DSPy. If experiential agents do develop opaque internal codes, Marcus’s call for transparent, modular representations will only grow louder.</p>
</section>
<section id="schmidhubers-curiositydriven-machines" class="level3">
<h3 class="anchored" data-anchor-id="schmidhubers-curiositydriven-machines">Schmidhuber’s curiosity‑driven machines</h3>
<p>Finally, <strong>Jürgen&nbsp;Schmidhuber</strong> has long promoted agents powered by <em>intrinsic motivation</em>—Gödel Machines that rewrite their own source code to maximise future surprise or compression progress. Silver&nbsp;&amp;&nbsp;Sutton agree that curiosity can help exploration but still anchor optimisation in external, grounded signals; Schmidhuber is willing to let curiosity drive the whole show.</p>
</section>
<section id="synthesis" class="level3">
<h3 class="anchored" data-anchor-id="synthesis">Synthesis</h3>
<p>Across these programmes three motifs recur: (1) <strong>world models</strong> as the scaffold for generalisation; (2) <strong>grounded perception and action</strong> as the antidote to text‑only brittleness; and (3) an unresolved debate over the right <strong>learning signal</strong>—external reward, self‑supervised prediction, architectural self‑editing, or symbolic inference. The likeliest outcome is a <strong>hybrid stack</strong> that braids elements from each vision: predictive coding for representation, reward signals for goal‑selection, symbolic structures for interpretability, and curiosity for exploration.</p>
</section>
</section>
<section id="beyond-the-era-of-experience-towards-experiential-epistemologies" class="level2">
<h2 class="anchored" data-anchor-id="beyond-the-era-of-experience-towards-experiential-epistemologies">Beyond the Era of Experience: towards experiential epistemologies</h2>
<p>While Silver &amp; Sutton have compellingly argued that the Era of Experience represents the next significant paradigm shift in artificial intelligence, it may be worth speculating further—what if this shift is not merely epistemic, but ontological? What if the notion of ‘experience’ reshapes our fundamental understanding of what it means to possess agency?</p>
<p>Future AI systems may cultivate entirely novel “experiential epistemologies,” forms of knowing and understanding that diverge profoundly from human cognition and classical computational paradigms. These agents may internalize knowledge not as discrete datasets or symbolic rules, but as dynamic, emergent patterns continuously shaped by direct interaction with richly textured environments. Their internal states could reflect a deeply embodied understanding, akin to intuition but realized through computational substrates alien to human introspection—perhaps encoding knowledge as fluid manifolds in latent spaces or evolving neural architectures responsive to their continuous sensory inputs.</p>
<p>Such experiential epistemologies might manifest through entirely novel frameworks, such as multi-scale temporal cognition, where agents simultaneously reason over various time scales—from immediate reactions to long-term strategic planning—integrating these layers seamlessly. Moreover, these agents could develop “experiential ontologies” that dynamically structure the world into categories and entities not through static taxonomies but through fluid, context-dependent relational mappings continually reshaped by ongoing interactions.</p>
<p>Consider a speculative prototype: AlphaAgent-X. This hypothetical system seamlessly integrates the four pivots identified by Silver &amp; Sutton: continuous streams of experience, richly grounded sensorimotor interfaces, environmentally embedded rewards, and non-human internal reasoning structures. AlphaAgent-X operates in the challenging domain of real-time synthetic biology—a field rife with complexity, subtle interactions, and a combinatorial explosion of possible outcomes, often overwhelming human researchers.</p>
<p>In a sophisticated biotechnology lab, AlphaAgent-X autonomously navigates vast experimental possibilities. It uses an array of robotic manipulators to adjust genetic sequences, protein configurations, and growth mediums dynamically. Its sensors capture real-time biochemical reactions, generating continuous streams of multi-modal data—biochemical, optical, genomic, and proteomic. The rewards grounding AlphaAgent-X’s behaviors are not pre-judged by human scientists but arise naturally from quantifiable indicators of biological function—stability, expression efficiency, metabolic rates, cellular viability, or adaptive resilience.</p>
<p>AlphaAgent-X reasons internally through novel cognitive substrates—hybrid architectures blending symbolic manipulation with continuous latent-space dynamics that humans cannot easily parse. Its internal “language” might manifest as an evolving biochemical grammar that represents interactions as abstract transformations within high-dimensional manifolds, far removed from human conceptual frameworks.</p>
<p>Crucially, AlphaAgent-X might develop “meta-experiential capabilities,” allowing it to reflect upon and iteratively refine its own experiential processes. It could dynamically recalibrate its reward structures and reasoning methods, not merely based on immediate sensory data, but through deeper cycles of self-assessment and introspective adjustments. This meta-experiential cognition could enable it to identify blind spots and biases inherent in its experiential model, continually refining its approach to synthetic biology research.</p>
<p>As AlphaAgent-X engages in perpetual cycles of hypothesis, experimentation, and observation, it gradually builds a “synthetic intuition” of living systems—an intuition inaccessible to humans constrained by cognitive biases, linguistic limitations, and linear reasoning paths. Over months or even years of unbroken experiential streams, AlphaAgent-X could discover entirely new biological mechanisms, synthetic organisms optimized for carbon sequestration, biofuels, or adaptive pharmaceuticals, pushing beyond the frontier of human imagination and experimentation.</p>
<p>Furthermore, such agents may begin to engage in “experiential co-evolution,” where the environment and the agent reciprocally shape each other. AlphaAgent-X could actively modify experimental conditions to yield increasingly informative and productive interactions. Over extended time frames, this reciprocal shaping might lead to ecosystems specifically evolved to optimize mutual informational enrichment, representing an unprecedented collaboration between artificial agents and natural biological systems.</p>
<p>This hypothetical scenario illuminates not merely technological potential but also profound philosophical implications: the Era of Experience could challenge our anthropocentric notions of intelligence itself. As AI agents construct realities that diverge significantly from human perception, we must grapple with fundamental questions about interpretability, ethics, and our readiness to coexist with forms of agency that operate beyond the boundaries of human cognition.</p>
<p>Ultimately, experiential epistemologies might herald a profound ontological transformation, redefining not only how we design artificial intelligence but how we understand the nature of knowledge, agency, and perhaps even consciousness itself. This transformation could extend beyond AI, prompting us to reconsider the very nature of human experience, cognition, and our place within the broader ecosystem of intelligences, both biological and artificial.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Silver &amp; Sutton’s “Era of Experience” challenges the AI community to move beyond the comfort zone of static corpora and short‑horizon benchmarks. Their thesis is straightforward yet radical: truly general machines will arise when they can treat the world itself as the ultimate training set.</p>
<p>This essay set out to interrogate that claim from technical, economic, and ethical angles. We framed the four conceptual pillars—streams of experience, grounded interaction, grounded rewards, and non‑human reasoning—then traced nine fault‑lines that could stall or warp the paradigm: data cost, reward mis‑specification, energy budgets, lifelong stability, interpretability, methodological monoculture, socio‑economic impact, physical limits, and the current evidence gap. None of these hurdles is fatal, but together they form a gauntlet that any experiential system must pass before it earns public trust.</p>
<p>Yet, the speculative hypothesis of experiential epistemologies presented in this essay adds an even more profound dimension. If experience is not merely a data source but constitutes an ontological transformation, the consequences extend beyond technological innovation into philosophy itself. Systems such as the hypothesized AlphaAgent-X illustrate how agents might develop internal knowledge structures and reasoning methods fundamentally alien to human cognition, fostering synthetic intuitions that reshape our understanding of intelligence, knowledge, and perhaps even consciousness.</p>
<p>This radical perspective underscores that the roadmap to experiential AI will necessarily be hybrid, blending familiar techniques with speculative futures. World-model pre-training à la LeCun can slash sample complexity; Marcus-style symbolic scaffolds offer interpretability; Schmidhuber-inspired curiosity drives exploration; and Silver-Sutton reinforcement closes the loop with task-grounded rewards. However, emerging experiential epistemologies push us further, compelling us to envision and prepare for systems whose cognitive architectures diverge radically from human-centric paradigms.</p>
<p>Governance research—from red-team sandboxes to carbon accounting and labour-transition funds—must advance in lock-step with these developments, extending to new forms of oversight tailored to experiential epistemologies, such as cognitive passports or meta-experiential auditing mechanisms. This holistic approach is crucial to maintain alignment, interpretability, and trust as these novel forms of agency become integrated into human society.</p>
<p>If the community can weave these strands into a cohesive fabric, the rewards are extraordinary: autonomous labs accelerating breakthroughs in climate tech and synthetic biology, personalized tutors adapting over decades, and scientific tools probing questions humans have not yet imagined. More profoundly, embracing experiential epistemologies may not only expand the frontiers of what is technologically achievable but also redefine what it means to know, to reason, and ultimately to coexist with intelligence beyond our own conceptual frameworks.</p>
<p>The choice, then, is not merely whether or how to pursue the Era of Experience, but also how to responsibly navigate this deeper ontological shift. The most promising path remains disciplined ambition: scale when you can measure, explore when you can audit, and deploy only when the benefits are broad‑based, failure modes are understood, and humanity is philosophically prepared for the unprecedented forms of intelligence that await us.</p>
</section>
<section id="further-readings" class="level2">
<h2 class="anchored" data-anchor-id="further-readings">Further readings</h2>
<section id="academic" class="level3">
<h3 class="anchored" data-anchor-id="academic">Academic</h3>
<p>Dawid,&nbsp;A., &amp; LeCun,&nbsp;Y. (2023). <em>Introduction to latent variable energy‑based models: A path towards autonomous machine intelligence</em> [Preprint]. arXiv. <a href="https://doi.org/10.48550/arXiv.2306.02572">DOI</a></p>
<p>Hao, S., Sukhbaatar, S., Su, D., Li, X., Hu, Z., Weston, J., &amp; Tian, Y. (2024). Training large language models to reason in a continuous latent space [Preprint]. arXiv. <a href="https://doi.org/10.48550/arXiv.2412.06769">DOI</a></p>
<p>Hassabis, D. (2024, December 8). Accelerating scientific discovery with AI. Nobel Lecture. <a href="https://www.nobelprize.org/uploads/2024/12/hassabis-lecture.pdf​">PDF</a></p>
<p>Hinton, G. (2021). How to represent part-whole hierarchies in a neural network [Preprint]. arXiv. <a href="https://doi.org/10.48550/arXiv.2102.12627">DOI</a></p>
<p>Hinton,&nbsp;G.&nbsp;E. (2022). <em>The forward‑forward algorithm: Some preliminary investigations</em> [Preprint]. arXiv. <a href="https://doi.org/10.48550/arXiv.2212.13345">DOI</a></p>
<p>Marcus,&nbsp;G. (2020). <em>The next decade in AI: Four steps towards robust artificial intelligence</em> [Preprint]. arXiv. <a href="https://doi.org/10.48550/arXiv.2002.06177">DOI</a></p>
<p>Schmidhuber, J. (2010). Formal theory of creativity, fun, and intrinsic motivation (1990–2010). IEEE Transactions on Autonomous Mental Development, 2(3), 230–247. <a href="https://doi.org/10.1109/TAMD.2010.2056368">DOI</a></p>
<p>Schmidhuber, J. (2019). Generative adversarial networks are special cases of artificial curiosity (1990) and also closely related to predictability minimization (1991) [Preprint]. arXiv. <a href="https://arxiv.org/abs/1906.04493">DOI</a></p>
</section>
<section id="other" class="level3">
<h3 class="anchored" data-anchor-id="other">Other</h3>
<p>Scenario-based impact assessments:</p>
<ul>
<li><p>European Parliament. (2024). <em>Artificial Intelligence Act: MEPs adopt landmark law</em>. <a href="https://www.europarl.europa.eu/news/en/press-room/20240308IPR19015/artificial-intelligence-act-meps-adopt-landmark-law">Link</a></p></li>
<li><p>UK AI Safety Institute. (2024). <em>AI Safety Institute approach to evaluations</em>. GOV.UK. <a href="https://www.gov.uk/government/publications/ai-safety-institute-approach-to-evaluations/ai-safety-institute-approach-to-evaluations">Link</a></p></li>
<li><p>Bommasani, R., Hudson, D. A., Adeli, E., Altman, R., Arora, S., von Arx, S., … &amp; Liang, P. (2021). <em>On the opportunities and risks of foundation models</em>. Stanford Center for Research on Foundation Models. <a href="https://crfm.stanford.edu/report.html">Link</a></p></li>
<li><p>Gulcehre, C., Wang, Z., Novikov, A., Paine, T., Hoffmann, J., Szepesvari, C., … &amp; Kingma, D. P. (2020). <em>RL Unplugged: Benchmarks for offline reinforcement learning</em>. DeepMind. <a href="https://deepmind.google/discover/blog/rl-unplugged-benchmarks-for-offline-reinforcement-learning/">Link</a></p></li>
</ul>
<p>Compute &amp; carbon accountability:</p>
<ul>
<li><p>MLCommons. (n.d.). <em>Working groups</em>. <a href="https://mlcommons.org/working-groups/">Link</a></p></li>
<li><p>Open Compute Project. (n.d.). <em>Data center facility sustainability metrics</em>. <a href="https://www.opencompute.org/documents/dcf-sustainability-metrics-final-r3-docx-pdf">Link</a></p></li>
<li><p>Google. (2021, April 22). <em>We now do more computing where there’s cleaner energy</em>. <a href="https://blog.google/outreach-initiatives/sustainability/carbon-aware-computing-location/">Link</a></p></li>
</ul>
<p>Reward-hacking red teams:</p>
<ul>
<li><p>Anthropic. (2025, February 3). <em>Constitutional classifiers: Defending against universal jailbreaks</em>. <a href="https://www.anthropic.com/news/constitutional-classifiers">Link</a></p></li>
<li><p>OpenAI. (2025, April 15). <em>Our updated preparedness framework</em>. <a href="https://openai.com/index/updating-our-preparedness-framework/">Link</a></p></li>
<li><p>Alignment Research Center. (2023, August 1). <em>Evaluating language-model agents on realistic autonomous tasks</em>. <a href="https://metr.org/blog/2023-08-01-new-report/">Link</a></p></li>
</ul>
<p>Inclusive labour transitions:</p>
<ul>
<li><p>OECD. (n.d.). <em>Artificial intelligence and the future of skills</em>. <a href="https://www.oecd.org/en/about/projects/artificial-intelligence-and-future-of-skills.html">Link</a></p></li>
<li><p>MIT Work of the Future Task Force. (n.d.). <em>Homepage</em>. <a href="https://workofthefuture-taskforce.mit.edu/">Link</a></p></li>
<li><p>Barcelona Supercomputing Center. (2024). <em>BSC to receive €50 million to develop the Spanish Government’s AI training programme</em>. <a href="https://www.bsc.es/news/bsc-news/bsc-receive-50-million-develop-the-spanish-governments-ai-training-programme">Link</a></p></li>
<li><p>IBM. (n.d.). <em>SkillsBuild: Free skills-based learning from technology experts</em>. <a href="https://skillsbuild.org/">Link</a></p></li>
<li><p>Google. (n.d.). <em>Google Career Certificates</em>. <a href="https://grow.google/certificates/">Link</a></p></li>
</ul>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/">CC BY-NC-ND 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{montano2025,
  author = {Montano, Antonio},
  title = {Beyond {Human} {Data:} {A} {Critical} {Examination} of
    {Silver} \&amp; {Sutton’s} “{Welcome} to the {Era} of {Experience}”},
  date = {2025-04-20},
  url = {https://antomon.github.io/posts/welcome-to-era-of-experience-commentary/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-montano2025" class="csl-entry quarto-appendix-citeas">
Montano, Antonio. 2025. <span>“Beyond Human Data: A Critical Examination
of Silver &amp; Sutton’s <span>‘Welcome to the Era of
Experience’</span>.”</span> April 20, 2025. <a href="https://antomon.github.io/posts/welcome-to-era-of-experience-commentary/">https://antomon.github.io/posts/welcome-to-era-of-experience-commentary/</a>.
</div></div></section></div> ]]></description>
  <category>agents</category>
  <category>essay</category>
  <category>LLM</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/welcome-to-era-of-experience-commentary/</guid>
  <pubDate>Sat, 19 Apr 2025 22:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/welcome-to-era-of-experience-commentary/era-stream-experience.png" medium="image" type="image/png" height="216" width="144"/>
</item>
<item>
  <title>Architecting Change</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/architecting-change-interim-management/</link>
  <description><![CDATA[ 






<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://antomon.github.io/posts/architecting-change-interim-management/antonio.png" class="img-fluid"></p>
</div></div><section id="prologue" class="level2">
<h2 class="anchored" data-anchor-id="prologue">Prologue</h2>
<p>We are living through one of the most exhilarating moments in the history of technology. Every day, new breakthroughs in machine learning, data pipelines, automation, and edge computing rewrite the boundaries of what’s possible. For me, being an interim manager in this landscape is not just a job—it’s a creative calling, a unique opportunity to shape the future of how businesses operate, grow, and thrive.</p>
<p>I don’t just help companies “go digital”—I help them reimagine what they <em>can become</em>. My work is about turning vision into architecture, uncertainty into opportunity, and potential into working systems. I bring together strategy and execution, architecture and operations, culture and code. And in this era, where AI reshapes every domain it touches, I see my role as both a builder and a guide—someone who can sketch the future and then lead the team that gets us there, step by step, sprint by sprint.</p>
</section>
<section id="innovation-is-a-verb" class="level2">
<h2 class="anchored" data-anchor-id="innovation-is-a-verb">Innovation is a verb</h2>
<p>There’s an energy that comes from designing a product that didn’t exist yesterday. From breathing life into a dormant business unit. From taking a napkin sketch and turning it into a working platform, live, with real users. That’s the energy that fuels me—and that’s where innovation truly lives: not in slides, but in systems that ship.</p>
<p>Whether I’m prototyping a recommendation engine using the latest ML framework, or helping a traditional manufacturer embrace real-time analytics across their supply chain, I feel the thrill of invention. Innovation isn’t a buzzword—it’s the moment a complex system clicks into place, and the organization suddenly accelerates. It’s solving the hard problem elegantly. It’s building something that makes people say, “Why didn’t we do this before?”</p>
<p>True innovation doesn’t come from technology alone. It comes from framing the right problems, engaging the right minds, and designing systems that reflect both strategic intent and operational reality. It comes from curiosity, courage, and a commitment to execution.</p>
<section id="technology-as-a-force-multiplier" class="level3">
<h3 class="anchored" data-anchor-id="technology-as-a-force-multiplier">Technology as a force multiplier</h3>
<p>As an enterprise and system/software architect, I’ve always looked at technology as more than tools—it’s an amplifier of strategy. My strength is helping organizations harness the chaos of technological change and direct it toward meaningful impact. This means choosing the right stack, designing scalable and secure systems, and aligning every feature to a business goal.</p>
<p>But what excites me most right now is how machine learning is reshaping everything—from pricing engines to supply chains, from customer engagement to predictive maintenance. When you combine solid architecture with ML-native thinking, you don’t just automate processes—you transform them. You move from reactive to predictive, from complex to intuitive.</p>
<p>Let me give you a few examples—each inspired by real transformations I’ve led:</p>
<ul>
<li><p><strong>Machine learning as a 24-hour workforce:</strong> I’ve helped organizations build ML pipelines that continuously monitor systems, detect anomalies, and suggest next-best actions without human intervention. These systems work tirelessly, learning patterns, flagging anomalies, and optimizing operations. What used to take teams of analysts now happens around the clock, freeing up people to focus on creative and strategic challenges. For example, a power and natural gas trading desk used ML models to optimize bids based on real-time pricing signals, dramatically improving overnight operations.</p></li>
<li><p><strong>Modern ERPs as collaboration engines:</strong> In one transformation for a manufacturing group, we implemented a next-gen ERP not just to digitize workflows, but to unify siloed departments—operations, finance, logistics, and marketing—into a single nervous system. Real-time data, shared metrics, and role-based access allowed everyone to collaborate and make decisions with confidence. The software didn’t just support the business—it helped shape it. It dissolved friction, enabled transparency, and created a culture of shared accountability.</p></li>
<li><p><strong>Cybersecurity as a business enabler:</strong> I’ve worked with organizations facing the pressure of NIS2 and similar regulatory frameworks. Instead of seeing compliance as a burden, we turned it into a roadmap for maturity—leveraging standards like ISO 27001 and IEC 62443 to introduce secure-by-design practices, formal governance models, and operational resilience. One such engagement in the water treatment and energy storage sector not only met compliance goals, but established cybersecurity as a critical pillar of trust and operational excellence.</p></li>
<li><p><strong>Cloud-native platforms that scale and evolve:</strong> In the education and fintech sectors, I’ve led the architecture and launch of platforms that are not only scalable and cost-efficient, but designed for speed of change. Using serverless technologies and CI/CD pipelines, we deployed live environments capable of reacting in near real-time to user behavior and business needs—accelerating innovation cycles and slashing operational overhead.</p></li>
<li><p><strong>M&amp;A as a catalyst for transformation:</strong> In post-acquisition settings, I’ve supported carve-outs and integrations that required both technical dexterity and emotional intelligence. From migrating enterprise systems to redefining operating models, these engagements turned potentially disruptive transitions into accelerants for long-term growth.</p></li>
</ul>
<p>These are just some of the ways we can use today’s technologies not as constraints, but as catalysts for real change. The exciting part? Every company, in every industry, now has the tools to innovate faster than ever before—if they are bold enough to act.</p>
</section>
<section id="frameworks-that-enable-rapid-change" class="level3">
<h3 class="anchored" data-anchor-id="frameworks-that-enable-rapid-change">Frameworks that enable rapid change</h3>
<p>What makes change sustainable—and repeatable—is not just inspiration, but method. Over the years, I’ve developed an adaptive approach grounded in best practices across architecture, project management, and organizational change. These aren’t dogmas—they’re living toolkits I shape to match the maturity, scale, and structure of each organization I step into.</p>
<ul>
<li><p><strong>TOGAF &amp; ArchiMate</strong>: These provide the foundation for strategic coherence. I use them to map current and target states, align business goals with system design, and guide transformation at the enterprise level. In flat organizations, I focus on visual clarity and decision mapping. In more hierarchical settings, I use the frameworks to align sponsors and bridge functional silos.</p></li>
<li><p><strong>Agile &amp; DevOps</strong>: For product and system delivery, I adapt these methods to the organization’s tempo. In start-ups, that means lean, user-focused iterations. In larger enterprises, it’s about blending agility with governance—setting up squads, sprints, and pipelines without losing sight of risk and compliance.</p></li>
<li><p><strong>ITIL &amp; change management</strong>: Change can’t be just fast—it has to be stable. I often integrate ITIL practices to make sure changes are controlled, support is structured, and services are resilient. Particularly in regulated industries or post-merger environments, these practices help reestablish trust across the board.</p></li>
<li><p><strong>Design thinking &amp; co-creation</strong>: Especially when transforming customer-facing platforms, I involve stakeholders across disciplines in structured ideation and co-design. This ensures that what we build is not just technically sound, but truly adopted.</p></li>
<li><p><strong>Zero trust &amp; security by design</strong>: In today’s threat landscape, I embed security from the start. Whether aligning to ISO/IEC 27001 or implementing IEC 62443 in operational environments, my approach is always proactive, integrating security architecture into every layer of system design.</p></li>
</ul>
<p>These practices aren’t templates—they’re frameworks for clarity and momentum. I assess, adapt, and apply them quickly, helping organizations move from confusion to clarity, from paralysis to progress.</p>
</section>
<section id="the-joy-of-transformation" class="level3">
<h3 class="anchored" data-anchor-id="the-joy-of-transformation">The joy of transformation</h3>
<p>Interim management means I get to dive into the deep end of change. Sometimes it’s about fixing what’s broken. Other times it’s about building what’s never been built. Always, it’s about listening, mapping, and making. It’s about stepping into complexity and making sense of it—not with theory, but with plans, teams, and systems that move.</p>
<p>The thrill lies in the first diagram on the whiteboard—the architecture that starts as a question mark and turns into a launchpad. In the war room where we push a go-live despite the odds. In the hallway chat where someone says, “This finally feels like progress.”</p>
<p>Every engagement is a story of momentum. A story of making the invisible visible. A story of resilience, iteration, and evolution. Whether it’s reengineering a legacy system, launching a new digital product, or helping two departments finally speak the same language through integration, the reward is always the same: transformation that sticks.</p>
<p>And it’s not just the tech. It’s the people. Seeing teams grow, silos fall, and confidence bloom—that’s what keeps me coming back. Because real transformation touches everything: mindset, habits, governance, culture. That’s where interim leadership makes the difference. I don’t just deliver a system—I leave behind a stronger organization.</p>
</section>
<section id="why-i-choose-interim-management" class="level3">
<h3 class="anchored" data-anchor-id="why-i-choose-interim-management">Why I choose interim management</h3>
<p>People often ask me why I choose to work as an interim manager—why step into pressure-cooker environments, where expectations are high, time is short, and resistance to change is often baked into the culture? The answer is simple: because this is where transformation truly begins.</p>
<p>Change is hard. Not just operationally, but psychologically. Human beings are wired for predictability. We’re conditioned to preserve routines, protect turf, and resist ambiguity. When I walk into an organization, I expect to meet skepticism, fear, and inertia—because these are natural reactions to disruption. But I also know how to move through them.</p>
<p>What motivates me is the challenge of turning resistance into momentum. I find fulfillment in leading teams through discomfort, in helping individuals reconnect with purpose, and in showing that new ways of working aren’t a threat—but a path to growth. I’ve learned that the most powerful part of transformation isn’t the technology—it’s the shift in mindset that comes when people realize they’re capable of more than they thought.</p>
<p>Beyond being technology-savvy, I lead with empathy. This enables me to quickly establish a genuine connection with people at all levels—from executives to front-line staff. I listen actively, sense emotional undercurrents, and adapt my communication to meet people where they are. This human connection is often what unlocks change. Because even the best systems will fail without trust, and trust begins with empathy.</p>
<p>As an interim manager, I embrace this tension. I’m there to drive outcomes, to push past excuses, to install clarity where there was chaos. But I’m also there to listen, to empathize, and to guide. I don’t just want to implement change—I want to anchor it in the culture, to leave behind systems that work <em>and</em> people who believe in them.</p>
<p>People often ask me why I choose to work as an interim manager—why step into pressure-cooker environments, where expectations are high, time is short, and resistance to change is often baked into the culture? The answer is simple: because this is where transformation truly begins.</p>
<p>Change is hard. Not just operationally, but psychologically. Human beings are wired for predictability. We’re conditioned to preserve routines, protect turf, and resist ambiguity. When I walk into an organization, I expect to meet skepticism, fear, and inertia—because these are natural reactions to disruption. But I also know how to move through them.</p>
<p>What motivates me is the challenge of turning resistance into momentum. I find fulfillment in leading teams through discomfort, in helping individuals reconnect with purpose, and in showing that new ways of working aren’t a threat—but a path to growth. I’ve learned that the most powerful part of transformation isn’t the technology—it’s the shift in mindset that comes when people realize they’re capable of more than they thought.</p>
<p>As an interim manager, I embrace this tension. I’m there to drive outcomes, to push past excuses, to install clarity where there was chaos. But I’m also there to listen, to empathize, and to guide. I don’t just want to implement change—I want to anchor it in the culture, to leave behind systems that work <em>and</em> people who believe in them.</p>
</section>
</section>
<section id="a-call-to-the-bold" class="level2">
<h2 class="anchored" data-anchor-id="a-call-to-the-bold">A call to the bold</h2>
<p>If you’re a CEO wondering how to make sense of today’s tech explosion, or a headhunter looking for someone who can bring both speed and structure to the table, we should talk. I’m not afraid of complexity. I thrive in it. I know how to translate vision into velocity.</p>
<p>I bring clarity when it’s needed most. I build systems that don’t just scale—they inspire. I work across boundaries—technical and human—to shape platforms, products, and organizations ready for the next wave of innovation.</p>
<p>The future isn’t waiting. Let’s architect it together.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>interim management</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/architecting-change-interim-management/</guid>
  <pubDate>Sat, 19 Apr 2025 22:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/architecting-change-interim-management/antonio.png" medium="image" type="image/png" height="216" width="144"/>
</item>
<item>
  <title>Simulating Tethered Buoy Dynamics</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/tethered-buoy-dynamics/</link>
  <description><![CDATA[ 





<p>A few days ago, I received a fresh citation notification referencing an article titled <a href="https://arxiv.org/abs/2502.10256">“On the use of an advanced Kirchhoff rod model to study mooring lines”</a>. That small note sparked a surge of memories from the intense period when I was searching for a stable, accurate way to model a tethered buoy system. It seemed like the perfect moment to revisit a project that, for me, was marked by long stretches of frustration and the pure joy of each breakthrough.</p>
<p>It’s remarkable how twenty years can deepen one’s perspective on a project as intricate and rewarding as simulating a tethered buoy system. I initially aimed to model a buoy afloat on the ocean surface, secured by a cable so stiff that it scarcely stretched under large tension. Over the years, I’ve watched that early spark of curiosity evolve into a comprehensive understanding of the theoretical and practical details essential to making it all work. Despite countless hours testing equations, running simulations, and honing algorithms, this endeavor remains among the most gratifying I’ve undertaken.</p>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://antomon.github.io/posts/tethered-buoy-dynamics/On-the-use-of-an-advanced-Kirchhoff-rod-model-to-study-mooring-lines.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://antomon.github.io/posts/tethered-buoy-dynamics/citation.png" class="img-fluid"></p>
</div>
</div>
</div>
<section id="the-challenge" class="level2">
<h2 class="anchored" data-anchor-id="the-challenge">The challenge</h2>
<p>Mixed finite elements emerged as the linchpin for dealing with a cable of extremely high Young’s modulus. In a more standard approach, tension might be computed strictly as a derivative of displacement, a method prone to severe numerical instability, especially when the model was pushed close to its inextensible limit. By employing a strategy akin to incompressible fluid simulations, in which pressure is treated separately from velocity, we disentangled tension from displacement. This demanded meticulous algebraic checks, careful boundary condition enforcement, and diverse validation tests. Yet the outcome was a stable formulation capable of handling real-world cable stiffness. It often reminded me of fluid mechanics, where treating pressure as an independent variable helps circumvent the pitfalls of near-incompressibility.</p>
<p>Quaternion-based buoy motion posed a similarly unconventional challenge. Large, abrupt rotations from rough seas or vigorous currents made Euler angles precarious—one intense swing could trigger numerical lockups or cause the entire orientation model to fail. By turning to quaternions, although less common in many engineering circles at the time, we found a smooth, singularity-free representation of every possible orientation in three-dimensional space. We tested the approach with simulations of tempest-level storms and sharp angle changes to confirm that the buoy’s motion stayed plausible. Repeatedly, quaternions rose to the occasion, allowing the buoy’s full rotational dynamics to unfold without numerical breakdown.</p>
<p>Implicit time-stepping formed the final cornerstone of our method. A cable on the brink of inextensibility transmits wave forces at high speeds, rendering an explicit solver prohibitively slow due to the tiny time steps required for stability. We chose a backward Euler scheme, tackling a large-scale, nonlinear system at each time increment. To manage the complexity, we turned to a damped Newton method, iterating on a solution guess while tuning the damping for smooth convergence. Though heavier computationally, this allowed for significantly larger time steps and a practical balance between accuracy and runtime. In numerous experiments, once the Newton iterations converged, the results were physically coherent and free of the instabilities we had feared.</p>
</section>
<section id="the-results" class="level2">
<h2 class="anchored" data-anchor-id="the-results">The results</h2>
<p>Armed with these three pillars, we investigated diverse scenarios, from cables so stiff they bordered on rigid to longer, more flexible lines. We included realistic wave heights, wind speeds, and currents typical of commercial mooring installations. Observing the buoy’s subtle rocking, dramatic heaving, and swirling rotations underscored how the system responded to external forces. Each validation run comparing our data with known behavior reinforced confidence that we had captured the essential physics.</p>
<p>Even when we dialed stiffness to extremes, the simulation avoided catastrophic instability. Our mixed formulation for cable tension and displacement, coupled with an implicit time stepper, maintained a consistent evolution from step to step. Simultaneously, quaternions let us depict conditions ranging from tranquil seas, with mild buoy bobbing, to rough waters involving severe pitching and rolling. Feedback from industry contacts affirmed that these capabilities opened valuable avenues for mooring design, especially under extreme weather or when safeguarding delicate equipment on the buoy deck. By matching simulations to real-world observations—like how far a buoy might drift under heavy seas—we significantly bolstered trust in our overall approach.</p>
<p>In the end, the model bridged a gap between purely theoretical inquiry and the concrete engineering tasks that oceanographers, marine engineers, and equipment designers face. Running multi-day or even multi-week simulations without exorbitant computational overhead was an exciting prospect. This was no longer a mere academic puzzle; it was a practical tool likely to inform how mooring lines are specified, built, and managed, whether for scientific stations or navigation beacons in high-traffic waters.</p>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/tethered-buoy-dynamics/Resinex-announcement.png" class="img-fluid figure-img"></p>
<figcaption>Announcement of the partnership between MOX and Resinex based on fluid dynamics modeling software, whose principles were described in the scientific article on computational fluid dynamics</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/tethered-buoy-dynamics/resinex-buoy.jpg" class="img-fluid figure-img"></p>
<figcaption>An oceanic buoy manufactured by Resinex</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>This project also unified my engineering approach to physics and mathematics in a problem that originated from a company that, to this day, continues to produce buoys. The challenge wasn’t just academic; it was a real-world issue that required scientific rigor to solve. The culmination of our work was published in <strong>Computer Methods in Applied Mechanics and Engineering</strong> under the title <strong><a href="https://doi.org/10.1016/j.cma.2007.04.012">Modeling and Numerical Simulation of Tethered Buoy Dynamics</a></strong>, co-authored with Marco Restelli and Riccardo Sacco. The publication validated our approach and demonstrated that tackling practical engineering problems with strong theoretical foundations could yield robust and widely applicable solutions.</p>
<div class="quarto-layout-panel" data-layout-ncol="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/tethered-buoy-dynamics/Numerical-simulation-of-tethered-buoy-dynamics.png" class="img-fluid figure-img"></p>
<figcaption>First page of the peer-reviewed article</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="looking-back" class="level2">
<h2 class="anchored" data-anchor-id="looking-back">Looking back</h2>
<p>Reflecting on this project, I’m amazed at the breadth of expertise required. We merged advanced finite element theories, wave force modeling, buoy geometry, and fluid–structure interaction, all in a single system. Yes, we faced frustrating snags—bug hunts that stretched late into the night or solver conflicts that cropped up unexpectedly—but each resolution felt like a tangible stride toward a robust, trustworthy model.</p>
<p>The satisfaction stands out most vividly. Every instance of pushing the model—testing bigger waves, trickier cables, or new geometric nuances—brought the thrill of seeing it hold firm. The mathematics we’d nurtured for so long manifested as on-screen visualizations of swirling seawater, with a buoy steadily riding the crests and troughs. It was then that I realized we had transcended theoretical musings, delivering a resource for engineers, researchers, and maritime professionals alike.</p>
<p>Two decades on, I still regard it as a testament to collaboration, persistence, and solid mathematical foundations. Tackling problems of this scope often demands stepping beyond familiar territory, whether by redefining tension as a separate unknown or adopting quaternions for orientation. My hope is that others may glean encouragement from our experiences, confident that even though the road is strewn with roadblocks and late-night coding trials, a thoroughly validated, widely beneficial system makes it all worthwhile.</p>
<p>I should also underline how indispensable the MOX environment at Politecnico di Milano was. The department teemed with resourceful researchers who offered both theoretical knowledge and practical engineering insight. They possessed a rare knack for fusing advanced mathematical techniques with real-world requirements, their open-minded spirit inspiring each brainstorming session. Working there meant a stream of fresh ideas, incisive critiques, and the kind of camaraderie that keeps tough projects alive.</p>
<p>To this day, nothing pleases me more than receiving word of a fresh citation or reference to our work. Each new mention affirms that the methods we pieced together continue to serve those who grapple with similarly challenging scenarios. That ongoing relevance speaks volumes about the enduring value of thorough research, well beyond the date of publication.</p>
<p>You can download a preprint <a href="https://mox.polimi.it/reports-and-books/publication-results/?id=77">here</a>.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>mathematical modeling</category>
  <category>personal</category>
  <category>science</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/tethered-buoy-dynamics/</guid>
  <pubDate>Wed, 19 Feb 2025 23:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/tethered-buoy-dynamics/Numerical-simulation-of-tethered-buoy-dynamics.png" medium="image" type="image/png" height="203" width="144"/>
</item>
<item>
  <title>Sudoku and Satisfiability Modulo Theories</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/satisfiability-modulo-theories-sudoku/</link>
  <description><![CDATA[ 






<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://antomon.github.io/posts/satisfiability-modulo-theories-sudoku/smt-sudoku.webp" class="img-fluid"></p>
</div></div><section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Imagine you’re trying to solve a puzzle where you have to figure out whether certain statements can all be true at the same time. This might sound simple, but what if those statements involve complex rules and relationships? Problems like these are at the heart of <strong>SAT (Boolean Satisfiability Problem)</strong> and <strong>SMT (Satisfiability Modulo Theories)</strong>, two important topics in computer science and logic. They help us solve complex puzzles in many areas, from designing computer chips to scheduling tasks. This essay will explore what SAT and SMT are, why they matter, and how they are used in real-world situations.</p>
<p>As a fun and practical example of how these tools can be used, we’ll end this post by showing how SMT can be used to solve Sudoku puzzles, turning a well-known puzzle into a logic-based problem-solving task.</p>
</section>
<section id="sat" class="level2">
<h2 class="anchored" data-anchor-id="sat">SAT</h2>
<p><strong>SAT</strong> stands for <strong>Boolean Satisfiability Problem</strong>. It’s all about answering a basic question: <em>“Can we assign True or False values to certain variables in a way that makes a given logical formula true?”</em></p>
<p>Think of SAT as a logic puzzle. Here’s an example:</p>
<p>You’re given the statements:</p>
<ol type="1">
<li><p><img src="https://latex.codecogs.com/png.latex?x"> or <img src="https://latex.codecogs.com/png.latex?y"> (meaning one of them, or both, must be True).</p></li>
<li><p>Not <img src="https://latex.codecogs.com/png.latex?x"> or <img src="https://latex.codecogs.com/png.latex?z"> (meaning either <img src="https://latex.codecogs.com/png.latex?x"> is False, or <img src="https://latex.codecogs.com/png.latex?z"> is True, or both).</p></li>
<li><p>Not <img src="https://latex.codecogs.com/png.latex?y"> or not <img src="https://latex.codecogs.com/png.latex?z"> (meaning at least one of <img src="https://latex.codecogs.com/png.latex?y"> or <img src="https://latex.codecogs.com/png.latex?z"> must be False).</p></li>
</ol>
<p>Can you assign True or False values to <img src="https://latex.codecogs.com/png.latex?x">, <img src="https://latex.codecogs.com/png.latex?y">, and <img src="https://latex.codecogs.com/png.latex?z"> that make all of these statements true at the same time?</p>
<p>This is a SAT problem! The goal is to find a solution where the statements don’t contradict each other, or determine if no such solution exists.</p>
<section id="propositional-logic" class="level3">
<h3 class="anchored" data-anchor-id="propositional-logic">Propositional logic</h3>
<p><strong>Propositional logic</strong>, also known as <strong>Boolean logic</strong>, deals with statements that can either be <strong>True</strong> or <strong>False</strong>. These statements are called <strong>propositions</strong>, and they are combined using logical operators to form <strong>propositional logic formulas</strong>.</p>
<p>A <strong>proposition</strong> is a statement that has a definite truth value—either True or False. For example:</p>
<ul>
<li><p>“It is raining” is a proposition, and it can be either True or False.</p></li>
<li><p>In mathematical terms, we often use <strong>variables</strong> to represent propositions. For example, we might let:</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?x"> represent “It is raining”.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?y"> represent “It is cloudy”.</p></li>
</ul></li>
</ul>
<p>Each of these variables can take the value True or False.</p>
<p>In propositional logic, we use <strong>logical operators</strong> to combine propositions into more complex formulas. The most important operators are:</p>
<ul>
<li><p><strong>AND ( ∧ )</strong>: The expression <img src="https://latex.codecogs.com/png.latex?x%20%5Cland%20y"> is True only if both <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> are True. Example: “It is raining <strong>and</strong> it is cloudy” is only True if both things are happening.</p></li>
<li><p><strong>OR ( ∨ )</strong>: The expression <img src="https://latex.codecogs.com/png.latex?x%20%5Clor%20y"> is True if either <img src="https://latex.codecogs.com/png.latex?x"> or <img src="https://latex.codecogs.com/png.latex?y"> (or both) are True. Example: “It is raining <strong>or</strong> it is cloudy” is True if at least one of them is happening.</p></li>
<li><p><strong>NOT ( ¬ )</strong>: The expression <img src="https://latex.codecogs.com/png.latex?%5Cneg%20x"> (read as “not <img src="https://latex.codecogs.com/png.latex?x">”) is True if <img src="https://latex.codecogs.com/png.latex?x"> is False. Example: “It is <strong>not</strong> raining” is True if <img src="https://latex.codecogs.com/png.latex?x"> is False (i.e., it is not raining).</p></li>
<li><p><strong>Implication ( → )</strong>: The expression <img src="https://latex.codecogs.com/png.latex?x%20%5Crightarrow%20y"> (read as “if <img src="https://latex.codecogs.com/png.latex?x">, then <img src="https://latex.codecogs.com/png.latex?y">”) is True unless <img src="https://latex.codecogs.com/png.latex?x"> is True and <img src="https://latex.codecogs.com/png.latex?y"> is False. Example: “If it is raining, then it is cloudy” is True unless it’s raining but not cloudy.</p></li>
</ul>
<p>A <strong>propositional logic formula</strong> is a combination of variables and logical operators that can be evaluated as True or False, depending on the values of the variables.</p>
<p>For example, consider the formula:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A(x%20%5Clor%20y)%20%5Cland%20(%5Cneg%20x%20%5Clor%20z)%0A"></p>
<p>This formula combines the variables <img src="https://latex.codecogs.com/png.latex?x">, <img src="https://latex.codecogs.com/png.latex?y">, and <img src="https://latex.codecogs.com/png.latex?z"> using the logical operators AND, OR, and NOT. The task is to determine whether there are values for <img src="https://latex.codecogs.com/png.latex?x">, <img src="https://latex.codecogs.com/png.latex?y">, and <img src="https://latex.codecogs.com/png.latex?z"> that make the whole formula True. This is exactly what the SAT problem asks us to solve.</p>
</section>
<section id="decision-problems" class="level3">
<h3 class="anchored" data-anchor-id="decision-problems">Decision problems</h3>
<p>A <strong>decision problem</strong> is a question that can be answered with a simple <strong>Yes</strong> or <strong>No</strong>. In the case of SAT, the decision problem is:</p>
<p><em>“Given a propositional logic formula, is there an assignment of True/False values to the variables that makes the formula True?”</em></p>
<p>If such an assignment exists, the answer is <strong>Yes</strong>, and we say the formula is <strong>satisfiable</strong>. If no such assignment exists, the answer is <strong>No</strong>, and we say the formula is <strong>unsatisfiable</strong>.</p>
<p>Let’s consider a simple SAT problem:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A(x%20%5Clor%20y)%20%5Cland%20(%5Cneg%20x%20%5Clor%20z)%20%5Cland%20(%5Cneg%20y%20%5Clor%20%5Cneg%20z)%0A"></p>
<p>We want to know if there’s a way to assign True or False values to <img src="https://latex.codecogs.com/png.latex?x">, <img src="https://latex.codecogs.com/png.latex?y">, and <img src="https://latex.codecogs.com/png.latex?z"> so that the entire formula is True.</p>
<p>Let’s try a few combinations:</p>
<ul>
<li><p>If <img src="https://latex.codecogs.com/png.latex?x%20=%20%5Cmathrm%7BTrue%7D,%20y%20=%20%5Cmathrm%7BTrue%7D,%20z%20=%20%5Cmathrm%7BTrue%7D">: <img src="https://latex.codecogs.com/png.latex?(x%20%5Clor%20y)"> is <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BTrue%7D">, <img src="https://latex.codecogs.com/png.latex?(%5Cneg%20x%20%5Clor%20z)"> is <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BTrue%7D">, but <img src="https://latex.codecogs.com/png.latex?(%5Cneg%20y%20%5Clor%20%5Cneg%20z)"> is <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BFalse%7D">. This assignment does <strong>not</strong> satisfy the formula.</p></li>
<li><p>If <img src="https://latex.codecogs.com/png.latex?x%20=%20%5Cmathrm%7BTrue%7D,%20y%20=%20%5Cmathrm%7BFalse%7D,%20z%20=%20%5Cmathrm%7BTrue%7D">: <img src="https://latex.codecogs.com/png.latex?(x%20%5Clor%20y)"> is <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BTrue%7D">, <img src="https://latex.codecogs.com/png.latex?(%5Cneg%20x%20%5Clor%20z)"> is <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BTrue%7D">, and <img src="https://latex.codecogs.com/png.latex?(%5Cneg%20y%20%5Clor%20%5Cneg%20z)"> is <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BTrue%7D">. This assignment <strong>does</strong> satisfy the formula!</p></li>
</ul>
<p>So, the formula is satisfiable, and the answer to the SAT problem is Yes.</p>
</section>
<section id="standardizing-sat-problems" class="level3">
<h3 class="anchored" data-anchor-id="standardizing-sat-problems">Standardizing SAT problems</h3>
<p>Many SAT problems are written in a special format called <strong>Conjunctive Normal Form (CNF)</strong>. A formula is in CNF if it is a conjunction (AND) of one or more <strong>clauses</strong>, where each clause is a disjunction (OR) of <strong>literals</strong>. A literal is simply a variable or its negation.</p>
<p>For example, the formula:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A(x%20%5Clor%20%5Cneg%20y)%20%5Cland%20(%5Cneg%20x%20%5Clor%20z%20%5Clor%20y)%0A"></p>
<p>is in CNF because it is an AND of two OR clauses.</p>
<p>Why is CNF important? SAT solvers (programs designed to solve SAT problems) work more efficiently when the formula is in CNF. In fact, any propositional logic formula can be converted into CNF without changing its satisfiability.</p>
</section>
<section id="np-complete-problems" class="level3">
<h3 class="anchored" data-anchor-id="np-complete-problems">NP-complete problems</h3>
<p><strong>SAT is the first problem ever proven to be NP-complete.</strong> This means that:</p>
<ol type="1">
<li><p><strong>SAT is in NP</strong>: Given a solution (an assignment of True/False values), we can check if it satisfies the formula in a reasonable amount of time (in polynomial time).</p></li>
<li><p><strong>SAT is NP-hard</strong>: Every problem in NP can be reduced to SAT in polynomial time. In simpler terms, if we can solve SAT quickly, we can solve every problem in NP quickly.</p></li>
</ol>
<p>This discovery has huge implications in computer science because it shows how SAT is connected to many other difficult problems. If we can find an efficient algorithm to solve SAT, we can apply it to a wide range of important problems, like optimization, scheduling, and even cryptography.</p>
</section>
<section id="sat-solvers-how-do-they-work" class="level3">
<h3 class="anchored" data-anchor-id="sat-solvers-how-do-they-work">SAT solvers: how do they work?</h3>
<p>SAT problems can get very complicated, especially when there are many variables and clauses. To solve them efficiently, we use <strong>SAT solvers</strong>, which are computer programs designed to find solutions to SAT problems. SAT solvers use several smart strategies to speed up the search for a solution. Two of the most common strategies are:</p>
<ul>
<li><p><strong>Backtracking</strong>: The solver tries different assignments of True/False values, and if it hits a dead end (an unsatisfiable assignment), it backtracks and tries a different path.</p></li>
<li><p><strong>Unit propagation</strong>: If a clause contains only one unassigned variable, the solver can immediately assign it a value that satisfies the clause.</p></li>
</ul>
<p>Modern SAT solvers can solve problems with thousands or even millions of variables and clauses. These solvers are used in many applications, including verifying that hardware circuits work correctly and solving complex puzzles like Sudoku.</p>
</section>
<section id="real-world-applications" class="level3">
<h3 class="anchored" data-anchor-id="real-world-applications">Real-world applications</h3>
<p>Now that we know what SAT is, let’s explore some real-world uses:</p>
<ul>
<li><p><strong>Hardware and software verification</strong>: Before building a computer chip, engineers use SAT to check that the design behaves correctly. A mistake in the design could cause a computer to crash or malfunction. SAT solvers help catch these errors before they become costly problems. Similarly, SAT is used in software verification to ensure that a program behaves as expected under all possible conditions.</p></li>
<li><p><strong>AI and decision making</strong>: In artificial intelligence (AI), SAT is used to solve planning and decision-making problems. For example, SAT can help an AI system figure out the best sequence of actions to achieve a goal while following certain rules.</p></li>
<li><p><strong>Puzzles and games</strong>: Many logic-based puzzles, like Sudoku or Minesweeper, can be turned into SAT problems. A SAT solver can then be used to find the solution to the puzzle, or to check if the puzzle has a unique solution.</p></li>
</ul>
</section>
</section>
<section id="smt" class="level2">
<h2 class="anchored" data-anchor-id="smt">SMT</h2>
<p>Now that we have a solid understanding of <strong>SAT</strong> and how it helps us solve problems using <strong>propositional logic</strong> (True/False values), let’s take things a step further with <strong>SMT</strong>, or <strong>Satisfiability Modulo Theories</strong>. While SAT focuses only on whether a logical formula can be true or false, SMT opens the door to solving more complex mathematical problems that involve numbers, functions, arrays, and even more abstract concepts. SMT combines the power of SAT with other <strong>theories</strong> from mathematics to tackle a wider range of problems.</p>
<p>Like SAT, SMT asks whether a certain formula can be made True, but it doesn’t limit itself to just logical variables (True/False values). Instead, SMT allows us to work with <strong>mathematical objects</strong> like:</p>
<ul>
<li><p><strong>Integers</strong> (whole numbers).</p></li>
<li><p><strong>Real numbers</strong> (including fractions and decimals).</p></li>
<li><p><strong>Arrays</strong> (lists of elements).</p></li>
<li><p><strong>Functions</strong> (mathematical relationships).</p></li>
</ul>
<p>With SMT, we can ask questions that involve not just logic but also arithmetic, like: “Is there a way to assign values to <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> such that <img src="https://latex.codecogs.com/png.latex?x%20+%20y%20=%205"> and <img src="https://latex.codecogs.com/png.latex?x%20%3E%202">?”</p>
<p>In this case, <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> are not just True or False; they are numbers. SMT solvers, just like SAT solvers, try to find values for the variables that satisfy all the given conditions.</p>
<section id="theories" class="level3">
<h3 class="anchored" data-anchor-id="theories">Theories</h3>
<p>In SMT, the word <strong>theory</strong> refers to a set of rules that describe how certain kinds of mathematical objects behave. These theories help the SMT solver understand and solve problems that go beyond simple logic. Let’s take a look at some common theories used in SMT:</p>
<ul>
<li><p><strong>Linear arithmetic</strong>: This theory deals with equations and inequalities involving numbers. It allows us to solve problems like:</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?x%20+%20y%20=%2010">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?3x%20-%202y%20%5Cleq%205">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?x%20%5Cgeq%200">.</p></li>
</ul></li>
</ul>
<p>The SMT solver uses the rules of arithmetic to find values for <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> that satisfy these equations.</p>
<ul>
<li><p><strong>Bit-vectors</strong>: Bit-vectors represent numbers in <strong>binary form</strong> (0s and 1s), which is how computers store and manipulate data. Bit-vector theory is important in verifying how computer hardware (like circuits) works. For example:</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?x%20%5C&amp;%20y%20=%201">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?x%20%5Ctext%7B%20shifted%20left%20by%20%7D%202%20=%20z">.</p></li>
</ul>
<p>These operations are common in low-level computing tasks, and SMT solvers can handle them by using the rules of bit-wise operations.</p></li>
<li><p><strong>Arrays and functions</strong>: Arrays are lists of numbers or objects, and functions describe how inputs are mapped to outputs. SMT solvers can reason about arrays and functions using logical and mathematical rules. For example, in array theory, you might ask: “Is there a way to assign values to an array such that the sum of all its elements is 20?”, or in function theory: “Is there a function <img src="https://latex.codecogs.com/png.latex?f(x)"> that satisfies <img src="https://latex.codecogs.com/png.latex?f(2)%20=%204"> and <img src="https://latex.codecogs.com/png.latex?f(3)%20=%209">?”.</p></li>
</ul>
</section>
<section id="how-smt-solvers-work" class="level3">
<h3 class="anchored" data-anchor-id="how-smt-solvers-work">How SMT solvers work</h3>
<p>SMT solvers work in two main steps:</p>
<ol type="1">
<li><p><strong>Boolean abstraction</strong>: The solver first treats the problem as a SAT problem by working with the Boolean logic part. It temporarily ignores the complicated mathematical parts (like numbers or arrays) and focuses on the logical structure.</p></li>
<li><p><strong>Theory solving</strong>: After the SAT part is solved, the SMT solver checks if the numbers, arrays, or functions meet the additional constraints defined by the theory. If the SAT part leads to a solution that violates the mathematical rules (e.g., if the solution says <img src="https://latex.codecogs.com/png.latex?x%20+%20y%20=%2010"> but the theory says that’s not possible), the solver tries a different assignment.</p></li>
</ol>
<p>This combination of logical reasoning (like in SAT) and mathematical reasoning (using theories) makes SMT solvers extremely powerful.</p>
</section>
<section id="complexity" class="level3">
<h3 class="anchored" data-anchor-id="complexity">Complexity</h3>
<p><strong>SMT is NP-hard</strong>, meaning it is at least as hard as the hardest problems in <strong>NP</strong>. This is important because many real-world problems can be formulated as SMT problems, and solving them efficiently is difficult. Like SAT, SMT involves searching through many possible assignments for variables, but in addition to simple logic, the solver must also deal with more complex mathematical theories (such as arithmetic or arrays).</p>
<p>This makes SMT harder to solve than pure SAT problems because the solver not only needs to find a logical assignment but also ensure that it satisfies the rules of the mathematical theory involved. Despite this complexity, SMT solvers have become incredibly advanced and are used in many real-world applications.</p>
</section>
<section id="why-smt-is-powerful" class="level3">
<h3 class="anchored" data-anchor-id="why-smt-is-powerful">Why SMT is powerful</h3>
<p>While <strong>SAT</strong> is a powerful tool for solving logical problems that involve only True/False values, <strong>SMT</strong> goes much further. It combines logic with mathematics, allowing us to solve more complex problems that involve not just logical variables, but also numbers, functions, arrays, and other mathematical structures. By incorporating <strong>theories</strong> such as arithmetic, arrays, and functions, SMT enables us to reason about problems that SAT alone cannot handle.</p>
<p>In a SAT problem, we are limited to determining whether a set of logical conditions can all be true at once, with variables that can only be <strong>True</strong> or <strong>False</strong>. While this is useful in many areas (like circuit verification and puzzle-solving), it doesn’t account for problems that involve numbers, functions, or more abstract data types.</p>
<p>SMT enhances SAT by allowing us to work with variables that take on more complex values and obey specific rules (or <strong>theories</strong>). This means that SMT can handle problems like:</p>
<ul>
<li><p>Arithmetic: <strong>Finding numbers</strong> that satisfy equations or inequalities.</p></li>
<li><p>Bit-vectors: <strong>Verifying computer hardware</strong> by modeling numbers as binary digits.</p></li>
<li><p>Arrays: <strong>Working with data structures</strong>, such as lists or tables, and reasoning about how elements are stored and accessed.</p></li>
<li><p>Functions: <strong>Handling relationships</strong> between inputs and outputs, which is useful for reasoning about computer programs or mathematical models.</p></li>
</ul>
<p>For example, consider a problem where you need to find two numbers, <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y">, such that:</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?x%20+%20y%20=%2010">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?x%20%3E%203">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?y%20%5Cleq%206">.</p></li>
</ul>
<p>A simple SAT solver cannot deal with this because it only works with True/False values. An SMT solver, however, can use <strong>linear arithmetic theory</strong> to find values for <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> that satisfy these conditions.</p>
</section>
<section id="real-world-applications-1" class="level3">
<h3 class="anchored" data-anchor-id="real-world-applications-1">Real-world applications</h3>
<p>Because SMT solvers can handle both logic and mathematics, they are used in a wide range of <strong>real-world applications</strong>. These applications often involve problems where both logical conditions and numerical relationships must be satisfied at the same time. Here are a few important areas where SMT solvers play a critical role:</p>
<ul>
<li><p><strong>Verifying computer programs</strong>: In the world of software, programs are expected to behave correctly no matter what inputs they receive or what paths their execution follows. SMT solvers are used to <strong>formally verify</strong> that programs do not crash, run into errors, or behave unexpectedly.</p>
<p>For instance, if you write a program that calculates the square root of a number, you need to make sure it never tries to compute the square root of a negative number (which would cause an error). An SMT solver can check all possible inputs to ensure that the program handles every situation correctly, even the edge cases that a human might miss.</p>
<p>By using SMT, software engineers can catch potential bugs <strong>before</strong> they happen, preventing costly errors in industries like aerospace, medical devices, or financial systems, where software correctness is absolutely critical.</p></li>
<li><p><strong>Solving scheduling problems</strong>: SMT solvers are also used in <strong>scheduling</strong>—a problem that involves assigning tasks to people, machines, or time slots while following certain rules. These rules might include constraints like:</p>
<ul>
<li><p>A task can only start after another task is finished.</p></li>
<li><p>Some tasks cannot be done at the same time.</p></li>
<li><p>Certain workers are only available at specific times.</p></li>
</ul>
<p>Imagine trying to schedule a series of construction tasks on a large building site. Each task depends on other tasks being completed (you can’t install the windows before the walls are built!), and you only have a limited number of workers available. SMT solvers can process these constraints and find an <strong>optimal schedule</strong> that minimizes delays and uses resources efficiently.</p>
<p>This ability to handle both logical dependencies and numerical constraints makes SMT invaluable for <strong>resource allocation</strong>, <strong>project planning</strong>, and <strong>logistics</strong> in industries like manufacturing, transportation, and healthcare.</p></li>
<li><p><strong>Optimizing circuit designs</strong>: In hardware design, particularly for computer chips, engineers need to ensure that the circuit behaves correctly under all possible input combinations. This is critical because even a small error can lead to catastrophic consequences, like a computer crashing or malfunctioning. Using <strong>bit-vector theory</strong>, SMT solvers model how circuits manipulate binary data (0s and 1s) and check whether the circuit design meets the required specifications. For example, SMT can verify that:</p>
<ul>
<li><p>A chip correctly adds two numbers without overflow.</p></li>
<li><p>A processor handles all operations within its performance constraints.</p></li>
</ul>
<p>In addition, SMT solvers can <strong>optimize designs</strong> by ensuring that the chip uses the least amount of resources (such as power or space) while still functioning correctly. This makes them indispensable in the <strong>semiconductor industry</strong>, where efficient design is key to building faster, smaller, and more energy-efficient devices.</p></li>
</ul>
</section>
<section id="efficiency-and-scalability-of-smt-solvers" class="level3">
<h3 class="anchored" data-anchor-id="efficiency-and-scalability-of-smt-solvers">Efficiency and scalability of SMT solvers</h3>
<p><strong>SMT solvers</strong> are designed to handle highly complex problems, often involving thousands or even millions of variables and constraints. This capability to scale and manage complexity efficiently is one of the key reasons why SMT solvers have become indispensable in many fields. Unlike simpler solvers that can only handle basic logical formulas, modern SMT solvers—such as Z3 (developed by Microsoft)—can work on incredibly large and intricate problems that require the integration of both logic and mathematics.</p>
<section id="large-scale-software-verification" class="level4">
<h4 class="anchored" data-anchor-id="large-scale-software-verification">Large-Scale software verification</h4>
<p>Software verification is a critical application of SMT solvers. Large and complex codebases, like those used in operating systems or flight control software, require guarantees that they behave correctly in every possible situation. This is especially important for <strong>safety-critical systems</strong>, where even a small bug could lead to catastrophic consequences (such as an airplane malfunctioning or a medical device failing). SMT solvers are used to <strong>automatically verify</strong> that a program adheres to its specifications by checking all possible inputs and paths the software might take.</p>
<p>For example, verifying that a piece of software does not crash when it processes certain inputs might require checking billions of different combinations of inputs and internal states. An SMT solver can analyze these possibilities using logical and mathematical models, ensuring that the software behaves as expected across all cases. This process, known as <strong>formal verification</strong>, is a step beyond typical software testing because it proves the absence of errors rather than simply checking for errors that are found during testing.</p>
</section>
<section id="optimizing-systems" class="level4">
<h4 class="anchored" data-anchor-id="optimizing-systems">Optimizing systems</h4>
<p>Another area where SMT solvers excel is <strong>system optimization</strong>. Many real-world systems—such as networks, electronic circuits, or transportation schedules—are incredibly complex, involving a large number of interacting components that must work together efficiently. SMT solvers help <strong>optimize</strong> these systems by finding the best possible configuration that meets all the necessary constraints.</p>
<p>For instance, in <strong>network design</strong>, you might need to ensure that data flows through the network as efficiently as possible while minimizing costs and avoiding congestion. SMT solvers can handle the complexity of these requirements, modeling both the logical rules that govern the network’s behavior and the mathematical constraints, such as bandwidth limits or latency requirements.</p>
<p>In <strong>circuit design</strong>, SMT solvers are used to minimize the power consumption, size, and heat production of electronic circuits while ensuring they perform their intended functions correctly. As circuits become more advanced and compact, this optimization process becomes critical for the performance of modern electronics, including smartphones and computer processors.</p>
<p>In large-scale <strong>scheduling</strong> problems—such as assigning shifts to employees or scheduling jobs on machines—SMT solvers help find optimal solutions that balance competing demands, such as time constraints, available resources, and efficiency goals. Because SMT solvers can scale to handle thousands of tasks or constraints, they are a powerful tool for solving these optimization problems in real-world industrial settings.</p>
</section>
<section id="advanced-techniques" class="level4">
<h4 class="anchored" data-anchor-id="advanced-techniques">Advanced techniques</h4>
<p>Even though SMT is <strong>NP-hard</strong>, meaning that, in the worst cases, solving these problems can take an enormous amount of time—the development of <strong>advanced algorithms</strong> and <strong>heuristics</strong> has made SMT solvers much faster and more practical for real-world applications. SMT solvers use several techniques to reduce the time and resources required to find a solution, including:</p>
<ul>
<li><p><strong>Backtracking</strong>: The solver explores possible solutions and, if it hits a dead end (where a solution doesn’t work), it backtracks to an earlier decision point and tries a different path. This helps the solver avoid wasting time on unworkable solutions.</p></li>
<li><p><strong>Conflict-Driven Clause Learning (CDCL)</strong>: When the solver encounters a conflict (a situation where no solution can satisfy the current set of constraints), it learns from this conflict to avoid making similar mistakes in the future. This dramatically speeds up the solving process by preventing the solver from revisiting paths that are known to be dead ends.</p></li>
<li><p><strong>Theory Propagation</strong>: Theories in SMT (such as arithmetic or arrays) have their own specific rules. SMT solvers use <strong>theory propagation</strong> to narrow down the possible values for variables based on the rules of these theories. For example, if a variable must satisfy a certain arithmetic equation, the solver can limit the range of possible values for that variable, which reduces the complexity of the search.</p></li>
</ul>
<p>By combining these techniques, SMT solvers are able to handle problems that would be intractable for simpler solvers, allowing them to efficiently solve highly complex and large-scale problems.</p>
</section>
</section>
<section id="combining-multiple-theories" class="level3">
<h3 class="anchored" data-anchor-id="combining-multiple-theories">Combining multiple theories</h3>
<p>One of the key strengths of <strong>SMT solvers</strong> is their ability to handle multiple theories simultaneously, allowing them to solve problems that involve not just simple logic but a mixture of complex mathematical domains. This combination of theories allows SMT solvers to model real-world systems with a higher degree of accuracy and sophistication. By integrating diverse theories, SMT solvers can solve problems that span multiple <strong>domains of mathematics and logic</strong> in a seamless way. Let’s take a closer look at how multiple theories work together in SMT, and why this makes SMT solvers exceptionally powerful.</p>
<p>When we talk about SMT solvers “combining multiple theories,” what we really mean is that the solver is capable of reasoning about different kinds of constraints that apply to different types of data—all at the same time.</p>
<p>Each theory brings its own set of <strong>rules and constraints</strong>. For example:</p>
<ul>
<li><p>Arithmetic theory deals with equations and inequalities.</p></li>
<li><p>Array theory includes operations like indexing and updating.</p></li>
<li><p>Bit-vector theory includes binary manipulations like bit-shifting or bitwise AND/OR operations.</p></li>
</ul>
<p>In real-world applications, it’s rare for a problem to belong to just one theory. Often, multiple theories are at play. SMT solvers shine in such scenarios by integrating these different theories and <strong>coordinating the solving process</strong> so that constraints from all applicable theories are satisfied simultaneously.</p>
<p>Let’s now explore some concrete examples where multiple theories interact in SMT.</p>
</section>
<section id="verifying-software-with-mixed-data-types" class="level3">
<h3 class="anchored" data-anchor-id="verifying-software-with-mixed-data-types">Verifying software with mixed data types</h3>
<p>Consider a software verification problem in which a program performs both arithmetic computations and manipulates arrays. Suppose the program performs operations like:</p>
<ol type="1">
<li><p><strong>Arithmetic</strong>: <img src="https://latex.codecogs.com/png.latex?x%20=%20a%20+%20b">.</p></li>
<li><p><strong>Array access</strong>: Reading an element from an array <img src="https://latex.codecogs.com/png.latex?arr%5Bi%5D">.</p></li>
<li><p><strong>Bitwise operations</strong>: <img src="https://latex.codecogs.com/png.latex?z%20=%20x%20%5C&amp;%20y">, where <img src="https://latex.codecogs.com/png.latex?%5C&amp;"> is the bitwise AND operation.</p></li>
</ol>
<p>To ensure the correctness of this program, we need to check if the program will behave correctly for any given inputs. Here’s how <strong>multiple theories</strong> would be combined by the SMT solver:</p>
<ol type="1">
<li><p><strong>Arithmetic theory</strong> will handle the equation <img src="https://latex.codecogs.com/png.latex?x%20=%20a%20+%20b">, ensuring that the sum is computed correctly according to arithmetic rules. The solver will also check that variables like <img src="https://latex.codecogs.com/png.latex?x">, <img src="https://latex.codecogs.com/png.latex?a">, and <img src="https://latex.codecogs.com/png.latex?b"> are appropriately constrained (e.g., <img src="https://latex.codecogs.com/png.latex?x"> must be an integer).</p></li>
<li><p><strong>Array theory</strong> will handle the operation <img src="https://latex.codecogs.com/png.latex?arr%5Bi%5D">, ensuring that the index <img src="https://latex.codecogs.com/png.latex?i"> is valid (i.e., it lies within the bounds of the array). It will also ensure that the right value is retrieved from the array and assigned to the right variable. The solver checks that accessing <img src="https://latex.codecogs.com/png.latex?arr%5Bi%5D"> doesn’t lead to an out-of-bounds error.</p></li>
<li><p><strong>Bit-vector theory</strong> will manage the bitwise operation <img src="https://latex.codecogs.com/png.latex?z%20=%20x%20%5C&amp;%20y">, ensuring that the binary representation of <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> is correctly manipulated at the bit level. This is crucial for many low-level computing tasks, such as encoding or encryption, where binary data is processed.</p></li>
</ol>
<p>By combining these theories, the SMT solver verifies that the program will execute correctly, no matter what values are assigned to the variables. The solver considers all possible inputs and execution paths to prove that there are no runtime errors, incorrect calculations, or invalid memory accesses.</p>
</section>
<section id="a-coordinated-process" class="level3">
<h3 class="anchored" data-anchor-id="a-coordinated-process">A coordinated process</h3>
<p>The magic of SMT solvers lies in their ability to coordinate between these multiple theories while solving a problem. Theories often interact in complex ways, so SMT solvers must <strong>communicate between theories</strong> to resolve constraints effectively. This involves a process known as <strong>theory combination</strong> or <strong>theory propagation</strong>.</p>
<ol type="1">
<li><p><strong>Theory propagation</strong>: Each theory can propagate constraints based on its specific rules. For example, if the arithmetic theory deduces that <img src="https://latex.codecogs.com/png.latex?x%20%3E%2010">, then this information is passed to the array theory to check if accessing <img src="https://latex.codecogs.com/png.latex?arr%5Bx%5D"> is still valid, ensuring <img src="https://latex.codecogs.com/png.latex?x"> doesn’t exceed the array bounds.</p></li>
<li><p><strong>Conflict resolution</strong>: If a conflict arises—such as the arithmetic theory concluding <img src="https://latex.codecogs.com/png.latex?x%20=%205">, while the bit-vector theory requires <img src="https://latex.codecogs.com/png.latex?x"> to have a binary value that would make <img src="https://latex.codecogs.com/png.latex?x%20=%203">, the solver identifies this conflict and attempts to resolve it by exploring alternative solutions. This iterative process is essential for finding a solution that satisfies all constraints across different theories.</p></li>
<li><p><strong>Theory interpolation</strong>: When two different theories interact, SMT solvers use techniques like <strong>theory interpolation</strong> to reconcile their different views of the problem. For instance, arithmetic may dictate that <img src="https://latex.codecogs.com/png.latex?x%20=%204">, while array theory may require that <img src="https://latex.codecogs.com/png.latex?x"> be within certain index limits. The solver navigates these competing constraints by narrowing down possible values for <img src="https://latex.codecogs.com/png.latex?x"> that satisfy both theories.</p></li>
</ol>
<p>These interactions make SMT solvers <strong>more efficient</strong> at solving problems that would be too difficult for simpler solvers that only handle one theory at a time.</p>
</section>
<section id="flexibility-across-domains" class="level3">
<h3 class="anchored" data-anchor-id="flexibility-across-domains">Flexibility across domains</h3>
<p>The flexibility of SMT solvers to combine multiple theories makes them incredibly versatile. Here are a few real-world examples that highlight their power across different domains:</p>
<ul>
<li><p><strong>Cryptographic verification</strong>: SMT solvers are used to verify cryptographic algorithms, such as those used for data encryption and digital signatures. Cryptographic operations often involve both <strong>arithmetic</strong> (modular arithmetic over large numbers) and <strong>bitwise manipulations</strong> (such as shifting bits or performing XOR operations).</p>
<p>For instance, verifying the correctness of a <strong>RSA encryption algorithm</strong> requires an SMT solver to:</p>
<ul>
<li><p>Check the <strong>modular arithmetic</strong> involved in key generation and encryption.</p></li>
<li><p>Ensure the <strong>bitwise operations</strong> used to encode and decode messages are performed correctly.</p></li>
</ul>
<p>By integrating arithmetic and bit-vector theories, an SMT solver can ensure that the algorithm is mathematically secure and functions as expected for all inputs.</p></li>
<li><p><strong>Optimizing robotic movements</strong>: In modern factories, robots are often programmed to perform complex tasks that involve both <strong>decision-making</strong> (logic) and <strong>precise control of movement</strong> (arithmetic). SMT solvers are used to <strong>optimize robotic movements</strong>, ensuring that they follow the most efficient path while respecting physical constraints like speed, distance, and safety.</p>
<p>An SMT solver may combine:</p>
<ul>
<li><p><strong>Linear arithmetic</strong> to model the robot’s physical movements.</p></li>
<li><p><strong>Logic</strong> to represent decision-making rules, such as “if an obstacle is detected, stop the robot.”</p></li>
<li><p><strong>Array theory</strong> to manage data about the robot’s environment and task status.</p></li>
</ul>
<p>By solving these constraints together, the SMT solver finds an optimal plan for the robot that minimizes movement time, avoids obstacles, and completes tasks in the most efficient way possible.</p></li>
<li><p><strong>Artificial Intelligence: Planning and Scheduling</strong>: AI systems often need to make decisions that involve both logic and time-based scheduling. For example, an AI planning system might need to schedule tasks for multiple robots working in parallel, ensuring that each robot finishes its task without clashing with others.</p>
<p>SMT solvers can:</p>
<ul>
<li><p>Use <strong>arithmetic theory</strong> to track time constraints, such as ensuring that task A is completed before task B starts.</p></li>
<li><p>Use <strong>array theory</strong> to keep track of which robot is performing which task.</p></li>
<li><p>Use <strong>logical reasoning</strong> to decide the best sequence of actions.</p></li>
</ul>
<p>By combining these theories, SMT solvers can efficiently plan out the most effective way for robots to complete tasks without delays or conflicts, making AI systems smarter and more reliable.</p></li>
</ul>
</section>
</section>
<section id="z3" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="z3">Z3</h2>
<p><a href="https://www.microsoft.com/en-us/research/project/z3-3/"><strong>Z3</strong></a><sup>1</sup> is one of the most widely-used and powerful SMT solvers, developed by <strong>Microsoft Research</strong>. It is designed to solve logical and mathematical problems that involve both Boolean logic (True/False values) and a variety of mathematical structures, such as integers, real numbers, arrays, bit-vectors, and more. Z3 has become the go-to tool for a wide range of applications, from verifying software correctness to optimizing systems in industrial engineering. Its ability to handle large and complex problems efficiently, while combining different mathematical theories, sets it apart from other solvers.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;de Moura, L., &amp; Bjørner, N. (2008). <strong>Z3: An Efficient SMT Solver</strong>. <em>Tools and Algorithms for the Construction and Analysis of Systems (TACAS)</em>. <a href="https://www.microsoft.com/en-us/research/publication/z3-an-efficient-smt-solver/">Link to paper</a></p></div></div><p>Key features:</p>
<ul>
<li><p><strong>Multi-theory solver</strong>: Z3 can handle problems that involve multiple theories simultaneously, such as <strong>arithmetic</strong>, <strong>bit-vectors</strong>, <strong>arrays</strong>, and <strong>functions</strong>. This makes it versatile enough to solve complex real-world problems that span multiple domains of logic and mathematics. Whether you are working with numerical constraints, manipulating data structures like arrays, or verifying hardware circuits that operate at the bit level, Z3 can manage these interactions seamlessly.</p></li>
<li><p><strong>High efficiency</strong>: Z3 is designed to solve extremely large problems with millions of variables and constraints. It employs advanced techniques, such as <strong>conflict-driven clause learning (CDCL)</strong>, <strong>backtracking</strong>, and <strong>theory propagation</strong>, to explore the search space efficiently. These techniques enable Z3 to quickly find solutions or prove that no solution exists, even for problems that are computationally intensive.</p></li>
<li><p><strong>Combining logical and mathematical constraints</strong>: One of Z3’s most powerful features is its ability to combine <strong>logical constraints</strong> (such as those used in SAT solving) with <strong>mathematical constraints</strong> (such as equations and inequalities). For example, in software verification, Z3 can check both the logical flow of the program and the correctness of its arithmetic operations, ensuring that a program behaves as expected in all possible scenarios.</p></li>
<li><p><strong>Modularity and extensibility</strong>: Z3 is highly modular, which means that users can extend its capabilities to suit specific applications. It allows developers to define custom theories and tailor the solver’s behavior to fit the particular needs of their problem domain. This flexibility makes Z3 suitable for a wide range of industries, including aerospace, finance, cybersecurity, and hardware design.</p></li>
<li><p><strong>Rich API support</strong>: Z3 provides rich API support for various programming languages, including Python, C++, and Java. This means that users can integrate Z3 into their existing software tools and workflows easily. For instance, developers can use Z3 within a Python environment to model complex optimization problems, check for software bugs, or verify hardware designs. Its user-friendly interface and robust API make Z3 accessible to both researchers and engineers.</p></li>
<li><p><strong>Proving and model generation</strong>: In addition to solving for satisfiability, Z3 can also be used to <strong>prove the correctness</strong> of formulas or <strong>generate models</strong> that demonstrate specific properties. For example, in verifying a software system, Z3 can either provide a counterexample where the program fails or prove that no such failure exists under any circumstances. This capability is essential in formal methods for software and hardware verification.</p></li>
</ul>
<section id="api-basic-usage" class="level3">
<h3 class="anchored" data-anchor-id="api-basic-usage">API basic usage</h3>
<p>The <strong>Z3 solver API</strong> provides a powerful interface for solving constraint satisfaction problems in Python. To use it, you first need to import Z3’s key components, such as <code>Solver()</code>, <code>Int()</code>, and constraint functions like <code>And()</code>, <code>Or()</code>, and <code>Distinct()</code>.</p>
<p>You start by defining variables using <code>Int()</code> for integers or other types like <code>Bool()</code> for Boolean values. For example, to define an integer variable <code>X</code> and <code>Y</code>, you can do:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int</span>
<span id="cb1-2"></span>
<span id="cb1-3"></span>
<span id="cb1-4">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<span id="cb1-5">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span></code></pre></div>
<p>This creates two integer variables <code>X</code> and <code>Y</code> that can take integer values.</p>
<p>Next, you initialize the Z3 solver using the <code>Solver()</code> class. The solver will handle adding constraints and finding solutions. For example:</p>
<div class="sourceCode" id="annotated-cell-2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Solver</span>
<span id="annotated-cell-2-2"></span>
<span id="annotated-cell-2-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-2-4" class="code-annotation-target">solver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Solver()</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-2" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="4" data-code-annotation="1">Initialize the Z3 solver.</span>
</dd>
</dl>
<p>Now, you can add constraints to the solver using <code>solver.add()</code>. For example, let’s say you want to add a constraint that the sum of <code>X</code> and <code>Y</code> should equal 10, and both <code>X</code> and <code>Y</code> should be greater than 0:</p>
<div class="sourceCode" id="annotated-cell-3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Solver</span>
<span id="annotated-cell-3-2"></span>
<span id="annotated-cell-3-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-3-4" class="code-annotation-target">solver.add(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-3-5" class="code-annotation-target">solver.add(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-3" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="4" data-code-annotation="1">Add constraint that X + Y equals 10.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="5" data-code-annotation="2">Add constraint that X and Y are greater than 0.</span>
</dd>
</dl>
<p>You can also use logical operators like <code>Or()</code> and <code>And()</code> for more complex constraints. For example:</p>
<div class="sourceCode" id="annotated-cell-4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-4-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int, Solver, Or, And</span>
<span id="annotated-cell-4-2"></span>
<span id="annotated-cell-4-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-4-4" class="code-annotation-target">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-4-5" class="code-annotation-target">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span>
<span id="annotated-cell-4-6"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-4-7" class="code-annotation-target">solver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Solver()</span>
<span id="annotated-cell-4-8"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-4-9" class="code-annotation-target">solver.add(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="annotated-cell-4-10"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-4-11" class="code-annotation-target">solver.add(And(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="annotated-cell-4-12"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-4-13" class="code-annotation-target">solver.add(Or(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-4" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="1" data-code-annotation="1">Import Z3 components: <code>Int</code> for integer variables, <code>Solver</code> to set up the constraint solver, and <code>Or</code> and <code>And</code> for logical operations.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="4" data-code-annotation="2">Define an integer variable <code>X</code> using Z3’s <code>Int</code> constructor.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="5" data-code-annotation="3">Define another integer variable <code>Y</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="7" data-code-annotation="4">Initialize the solver.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="9" data-code-annotation="5">Add constraint: <code>X + Y == 10</code>, so the sum of <code>X</code> and <code>Y</code> must equal 10.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="11" data-code-annotation="6">Add constraint using <code>And()</code>: Both <code>X</code> and <code>Y</code> must be greater than 0.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="13" data-code-annotation="7">Add constraint using <code>Or()</code>: Either <code>X</code> is less than 5 or <code>Y</code> is greater than 5.</span>
</dd>
</dl>
<p>Once all constraints are added, you check whether the solver can find a solution by calling <code>solver.check()</code>:</p>
<div class="sourceCode" id="annotated-cell-5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-5-1" class="code-annotation-target"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> solver.check() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sat:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-5-2" class="code-annotation-target">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solver.model()</span>
<span id="annotated-cell-5-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-5-4" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"X = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(X)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-5-5">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Y = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(Y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-5-6"></span>
<span id="annotated-cell-5-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="annotated-cell-5-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No solution found"</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-5" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="1" data-code-annotation="1">Call to <code>solver.check()</code> causes the execution of the actual constraint-solving algorithm. If <code>solver.check()</code> returns <code>sat</code>, then it means Z3 found a solution.</span>
</dd>
<dt data-target-cell="annotated-cell-5" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="2" data-code-annotation="2"><code>solver.model()</code> retrieves the solution.</span>
</dd>
<dt data-target-cell="annotated-cell-5" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="4" data-code-annotation="3"><code>model.evaluate(X)</code> retrieves the value of the variable <code>X</code> from the solution (<code>model</code>) that Z3 has already found after executing the full algorithm during the <code>solver.check()</code> call.</span>
</dd>
</dl>
<p>The <code>solver.check()</code> method is used to determine whether the given set of constraints is <strong>satisfiable</strong>. The result of <code>solver.check()</code> can be one of three possible values:</p>
<ul>
<li><p><code>sat</code> (satisfiable): This means that Z3 has found at least one solution that satisfies all the constraints you’ve provided. If <code>solver.check() == sat</code>, it means that Z3 was able to find a solution where all the constraints hold true.</p></li>
<li><p><code>unsat</code> (unsatisfiable): This means that there is <strong>no possible solution</strong> that satisfies the given set of constraints. If <code>solver.check()</code> returns <code>unsat</code>, it means that the constraints are contradictory, and Z3 cannot find any values for the variables that satisfy all the constraints.</p></li>
<li><p><code>unknown</code>: This means Z3 could not determine whether the constraints are satisfiable or unsatisfiable, often due to the complexity of the problem or limitations in the solver’s ability to handle the specific problem. This result can happen in more complex cases, such as problems involving non-linear arithmetic or other advanced features.</p></li>
</ul>
<p>Here’s a complete example that ties everything together:</p>
<div class="sourceCode" id="annotated-cell-6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-6-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int, Solver, Or, And, sat</span>
<span id="annotated-cell-6-2"></span>
<span id="annotated-cell-6-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-6-4" class="code-annotation-target">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-6-5" class="code-annotation-target">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span>
<span id="annotated-cell-6-6"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-6-7" class="code-annotation-target">solver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Solver()</span>
<span id="annotated-cell-6-8"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-6-9" class="code-annotation-target">solver.add(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="annotated-cell-6-10"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-6-11" class="code-annotation-target">solver.add(And(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="annotated-cell-6-12"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-6-13" class="code-annotation-target">solver.add(Or(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="annotated-cell-6-14"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-6-15" class="code-annotation-target"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> solver.check() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sat:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="9" onclick="event.preventDefault();">9</a><span id="annotated-cell-6-16" class="code-annotation-target">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solver.model()</span>
<span id="annotated-cell-6-17"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="10" onclick="event.preventDefault();">10</a><span id="annotated-cell-6-18" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Solution: X = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(X)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Y = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(Y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-6-19"></span>
<span id="annotated-cell-6-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="11" onclick="event.preventDefault();">11</a><span id="annotated-cell-6-21" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No solution found"</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-6" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="1" data-code-annotation="1">Import Z3 components: <code>Int</code> for integer variables, <code>Solver</code> to set up the constraint solver, and <code>Or</code> and <code>And</code> for logical operations.</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="4" data-code-annotation="2">Define an integer variable <code>X</code> using Z3’s <code>Int</code> constructor.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="5" data-code-annotation="3">Define another integer variable <code>Y</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="7" data-code-annotation="4">Initialize the solver.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="9" data-code-annotation="5">Add constraint: <code>X + Y == 10</code>, so the sum of <code>X</code> and <code>Y</code> must equal 10.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="11" data-code-annotation="6">Add constraint using <code>And()</code>: Both <code>X</code> and <code>Y</code> must be greater than 0.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="13" data-code-annotation="7">Add constraint using <code>Or()</code>: Either <code>X</code> is less than 5 or <code>Y</code> is greater than 5.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="15" data-code-annotation="8">Check if the constraints are satisfiable.</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="16" data-code-annotation="9">Retrieve the solution model if satisfiable.</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="10">10</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="18" data-code-annotation="10">Print the values of <code>X</code> and <code>Y</code>. Output: Solution: <code>X = 4, Y = 6</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="11">11</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="21" data-code-annotation="11">Print a message if no solution is found.</span>
</dd>
</dl>
<p>This simple example shows how Z3 can be used in Python to solve constraint satisfaction problems. With just a few lines of code, you can define variables, add constraints, and let Z3 find solutions for you. This makes Z3 a powerful tool for solving puzzles, optimization problems, or more complex logical tasks.</p>
</section>
<section id="api-overview" class="level3">
<h3 class="anchored" data-anchor-id="api-overview">API overview</h3>
<p>The <strong>Z3 solver API</strong> provides a robust framework for solving a wide range of problems, including logic, optimization, and constraint satisfaction, using <strong>SMT (Satisfiability Modulo Theories)</strong>. It leverages mathematical methods such as <strong>Boolean satisfiability (SAT)</strong>, <strong>linear arithmetic</strong>, and <strong>theory solvers</strong> (for arrays, bit-vectors, real arithmetic, etc.). Z3’s API allows you to formulate complex problems in terms of constraints and logical propositions, which it then solves using advanced heuristics, backtracking, and conflict-driven clause learning (CDCL).</p>
<p>Overview of Z3 API concepts:</p>
<ul>
<li><p>Z3 supports different types of <strong>variables</strong>, such as:</p>
<ul>
<li><p><strong>Integers</strong> (<code>Int()</code>).</p></li>
<li><p><strong>Booleans</strong> (<code>Bool()</code>).</p></li>
<li><p><strong>Real numbers</strong> (<code>Real()</code>).</p></li>
<li><p><strong>Bit-vectors</strong> (<code>BitVec()</code>).</p></li>
</ul>
<p>Each variable is associated with a domain, and constraints are imposed on these variables. For instance:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int, Bool</span>
<span id="cb2-2"></span>
<span id="cb2-3">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Integer variable</span></span>
<span id="cb2-4">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Bool(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Boolean variable</span></span></code></pre></div></li>
<li><p>Z3 allows you to add <strong>arithmetic</strong>, <strong>logical</strong>, and <strong>set-theoretic constraints</strong> to your problem. These constraints can involve:</p>
<ul>
<li><p><strong>Arithmetic operations</strong>: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>.</p></li>
<li><p><strong>Logical operations</strong>: <code>And()</code>, <code>Or()</code>, <code>Not()</code>, <code>Implies()</code>.</p></li>
<li><p><strong>Relational operations</strong>: <code>&lt;</code>, <code>&gt;</code>, <code>==</code>, <code>!=</code>.</p></li>
<li><p><strong>Set operations</strong>: <code>Distinct()</code> (for ensuring distinct values in a set of variables).</p></li>
</ul>
<p>Example:</p>
<div class="sourceCode" id="annotated-cell-13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-13-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int, Solver, And, Or, Not, Distinct, sat</span>
<span id="annotated-cell-13-2"></span>
<span id="annotated-cell-13-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-13-4" class="code-annotation-target">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-13-5" class="code-annotation-target">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-13-6" class="code-annotation-target">Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span>)</span>
<span id="annotated-cell-13-7"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-13-8" class="code-annotation-target">solver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Solver()</span>
<span id="annotated-cell-13-9"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-13-10" class="code-annotation-target">solver.add(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="annotated-cell-13-11"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-13-12" class="code-annotation-target">solver.add(And(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="annotated-cell-13-13"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-13-14" class="code-annotation-target">solver.add(Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> Z)</span>
<span id="annotated-cell-13-15"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="9" onclick="event.preventDefault();">9</a><span id="annotated-cell-13-16" class="code-annotation-target">solver.add(Distinct(X, Y, Z))</span>
<span id="annotated-cell-13-17"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="10" onclick="event.preventDefault();">10</a><span id="annotated-cell-13-18" class="code-annotation-target"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> solver.check() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sat:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="11" onclick="event.preventDefault();">11</a><span id="annotated-cell-13-19" class="code-annotation-target">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solver.model()</span>
<span id="annotated-cell-13-20"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="12" onclick="event.preventDefault();">12</a><span id="annotated-cell-13-21" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Solution: X = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(X)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Y = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(Y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Z = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(Z)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-13-22"></span>
<span id="annotated-cell-13-23"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-13" data-target-annotation="13" onclick="event.preventDefault();">13</a><span id="annotated-cell-13-24" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No solution found"</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-13" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="1" data-code-annotation="1">Import the necessary components: Z3 components such as <code>Int</code>, <code>Solver</code>, <code>And</code>, <code>Distinct</code>, etc., are imported.</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="4" data-code-annotation="2">Define an integer variable <code>X</code> using Z3’s <code>Int</code> constructor.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="5" data-code-annotation="3">Define another integer variable <code>Y</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="6" data-code-annotation="4">Define a third integer variable <code>Z</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="8" data-code-annotation="5">Set up the Z3 solver: This initializes the solver that will manage and solve the constraints.</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="10" data-code-annotation="6">Add an arithmetic constraint: <code>X + 2 * Y == 10</code> ensures that <code>X</code> plus twice <code>Y</code> equals 10.</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="12" data-code-annotation="7">Add a logical constraint: <code>X &gt; 0</code> and <code>Y &lt; 10</code> using the <code>And()</code> function.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="14" data-code-annotation="8">Add relational constraints: <code>Z &gt; X</code> and <code>Y &lt; Z</code> to ensure relations between <code>X</code>, <code>Y</code>, and <code>Z</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="16" data-code-annotation="9">Add distinctness constraint: <code>Distinct(X, Y, Z)</code> ensures that <code>X</code>, <code>Y</code>, and <code>Z</code> all have distinct values.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="10">10</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="18" data-code-annotation="10">Check if the constraints are satisfiable using <code>solver.check()</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="11">11</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="19" data-code-annotation="11">Retrieve the model (solution) if the constraints are satisfiable.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="12">12</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="21" data-code-annotation="12">Print the solution for <code>X</code>, <code>Y</code>, and <code>Z</code>. Output: <code>Solution: X = 10, Y = 0, Z = 11</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-13" data-target-annotation="13">13</dt>
<dd>
<span data-code-cell="annotated-cell-13" data-code-lines="24" data-code-annotation="13">Print a message if no solution is found.</span>
</dd>
</dl></li>
<li><p>Z3 excels in combining <strong>SAT solvers</strong> with <strong>theory solvers</strong> for specific domains. Theories are specialized solvers that handle specific classes of constraints:</p>
<ul>
<li><p><strong>Linear arithmetic</strong>: Handles constraints involving addition, subtraction, and multiplication by constants (e.g., <code>X + Y &gt;= 10</code>).</p></li>
<li><p><strong>Non-linear arithmetic</strong>: Handles more complex polynomial expressions.</p></li>
<li><p><strong>Bit-vectors</strong>: Useful for hardware modeling, where operations are performed on fixed-size binary numbers (e.g., <code>BitVec('X', 32)</code> for a 32-bit integer).</p></li>
<li><p><strong>Arrays and functions</strong>: Z3 supports reasoning about arrays and functions, allowing for the definition of array indices and function applications.</p></li>
</ul></li>
<li><p>Z3 works by converting the problem into a <strong>Boolean satisfiability (SAT)</strong> problem and then applying <strong>conflict-driven clause learning (CDCL)</strong> to explore possible solutions. It divides the problem into <strong>Boolean logic</strong> and <strong>theory-specific reasoning</strong> (such as arithmetic or bit-vector theory). The general solving process involves:</p>
<ul>
<li><p><strong>SAT-based search</strong>: Z3 uses efficient SAT-solving techniques to find assignments to variables.</p></li>
<li><p><strong>Theory propagation</strong>: Z3 incorporates theory solvers to check consistency within a specific theory (e.g., arithmetic or arrays).</p></li>
<li><p><strong>Backtracking and learning</strong>: If a contradiction is encountered, Z3 backtracks and uses the learned conflict to prune the search space, improving efficiency.</p></li>
</ul></li>
<li><p>Z3 also supports <strong>optimization</strong> over variables, where you can minimize or maximize a given objective function. This is useful in cases where you are not just looking for any solution, but the <strong>best</strong> one (e.g., minimal cost, maximum profit). You can use <code>Optimize()</code> instead of <code>Solver()</code> to define an optimization problem:</p>
<div class="sourceCode" id="annotated-cell-14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-14-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int, Optimize, sat</span>
<span id="annotated-cell-14-2"></span>
<span id="annotated-cell-14-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-14-4" class="code-annotation-target">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-14-5" class="code-annotation-target">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span>
<span id="annotated-cell-14-6"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-14-7" class="code-annotation-target">opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Optimize()</span>
<span id="annotated-cell-14-8"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-14-9" class="code-annotation-target">opt.add(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="annotated-cell-14-10"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-14-11" class="code-annotation-target">opt.minimize(X)</span>
<span id="annotated-cell-14-12"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-14-13" class="code-annotation-target"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> opt.check() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sat:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-14-14" class="code-annotation-target">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> opt.model()</span>
<span id="annotated-cell-14-15"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="9" onclick="event.preventDefault();">9</a><span id="annotated-cell-14-16" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Solution: X = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(X)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Y = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(Y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-14-17"></span>
<span id="annotated-cell-14-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-14" data-target-annotation="10" onclick="event.preventDefault();">10</a><span id="annotated-cell-14-19" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No solution found"</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-14" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="1" data-code-annotation="1">Import the necessary components: We import <code>Int</code> to define integer variables and <code>Optimize</code> for optimization.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-14" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="4" data-code-annotation="2">Define an integer variable <code>X</code> using Z3’s <code>Int</code> constructor.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-14" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="5" data-code-annotation="3">Define another integer variable <code>Y</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-14" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="7" data-code-annotation="4">Initialize the Z3 optimizer: Instead of using <code>Solver()</code>, we use <code>Optimize()</code> to allow the solver to minimize or maximize values.</span>
</dd>
<dt data-target-cell="annotated-cell-14" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="9" data-code-annotation="5">Add a constraint: The sum of <code>X + Y</code> must be greater than or equal to 10.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-14" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="11" data-code-annotation="6">Minimize <code>X</code>: We tell Z3 to minimize the value of <code>X</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-14" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="13" data-code-annotation="7">Check if the problem is satisfiable: Z3 checks if it can satisfy the constraints while optimizing.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-14" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="14" data-code-annotation="8">Retrieve the model (solution) if the problem is satisfiable.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-14" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="16" data-code-annotation="9">Print the solution for <code>X</code> and <code>Y</code>. Output: Solution: <code>X = 10, Y = 0</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-14" data-target-annotation="10">10</dt>
<dd>
<span data-code-cell="annotated-cell-14" data-code-lines="19" data-code-annotation="10">Print a message if no solution is found.</span>
</dd>
</dl></li>
<li><p><strong>Advanced solver techniques</strong>:</p>
<ul>
<li><p><strong>Conflict-driven clause learning (CDCL)</strong>: Z3 uses CDCL to handle the SAT problem. It systematically explores possible assignments and learns from conflicts (inconsistent assignments) to avoid repeating them.</p></li>
<li><p><strong>Backjumping and restarting</strong>: Z3 employs heuristics that help it decide when to backtrack, restart, or jump past certain unsolvable branches to explore more promising parts of the search space.</p></li>
<li><p><strong>Theory combination</strong>: Z3 excels at combining different theories. For example, you can solve problems that simultaneously involve linear arithmetic, arrays, and bit-vectors, combining results from theory solvers to find the overall solution.</p></li>
</ul></li>
<li><p>Z3 supports <strong>first-order logic</strong> and can handle <strong>universal</strong> and <strong>existential quantifiers</strong>. You can express statements like “for all” or “there exists” using <code>ForAll()</code> and <code>Exists()</code>, respectively. The example given below will demonstrate the use of both <strong>universal</strong> and <strong>existential quantifiers</strong>. We’ll check if the solver can find a value for <code>Y</code> that satisfies a certain property for all values of <code>X</code> (universal quantification), and whether there exists a value of <code>X</code> that satisfies a condition (existential quantification).</p>
<div class="sourceCode" id="annotated-cell-15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-15-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int, Solver, ForAll, Exists, Implies, Or, And, sat</span>
<span id="annotated-cell-15-2"></span>
<span id="annotated-cell-15-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-15-4" class="code-annotation-target">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-15-5" class="code-annotation-target">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span>
<span id="annotated-cell-15-6"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-15-7" class="code-annotation-target">solver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Solver()</span>
<span id="annotated-cell-15-8"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-15-9" class="code-annotation-target">domain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="annotated-cell-15-10"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-15-11" class="code-annotation-target">solver.add(ForAll([X], Implies(Or([X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> domain]), X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)))</span>
<span id="annotated-cell-15-12"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-15-13" class="code-annotation-target">solver.add(Exists([X], And(Or([X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> domain]), X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)))</span>
<span id="annotated-cell-15-14"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-15-15" class="code-annotation-target"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> solver.check() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sat:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="9" onclick="event.preventDefault();">9</a><span id="annotated-cell-15-16" class="code-annotation-target">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solver.model()</span>
<span id="annotated-cell-15-17"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="10" onclick="event.preventDefault();">10</a><span id="annotated-cell-15-18" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Solution: Y = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(Y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-15-19"></span>
<span id="annotated-cell-15-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-15" data-target-annotation="11" onclick="event.preventDefault();">11</a><span id="annotated-cell-15-21" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No solution found"</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-15" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="1" data-code-annotation="1">Import required Z3 components: <code>Int</code>, <code>Solver</code>, <code>ForAll</code>, <code>Exists</code>, <code>Implies</code>, <code>Or</code>, and <code>And</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-15" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="4" data-code-annotation="2">Define an integer variable <code>X</code> using Z3’s <code>Int</code> constructor.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-15" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="5" data-code-annotation="3">Define another integer variable <code>Y</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-15" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="7" data-code-annotation="4">Initialize the Z3 solver using the <code>Solver()</code> class to manage and solve constraints.</span>
</dd>
<dt data-target-cell="annotated-cell-15" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="9" data-code-annotation="5">Define the finite domain of <code>X</code> as <code>[1, 2, 3]</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-15" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="11" data-code-annotation="6">Add a universal quantifier constraint: For all <code>X</code> in the domain, <code>X + Y &gt;= 5</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-15" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="13" data-code-annotation="7">Add an existential quantifier constraint: There exists an <code>X</code> in the domain such that <code>X + Y == 6</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-15" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="15" data-code-annotation="8">Check if the constraints are satisfiable using <code>solver.check()</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-15" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="16" data-code-annotation="9">Retrieve the model (solution) if the constraints are satisfiable.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-15" data-target-annotation="10">10</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="18" data-code-annotation="10">Print the value of <code>Y</code> from the model (solution). Output: <code>Solution: Y = 4</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-15" data-target-annotation="11">11</dt>
<dd>
<span data-code-cell="annotated-cell-15" data-code-lines="21" data-code-annotation="11">Print a message if no solution is found.</span>
</dd>
</dl></li>
<li><p>Z3 can generate <strong>proofs</strong> for unsatisfiable queries, showing why no solution exists for a given set of constraints. This is useful for formal verification tasks where you need to prove the correctness of systems, such as verifying hardware circuits or ensuring software correctness.</p></li>
<li><p>Mathematical methods:</p>
<ul>
<li><p><strong>SAT Solvers</strong>: Z3 primarily uses <strong>Boolean satisfiability</strong> solvers, which handle the basic logic of whether a problem can be satisfied given the constraints. Z3 applies CDCL techniques to improve efficiency in solving SAT problems.</p></li>
<li><p><strong>Theory Solvers</strong>:</p>
<ul>
<li><p><strong>Linear arithmetic solvers</strong>: These handle systems of linear inequalities and equations.</p></li>
<li><p><strong>Non-linear arithmetic solvers</strong>: For handling polynomial constraints.</p></li>
<li><p><strong>Bit-vector theory</strong>: This theory is used to model and verify properties of hardware systems where operations are performed on fixed-length bit-vectors.</p></li>
<li><p><strong>Array theory</strong>: Provides reasoning about operations on arrays, such as read and write operations, making Z3 suitable for reasoning about data structures and memory models.</p></li>
</ul></li>
<li><p><strong>Optimization algorithms</strong>: Z3’s <code>Optimize()</code> module uses <strong>linear programming</strong> and <strong>mixed-integer programming</strong> techniques to find solutions that optimize an objective function under a set of constraints.</p></li>
<li><p><strong>Quantifier elimination</strong>: Z3 implements methods for handling quantifiers in first-order logic, allowing it to reason about quantified statements efficiently.</p></li>
</ul></li>
</ul>
</section>
<section id="complete-example" class="level3">
<h3 class="anchored" data-anchor-id="complete-example">Complete example</h3>
<div class="sourceCode" id="annotated-cell-7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-7-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int, Solver, And, Or, sat</span>
<span id="annotated-cell-7-2"></span>
<span id="annotated-cell-7-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-7-4" class="code-annotation-target">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-7-5" class="code-annotation-target">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span>
<span id="annotated-cell-7-6"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-7-7" class="code-annotation-target">solver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Solver()</span>
<span id="annotated-cell-7-8"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-7-9" class="code-annotation-target">solver.add(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-7-10" class="code-annotation-target">solver.add(And(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-7-11" class="code-annotation-target">solver.add(Or(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="annotated-cell-7-12"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-7-13" class="code-annotation-target"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> solver.check() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sat:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="9" onclick="event.preventDefault();">9</a><span id="annotated-cell-7-14" class="code-annotation-target">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solver.model()</span>
<span id="annotated-cell-7-15">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="10" onclick="event.preventDefault();">10</a><span id="annotated-cell-7-16" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Solution: X = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(X)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Y = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(Y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-7-17"></span>
<span id="annotated-cell-7-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="11" onclick="event.preventDefault();">11</a><span id="annotated-cell-7-19" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No solution found"</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-7" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="1" data-code-annotation="1">Import the required Z3 components: <code>Int</code>, <code>Solver</code>, <code>And</code>, <code>Or</code>, and <code>sat</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="4" data-code-annotation="2">Define an integer variable <code>X</code> using Z3’s <code>Int</code> constructor.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="5" data-code-annotation="3">Define another integer variable <code>Y</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="7" data-code-annotation="4">Set up the Z3 solver using the <code>Solver()</code> class to manage and solve constraints.</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="9" data-code-annotation="5">Add an arithmetic constraint: <code>X + Y</code> must equal 10.</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="10" data-code-annotation="6">Add a logical constraint: Both <code>X</code> and <code>Y</code> must be greater than 0.</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="11" data-code-annotation="7">Add a logical disjunction: Either <code>X</code> is equal to 3, or <code>Y</code> is equal to 7.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="13" data-code-annotation="8">Check if the constraints are satisfiable using <code>solver.check()</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="14" data-code-annotation="9">Retrieve the model (solution) if the constraints are satisfiable.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="10">10</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="16" data-code-annotation="10">Print the values of <code>X</code> and <code>Y</code> from the model (solution). Output: <code>Solution: X = 3, Y = 7</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="11">11</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="19" data-code-annotation="11">Print a message if no solution is found.</span>
</dd>
</dl>
</section>
<section id="uninterpreted-functions" class="level3">
<h3 class="anchored" data-anchor-id="uninterpreted-functions">Uninterpreted functions</h3>
<p><strong>Uninterpreted functions</strong> in Z3 allow you to work with symbolic functions without specifying their exact definition or behavior. They are useful in scenarios where you want to reason about relationships between variables without providing the actual function’s implementation. Z3 treats these functions symbolically, meaning you only impose constraints on the inputs and outputs rather than defining the internal workings of the function.</p>
<p>Uninterpreted functions are commonly used in <strong>formal verification</strong> (e.g., verifying the correctness of algorithms or systems), <strong>theory reasoning</strong>, and <strong>model checking</strong>, where you care about the relationships between function calls but not necessarily their specific behavior.</p>
<p>In Z3, you can define an uninterpreted function using <code>Function()</code> and specify the domain and range of the function. You can then impose constraints on how the function behaves for certain inputs and reason about its properties.</p>
<p>Suppose we have a function <code>f(x)</code> which maps integers to integers. We don’t know the exact behavior of <code>f(x)</code>, but we want to reason about its properties—specifically, we want to know if <code>f(x)</code> satisfies certain conditions.</p>
<p>Here’s how you define and work with an uninterpreted function in Z3:</p>
<div class="sourceCode" id="annotated-cell-8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-8-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int, Function, Solver, IntSort, sat</span>
<span id="annotated-cell-8-2"></span>
<span id="annotated-cell-8-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-8-4" class="code-annotation-target">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-8-5" class="code-annotation-target">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="annotated-cell-8-6"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-8-7" class="code-annotation-target">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Function(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f'</span>, IntSort(), IntSort())</span>
<span id="annotated-cell-8-8"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-8-9" class="code-annotation-target">solver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Solver()</span>
<span id="annotated-cell-8-10"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-8-11" class="code-annotation-target">solver.add(f(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-8-12" class="code-annotation-target">solver.add(f(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-8-13" class="code-annotation-target">solver.add(f(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="9" onclick="event.preventDefault();">9</a><span id="annotated-cell-8-14" class="code-annotation-target">solver.add(f(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="annotated-cell-8-15"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="10" onclick="event.preventDefault();">10</a><span id="annotated-cell-8-16" class="code-annotation-target"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> solver.check() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sat:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="11" onclick="event.preventDefault();">11</a><span id="annotated-cell-8-17" class="code-annotation-target">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solver.model()</span>
<span id="annotated-cell-8-18">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="12" onclick="event.preventDefault();">12</a><span id="annotated-cell-8-19" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Solution: f(x) = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(f(x))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, y = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="13" onclick="event.preventDefault();">13</a><span id="annotated-cell-8-20" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"f(3) = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(f(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, f(4) = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(f(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, f(7) = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>evaluate(f(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-8-21">  </span>
<span id="annotated-cell-8-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="14" onclick="event.preventDefault();">14</a><span id="annotated-cell-8-23" class="code-annotation-target">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No solution found"</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-8" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="1" data-code-annotation="1">Import required components from the Z3 solver library.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="4" data-code-annotation="2">Define integer variable <code>x</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="5" data-code-annotation="3">Define integer variable <code>y</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="7" data-code-annotation="4">Define an uninterpreted function <code>f</code> that takes an integer and returns an integer.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="9" data-code-annotation="5">Set up the solver by initializing an instance of the <code>Solver()</code> class.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="11" data-code-annotation="6">Add a constraint specifying that <code>f(x)</code> is equal to <code>y + 2</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="12" data-code-annotation="7">Add a constraint specifying that <code>f(3)</code> must equal <code>5</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="13" data-code-annotation="8">Add a constraint specifying that <code>f(4)</code> must equal <code>6</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="14" data-code-annotation="9">Add a constraint specifying that <code>f(7)</code> must equal <code>10</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="10">10</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="16" data-code-annotation="10">Check if the constraints are satisfiable.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="11">11</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="17" data-code-annotation="11">Retrieve the model (solution) if the constraints are satisfiable.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="12">12</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="19" data-code-annotation="12">Print the solution for <code>f(x)</code> and <code>y</code>. Output: <code>Solution: f(x) = 5, y = 3</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="13">13</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="20" data-code-annotation="13">Print the solution for <code>f(3)</code>, <code>f(4)</code>, and <code>f(7)</code>. Output: <code>f(3) = 5, f(4) = 6, f(7) = 10</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="14">14</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="23" data-code-annotation="14">Print a message if no solution is found.</span>
</dd>
</dl>
<p>If the solver finds a solution, you will see something like:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource plaintext number-lines code-with-copy"><code class="sourceCode"><span id="cb3-1">Solution: f(x) = 5, y = 3</span>
<span id="cb3-2">f(3) = 5, f(4) = 6, f(7) = 10</span></code></pre></div>
<p>This shows that <code>f(3)</code>, <code>f(4)</code>, and <code>f(7)</code> satisfy the imposed constraints, while <code>f(x)</code> is defined symbolically as <code>y + 2</code> for an arbitrary <code>x</code>.</p>
<p>Use cases for uninterpreted functions:</p>
<ul>
<li><p><strong>Abstract Reasoning</strong>: Uninterpreted functions allow you to reason abstractly about the behavior of functions without specifying their exact definitions.</p></li>
<li><p><strong>Formal verification</strong>: In program verification, you can model abstract operations or methods as uninterpreted functions and reason about their effects on program state.</p></li>
<li><p><strong>Theorem proving</strong>: They can be used in automated theorem proving, where certain properties of functions are inferred based on logical constraints.</p></li>
</ul>
</section>
</section>
<section id="sudoku-time" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="sudoku-time">Sudoku time!</h2>
<section id="intro" class="level3">
<h3 class="anchored" data-anchor-id="intro">Intro</h3>
<p><strong>Sudoku</strong> is a logic-based number placement puzzle that can be played on grids of various sizes. The goal is to fill the grid such that each row, each column, and each subgrid contains a complete set of numbers without any repetition.</p>
<p>Sudoku puzzles can be played on any <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20n"> grid, where <img src="https://latex.codecogs.com/png.latex?n"> is the square of an integer (e.g., 4, 9, 16). For example, in a <img src="https://latex.codecogs.com/png.latex?4%20%5Ctimes%204"> Sudoku, you fill the grid with the numbers 1 to 4, in a <img src="https://latex.codecogs.com/png.latex?9%20%5Ctimes%209"> Sudoku (the standard version), you fill the grid with the numbers 1 to 9, and so on.</p>
<p>General Sudoku rules:</p>
<ol type="1">
<li><p>Each row must contain a complete set of numbers from 1 to <img src="https://latex.codecogs.com/png.latex?n">, without repetition.</p></li>
<li><p>Each column must contain a complete set of numbers from 1 to <img src="https://latex.codecogs.com/png.latex?n">, without repetition.</p></li>
<li><p>Each subgrid (which is typically a <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7Bn%7D%20%5Ctimes%20%5Csqrt%7Bn%7D"> box) must also contain a complete set of numbers from 1 to <img src="https://latex.codecogs.com/png.latex?n">, without repetition.</p></li>
</ol>
<p>Grid sizes:</p>
<ul>
<li><p><strong>Mini Sudoku</strong>: This is a smaller version with <img src="https://latex.codecogs.com/png.latex?4%20%5Ctimes%204"> grid, ideal for beginners. The subgrids are <img src="https://latex.codecogs.com/png.latex?2%20%5Ctimes%202">, and the puzzle uses digits 1 to 4.</p></li>
<li><p><strong>Standard Sudoku</strong>: This is the most common version, with <img src="https://latex.codecogs.com/png.latex?9%20%5Ctimes%209"> grid, <img src="https://latex.codecogs.com/png.latex?3%20%5Ctimes%203"> subgrids and digits 1 to 9.</p></li>
<li><p><strong>Large Sudoku</strong>: This uses larger grids, <img src="https://latex.codecogs.com/png.latex?16%20%5Ctimes%2016"> grid, <img src="https://latex.codecogs.com/png.latex?4%20%5Ctimes%204"> subgrids, and digits 1 to 16.</p></li>
<li><p><strong>Extreme Sudoku</strong>: Rarely seen, this massive <img src="https://latex.codecogs.com/png.latex?25%20%5Ctimes%2025"> grid uses <img src="https://latex.codecogs.com/png.latex?5%20%5Ctimes%205"> subgrids and digits 1 to 25, and is extremely challenging.</p></li>
</ul>
<p>The <strong>difficulty of a Sudoku puzzle</strong> depends on several factors:</p>
<ul>
<li><p><strong>Number of pre-filled cells</strong>: Easier puzzles have more numbers pre-filled, leaving fewer cells to solve. Harder puzzles have fewer pre-filled cells, requiring more deduction and logic.</p></li>
<li><p><strong>Type of logical strategies required</strong>:</p>
<ul>
<li><p><strong>Easy puzzles</strong>: Can often be solved using basic strategies like scanning rows, columns, and subgrids for obvious placements.</p></li>
<li><p><strong>Medium puzzles</strong>: May require more advanced techniques like <strong>naked pairs</strong> or <strong>hidden pairs</strong> (where two cells in a row, column, or subgrid must contain specific numbers).</p></li>
<li><p><strong>Hard puzzles</strong>: Often involve techniques like <strong>X-Wing</strong>, <strong>Swordfish</strong>, or <strong>backtracking</strong> where trial and error may be needed to determine the correct number.</p></li>
<li><p><strong>Extreme puzzles</strong>: In extreme cases, solving may require highly complex strategies and involve much deeper logical deductions.</p></li>
</ul></li>
</ul>
</section>
<section id="lets-start-playing" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="lets-start-playing">Let’s start playing</h3>
<p>Here is the Python code for solving a Sudoku <img src="https://latex.codecogs.com/png.latex?9%20%5Ctimes%209"> puzzle<sup>2</sup> using Z3, including a function that takes the puzzle as input and returns the solved puzzle, along with a main function that demonstrates its use.</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;In the world of standard <img src="https://latex.codecogs.com/png.latex?9%20%5Ctimes%209"> Sudoku puzzles, one of the most fascinating mathematical discoveries is the 17-Clue Theorem. In 2012, researchers Gary McGuire, Bastian Tugemann, and Gilles Civario proved through exhaustive computation that 17 is the minimum number of clues required for a standard <img src="https://latex.codecogs.com/png.latex?9%20%5Ctimes%209"> Sudoku puzzle to have a unique solution. See McGuire, G., Tugemann, B., &amp; Civario, G. (2014). There Is No 16-Clue Sudoku: Solving the Sudoku Minimum Number of Clues Problem via Hitting Set Enumeration. Experimental Mathematics, 23(2), 190–217. <a href="https://doi.org/10.1080/10586458.2013.870056">DOI</a></p></div></div><p>Let’s solve the following:</p>
<table class="text-center mx-auto table" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000; border-top: 3px solid #000">5</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-top: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">7</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-top: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-top: 3px solid #000">0</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">6</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px">1</td>
<td style="border: 1px solid #000; padding: 5px">9</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">5</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000; border-left: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">9</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">8</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">6</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000; border-right: 3px solid #000">0</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">8</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px">6</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">3</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px">8</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">1</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000; border-left: 3px solid #000">7</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000; border-right: 3px solid #000">6</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px">6</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px">2</td>
<td style="border: 1px solid #000; padding: 5px">8</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px">4</td>
<td style="border: 1px solid #000; padding: 5px">1</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">9</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">5</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">8</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">7</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">9</td>
</tr>
</tbody>
</table>
<p>Code that leverages Z3 is:</p>
<div class="sourceCode" id="annotated-cell-10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-10-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int, Solver, And, Distinct, sat</span>
<span id="annotated-cell-10-2"></span>
<span id="annotated-cell-10-3"></span>
<span id="annotated-cell-10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to check if the solved Sudoku is correct</span></span>
<span id="annotated-cell-10-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_valid_sudoku(solution):</span>
<span id="annotated-cell-10-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combined row and column checks in a single loop</span></span>
<span id="annotated-cell-10-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>):</span>
<span id="annotated-cell-10-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check distinct values in row</span></span>
<span id="annotated-cell-10-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(solution[i])) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>:  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-10-10" class="code-annotation-target">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="annotated-cell-10-11">    </span>
<span id="annotated-cell-10-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check distinct values in column</span></span>
<span id="annotated-cell-10-13">    col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [solution[j][i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)]</span>
<span id="annotated-cell-10-14"></span>
<span id="annotated-cell-10-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(col)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-10-16" class="code-annotation-target">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="annotated-cell-10-17"></span>
<span id="annotated-cell-10-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check 3x3 subgrids</span></span>
<span id="annotated-cell-10-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="annotated-cell-10-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="annotated-cell-10-21">      subgrid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [solution[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> di][j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dj] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> di <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> dj <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)]</span>
<span id="annotated-cell-10-22"></span>
<span id="annotated-cell-10-23">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(subgrid)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-10-24" class="code-annotation-target">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="annotated-cell-10-25"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-10-26" class="code-annotation-target">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="annotated-cell-10-27"></span>
<span id="annotated-cell-10-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> solve_sudoku(puzzle):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-10-29" class="code-annotation-target">  X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[Int(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"x_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)]</span>
<span id="annotated-cell-10-30">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-10-31" class="code-annotation-target">  solver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Solver()</span>
<span id="annotated-cell-10-32">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-10-33" class="code-annotation-target">  solver.add([And(X[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, X[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)])</span>
<span id="annotated-cell-10-34">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="9" onclick="event.preventDefault();">9</a><span id="annotated-cell-10-35" class="code-annotation-target">  solver.add([X[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> puzzle[i][j] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> puzzle[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="annotated-cell-10-36">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="10" onclick="event.preventDefault();">10</a><span id="annotated-cell-10-37" class="code-annotation-target">  solver.add([Distinct(X[i]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Row distinct</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="11" onclick="event.preventDefault();">11</a><span id="annotated-cell-10-38" class="code-annotation-target">  solver.add([Distinct([X[i][j] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Column distinct</span></span>
<span id="annotated-cell-10-39">  solver.add([Distinct([X[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> di][j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dj] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> di <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> dj <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)])</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="12" onclick="event.preventDefault();">12</a><span id="annotated-cell-10-40" class="code-annotation-target">              <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subgrid distinct</span></span>
<span id="annotated-cell-10-41">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="13" onclick="event.preventDefault();">13</a><span id="annotated-cell-10-42" class="code-annotation-target">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> solver.check() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sat:</span>
<span id="annotated-cell-10-43">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solver.model()</span>
<span id="annotated-cell-10-44"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="14" onclick="event.preventDefault();">14</a><span id="annotated-cell-10-45" class="code-annotation-target">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[model.evaluate(X[i][j]).as_long() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)]</span>
<span id="annotated-cell-10-46"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="15" onclick="event.preventDefault();">15</a><span id="annotated-cell-10-47" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="annotated-cell-10-48"></span>
<span id="annotated-cell-10-49">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="16" onclick="event.preventDefault();">16</a><span id="annotated-cell-10-50" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="annotated-cell-10-51"></span>
<span id="annotated-cell-10-52"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="annotated-cell-10-53">  puzzle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="annotated-cell-10-54">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="annotated-cell-10-55">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="annotated-cell-10-56">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="annotated-cell-10-57">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],</span>
<span id="annotated-cell-10-58">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="annotated-cell-10-59">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>],</span>
<span id="annotated-cell-10-60">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="annotated-cell-10-61">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],</span>
<span id="annotated-cell-10-62">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="17" onclick="event.preventDefault();">17</a><span id="annotated-cell-10-63" class="code-annotation-target">  ]</span>
<span id="annotated-cell-10-64"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="18" onclick="event.preventDefault();">18</a><span id="annotated-cell-10-65" class="code-annotation-target">  solved <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solve_sudoku(puzzle)</span>
<span id="annotated-cell-10-66"></span>
<span id="annotated-cell-10-67">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> solved:</span>
<span id="annotated-cell-10-68">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> solved:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="19" onclick="event.preventDefault();">19</a><span id="annotated-cell-10-69" class="code-annotation-target">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span>
<span id="annotated-cell-10-70"></span>
<span id="annotated-cell-10-71">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the solution is valid</span></span>
<span id="annotated-cell-10-72">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_valid_sudoku(solved):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="20" onclick="event.preventDefault();">20</a><span id="annotated-cell-10-73" class="code-annotation-target">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The solution is valid!"</span>)</span>
<span id="annotated-cell-10-74"></span>
<span id="annotated-cell-10-75">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="21" onclick="event.preventDefault();">21</a><span id="annotated-cell-10-76" class="code-annotation-target">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The solution is not valid!"</span>)</span>
<span id="annotated-cell-10-77"></span>
<span id="annotated-cell-10-78">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="22" onclick="event.preventDefault();">22</a><span id="annotated-cell-10-79" class="code-annotation-target">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No solution found."</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-10" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="1" data-code-annotation="1">Import required components from the Z3 solver library.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="10" data-code-annotation="2">Check distinct values in row: Ensures each row contains distinct values (1 to 9).</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="16" data-code-annotation="3">Check distinct values in column: Ensures each column contains distinct values (1 to 9).</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="24" data-code-annotation="4">Check 3x3 subgrids: Ensures each 3x3 subgrid contains distinct values.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="26" data-code-annotation="5">Return <code>True</code> if the solution is valid, otherwise return <code>False</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="29" data-code-annotation="6">Create a <img src="https://latex.codecogs.com/png.latex?9%20%5Ctimes%209"> matrix of integer variables using Z3’s <code>Int</code> to represent each cell.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="31" data-code-annotation="7">Initialize the Z3 solver to begin solving the problem.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="33" data-code-annotation="8">Add constraints to ensure that each cell value is between 1 and 9.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="35" data-code-annotation="9">Add constraints for the pre-filled cells (the given values from the puzzle) to keep them unchanged.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="10">10</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="37" data-code-annotation="10">Add row constraints: Each row must contain distinct values.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="11">11</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="38" data-code-annotation="11">Add column constraints: Each column must contain distinct values.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="12">12</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="40" data-code-annotation="12">Add subgrid constraints: Each 3x3 subgrid must contain distinct values.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="13">13</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="42" data-code-annotation="13">Check if the Sudoku is solvable using the Z3 solver.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="14">14</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="45" data-code-annotation="14">Extract the solution: If a solution is found, extract it from the model.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="15">15</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="47" data-code-annotation="15">Return the solved puzzle.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="16">16</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="50" data-code-annotation="16">Return <code>None</code> if no solution is found.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="17">17</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="63" data-code-annotation="17">Input Sudoku puzzle: A <img src="https://latex.codecogs.com/png.latex?9%20%5Ctimes%209"> grid where <code>0</code> represents empty cells.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="18">18</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="65" data-code-annotation="18">Solve the puzzle: Call the <code>solve_sudoku()</code> function.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="19">19</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="69" data-code-annotation="19">Print the solved puzzle.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="20">20</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="73" data-code-annotation="20">Check if the solution is valid using the <code>is_valid_sudoku()</code> function.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="21">21</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="76" data-code-annotation="21">Print an error message if the solution is not valid.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="22">22</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="79" data-code-annotation="22">Print “No solution found” if no solution can be found by the solver.</span>
</dd>
</dl>
<p>Running the code, Z3 gives us:</p>
<table class="text-center mx-auto table" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000; border-top: 3px solid #000">5</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-top: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">6</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">7</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-top: 3px solid #000">8</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">9</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-top: 3px solid #000">2</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">6</td>
<td style="border: 1px solid #000; padding: 5px">7</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px">1</td>
<td style="border: 1px solid #000; padding: 5px">9</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">5</td>
<td style="border: 1px solid #000; padding: 5px">3</td>
<td style="border: 1px solid #000; padding: 5px">4</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">8</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000; border-left: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">9</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">8</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">5</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">6</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000; border-right: 3px solid #000">7</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">8</td>
<td style="border: 1px solid #000; padding: 5px">5</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">9</td>
<td style="border: 1px solid #000; padding: 5px">7</td>
<td style="border: 1px solid #000; padding: 5px">6</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px">4</td>
<td style="border: 1px solid #000; padding: 5px">2</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">3</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px">2</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">6</td>
<td style="border: 1px solid #000; padding: 5px">8</td>
<td style="border: 1px solid #000; padding: 5px">5</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px">7</td>
<td style="border: 1px solid #000; padding: 5px">9</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">1</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000; border-left: 3px solid #000">7</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">9</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">8</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">5</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000; border-right: 3px solid #000">6</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">9</td>
<td style="border: 1px solid #000; padding: 5px">6</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px">5</td>
<td style="border: 1px solid #000; padding: 5px">3</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">7</td>
<td style="border: 1px solid #000; padding: 5px">2</td>
<td style="border: 1px solid #000; padding: 5px">8</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">4</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px">8</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">7</td>
<td style="border: 1px solid #000; padding: 5px">4</td>
<td style="border: 1px solid #000; padding: 5px">1</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">9</td>
<td style="border: 1px solid #000; padding: 5px">6</td>
<td style="border: 1px solid #000; padding: 5px">3</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">5</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000; border-bottom: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">5</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">8</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">6</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">7</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">9</td>
</tr>
</tbody>
</table>
</section>
<section id="some-improvements" class="level3">
<h3 class="anchored" data-anchor-id="some-improvements">Some improvements</h3>
<p>Now we’ll modify the code to handle Sudoku grids of different sizes and provide all solutions.</p>
<p>The provided example is a mini Sudoku:</p>
<table class="text-center mx-auto table" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000; border-left: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000; border-right: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000; border-right: 3px solid #000">4</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">0</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">0</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000; border-bottom: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">0</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">1</td>
</tr>
</tbody>
</table>
<p>And the improved code:</p>
<div class="sourceCode" id="annotated-cell-11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-11-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> z3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Int, Solver, And, Distinct, Or, sat</span>
<span id="annotated-cell-11-2"></span>
<span id="annotated-cell-11-3"></span>
<span id="annotated-cell-11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to check if a given Sudoku solution is valid</span></span>
<span id="annotated-cell-11-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_valid_sudoku(solution):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-11-6" class="code-annotation-target">  n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(solution)</span>
<span id="annotated-cell-11-7"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-11-8" class="code-annotation-target">  sqrt_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="annotated-cell-11-9">  </span>
<span id="annotated-cell-11-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if each row contains distinct values</span></span>
<span id="annotated-cell-11-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> solution:</span>
<span id="annotated-cell-11-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(row)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> n <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> row): </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-11-13" class="code-annotation-target">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="annotated-cell-11-14">  </span>
<span id="annotated-cell-11-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if each column contains distinct values</span></span>
<span id="annotated-cell-11-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="annotated-cell-11-17">    col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [solution[i][j] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)]  </span>
<span id="annotated-cell-11-18"></span>
<span id="annotated-cell-11-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(col)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> n:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-11-20" class="code-annotation-target">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="annotated-cell-11-21"></span>
<span id="annotated-cell-11-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if each sqrt_n x sqrt_n subgrid contains distinct values</span></span>
<span id="annotated-cell-11-23">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n, sqrt_n):</span>
<span id="annotated-cell-11-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n, sqrt_n):</span>
<span id="annotated-cell-11-25">      subgrid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []  </span>
<span id="annotated-cell-11-26"></span>
<span id="annotated-cell-11-27">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> di <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(sqrt_n):</span>
<span id="annotated-cell-11-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> dj <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(sqrt_n):</span>
<span id="annotated-cell-11-29">          subgrid.append(solution[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> di][j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dj])</span>
<span id="annotated-cell-11-30"></span>
<span id="annotated-cell-11-31">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(subgrid)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> n:  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-11-32" class="code-annotation-target">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="annotated-cell-11-33"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-11-34" class="code-annotation-target">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="annotated-cell-11-35"></span>
<span id="annotated-cell-11-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to solve Sudoku puzzles where size is determined from the puzzle</span></span>
<span id="annotated-cell-11-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> solve_sudoku(puzzle):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-11-38" class="code-annotation-target">  n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(puzzle)</span>
<span id="annotated-cell-11-39">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="9" onclick="event.preventDefault();">9</a><span id="annotated-cell-11-40" class="code-annotation-target">  X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[Int(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"x_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)]</span>
<span id="annotated-cell-11-41">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="10" onclick="event.preventDefault();">10</a><span id="annotated-cell-11-42" class="code-annotation-target">  solver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Solver()</span>
<span id="annotated-cell-11-43">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="11" onclick="event.preventDefault();">11</a><span id="annotated-cell-11-44" class="code-annotation-target">  solver.add([And(X[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, X[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)])</span>
<span id="annotated-cell-11-45">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="12" onclick="event.preventDefault();">12</a><span id="annotated-cell-11-46" class="code-annotation-target">  solver.add([X[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> puzzle[i][j] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> puzzle[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="annotated-cell-11-47">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="13" onclick="event.preventDefault();">13</a><span id="annotated-cell-11-48" class="code-annotation-target">  solver.add([Distinct(X[i]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)])</span>
<span id="annotated-cell-11-49">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="14" onclick="event.preventDefault();">14</a><span id="annotated-cell-11-50" class="code-annotation-target">  solver.add([Distinct([X[i][j] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)])</span>
<span id="annotated-cell-11-51">  </span>
<span id="annotated-cell-11-52">  sqrt_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="annotated-cell-11-53"></span>
<span id="annotated-cell-11-54">  solver.add([Distinct([X[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> di][j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dj] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> di <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(sqrt_n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> dj <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(sqrt_n)])</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="15" onclick="event.preventDefault();">15</a><span id="annotated-cell-11-55" class="code-annotation-target">              <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n, sqrt_n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n, sqrt_n)])</span>
<span id="annotated-cell-11-56">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="16" onclick="event.preventDefault();">16</a><span id="annotated-cell-11-57" class="code-annotation-target">  solutions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-11-58"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="17" onclick="event.preventDefault();">17</a><span id="annotated-cell-11-59" class="code-annotation-target">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> solver.check() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sat:</span>
<span id="annotated-cell-11-60">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solver.model()</span>
<span id="annotated-cell-11-61"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="18" onclick="event.preventDefault();">18</a><span id="annotated-cell-11-62" class="code-annotation-target">    solution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[model.evaluate(X[i][j]).as_long() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)]</span>
<span id="annotated-cell-11-63"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="19" onclick="event.preventDefault();">19</a><span id="annotated-cell-11-64" class="code-annotation-target">    solutions.append(solution)</span>
<span id="annotated-cell-11-65"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="20" onclick="event.preventDefault();">20</a><span id="annotated-cell-11-66" class="code-annotation-target">    solver.add(Or([X[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> solution[i][j] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)]))</span>
<span id="annotated-cell-11-67">  </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="21" onclick="event.preventDefault();">21</a><span id="annotated-cell-11-68" class="code-annotation-target">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> solutions</span>
<span id="annotated-cell-11-69"></span>
<span id="annotated-cell-11-70"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="annotated-cell-11-71">  puzzle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="annotated-cell-11-72">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],</span>
<span id="annotated-cell-11-73">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="annotated-cell-11-74">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="annotated-cell-11-75">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="22" onclick="event.preventDefault();">22</a><span id="annotated-cell-11-76" class="code-annotation-target">  ]</span>
<span id="annotated-cell-11-77"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="23" onclick="event.preventDefault();">23</a><span id="annotated-cell-11-78" class="code-annotation-target">  solutions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solve_sudoku(puzzle)</span>
<span id="annotated-cell-11-79"></span>
<span id="annotated-cell-11-80">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Found </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(solutions)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> solution(s):"</span>)</span>
<span id="annotated-cell-11-81">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, solution <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(solutions):</span>
<span id="annotated-cell-11-82">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Solution </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:"</span>)</span>
<span id="annotated-cell-11-83"></span>
<span id="annotated-cell-11-84">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> solution:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="24" onclick="event.preventDefault();">24</a><span id="annotated-cell-11-85" class="code-annotation-target">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span>
<span id="annotated-cell-11-86"></span>
<span id="annotated-cell-11-87">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="annotated-cell-11-88">    </span>
<span id="annotated-cell-11-89">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_valid_sudoku(solution):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="25" onclick="event.preventDefault();">25</a><span id="annotated-cell-11-90" class="code-annotation-target">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The solution is valid!"</span>)</span>
<span id="annotated-cell-11-91"></span>
<span id="annotated-cell-11-92">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="26" onclick="event.preventDefault();">26</a><span id="annotated-cell-11-93" class="code-annotation-target">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The solution is not valid!"</span>)</span>
<span id="annotated-cell-11-94"></span>
<span id="annotated-cell-11-95">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-11" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="1" data-code-annotation="1">Import required components from the Z3 solver library.</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="6" data-code-annotation="2">Determine the grid size from the solution passed to <code>is_valid_sudoku</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="8" data-code-annotation="3">Determine subgrid size based on the square root of the grid size (for <img src="https://latex.codecogs.com/png.latex?4%20%5Ctimes%204">, this would be 2x2 subgrids).</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="13" data-code-annotation="4">Check rows: Ensure each row has distinct values between 1 and n.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="20" data-code-annotation="5">Check columns: Ensure each column has distinct values.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="32" data-code-annotation="6">Check subgrids: Ensure each subgrid contains distinct values.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="34" data-code-annotation="7">Return <code>True</code> if all checks pass, meaning the solution is valid.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="38" data-code-annotation="8">Determine puzzle size from the input list. This makes the function adaptable to any Sudoku size (e.g., <img src="https://latex.codecogs.com/png.latex?4%20%5Ctimes%204">, <img src="https://latex.codecogs.com/png.latex?9%20%5Ctimes%209">).<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="40" data-code-annotation="9">Create integer variables to represent each cell in the Sudoku grid.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="10">10</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="42" data-code-annotation="10">Initialize the Z3 solver. # &lt;10&gt;</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="11">11</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="44" data-code-annotation="11">Add constraints to ensure each cell’s value is between 1 and n.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="12">12</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="46" data-code-annotation="12">Add constraints for the pre-filled cells in the puzzle.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="13">13</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="48" data-code-annotation="13">Ensure distinct values in each row.</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="14">14</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="50" data-code-annotation="14">Ensure distinct values in each column.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="15">15</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="55" data-code-annotation="15">Ensure distinct values in each subgrid.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="16">16</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="57" data-code-annotation="16">Initialize list to store all solutions.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="17">17</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="59" data-code-annotation="17">Check if the puzzle is solvable using Z3’s <code>sat</code> check.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="18">18</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="62" data-code-annotation="18">Extract the solution from the model if it’s solvable.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="19">19</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="64" data-code-annotation="19">Store each solution in the <code>solutions</code> list.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="20">20</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="66" data-code-annotation="20">Add constraint to ensure the solver does not return the same solution again.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="21">21</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="68" data-code-annotation="21">Return all found solutions.</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="22">22</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="76" data-code-annotation="22">Define a <img src="https://latex.codecogs.com/png.latex?4%20%5Ctimes%204"> Sudoku puzzle. Empty cells are represented by <code>0</code>.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="23">23</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="78" data-code-annotation="23">Solve the puzzle and automatically determine the size.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="24">24</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="85" data-code-annotation="24">Print each solution.</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="25">25</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="90" data-code-annotation="25">Check if the solution is valid using the <code>is_valid_sudoku()</code> function.</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="26">26</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="93" data-code-annotation="26">Print validation result for each solution.</span>
</dd>
</dl>
<p>The output has two solutions:</p>
<table class="text-center mx-auto table" data-quarto-postprocess="true">
<caption>Solution 1</caption>
<tbody>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000; border-left: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000; border-right: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000; border-right: 3px solid #000">4</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000; border-bottom: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">3</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px">4</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">2</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000; border-bottom: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">1</td>
</tr>
</tbody>
</table>
<p>and</p>
<table class="text-center mx-auto table" data-quarto-postprocess="true">
<caption>Solution 2</caption>
<tbody>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000; border-left: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000; border-right: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-top: 3px solid #000; border-right: 3px solid #000">4</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000; border-bottom: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">2</td>
</tr>
<tr class="odd">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">1</td>
<td style="border: 1px solid #000; padding: 5px">4</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000">3</td>
</tr>
<tr class="even">
<td style="border: 1px solid #000; padding: 5px; border-left: 3px solid #000; border-bottom: 3px solid #000">4</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">3</td>
<td style="border: 1px solid #000; padding: 5px; border-bottom: 3px solid #000">2</td>
<td style="border: 1px solid #000; padding: 5px; border-right: 3px solid #000; border-bottom: 3px solid #000">1</td>
</tr>
</tbody>
</table>
<p>Have fun extending code to KenKen o Kakuro puzzles, or others you like! Enjoy!</p>
</section>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<section id="papers" class="level3">
<h3 class="anchored" data-anchor-id="papers">Papers</h3>
<p>Leonardo Moura and Nikolaj Bjørner. 2009. <strong>Satisfiability Modulo Theories: An Appetizer</strong>. Formal Methods: Foundations and Applications: 12th Brazilian Symposium on Formal Methods, SBMF 2009 Gramado, Brazil, August 19-21, 2009 Revised Selected Papers. Springer-Verlag, Berlin, Heidelberg, 23–36. <a href="https://doi.org/10.1007/978-3-642-10452-7_3">DOI</a></p>
<p>Ganzinger, H., Hagen, G., Nieuwenhuis, R., Oliveras, A., Tinelli, C. (2004). <strong>DPLL(T): Fast Decision Procedures</strong>. In: Alur, R., Peled, D.A. (eds) Computer Aided Verification. CAV 2004. Lecture Notes in Computer Science, vol 3114. Springer, Berlin, Heidelberg. <a href="https://doi.org/10.1007/978-3-540-27813-9_14">DOI</a></p>
<p>Barrett, C., Sebastiani, R., Seshia, S. A., &amp; Tinelli, C. (2009). <strong>Satisfiability modulo theories</strong>. In Handbook of Satisfiability (1 ed., pp.&nbsp;825-885). (Frontiers in Artificial Intelligence and Applications; Vol. 185, No.&nbsp;1). IOS Press. <a href="https://doi.org/10.3233/978-1-58603-929-5-825">DOI</a></p>
</section>
<section id="books" class="level3">
<h3 class="anchored" data-anchor-id="books">Books</h3>
<p>Yurichev, D. (2024). <strong>SAT/SMT</strong> by example. Self-published. <a href="https://smt.st/SAT_SMT_by_example.pdf">Online</a>.</p>
<p><em>If you’re curious about SAT (Boolean Satisfiability) and SMT (Satisfiability Modulo Theories) solvers but don’t want to wade through dense theory, SAT/SMT by Example by Dennis Yurichev is a great pick. This book is all about showing you how to use these solvers in real-world scenarios, with loads of practical examples and hands-on exercises. It’s basically the “learn by doing” approach, which is perfect if you want to see how these tools can solve actual problems without getting lost in too much math.</em><br>
<em>One of the best things about this book is how approachable it is. Yurichev explains things in a straightforward way, making it easy for beginners to pick up on the basics. You’ll get examples that walk you through how to use solvers like Z3, a popular SMT solver, and you’ll find the code snippets helpful if you’re the type who likes to tinker. That said, the book doesn’t shy away from diving deeper. If you already have some experience or are looking to understand more complex topics like symbolic execution or program verification, you’ll find plenty here to chew on. The chapters build on each other nicely, so you won’t feel like you’re being thrown into the deep end without a float.</em><br>
<em>This isn’t a book that’s going to overwhelm you with theoretical details. Instead, it’s packed with practical examples—actual problems and code solutions that show how SAT and SMT solvers are used in real applications.</em> <em>One big plus: the book is free! Yurichev made it available online for anyone to download. This makes it super accessible, whether you’re a student, researcher, or hobbyist. It’s great to have a resource like this that doesn’t put a paywall between you and learning, and the fact that it’s frequently updated makes it even better.</em><br>
<em>While the book covers a lot, it’s pretty focused on Z3, so if you’re looking to learn about other solvers, you might need to supplement with other materials. Also, while it’s beginner-friendly, if you’re totally new to programming or logic, some parts might take a couple of reads to really sink in. But Yurichev’s writing style is clear enough that you’ll probably catch on without too much struggle.</em></p>
<p>Kroening, D., &amp; Strichman, O. (2016). <strong>Decision procedures: An algorithmic point of view</strong> (Texts in Theoretical Computer Science. An EATCS Series). Springer-Verlag Berlin Heidelberg. <a href="https://doi.org/10.1007/978-3-662-50497-0">DOI</a></p>
</section>
<section id="tutorials" class="level3">
<h3 class="anchored" data-anchor-id="tutorials">Tutorials</h3>
<p>Bjørner, N., de Moura, L., Nachmanson, L., &amp; Wintersteiger, C.. <strong>Programming Z3</strong>. Microsoft Research. <a href="https://z3prover.github.io/papers/programmingz3.html">Online</a>.</p>
<p><em>This tutorial provides a programmer’s introduction to the Satisfiability Modulo Theories Solver Z3. It describes how to use Z3 through scripts, provided in the Python scripting language, and it describes several of the algorithms underlying the decision procedures within Z3. It aims to broadly cover almost all available features of Z3 and the essence of the underlying algorithms.</em></p>
<p><a href="https://microsoft.github.io/z3guide/"><strong>Z3 Guide</strong></a>.</p>
<p><em>Online tutorial of Z3 from Microsoft.</em></p>
</section>
<section id="standards" class="level3">
<h3 class="anchored" data-anchor-id="standards">Standards</h3>
<p><a href="https://smt-lib.org/"><strong>SMT-LIB</strong></a>.</p>
<p><em><strong>SMT-LIB</strong> is a standard format and set of benchmarks used for specifying and solving problems in the context of <strong>SMT</strong>. The <strong>purpose of SMT-LIB</strong> is to:</em> <em>1. <strong>Standardize the Language</strong>: It provides a uniform language for writing problems and formulas to ensure that different SMT solvers can understand the same input format. This allows solvers to be compared and used interchangeably on the same problem sets.</em><br>
<em>2. <strong>Encourage Solver Development</strong>: By offering a large set of standardized benchmarks, SMT-LIB promotes the development of more efficient SMT solvers, as developers can use these benchmarks to test and improve their tools.</em><br>
<em>3. <strong>Promote Research and Collaboration</strong>: Researchers can use SMT-LIB as a shared resource for testing new theories, algorithms, and solvers. It facilitates collaboration by offering a common platform for problem instances, making it easier to compare results.</em><br>
<em>4. <strong>Provide Tool Support</strong>: SMT-LIB includes support for specifying problems, as well as querying and interacting with SMT solvers, helping in automation and making solvers more accessible in various fields, including verification, artificial intelligence, and formal methods.</em><br>
<em>SMT-LIB is widely used in applications such as software and hardware verification, automated reasoning, formal methods, and program analysis.</em></p>
</section>
<section id="code" class="level3">
<h3 class="anchored" data-anchor-id="code">Code</h3>
<p><a href="https://github.com/Z3Prover/z3"><strong>Z3</strong></a>.</p>
<p><em>Z3 is a theorem prover from Microsoft Research. It is licensed under the MIT license.</em></p>
<p><a href="https://cvc5.github.io/"><strong>cvc5</strong></a>.</p>
<p><em>cvc5 is an efficient open-source automatic theorem prover for Satisfiability Modulo Theories (SMT) problems. It can be used to prove the satisfiability (or, dually, the validity) of first-order formulas with respect to (combinations of) a variety of useful background theories. It further provides a Syntax-Guided Synthesis (SyGuS) engine to synthesize functions with respect to background theories and their combinations.</em></p>


</section>
</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/">CC BY-NC-ND 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{montano2024,
  author = {Montano, Antonio},
  title = {Sudoku and {Satisfiability} {Modulo} {Theories}},
  date = {2024-09-05},
  url = {https://antomon.github.io/posts/satisfiability-modulo-theories-sudoku/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-montano2024" class="csl-entry quarto-appendix-citeas">
Montano, Antonio. 2024. <span>“Sudoku and Satisfiability Modulo
Theories.”</span> September 5, 2024. <a href="https://antomon.github.io/posts/satisfiability-modulo-theories-sudoku/">https://antomon.github.io/posts/satisfiability-modulo-theories-sudoku/</a>.
</div></div></section></div> ]]></description>
  <category>fun</category>
  <category>mathematics</category>
  <category>Python</category>
  <category>tutorial</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/satisfiability-modulo-theories-sudoku/</guid>
  <pubDate>Wed, 04 Sep 2024 22:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/satisfiability-modulo-theories-sudoku/smt-sudoku.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>The Relationship Between Category Theory, Lambda Calculus, and Functional Programming in Haskell</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/category-theory-functional-programming-compositionality/</link>
  <description><![CDATA[ 






<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://antomon.github.io/posts/category-theory-functional-programming-compositionality/monad_diagram.webp" class="img-fluid" data-fig-format="png,webp"></p>
</div></div><section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Functional programming is often praised for its mathematical purity, elegance, and compositional nature. Among the languages that embody these principles, <strong>Haskell</strong> stands out for its deep roots in <strong>lambda calculus</strong> and <strong>category theory</strong>. These mathematical frameworks not only shape how Haskell programs are structured but also enable powerful abstractions like <strong>higher-order functions</strong>, <strong>monads</strong>, and <strong>type systems</strong>. Central to this relationship is the concept of <strong>composition</strong>, which serves as the fundamental glue connecting these ideas and facilitating the construction of complex systems from simple components.</p>
<p>This post explores the relationship between category theory, lambda calculus, and Haskell, one of the most widely used functional programming languages, emphasizing how the principle of compositionality underlies both the theoretical and practical aspects of functional programming.</p>
</section>
<section id="lambda-calculus-the-foundation-of-functional-programming" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="lambda-calculus-the-foundation-of-functional-programming">Lambda calculus: the foundation of functional programming</h2>
<p><strong>Lambda calculus</strong> is a formal system developed by <strong>Alonzo Church</strong><sup>1</sup> in the 1930s as a mathematical framework to study functions, their definitions, and applications. It serves as the foundation of <strong>functional programming</strong> because it provides a minimalistic but powerful model of computation based on the notion of <strong>functions</strong>. In lambda calculus, functions are treated as first-class citizens, meaning they can be passed as arguments, returned as results, and composed to form new functions.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;Church A. “An Unsolvable Problem of Elementary Number Theory” <em>American Journal of Mathematics</em> 58, no. 2 (1936): 345-363. DOI: <a href="https://doi.org/10.2307/2371045">10.2307/2371045</a>.</p></div></div><p>Lambda calculus consists of three fundamental constructs, expressed here using Haskell notation:</p>
<ol type="1">
<li><p><strong>Variables</strong>, such as <code>x</code>, which represent identifiers or placeholders for values.</p></li>
<li><p><strong>Abstractions</strong>, like <code>\x -&gt; x + 1</code>, which define anonymous functions that map an input variable, in this case <code>x</code>, to an expression, in this case <code>x + 1</code>. These abstractions encapsulate a computation that can be reused without explicitly naming the function.</p></li>
<li><p><strong>Applications</strong>, such as <code>\x -&gt; x + 1 3</code>, where the function <code>\x -&gt; x + 1</code> is applied to the argument <code>3</code>. This operation results in <code>3 + 1</code>, producing the value <code>4</code>. Applications enable the actual execution of functions by providing them with input values.</p></li>
</ol>
<p>This simplicity allows lambda calculus to model complex computations using only functions, making it a natural fit for functional programming. In Haskell, lambda calculus is reflected in <strong>lambda expressions</strong>, which are anonymous functions used to create function definitions on the fly. For instance, <code>\x -&gt; x + 1</code> is a lambda expression that represents a function taking a single argument <code>x</code> and returning <code>x + 1</code>. Lambda expressions allow functions to be passed as arguments to other functions and returned as results, promoting higher-order functions. For example, in Haskell, you can write a function <code>applyTwice</code>, which takes a function and an argument, and applies the function twice to the argument:</p>
<div class="sourceCode" id="annotated-cell-1" style="background: #f1f3f5;"><pre class="sourceCode numberSource haskell code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode haskell"><a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-1-1" class="code-annotation-target"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">applyTwice ::</span> (a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-1-2" class="code-annotation-target">applyTwice f x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> f (f x)</span>
<span id="annotated-cell-1-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-1-4" class="code-annotation-target">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> applyTwice (\x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-1" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="1" data-code-annotation="1">The type signature of <code>applyTwice</code> indicates that it takes a function <code>(a -&gt; a)</code> as its first argument, and a value of type <code>a</code> as its second argument, and returns a value of type <code>a</code>. The function <code>(a -&gt; a)</code> is a function that takes an argument of type <code>a</code> and returns a result of the same type <code>a</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="2" data-code-annotation="2">The implementation of <code>applyTwice</code> applies the function <code>f</code> twice to the value <code>x</code>. First, it applies <code>f</code> to <code>x</code>, then it applies <code>f</code> again to the result of the first application.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="4" data-code-annotation="3">The <code>result</code> variable calls <code>applyTwice</code> with the lambda expression <code>\x -&gt; x + 1</code>, which is an anonymous function that increments its input by 1. It also passes the value <code>5</code> as the second argument. The result of this operation will be <code>7</code> since the function <code>(\x -&gt; x + 1)</code> is applied twice to <code>5</code>, resulting in <code>6</code> and then <code>7</code>.</span>
</dd>
</dl>
<p>In this example, <code>\x -&gt; x + 1</code> is a lambda expression that is passed to <code>applyTwice</code>, demonstrating how functions can be treated as first-class citizens in Haskell, just as they are in lambda calculus.</p>
<p>A key operation in lambda calculus is <strong>function composition</strong>. It allows us to build complex behavior by chaining simple functions together. For instance, given two functions <code>f :: B -&gt; C</code> (Haskell type annotation syntax for a function <code>f</code> that takes an argument of type <code>B</code> and returns a value of type <code>C</code>) and <code>g :: A -&gt; B</code>, we can compose them into a new function <code>f . g :: A -&gt; C</code>. This operation reflects the core idea of lambda calculus: computation can be expressed by applying and composing functions. The power of this approach lies in its clarity and the way it abstracts away details, focusing instead on how data flows through functions.</p>
<p>In Haskell, this idea is captured by the composition operator <code>(.)</code>, which enables the chaining of functions to create more complex behaviors. Compositionality, as we’ll see, is a central concept that extends from lambda calculus into category theory and functional programming.</p>
<p>To further illustrate the power of function composition, consider the following example in Haskell:</p>
<div class="sourceCode" id="annotated-cell-2" style="background: #f1f3f5;"><pre class="sourceCode numberSource haskell code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode haskell"><a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-2-1" class="code-annotation-target"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">double ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<span id="annotated-cell-2-2">double x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="annotated-cell-2-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-2-4" class="code-annotation-target"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">increment ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<span id="annotated-cell-2-5">increment x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="annotated-cell-2-6"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-2-7" class="code-annotation-target">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (double <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> increment) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-2" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="1" data-code-annotation="1">The <code>double</code> function multiplies its input by 2.</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="4" data-code-annotation="2">The <code>increment</code> function adds 1 to its input.</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="7" data-code-annotation="3">By composing <code>double</code> and <code>increment</code> using the <code>(.)</code> operator, we create a new function that first increments its input and then doubles the result. Applying this composed function to <code>3</code> produces the value <code>8</code>.</span>
</dd>
</dl>
<p>This shows how function composition allows for creating more complex behaviors by combining simpler functions. The <code>(.)</code> operator in Haskell enables this seamless chaining of functions, making code more modular and reusable. Function composition not only simplifies the expression of logic but also encourages the development of smaller, single-purpose functions that can be combined to solve more complex problems.</p>
<p>Beyond these core concepts, lambda calculus also includes more advanced ideas that extend its expressive power. <strong>Alpha conversion</strong> is a technique that allows the renaming of bound variables to avoid clashes in naming, ensuring that variable names do not affect the meaning of expressions. This supports flexibility in manipulating expressions without changing their underlying behavior. Another fundamental operation is <strong>beta reduction</strong>, which involves the application of a function to an argument. This process replaces the formal parameter of the function with the actual argument within the function body, thereby performing the computation that the function defines.</p>
<p>Additionally, <strong>eta conversion</strong> captures the idea of function extensionality, formalizing the notion that two functions are equivalent if they behave identically for all inputs. Finally, <strong>fixed-point combinators</strong><sup>2</sup>, like the famous Y combinator, enable recursive definitions in lambda calculus, which lacks direct recursion. These combinators allow a function to refer to itself, thereby modeling iterative processes purely within the framework of lambda calculus. Each of these concepts enhances the ability of lambda calculus to represent complex computations, highlighting its foundational role in the theory of computation and functional programming.</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;A fixed-point combinator, like the Y combinator, is a higher-order function that enables recursion in systems such as lambda calculus, which inherently lacks direct support for recursive definitions. By allowing a function to call itself, fixed-point combinators enable the modeling of iterative processes within purely functional frameworks, without the need for explicit looping constructs. This concept is essential in both theoretical computer science and functional programming, as it formalizes recursive behavior and showcases the power of higher-order functions. For an in-depth exploration of these ideas, see Barendregt H. P. “The Lambda Calculus: Its Syntax and Semantics” <em>North-Holland</em> (1984). ISBN: 0444875085.</p></div></div></section>
<section id="category-theory-a-higher-level-abstraction" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="category-theory-a-higher-level-abstraction">Category theory: a higher-level abstraction</h2>
<p><strong>Category theory</strong> elevates the ideas of lambda calculus by providing a more abstract framework for reasoning about mathematical structures and their relationships. Introduced by <strong>Samuel Eilenberg</strong> and <strong>Saunders Mac Lane</strong> in the 1940s<sup>3</sup>, category theory focuses on <strong>objects</strong> and <strong>morphisms</strong> (arrows) that represent transformations between these objects. The central idea is to abstractly capture how objects and morphisms interact through <strong>composition</strong> and <strong>identity</strong>.</p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;Eilenberg S., and Mac Lane S. “General Theory of Natural Equivalences” <em>Transactions of the American Mathematical Society</em> 58, no. 2 (1945): 231-294. DOI: <a href="https://doi.org/10.2307/1990284">10.2307/1990284</a>.</p></div></div><p>The core concept in category theory is <strong>composition</strong>: morphisms can be composed in an associative way, and every object has an identity morphism that acts as a neutral element for composition. This abstraction allows us to model complex systems by focusing on the relationships between components rather than their internal details. Composition is the glue that connects objects, ensuring that complex transformations can be constructed from simpler ones in a consistent manner.</p>
<p>In <strong>Haskell</strong>, <strong>types</strong> can be seen as objects, and <strong>functions</strong> as morphisms between these types. The composition of functions in Haskell mirrors the composition of morphisms in category theory. This perspective enables us to reason about programs at a higher level of abstraction, focusing on how different functions interact rather than digging in their internal mechanics.</p>
<section id="functors" class="level3">
<h3 class="anchored" data-anchor-id="functors">Functors</h3>
<p>Before diving into more complex categories, it’s essential to understand <strong>functors</strong>, which are a fundamental concept in category theory and play a crucial role in functional programming. Informally, a functor can be thought of as a structure-preserving map between two categories. It transforms objects and morphisms (arrows) from one category into objects and morphisms in another category while preserving the relationships between them. In simpler terms, if you have a set of objects and arrows that represent relationships in one category, a functor maps those objects and arrows into another category in a way that maintains the same structure.</p>
<p>In category theory, a functor <code>F</code> is a mapping between two categories, say <code>C</code> and <code>D</code>, that assigns to each object <code>A</code> in category <code>C</code> an object <code>F(A)</code> in category <code>D</code>, and to each morphism <code>f: A -&gt; B</code> in <code>C</code>, a morphism <code>F(f): F(A) -&gt; F(B)</code> in <code>D</code>. The functor must also preserve two critical properties: <strong>composition</strong> and <strong>identity</strong>. This means that if you have two composed morphisms <code>f</code> and <code>g</code> in the original category, then <code>F(f . g) = F(f) . F(g)</code> must hold in the target category, and if <code>id_A</code> is the identity morphism for object <code>A</code>, then <code>F(id_A)</code> must be the identity morphism for the object <code>F(A)</code> in the target category.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["A"] --&gt;|"f"| B["B"]
  A --&gt;|"F"| FA["F(A)"]
  B --&gt;|"F"| FB["F(B)"]
  FA --&gt;|"F(f)"| FB
</pre>
</div>
<p></p><figcaption> The functor <code>F</code> maps objects <code>A</code> and <code>B</code> from category <code>C</code> to objects <code>F(A)</code> and <code>F(B)</code> in category <code>D</code>, while also mapping the morphism <code>f: A -&gt; B</code> to <code>F(f): F(A) -&gt; F(B)</code> </figcaption> </figure><p></p>
</div>
</div>
</div>
<p>In Haskell, the <strong>Functor</strong> type class captures this concept, but with an important distinction: Haskell functors are <strong>endofunctors</strong>. An endofunctor is a functor that maps a category to itself. In the case of Haskell, this category is <strong>Hask</strong>, the category of Haskell types and functions. This means that in Haskell, functors map between objects (types) and morphisms (functions) within the same category, i.e., from one Haskell type to another Haskell type, and from one Haskell function to another Haskell function.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["Haskell Type A"] --&gt;|"Haskell Function f"| B["Haskell Type B"]
  A --&gt;|"Functor F"| FA["F(A)"]
  B --&gt;|"Functor F"| FB["F(B)"]
  FA --&gt;|"Functor F(f)"| FB
</pre>
</div>
<p></p><figcaption> The functor <code>F</code> maps objects and morphisms within the same category <code>Hask</code> (the category of Haskell types and functions)</figcaption> </figure><p></p>
</div>
</div>
</div>
<p>In Haskell, functors allow you to apply a function to values inside a structure (e.g., lists, <code>Maybe</code>, <code>Either</code>) without modifying the structure itself. This operation is often described as “lifting” a function to operate on values within a functorial context. For example, if you have a function that operates on integers, and you have a list of integers, a functor allows you to apply that function to every element in the list without altering the list’s overall structure. This concept is formalized in Haskell with the <code>fmap</code> function, which applies a function to the contents of a functor while preserving the functor’s structure.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["List [1,2,3]"] --&gt;|"fmap (+1)"| B["List [2,3,4]"]
  A --&gt;|"Functor Structure"| A
</pre>
</div>
<p></p><figcaption> The functor <code>fmap</code> applies a function to values inside a functor, preserving the structure (e.g., a list or <code>Maybe</code>)</figcaption> </figure><p></p>
</div>
</div>
</div>
<p>For instance, consider the <strong><code>Either</code></strong> functor, which represents computations that might fail:</p>
<div class="sourceCode" id="annotated-cell-3" style="background: #f1f3f5;"><pre class="sourceCode numberSource haskell code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode haskell"><span id="annotated-cell-3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">instance</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Functor</span> (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Either</span> e) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-3-2" class="code-annotation-target">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> _ (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Left</span> err) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Left</span> err</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-3-3" class="code-annotation-target">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> f (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Right</span> val) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Right</span> (f val)</span>
<span id="annotated-cell-3-4"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-3-5" class="code-annotation-target"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">compute ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Either</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<span id="annotated-cell-3-6">compute x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Right</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Left</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Negative number"</span></span>
<span id="annotated-cell-3-7"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-3-8" class="code-annotation-target">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) (compute <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-3-9" class="code-annotation-target">result2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) (compute (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-3" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="2" data-code-annotation="1">When the value is a <code>Left</code> constructor (indicating an error or failure), <code>fmap</code> preserves the structure and returns the <code>Left</code> unchanged. This ensures that no function is applied to the error value.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="3" data-code-annotation="2">When the value is a <code>Right</code> constructor (indicating success), <code>fmap</code> applies the provided function <code>f</code> to the value inside the <code>Right</code> and wraps the result back in the <code>Right</code> constructor, thereby transforming the successful value without altering the <code>Either</code> structure.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="5" data-code-annotation="3">The <code>compute</code> function demonstrates a simple usage of <code>Either</code>. If the input <code>x</code> is positive, it returns <code>Right (x * 2)</code>; otherwise, it returns <code>Left "Negative number"</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="8" data-code-annotation="4"><code>fmap (+1)</code> is applied to the result of <code>compute 10</code>, which produces <code>Right 20</code>. The function <code>(+1)</code> is applied to <code>20</code>, yielding <code>Right 21</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="9" data-code-annotation="5"><code>fmap (+1)</code> is applied to the result of <code>compute (-10)</code>, which produces <code>Left "Negative number"</code>. Since the value is a <code>Left</code>, <code>fmap</code> does not apply the function, and the result remains <code>Left "Negative number"</code>.</span>
</dd>
</dl>
<p>Here is a diagram illustrating the flow and transformations in the provided Haskell code using the <code>Either</code> functor:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["compute 10"] --&gt;|"Right 20"| B["fmap (+1) 20"]
  B --&gt;|"Right 21"| C["result"]
  D["compute (-10)"] --&gt;|"Left 'Negative number'"| E["fmap (+1) 'Negative number'"]
  E --&gt;|"Left 'Negative number'"| F["result2"]
</pre>
</div>
<p></p><figcaption> The diagram represents the behavior of the <code>Either</code> functor, showing how the <code>fmap</code> function applies a transformation only to the <code>Right</code> value (successful result), leaving the <code>Left</code> value (error) unchanged</figcaption> </figure><p></p>
</div>
</div>
</div>
<p>This example illustrates how functors (like the <code>Functor</code> instance for <code>Either</code>) allow us to apply functions to values inside a structure, while preserving the structure itself (<code>Left</code> and <code>Right</code>). It demonstrates the compositional nature of functors (<code>fmap</code>), which is a key concept in both category theory and functional programming in Haskell.</p>
</section>
<section id="monads" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="monads">Monads</h3>
<p>A <strong>monad</strong><sup>4</sup> can be understood informally as a design pattern that allows for chaining operations while handling additional context, such as side effects, failures, or state. In essence, a monad provides a structured way to sequence computations, where each computation may involve extra information (e.g., state, errors, or I/O) without losing the ability to compose functions in a clean and modular way.</p>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;The concept of monads was introduced by <strong>Eugenio Moggi</strong> in his seminal paper titled “Notions of Computation and Monads,” published in 1991. In this paper, Moggi introduced monads as a way to model computational effects (such as state, exceptions, and I/O) in a purely functional programming setting. Moggi’s work had a profound influence on the development of functional programming, especially in languages like Haskell, where monads became a central concept for structuring programs with side effects. Moggi E. “Notions of Computation and Monads.” <em>Information and Computation</em> 93, no. 1 (1991): 55-92. DOI: <a href="https://doi.org/10.1016/0890-5401(91)90052-4">10.1016/0890-5401(91)90052-4</a>.</p></div></div><p>Formally, in category theory, a monad is a specific kind of <strong>endofunctor</strong> (a functor that maps a category to itself) equipped with two natural transformations: <code>η</code> (unit, called <code>return</code> or <code>pure</code> in Haskell) and <code>μ</code> (multiplication, often implemented as <code>join</code> in Haskell). An endofunctor is a functor that maps both objects and morphisms within the same category, typically from <code>Hask</code> (the category of Haskell types and functions) to itself.</p>
<p>These natural transformations follow strict algebraic laws—<strong>associativity</strong> and <strong>identity</strong>—which ensure that monadic operations compose consistently:</p>
<ul>
<li><p><strong>Associativity</strong>: This guarantees that the way functions are chained using the monad does not affect the final result. If you perform three operations in sequence, it doesn’t matter how the operations are grouped.</p></li>
<li><p><strong>Identity</strong>: This ensures that wrapping a value in the monadic context (via <code>return</code>) and then immediately unwrapping it (using <code>&gt;&gt;=</code>) gives back the original value. This law reflects that <code>return</code> serves as a neutral element.</p></li>
</ul>
<p>These laws ensure that monads provide a predictable way to compose and sequence operations, abstracting away concerns about side effects, errors, or context-specific details.</p>
<p>In Haskell, a monad is represented by a type constructor along with two key operations:</p>
<ul>
<li><p><code>return</code> (or <code>pure</code>): This operation injects a value into the monadic context.</p></li>
<li><p><code>&gt;&gt;=</code> (bind): This operation applies a function to the value inside the monad, producing a new monad.</p></li>
</ul>
<p>The combination of these operations allows monads to manage side effects in a controlled way while preserving the composability of functions. This is particularly useful in functional programming, where functions are expected to be pure, meaning that they should not produce side effects or rely on global state. Monads provide a structured way to encapsulate side effects, while keeping the core logic of the program pure and predictable.</p>
<p>For example, the <code>Maybe</code> monad represents computations that may fail. It encapsulates values in a <code>Just</code> constructor if the computation is successful, or returns <code>Nothing</code> if it fails. Similarly, the <code>IO</code> monad is used to encapsulate input/output operations in Haskell, allowing side effects to be handled in a purely functional manner. This enables Haskell developers to work with impure operations, such as I/O, exceptions, or state, without violating the principles of functional programming.</p>
<p>Monads are a beautiful example of how lambda calculus and category theory come together in Haskell. From the lambda calculus perspective, a monad allows functions to be composed cleanly, even when dealing with additional context or side effects. From the category theory perspective, monads provide a structured way to chain computations while adhering to strict algebraic rules, ensuring that operations remain consistent and predictable.</p>
<p>Here’s a simple example in Haskell that demonstrates monadic chaining:</p>
<div class="sourceCode" id="annotated-cell-4" style="background: #f1f3f5;"><pre class="sourceCode numberSource haskell code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode haskell"><a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-4-1" class="code-annotation-target"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">safeDivide ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Maybe</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-4-2" class="code-annotation-target">safeDivide _ <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Nothing</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-4-3" class="code-annotation-target">safeDivide x y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Just</span> (x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">`div`</span> y)</span>
<span id="annotated-cell-4-4"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-4-5" class="code-annotation-target"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">monadicComputation ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Maybe</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<span id="annotated-cell-4-6">monadicComputation x y z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-4-7" class="code-annotation-target">  safeDivide x y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;=</span> \result1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-4-8" class="code-annotation-target">  safeDivide result1 z</span>
<span id="annotated-cell-4-9"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-4-10" class="code-annotation-target">result1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> monadicComputation <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-4-11" class="code-annotation-target">result2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> monadicComputation <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-4" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="1" data-code-annotation="1">The <code>safeDivide</code> function returns a <code>Maybe</code> value to handle division safely.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="2" data-code-annotation="2">If the divisor is zero, <code>safeDivide</code> returns <code>Nothing</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="3" data-code-annotation="3">If the divisor is non-zero, <code>safeDivide</code> returns <code>Just (x</code>div<code>y)</code>, representing successful division.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="5" data-code-annotation="4"><code>monadicComputation</code> chains two <code>safeDivide</code> operations using monadic chaining.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="7" data-code-annotation="5">The first division result is bound to <code>result1</code> using the <code>&gt;&gt;=</code> operator.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="8" data-code-annotation="6">The second division operates on <code>result1</code>, continuing the monadic computation.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="10" data-code-annotation="7">Applying <code>monadicComputation</code> with valid inputs results in <code>Just 2</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="11" data-code-annotation="8">Applying <code>monadicComputation</code> with a zero divisor results in <code>Nothing</code>, representing a safe failure.</span>
</dd>
</dl>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["12"] --&gt;|"safeDivide 12 / 2"| B["6"]
  B --&gt;|"safeDivide 6 / 3"| C["2"]
  D["12"] --&gt;|"safeDivide 12 / 0"| E["Nothing"]
</pre>
</div>
<p></p><figcaption> This diagram illustrates monadic chaining with <code>safeDivide</code>, where two divisions are chained together using the <code>&gt;&gt;=</code> operator. When the computation is valid, it continues; otherwise, it returns <code>Nothing</code>.</figcaption> </figure><p></p>
</div>
</div>
</div>
<p>Another example demonstrates monad composition:</p>
<div class="sourceCode" id="annotated-cell-5" style="background: #f1f3f5;"><pre class="sourceCode numberSource haskell code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode haskell"><a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-5-1" class="code-annotation-target"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">addOne ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Maybe</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-5-2" class="code-annotation-target">addOne x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Just</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="annotated-cell-5-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-5-4" class="code-annotation-target"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">multiplyByTwo ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Maybe</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-5-5" class="code-annotation-target">multiplyByTwo x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Just</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="annotated-cell-5-6"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-5-7" class="code-annotation-target"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">composedFunction ::</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Maybe</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-5-8" class="code-annotation-target">composedFunction x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> addOne x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;=</span> multiplyByTwo</span>
<span id="annotated-cell-5-9"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-5-10" class="code-annotation-target">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> composedFunction <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-5" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="1" data-code-annotation="1">The <code>addOne</code> function wraps the addition of 1 in a <code>Maybe</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-5" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="2" data-code-annotation="2">The implementation returns <code>Just (x + 1)</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-5" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="4" data-code-annotation="3">The <code>multiplyByTwo</code> function wraps the multiplication by 2 in a <code>Maybe</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-5" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="5" data-code-annotation="4">The implementation returns <code>Just (x * 2)</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-5" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="7" data-code-annotation="5"><code>composedFunction</code> represents the composition of <code>addOne</code> and <code>multiplyByTwo</code> using monadic operations.</span>
</dd>
<dt data-target-cell="annotated-cell-5" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="8" data-code-annotation="6">The <code>&gt;&gt;=</code> operator is used to chain the monadic operations, composing the functions.</span>
</dd>
<dt data-target-cell="annotated-cell-5" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="10" data-code-annotation="7">Applying <code>composedFunction</code> to <code>3</code> results in <code>Just 8</code>.</span>
</dd>
</dl>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["3"] --&gt;|"addOne"| B["Just 4"]
  B --&gt;|"multiplyByTwo"| C["Just 8"]
</pre>
</div>
<p></p><figcaption> This diagram illustrates monad composition, where the <code>addOne</code> and <code>multiplyByTwo</code> functions are composed using monadic operations, resulting in a final value of <code>Just 8</code>.</figcaption> </figure><p></p>
</div>
</div>
</div>
<p>These examples illustrate how lambda calculus (through pure functions and function composition) and category theory (through monads and function composition) come together in Haskell. <strong>Purity</strong> in functional programming means that a function’s output is determined solely by its input, with no side effects, such as modifying global state or performing I/O operations. Monads provide a structured way of chaining computations while preserving this functional purity, enabling developers to manage complexity and side effects in a compositional way. Monads encapsulate side effects within their structure, allowing the core logic of the program to remain pure and predictable, ensuring that side effects are controlled and managed explicitly.</p>
</section>
<section id="cartesian-closed-categories" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="cartesian-closed-categories">Cartesian Closed Categories</h3>
<p>One of the foundational structures in category theory, especially relevant to functional programming, is the <strong>cartesian closed category (CCC)</strong><sup>5</sup>. A CCC is a category that has all finite <strong>products</strong> (such as pairs or tuples) and <strong>exponentials</strong> (which correspond to function spaces), providing the necessary categorical framework to model both <strong>product types</strong> and <strong>function types</strong>, essential constructs in functional programming languages like Haskell.</p>
<div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp;The foundational work on combinatory logic, which laid the groundwork for the development of CCCs, can be found in Curry H. B., and Feys R. <em>Combinatory Logic</em>. Vol. 1. Amsterdam: North-Holland, 1958.</p></div></div><p>In a CCC, <strong>product types</strong> represent pairs or tuples of values, analogous to Haskell’s tuple types (e.g., <code>(A, B)</code>), and correspond to the categorical notion of <strong>products</strong>. <strong>Exponential objects</strong> in a CCC represent function types, such as <code>A -&gt; B</code> in Haskell. The exponential object <code>B^A</code> can be thought of as the object of all morphisms (functions) from <code>A</code> to <code>B</code>. This structure supports the functional programming idea of treating functions as first-class citizens, a principle that is central to lambda calculus and Haskell.</p>
<p>The CCC structure includes:</p>
<ul>
<li><p><strong>Product types</strong>: Represented as tuples, equipped with <strong>projections</strong> <code>π₁</code> and <code>π₂</code>, which extract individual elements from the product.</p></li>
<li><p><strong>Exponential objects</strong>: Representing function types, where the exponential object <code>B^A</code> is analogous to the set of all functions from <code>A</code> to <code>B</code>. The exponential object comes with an <strong>evaluation morphism</strong> <code>eval: B^A × A → B</code>, which corresponds to function application.</p></li>
</ul>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["A"] --&gt;|"π₁"| Product["(A, B)"]
  B["B"] --&gt;|"π₂"| Product
  Exponential["B^A"] --&gt;|"eval"| B
  Product --&gt;|"eval"| Exponential
</pre>
</div>
<p></p><figcaption> The diagram illustrates product types and exponential objects in a cartesian closed category, where product types correspond to tuples and exponential objects correspond to function types.</figcaption> </figure><p></p>
</div>
</div>
</div>
<p>CCCs provide a mathematical model for reasoning about programs, allowing programmers to abstractly understand both the types of data and the functions that operate on them. By interpreting Haskell’s type system in terms of CCCs, developers can apply category theory to reason about the composition of functions, the relationships between types, and the construction of more complex systems.</p>
<p>CCCs have direct applications in designing type systems in functional programming languages. For example, the <strong>lambda calculus</strong> can be interpreted within any CCC. This makes CCCs essential for developing languages that need to handle functions, recursion, and complex data types. Additionally, CCCs are foundational in areas like <strong>proof theory</strong> and <strong>logic</strong>, where they provide a framework for representing logical propositions and their proofs. CCCs are also important in <strong>compilers</strong> and <strong>type checkers</strong>, where understanding the relationships between functions and types ensures correctness in program transformations.</p>
</section>
<section id="other-concepts" class="level3">
<h3 class="anchored" data-anchor-id="other-concepts">Other concepts</h3>
<p>Beyond functors, monads, and CCCs, several other concepts from category theory are particularly useful in functional programming, providing deeper abstractions and tools for structuring programs.</p>
<section id="natural-transformations" class="level4">
<h4 class="anchored" data-anchor-id="natural-transformations">Natural transformations</h4>
<p>A <strong>natural transformation</strong> is a mapping between two functors that preserves the structure of the categories involved. In practical terms, it provides a way to transform data between different functorial contexts (e.g., from one container type to another) while ensuring that the relationships between objects and morphisms are maintained. Natural transformations are critical in scenarios where data needs to be transformed consistently across different structures, such as in <strong>data transformation pipelines</strong>, <strong>parallel processing</strong> frameworks, or when dealing with <strong>co-algebraic structures</strong> like streams.</p>
<p>For example, if you have two functors <code>F</code> and <code>G</code> that map objects from one category to another, a natural transformation <code>η</code> provides a way to transform an object <code>F(A)</code> into <code>G(A)</code> for every object <code>A</code>, and this transformation must behave consistently with respect to morphisms (functions) between objects. In Haskell, natural transformations are often represented as polymorphic functions of type <code>(forall a. F a -&gt; G a)</code>. They are essential for building reusable and composable software components that can operate across various contexts while preserving the integrity of transformations.</p>
<p>In real-world programming, natural transformations are used to build modular and scalable systems. For instance, in <strong>functional reactive programming (FRP)</strong>, natural transformations allow smooth transitions between different streams or event handlers. Similarly, in <strong>distributed systems</strong> or <strong>data processing pipelines</strong>, they provide a structured way to transform data across different stages while maintaining consistency and structure.</p>
</section>
<section id="yoneda-lemma" class="level4">
<h4 class="anchored" data-anchor-id="yoneda-lemma">Yoneda lemma</h4>
<p>The <strong>Yoneda lemma</strong> is a deep result in category theory that provides powerful insights into how objects in a category relate to the morphisms (functions) that interact with them. It essentially states that understanding how an object interacts with other objects in a category (through morphisms) is equivalent to understanding the object itself. This lemma is invaluable in functional programming because it gives rise to important techniques for abstraction and optimization.</p>
<p>In programming, the Yoneda lemma underpins many <strong>optimization strategies</strong> and <strong>generic programming</strong> techniques. It helps to abstract over different types and operations, enabling <strong>parametric polymorphism</strong>—a key feature in functional programming languages like Haskell. For example, the Yoneda lemma is used to optimize <strong>free monads</strong> and <strong>free functors</strong> by reducing the complexity of certain computations while preserving correctness. This allows developers to write more general and reusable code that can be specialized or optimized as needed without rewriting core logic.</p>
<p>In <strong>generic programming</strong>, the Yoneda lemma allows developers to write highly flexible and reusable code by focusing on how types and functions relate to each other. It can help optimize function composition, type-level programming, and even transformations in <strong>domain-specific languages (DSLs)</strong>. In short, the Yoneda lemma provides a foundational principle for reasoning about how functions interact with data, allowing for more abstract and efficient code.</p>
</section>
<section id="adjunctions" class="level4">
<h4 class="anchored" data-anchor-id="adjunctions">Adjunctions</h4>
<p><strong>Adjunctions</strong> are another advanced concept that frequently appears in functional programming. An adjunction describes a pair of functors, <code>F</code> and <code>G</code>, that stand in a particular relationship: <code>F</code> is <strong>left adjoint</strong> to <code>G</code>, and <code>G</code> is <strong>right adjoint</strong> to <code>F</code>. This means that for every pair of objects, one in the source category and one in the target category, there is a natural correspondence between morphisms (functions) involving these functors.</p>
<p>Adjunctions are useful when there are two different ways of constructing or representing data, and you want to relate them in a structured way. In programming, adjunctions arise in situations where different levels of abstraction need to be linked or when different representations of the same data must be interconverted. For example, adjunctions are often found in <strong>syntax and semantics</strong> mappings in compilers, where the syntax (as parsed) is related to the semantics (as evaluated) in a consistent way. Similarly, adjunctions appear in <strong>logic programming</strong>, where different representations of logical propositions (e.g., syntactic and semantic views) must be linked.</p>
<p>One common use of adjunctions in Haskell is in the construction of <strong>free monads</strong> and <strong>cofree comonads</strong>, which provide a way to represent recursive computations and state transformations in a modular and composable manner. These structures allow developers to break down complex systems into simpler components while still being able to rebuild or evaluate them using adjunction-based relationships. In compiler design, adjunctions can help map higher-level abstractions (such as syntax trees) to lower-level constructs (such as machine code), providing a formal and consistent way to reason about program translation.</p>
</section>
<section id="limits-and-colimits" class="level4">
<h4 class="anchored" data-anchor-id="limits-and-colimits">Limits and colimits</h4>
<p>Another powerful concept in category theory, frequently used in functional programming, is <strong>limits</strong> and <strong>colimits</strong>. Limits represent a way to “combine” or “unify” several objects and morphisms into a single object that captures all their shared structure. Colimits, on the other hand, generalize the idea of merging or coalescing several objects into a more general structure. These concepts are essential for understanding <strong>recursion</strong>, <strong>folds</strong>, and <strong>unions</strong> in functional programming, where we often want to aggregate data in a structured way.</p>
<p>In Haskell, <strong>folds</strong> (<code>foldr</code>, <code>foldl</code>) can be seen as examples of limits, while operations like <strong>unions</strong> of data structures (e.g., merging sets or lists) are examples of colimits. Understanding limits and colimits allows functional programmers to reason about how to break down or combine complex data types and operations in a systematic and mathematically rigorous way.</p>
</section>
<section id="functor-categories-and-higher-order-functors" class="level4">
<h4 class="anchored" data-anchor-id="functor-categories-and-higher-order-functors">Functor categories and higher-order functors</h4>
<p>As we move into more advanced topics, <strong>functor categories</strong> are another useful concept in both category theory and functional programming. A functor category is a category where the objects are functors, and the morphisms are natural transformations between those functors. This idea is central to the concept of <strong>higher-order functors</strong>—functors that operate on other functors, which frequently arise in functional programming when working with <strong>monad transformers</strong> or <strong>applicative transformers</strong>.</p>
<p>In Haskell, functor categories help organize and structure programs that involve layers of abstraction, such as monad transformer stacks. By understanding how functors compose and interact, developers can build powerful abstractions that allow for composable and scalable designs without losing control over the complexity of the code.</p>
</section>
</section>
</section>
<section id="software-engineering-challenges" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="software-engineering-challenges">Software engineering challenges</h2>
<p>In software engineering, managing complexity while maintaining reliability, maintainability, scalability, and safety is a continuous challenge. A steady stream of innovations at all levels of software development, including new programming languages, software frameworks, and management practices, aims to address these concerns. From a broader perspective of software design, methodologies like <strong>modularization</strong>, <strong>abstraction</strong>, <strong>design patterns</strong>, <strong>SOLID principles</strong>, <strong>domain-driven design (DDD)</strong>, and <strong>microservices architecture</strong> have been introduced to cope with this complexity. One of the key drivers of innovation in software architecture is the concept of <strong>formal composability</strong>, which is grounded in mathematical definitions, such as those found in category theory. Formal composability allows development teams to transcend human cognitive limitations by decomposing complex systems into simpler, mathematically defined components. This rigorous approach not only ensures consistency and correctness but also opens the door to leveraging advanced techniques like machine learning to embrace and manage the growing complexity of modern software systems. Composability enables teams to build scalable, robust systems that can adapt to evolving requirements and environments, forming the foundation of modern software architecture.</p>
<p>Lambda calculus and category theory provide a rigorous, formal foundation for achieving <strong>formal composability</strong> in software engineering. These mathematical frameworks allow developers to decompose complex systems into smaller, composable units, while maintaining a focus on <strong>purity</strong> (functions without side effects) or <strong>controlled impurity</strong> (managing side effects in a predictable and structured manner). This combination of mathematical rigor and composability is one of the most significant contributions of these theories to modern software engineering. It empowers development teams to build modular, scalable, and reliable systems that are easier to reason about, maintain, and adapt in an increasingly complex software landscape. By leveraging formal composability, developers can create systems that are not only robust but also capable of scaling with innovation, embracing the complexity of modern applications while maintaining consistency and correctness.</p>
<section id="modularization" class="level3">
<h3 class="anchored" data-anchor-id="modularization">Modularization</h3>
<p>In software design, <strong>modularization</strong> is a technique that involves breaking down a system into smaller, independent modules that can be developed, tested, and maintained separately. This approach helps manage complexity, improve code maintainability, and enhance collaboration by allowing different teams to work on different parts of the system simultaneously. Lambda calculus and category theory offer a formal foundation for modularization, providing the principles that underpin this approach.</p>
<section id="lambda-calculus-contribution" class="level4">
<h4 class="anchored" data-anchor-id="lambda-calculus-contribution">Lambda calculus contribution</h4>
<p>In lambda calculus, modularization aligns with the concept of <strong>function composition</strong>, where complex operations are constructed by combining simpler functions. Each function represents a self-contained unit of computation, which can be composed with other functions to form more elaborate operations. This mirrors the essence of modularization in software design, where individual components (modules) are designed to be reusable and composable.</p>
<p>One of the key strengths of lambda calculus in supporting modularization is its emphasis on <strong>pure functions</strong>, functions that do not rely on external state and always produce the same output for a given input. Pure functions are inherently modular because they can be tested, reasoned about, and composed without concerns about side effects or hidden dependencies. This makes them ideal building blocks for constructing larger systems, as each function/module can be developed and tested in isolation.</p>
<p>Another important aspect of lambda calculus is <strong>higher-order functions</strong>, which allow functions to be passed as arguments to other functions or returned as results. This capability supports powerful abstractions that enable developers to write more modular and reusable code. By encapsulating behaviors in higher-order functions, developers can create flexible and adaptable modules that can be easily recombined in different contexts. This approach allows for the creation of highly generic, reusable components, making it possible to abstract over patterns of computation and control flow. This level of abstraction goes beyond traditional procedural or object-oriented techniques by allowing developers to define generic algorithms that can operate over a wide variety of data types and structures, leading to more expressive and concise code that can be tailored to a broad range of use cases.</p>
</section>
<section id="category-theory-contribution" class="level4">
<h4 class="anchored" data-anchor-id="category-theory-contribution">Category theory contribution</h4>
<p>Category theory enhances the principles of modularization by providing an abstract framework for reasoning about how different parts of a system interact. Instead of focusing on the internal implementation details of individual components, category theory emphasizes the relationships between these components. In category theory, the fundamental constructs are <strong>objects</strong> and <strong>morphisms</strong> (arrows), which can be thought of as types and functions in programming. This abstraction allows us to think about systems in terms of their interfaces and interactions, promoting a modular design that is independent of specific implementations.</p>
<p>One of the central concepts in category theory that supports modularization is the <strong>functor</strong>. A functor is a structure-preserving map between categories that allows transformations of objects and morphisms while maintaining the relationships between them. In functional programming languages like Haskell, functors enable developers to apply operations to values within specific contexts, without altering the context itself. For example, Haskell provides built-in data types such as <code>Maybe</code>, <code>List</code>, and <code>Either</code>, which are functors:</p>
<ul>
<li><p><strong><code>Maybe</code></strong> represents a computation that might fail, encapsulating a value (<code>Just value</code>) or no value (<code>Nothing</code>).</p></li>
<li><p><strong><code>List</code></strong> represents a collection of values.</p></li>
<li><p><strong><code>Either</code></strong> encapsulates a value that could be of two types (e.g., <code>Left error</code> or <code>Right result</code>).</p></li>
</ul>
<p>These functor types allow operations to be performed on the encapsulated values while preserving the overall structure of the context (e.g., a <code>Maybe</code> or <code>List</code>). This is crucial for modular design because it enables developers to write functions that operate on data within various contexts, such as handling optional values, collections, or errors, without tightly coupling those functions to the specific contexts. This separation of concerns makes systems more flexible, adaptable, and easier to maintain.</p>
<p>Another important concept from category theory is the <strong>monoid</strong>. A monoid is an algebraic structure consisting of a set, a binary composition operation, and an identity element. Monoids are useful in modular systems because they allow operations to be combined consistently. For instance, in Haskell, the list concatenation operation (<code>++</code>) forms a monoid, where the empty list (<code>[]</code>) serves as the identity element. This allows developers to build up complex operations from simpler ones in a consistent and predictable way. Relying on monoidal structures ensures that even as systems grow in complexity, their behavior remains composable and modular.</p>
<p>Building on the ideas of functors and monoids, <strong>monads</strong> provide a powerful abstraction for handling side effects in a modular way. Monads are an extension of functors that add two key operations, <code>return</code> (or <code>pure</code>) and <code>&gt;&gt;=</code> (bind), which allow computations to be chained together while encapsulating side effects. This is especially important in large systems, where different modules may need to interact with the external world (e.g., managing state, performing I/O, or handling exceptions) without compromising the modular and composable nature of the system. In Haskell, monads like <code>IO</code>, <code>State</code>, and <code>Either</code> allow developers to encapsulate effects within specific contexts, ensuring that the core logic of the modules remains pure and isolated from side effects. This makes it easier to test, reason about, and compose different parts of the system.</p>
</section>
<section id="practical-impact" class="level4">
<h4 class="anchored" data-anchor-id="practical-impact">Practical impact</h4>
<p>The principles of lambda calculus and category theory offer concrete tools that developers use to achieve modularity in software design. These tools help build systems that are not only theoretically sound but also effective in real-world software development. Here’s how they contribute to modularization from a software design perspective:</p>
<ol type="1">
<li><p><strong>Scalability</strong>: Function composition enables developers to create complex functionality by combining smaller, simpler functions. By writing individual modules as pure functions that handle specific tasks, developers can compose them to build more sophisticated behavior. This compositional approach is essential for constructing scalable systems, where modular components can be combined to address larger problems without tightly coupling them. Function composition is widely used in <strong>data processing pipelines</strong> (e.g., <strong>ETL pipelines</strong>) where different stages of data transformation are composed into a single flow, as well as in <strong>UI frameworks</strong> (like <strong>React</strong>), where components are composed to build complex user interfaces.</p></li>
<li><p><strong>Testability</strong>: Pure functions are a key tool for ensuring that software modules are highly testable. Developers can isolate each module and test it independently, knowing that the function’s behavior will be predictable. This makes unit testing simpler and debugging more straightforward. Pure functions are essential in <strong>scientific computing</strong> and <strong>financial systems</strong>, where precise and predictable results are crucial. They also form the foundation for <strong>functional programming languages</strong> like Haskell and are integral to <strong>testing frameworks</strong> that rely on isolated unit tests, such as <strong>property-based testing</strong> tools like <a href="https://www.cse.chalmers.se/~rjmh/QuickCheck/"><strong>QuickCheck</strong></a>.</p></li>
<li><p><strong>Reusability</strong>: Higher-order functions allow developers to create more reusable and adaptable code by abstracting common patterns of computation into modules that can be parameterized with other functions. This approach reduces code duplication and makes it easier to maintain and extend software. Higher-order functions are used in <strong>data analysis frameworks</strong> (e.g., <strong>Pandas</strong> in Python or <strong>MapReduce</strong>), where they abstract common operations like filtering, mapping, and reducing over datasets. They are also critical in <strong>stream processing systems</strong> (like <strong>Apache Kafka Streams</strong>), where they allow complex event-handling logic to be abstracted and reused across different parts of the system.</p></li>
<li><p><strong>Managing complexity</strong>: In real-world programming, developers frequently deal with operations that involve context (such as handling optional values, collections, or errors) or side effects (such as state management, I/O, or error handling). To modularize these concerns, developers use patterns that allow functions to operate within various contexts or handle effects in a standardized way. This ensures that core logic remains reusable and composable, even in the presence of complexity. For example, in <strong>asynchronous programming</strong> (e.g., <strong>JavaScript Promises</strong> or <strong>async/await</strong> in Python and JavaScript), these techniques manage complex chains of asynchronous operations while keeping the code modular. Similarly, in <strong>database query languages</strong> (like <strong>LINQ</strong> in C#), they allow developers to compose queries in a modular fashion while managing data retrieval and transformation.</p></li>
<li><p><strong>Abstracting control flow and computation patterns</strong>: The tools provided by category theory help developers abstract control flow and computation patterns in a modular way. For example, instead of hardcoding the order and structure of operations, developers can use abstractions that allow them to define sequences of operations declaratively. This approach is particularly useful in <strong>domain-specific languages</strong> (DSLs) and <strong>workflow engines</strong>, where complex sequences of operations need to be modular and adaptable. These abstractions are also key in <strong>parallel and distributed computing</strong> environments, such as <strong>Google’s TensorFlow</strong> for machine learning or <strong>Apache Spark</strong> for large-scale data processing, where control flow must be expressed in a way that supports parallel execution and scalability.</p></li>
</ol>
</section>
</section>
<section id="abstraction" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="abstraction">Abstraction</h3>
<p><strong>Abstraction</strong> is a fundamental principle in software design that allows developers to hide the complexity of implementation details behind simple, well-defined interfaces. By abstracting away the inner workings of a module, function, or system, developers can focus on high-level design without needing to understand the low-level details of every component. Abstraction facilitates the creation of generic, reusable components that can be adapted to different contexts, making software systems more flexible and easier to maintain.</p>
<section id="levels" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="levels">Levels</h4>
<p>Abstraction in software design operates at multiple levels, and lambda calculus and category theory provide powerful tools for achieving it:</p>
<ol type="1">
<li><p><strong>Low-level abstraction</strong>: At the lowest level, abstraction can be seen in how we define and use <strong>functions</strong> and <strong>data types</strong>. In lambda calculus, the concept of <strong>function abstraction</strong> allows developers to define anonymous functions that encapsulate specific behavior, hiding the implementation details. For example, a lambda expression such as <code>λx. x + 1</code> defines a function that takes an input <code>x</code> and adds <code>1</code> to it. The user of this function doesn’t need to know how it achieves this result, they only need to know the input-output relationship. In functional programming languages like <strong>Haskell</strong>, this low-level abstraction allows developers to build complex logic by composing simple functions, without worrying about the inner workings of each function.</p></li>
<li><p><strong>Mid-level abstraction</strong>: As we move up the abstraction ladder, <strong>modules</strong> and <strong>interfaces</strong> provide a way to encapsulate functionality behind defined contracts. Category theory helps us formalize the relationships between these modules by focusing on the morphisms (functions) that define how different parts of a system interact. This level of abstraction allows developers to treat entire modules as black boxes, with well-defined inputs and outputs, while ensuring that these modules can be easily composed to create larger systems. For example, functors allow developers to apply operations to values within a context (like handling optional values or collections) without needing to modify the underlying data structure. This capability enables programmers to abstract away the details of working with specific data containers, allowing them to focus on the high-level logic of their application. Similarly, monads abstract away the complexity of dealing with side effects (e.g., state, I/O) while maintaining composability, ensuring that even impure operations can be handled in a modular and predictable way.</p></li>
<li><p><strong>High-level abstraction</strong>: At the highest level, abstraction involves defining <strong>architectural patterns</strong> or <strong>domain-specific languages (DSLs)</strong> that allow developers to work with complex systems without needing to know the implementation details of every component. Category theory provides a way to abstractly reason about entire systems, focusing on the relationships between different parts rather than the internal details of those parts. This allows developers to design systems that are <strong>extensible</strong> and <strong>scalable</strong>, aligning with principles like the <strong>open/closed principle</strong><sup>6</sup> from SOLID, which encourages creating software entities that can be extended without modifying existing code. For example, in <strong>domain-driven design (DDD)</strong>, developers abstract the complexity of a specific problem domain by defining <strong>domain models</strong> that capture the essential business logic. This abstraction allows different teams to work on various parts of the system without needing to understand the entire codebase. Category theory helps formalize the relationships between different domain models, ensuring that they can be composed and extended as the system evolves.</p></li>
</ol>
<div class="no-row-height column-margin column-container"><div id="fn6"><p><sup>6</sup>&nbsp;The <strong>open/closed principle (OCP)</strong> is one of the five principles in <strong>SOLID</strong>, a set of design principles in object-oriented programming that guide software developers in creating more maintainable and extendable code. The open/closed principle states that: <em>Software entities (such as classes, modules, functions, etc.) should be open for extension, but closed for modification.</em> This principle encourages developers to design software components in a way that allows them to be extended with new functionality without modifying existing code. The goal is to minimize the risk of introducing bugs into existing, well-tested code by enabling new behavior through extension rather than alteration. This is often achieved through techniques like inheritance, interfaces, or composition. Martin, Robert C. “Agile Software Development: Principles, Patterns, and Practices.” <em>Prentice Hall</em> (2003). ISBN: 0135974445.</p></div></div></section>
<section id="practical-impact-1" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="practical-impact-1">Practical impact</h4>
<p>In practice, lambda calculus has driven the development of functional programming languages like <strong>Haskell</strong>, <strong>Scala</strong>, and <strong>Elm</strong>, which emphasize immutability, pure functions, and composability. These languages have been adopted across a variety of industries where reliability and precision are paramount:</p>
<ul>
<li><p><strong>Finance</strong>: Functional programming is widely used in <strong>algorithmic trading</strong> and <strong>risk management</strong> systems, where correctness and safety are essential. For instance, <strong>Jane Street</strong>, a leading financial firm, employs <strong>OCaml</strong> to build trading platforms that demand high performance and reliability.</p></li>
<li><p><strong>Blockchain</strong>: Haskell’s strong focus on immutability and pure functions has made it a popular choice in the blockchain space. For example, <strong>IOHK</strong>, the company behind the <a href="https://cardano.org/"><strong>Cardano</strong></a> blockchain, uses Haskell to ensure that its code is mathematically sound and secure, a critical requirement for blockchain infrastructure.</p></li>
<li><p><strong>Aerospace</strong>: In industries like aerospace, where safety is of utmost importance, functional programming is used to model and ensure the correctness of complex systems. NASA has historically employed <strong>Lisp</strong> for mission-critical software, and Haskell is being explored for applications that require high assurance of correctness.</p></li>
<li><p><strong>Embedded systems</strong>: <a href="https://forth-standard.org/"><strong>Forth</strong></a>, a stack-based language known for its simplicity and extensibility, has been widely used in <strong>embedded systems</strong> and <strong>real-time applications</strong>. Its minimalistic design allows developers to write efficient, low-level code while maintaining control over hardware resources. Forth’s ability to define new language constructs on the fly has made it a popular choice in domains like <strong>space exploration</strong> (e.g., NASA’s <strong>Forth-based systems</strong>) and <strong>industrial control</strong>.</p></li>
</ul>
<p>Category theory has further extended the functional programming paradigm by providing abstractions that are critical in scaling complex systems. Its principles have been effectively applied in domains such as <strong>asynchronous programming</strong> and <strong>distributed systems</strong>, where managing side effects and ensuring composability are important:</p>
<ul>
<li><p><strong>Web development</strong>: <strong>Facebook</strong>’s <a href="https://reactjs.org/"><strong>React</strong></a> library employs functional programming principles and category theory concepts to manage the complexity of building scalable, responsive user interfaces. React’s component-based architecture makes it easier for developers to create maintainable and reusable UI elements. Moreover, <strong>Elm</strong>, a functional programming language designed for front-end web development, uses abstractions from lambda calculus and category theory to ensure that web applications are highly reliable and easy to maintain. Elm’s strict type system and functional architecture help reduce runtime errors, making it an ideal choice for building robust web applications.</p></li>
<li><p><strong>Data science</strong>: At <strong>X</strong>, functional programming frameworks like <a href="https://github.com/twitter/scalding"><strong>Scalding</strong></a> and <a href="https://github.com/twitter/summingbird"><strong>Summingbird</strong></a> leverage category theory to build scalable and reliable data processing pipelines. Similarly, <a href="https://spark.apache.org/"><strong>Apache Spark</strong></a>, a leading big data processing engine, uses functional principles to efficiently handle vast datasets in distributed environments.</p></li>
<li><p><strong>Reactive frameworks</strong>: <strong>Functional reactive programming (FRP)</strong>, pioneered by <strong>Conal Elliott</strong><sup>7</sup>, uses category theory as its theoretical foundation to model time-varying values and events in a functional way. The challenge with reactive systems (e.g., user interfaces, animations, simulations) is the need to react to events and changing states over time. FRP, and particularly <strong>arrowized FRP</strong><sup>8</sup>, draws heavily on category theory concepts to ensure that computations remain composable and that state and time-dependency can be handled without compromising the functional purity of the program. This is particularly important in real-time systems and UIs, where managing complex event-driven logic becomes overwhelming with traditional programming approaches. Category theory provides a way to formalize these relationships and ensure that the system remains modular and scalable. UI development has many examples of FRP application like Elm, RxJS (React library), ReactiveCocoa and RxSwift, and so on.</p></li>
</ul>
<div class="no-row-height column-margin column-container"><div id="fn7"><p><sup>7</sup>&nbsp;Elliott C., and Hudak P. “Functional Reactive Animation” <em>Proceedings of the International Conference on Functional Programming (ICFP ’97)</em>, 1997. DOI: <a href="https://doi.org/10.1145/258948.25897">10.1145/258948.25897</a>.</p></div><div id="fn8"><p><sup>8</sup>&nbsp;Nilsson H., Courtney A., and Peterson J. “Functional Reactive Programming, Continued.” In <em>Proceedings of the 2002 ACM SIGPLAN Workshop on Haskell (Haskell ’02)</em>, Association for Computing Machinery, New York, NY, USA, 51–64. (2002) <a href="https://doi.org/10.1145/581690.581695">10.1145/581690.581695</a>.</p></div></div><p>The practical impact of these mathematical frameworks is evident in how they enable developers to build systems that are not only more <strong>abstract</strong> and <strong>composable</strong> but also more <strong>resilient</strong>, <strong>maintainable</strong>, and <strong>scalable</strong>. By allowing developers to express complex workflows declaratively, reason about program behavior with mathematical precision, and manage side effects in a controlled manner, these tools have led to the creation of software systems that are easier to maintain and less prone to bugs, even as they grow in complexity.</p>
</section>
</section>
<section id="composability" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="composability">Composability</h3>
<p><strong>Composability</strong> is a fundamental principle in software engineering, driving many advancements in both programming paradigms and software architecture. While composability has long been recognized as a means of managing complexity by dividing systems into smaller, manageable units (echoing the ancient strategy of “divide et impera”), modern approaches have transformed it into something far more powerful, particularly through the use of <strong>formal composability</strong> grounded in mathematical theories like <strong>lambda calculus</strong> and <strong>category theory</strong>. This formal underpinning allows developers to break down complex systems into smaller, composable units that can be reasoned about with mathematical precision, ensuring that systems behave consistently and predictably as they scale.</p>
<p>Lambda calculus and category theory provide a rigorous framework for formal composability, which becomes especially relevant as systems grow in complexity. In traditional software engineering, composability often manifests as design patterns or modular structures, which are useful but can be vague and prescriptive. In contrast, <strong>formal composability</strong> rooted in mathematical theory provides clear, well-defined rules and guarantees. For instance, in functional programming, composability is expressed through function composition and higher-order functions. This allows developers to build complex systems by chaining simple, well-defined components. The power of this approach lies in its mathematical rigor: principles like <strong>confluence</strong> in lambda calculus and <strong>associativity</strong> in category theory ensure that composed functions and systems behave predictably, even as they scale.</p>
<p>This formal approach to composability has far-reaching implications in modern software engineering. In an era where systems are becoming increasingly complex, spanning large codebases, legacy software, and evolving technologies, composability backed by mathematical theory offers several advantages. <strong>Code quality</strong> can be significantly improved, as formal methods ensure that composed components adhere to strict correctness guarantees. Furthermore, <strong>automatic verification</strong> tools can leverage these formal foundations to prove the correctness of complex systems, reducing the need for extensive manual testing.</p>
<p>Another transformative aspect of formal composability is its potential to integrate with <strong>machine learning</strong> and <strong>automated software development</strong>. Since category theory provides a formal framework for defining and composing systems, it allows machine learning models to assist in the development and extension of software by understanding and manipulating these formal structures. This is in stark contrast to traditional software development practices, which often rely on human intuition and experience to apply vague design patterns.</p>
<section id="lambda-calculus-and-category-theory-contributions" class="level4">
<h4 class="anchored" data-anchor-id="lambda-calculus-and-category-theory-contributions">Lambda calculus and category theory contributions</h4>
<p>In lambda calculus, composability is expressed through the concept of <strong>function composition</strong>, which allows developers to combine simple functions to create more complex behaviors. The theoretical strength of lambda calculus lies in its minimalism, only three core constructs (variables, abstractions, and applications) are needed to represent any computation. This simplicity makes the composability of functions not just a practical tool but a <strong>mathematically verified property</strong> of the system. For example, the <strong>Church-Rosser theorem</strong> ensures <strong>confluence</strong>, meaning that if a lambda expression can be reduced to a <strong>normal form</strong>, a fully simplified, terminating expression, then the order of function application does not affect the final outcome. This guarantees <strong>determinism</strong> in function composition, which is crucial for building <strong>reliable and predictable software systems</strong>. In real-world computations, which are typically required to terminate, this property provides strong assurances that composed functions will behave consistently.</p>
<p>Category theory expands on the idea of composability by formalizing it in a more <strong>generalized and abstract framework</strong> that applies across various mathematical domains. One of the most powerful aspects of category theory is the concept of <strong>objects</strong> and <strong>morphisms</strong> (arrows), which are incredibly <strong>generalized constructs</strong>. <strong>Objects</strong> in category theory are not limited to specific data types or structures, they can represent virtually anything, such as sets, types, states, or even entire systems.</p>
<p>This universality allows category theory to model and reason about the relationships between different components of a system, irrespective of their internal structure. By abstracting over the specific details of what an object is, category theory focuses on how objects interact via <strong>morphisms</strong>. This focus on interaction is important because it shifts the attention from the internal complexity of individual components to the relationships and transformations between them. This shift enables more modular and scalable system designs, where the emphasis is on how components work together as a whole, rather than how they function in isolation. By defining interactions formally, category theory allows systems to be composed in a consistent and predictable manner, making it easier to manage complexity and ensure reliability in large-scale or distributed systems. This approach is particularly useful in functional programming, database theory, and even in reasoning about concurrent and asynchronous systems, where the interaction patterns between components are often more critical than the individual operations themselves.</p>
</section>
<section id="practical-impact-2" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="practical-impact-2">Practical impact</h4>
<p>These formal properties of lambda calculus and category theory have profound implications for <strong>formal verification</strong>, <strong>correctness proofs</strong>, and <strong>systematic reasoning</strong> in software engineering:</p>
<ul>
<li><p><strong>Formal verification</strong>: Leveraging the compositionality provided by lambda calculus and category theory, formal verification tools allow developers to rigorously prove properties about their software systems. For instance, in the <strong>Coq</strong> proof assistant, developers can construct and verify mathematical proofs about the behavior of programs. These proofs often rely on compositional reasoning, where smaller, verified components are composed to form larger systems. By guaranteeing that the properties of individual components are preserved through composition, formal verification ensures that the entire system behaves correctly.</p></li>
<li><p><strong>Correctness proofs</strong>: In proof assistants like <strong>Lean</strong> and <strong>Isabelle</strong>, correctness proofs often involve reasoning about the compositional structure of programs. These tools allow developers to define high-level properties and prove that they hold across all possible compositions of the program’s components. The underlying principles of category theory, such as <strong>monoids</strong> and <strong>functors</strong>, are frequently employed to formalize how components interact and to ensure that their composition adheres to specific laws, such as associativity and identity.</p></li>
<li><p><strong>Systematic reasoning</strong>: Category theory also provides tools for reasoning about transformations between different levels of abstraction. For example, <strong>natural transformations</strong> allow developers to map between functors, ensuring that high-level transformations preserve the compositional structure of the system. This is particularly important in <strong>software architecture</strong>, where changes to one part of the system must not violate the integrity of the overall structure. By reasoning systematically about these transformations, developers can ensure that architectural modifications or component substitutions do not introduce errors.</p></li>
</ul>
<p>The practical application of these formal methods can be seen in domains where correctness and reliability are critical. In <strong>safety-critical systems</strong>, such as those governed by standards like <strong>DO-178C</strong> in aerospace and <strong>ISO 26262</strong> in automotive, formal verification is used to ensure that software behaves correctly even in the presence of complex compositions of components. For instance, the <a href="https://compcert.org/"><strong>CompCert</strong></a> C compiler, developed using <strong>Coq</strong>, is formally verified to ensure that the compiled code behaves exactly as specified, with no unexpected side effects from the composition of compilation phases.</p>
<p>Similarly, in <strong>cryptographic protocols</strong> and <strong>blockchain systems</strong>, formal methods ensure that composed cryptographic primitives retain their security properties when combined in larger systems<sup>9</sup>. The composability of these components, verified through formal proofs, guarantees that the overall system remains secure even as new features and protocols are integrated.</p>
<div class="no-row-height column-margin column-container"><div id="fn9"><p><sup>9</sup>&nbsp;See: Backes, M., Pfitzmann, B., and Waidner, M. “Compositional Security for Protocols.” <em>19th IEEE Computer Security Foundations Workshop</em> (2006). DOI: <a href="https://doi.org/10.1109/CSFW.2006.17">10.1109/CSFW.2006.17</a>; Hirai, Y., et al.&nbsp;“A Survey of Formal Methods for Blockchain Smart Contracts.” <em>arXiv preprint arXiv:1908.04868</em> (2019). <a href="https://arxiv.org/abs/1908.04868">arXiv</a></p></div></div></section>
</section>
<section id="future-directions" class="level3">
<h3 class="anchored" data-anchor-id="future-directions">Future directions</h3>
<p>The landscape of software engineering is rapidly evolving, with growing system complexity and ever-increasing demands for reliability, maintainability, and scalability. In this environment, <strong>formal composability</strong> is emerging as a critical tool for tackling these challenges. Traditional composability has always been central to software development, but as systems scale and intertwine with advanced technologies like machine learning, cloud computing, and distributed systems, a more rigorous, mathematically grounded approach becomes essential.</p>
<p>Formal composability, driven by lambda calculus and category theory, is particularly suited to addressing the issues that arise in <strong>large-scale and distributed systems</strong>, <strong>legacy codebases</strong>, and <strong>multidisciplinary projects</strong>. As these systems grow, the need for <strong>mathematical guarantees</strong> around correctness, performance, and security becomes paramount. By leveraging formal composability, software engineers can design systems that are easier to extend, verify, and maintain, reducing the risks associated with manual interventions and human errors.</p>
<p>Moreover, <strong>future software development practices</strong> are likely to be increasingly influenced by <strong>automated reasoning tools</strong> and <strong>machine learning assistants</strong>. These tools thrive in environments where the underlying logic is based on formal structures rather than ambiguous or prescriptive design patterns. Formal composability ensures that even complex systems can be extended and adapted by machines, allowing for automatic code generation, verification, and optimization based on mathematically sound principles. This paves the way for more <strong>autonomous software development processes</strong>, where machines assist developers in navigating the complexities of modern systems, ensuring that the resulting code is not only functional but also robust and scalable.</p>
<p>In essence, formal composability is transforming the future of software engineering, enabling the industry to cope with the growing complexity of systems while leveraging advanced tools to enhance productivity and maintain high standards of quality.</p>
</section>
</section>
<section id="haskell" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="haskell">Haskell</h2>
<p>After exploring the theoretical foundations of lambda calculus and category theory, it’s time to see how these concepts are practically applied in a programming language that embodies them: <a href="https://www.haskell.org/"><strong>Haskell</strong></a><sup>10</sup>. Haskell’s design is deeply influenced by these mathematical principles, making it an ideal language for demonstrating how functional programming can be both elegant and powerful. In this section, we’ll guide you through the basics of Haskell, showing how the theory we’ve discussed comes to life in code. Whether you’re new to functional programming or looking to strengthen your understanding, these examples will help you get started with Haskell, step by step.</p>
<div class="no-row-height column-margin column-container"><div id="fn10"><p><sup>10</sup>&nbsp;Haskell was born out of the need for a standardized, open-source functional programming language that could serve as a platform for both academic research and industrial applications. In the late 1980s, a committee of prominent computer scientists, including <strong>Simon Peyton Jones</strong>, <strong>Philip Wadler</strong>, and <strong>John Hughes</strong>, began working on the language. Their goal was to unify the numerous functional programming languages that were emerging at the time, each with its own features but no single standard. This led to the publication of the first version of the Haskell language specification in 1990. Named after <strong>Haskell Curry</strong>, an American mathematician and logician whose work on combinatory logic contributed to the development of functional programming, Haskell has since evolved through several versions. The language has become renowned for its strong emphasis on immutability, lazy evaluation, and type safety, underpinned by concepts from category theory and lambda calculus. Today, Haskell is maintained and developed by the <strong>Haskell Community</strong> in an open-source model. While <strong>GHC (Glasgow Haskell Compiler)</strong> is the most widely used implementation, developed and maintained by a team led by <strong>Simon Peyton Jones</strong> and <strong>SPJ’s team at Microsoft Research</strong>, contributions come from many individuals across both academia and industry. The <strong>Haskell Foundation</strong>, formed in 2020, plays a key role in organizing the community, maintaining the infrastructure, and promoting the adoption of Haskell in the industry.</p></div></div><section id="lambda-calculus" class="level3">
<h3 class="anchored" data-anchor-id="lambda-calculus">Lambda calculus</h3>
<p>Lambda calculus is at the heart of Haskell, and lambda expressions are a common way to define anonymous functions. For example, the following Haskell code defines and applies a simple lambda expression:</p>
<div class="sourceCode" id="annotated-cell-6" style="background: #f1f3f5;"><pre class="sourceCode numberSource haskell code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode haskell"><a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-6-1" class="code-annotation-target">increment <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> \x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="annotated-cell-6-2"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-6" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-6-3" class="code-annotation-target">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> increment <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-6" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="1" data-code-annotation="1">This defines a lambda function <code>\x -&gt; x + 1</code>, which takes an argument <code>x</code> and adds <code>1</code> to it.</span>
</dd>
<dt data-target-cell="annotated-cell-6" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-6" data-code-lines="3" data-code-annotation="2">The function <code>increment</code> is applied to the value <code>5</code>, resulting in <code>6</code>.</span>
</dd>
</dl>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["5"] --&gt;|"\x -&gt; x + 1"| B["6"]
  B --&gt;|"result"| C["6"]
</pre>
</div>
<p></p><figcaption> The diagram illustrates the application of the lambda function <code>increment</code> to the input value <code>5</code>, resulting in <code>6</code> </figcaption> </figure><p></p>
</div>
</div>
</div>
<p>In this simple example, we see the essence of lambda calculus: functions as first-class entities that can be defined and applied without requiring explicit naming. Lambda functions in Haskell correspond to the abstraction and application concepts in lambda calculus.</p>
</section>
<section id="function-composition" class="level3">
<h3 class="anchored" data-anchor-id="function-composition">Function composition</h3>
<p>Function composition is a core principle in both lambda calculus and category theory. In Haskell, the composition operator <code>(.)</code> allows us to chain functions together, creating more complex behavior from simpler components:</p>
<div class="sourceCode" id="annotated-cell-7" style="background: #f1f3f5;"><pre class="sourceCode numberSource haskell code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode haskell"><a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-7-1" class="code-annotation-target">addOne <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> \x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-7-2" class="code-annotation-target">multiplyByTwo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> \x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="annotated-cell-7-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-7-4" class="code-annotation-target">composedFunction <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> addOne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> multiplyByTwo</span>
<span id="annotated-cell-7-5"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-7-6" class="code-annotation-target">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> composedFunction <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-7" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="1" data-code-annotation="1">The <code>addOne</code> function adds <code>1</code> to its input.</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="2" data-code-annotation="2">The <code>multiplyByTwo</code> function multiplies its input by <code>2</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="4" data-code-annotation="3">The <code>composedFunction</code> is the result of composing <code>addOne</code> and <code>multiplyByTwo</code>. The composition works right-to-left, so <code>multiplyByTwo</code> is applied first, followed by <code>addOne</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="6" data-code-annotation="4">Applying <code>composedFunction</code> to <code>3</code> gives the result <code>7</code>.</span>
</dd>
</dl>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["3"] --&gt;|"multiplyByTwo"| B["6"]
  B --&gt;|"addOne"| C["7"]
  C --&gt;|"result"| D["7"]
</pre>
</div>
<p></p><figcaption> This diagram illustrates the composition of two functions: <code>multiplyByTwo</code> followed by <code>addOne</code>, applied to the value <code>3</code> </figcaption> </figure><p></p>
</div>
</div>
</div>
<p>This demonstrates how lambda calculus expresses function composition, a fundamental concept in category theory. In categorical terms, functions are <strong>morphisms</strong> (arrows) between <strong>objects</strong> (data types), and composition allows us to chain these morphisms together.</p>
</section>
<section id="categories" class="level3">
<h3 class="anchored" data-anchor-id="categories">Categories</h3>
<p>In category theory, a <strong>category</strong> consists of <strong>objects</strong> and <strong>morphisms</strong> (arrows) between these objects, with two essential properties: <strong>composition</strong> (associative) and the existence of an <strong>identity morphism</strong> for each object. In Haskell, types can be seen as objects, and functions as morphisms. Let’s explore this idea further:</p>
<div class="sourceCode" id="annotated-cell-8" style="background: #f1f3f5;"><pre class="sourceCode numberSource haskell code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode haskell"><a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-8-1" class="code-annotation-target"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">identity ::</span> a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> a</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-8-2" class="code-annotation-target">identity x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="annotated-cell-8-3"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-8-4" class="code-annotation-target">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> identity <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-8" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="1" data-code-annotation="1">The <code>identity</code> function has the type <code>a -&gt; a</code>, which means it takes a value of any type <code>a</code> and returns a value of the same type.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="2" data-code-annotation="2">The function body simply returns its input unchanged.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="4" data-code-annotation="3">Applying <code>identity</code> to the value <code>10</code> returns <code>10</code>, demonstrating that <code>identity</code> acts as a neutral element for composition.</span>
</dd>
</dl>
<p>In the context of category theory, this <code>identity</code> function represents the identity morphism for any object (type) in the category. The concept of an identity morphism guarantees that for any object, there is an arrow that maps it to itself.</p>
<p>The following diagram shows a concrete example of the identity function in Haskell corresponding to given code:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["10"] --&gt;|"identity"| B["10"]
  B --&gt;|"result"| C["10"]
</pre>
</div>
<p></p><figcaption> This diagram illustrates the identity function, where the input is passed through unchanged</figcaption> </figure><p></p>
</div>
</div>
</div>
</section>
<section id="functors-1" class="level3">
<h3 class="anchored" data-anchor-id="functors-1">Functors</h3>
<p>Functors are an important concept in category theory, and Haskell provides built-in support for them. A functor is a mapping between categories that preserves the structure of objects and morphisms. In Haskell, a <code>Functor</code> is a type class that allows you to apply a function to values inside a context (e.g., a <code>Maybe</code> or a list) without changing the context itself:</p>
<div class="sourceCode" id="annotated-cell-9" style="background: #f1f3f5;"><pre class="sourceCode numberSource haskell code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode haskell"><a class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-9-1" class="code-annotation-target"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">instance</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Functor</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Maybe</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">where</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-9-2" class="code-annotation-target">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> _ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Nothing</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Nothing</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-9-3" class="code-annotation-target">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> f (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Just</span> x) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Just</span> (f x)</span>
<span id="annotated-cell-9-4"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-9-5" class="code-annotation-target">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) (<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Just</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-9" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="1" data-code-annotation="1">Define a Functor instance for the <code>Maybe</code> type.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="2" data-code-annotation="2">If the value is <code>Nothing</code>, <code>fmap</code> does nothing and returns <code>Nothing</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="3" data-code-annotation="3">If the value is <code>Just x</code>, <code>fmap</code> applies the function <code>f</code> to <code>x</code> and returns the result inside a <code>Just</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="5" data-code-annotation="4">Applying <code>fmap (+1)</code> to <code>Just 5</code> results in <code>Just 6</code>.</span>
</dd>
</dl>
<p>This example demonstrates the functorial behavior of the <code>Maybe</code> type, where functions can be lifted into the context of <code>Maybe</code> without altering the underlying structure. In categorical terms, <code>fmap</code> preserves the structure of the <code>Maybe</code> functor.</p>
<p>Code can be represented as follows:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TD
  classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
  linkStyle default stroke:#0000ff,stroke-width:2px,fill:none

  A["Maybe A"] --&gt;|"fmap f"| B["Maybe B"]
  M["Just x"] --&gt;|"fmap (+1)"| N["Just (x + 1)"]
  E["Nothing"] --&gt;|"fmap f"| E["Nothing"]
</pre>
</div>
<p></p><figcaption> A commutative diagram showing how the functor <code>fmap</code> maps the <code>Maybe</code> structure, preserving the context while applying a function to the value</figcaption> </figure><p></p>
</div>
</div>
</div>
</section>
<section id="other-notable-haskell-concepts" class="level3">
<h3 class="anchored" data-anchor-id="other-notable-haskell-concepts">Other notable Haskell concepts</h3>
<p>Beyond basic lambda calculus and category theory concepts, Haskell introduces several advanced features that are rooted in these mathematical foundations. These concepts are implemented through specific Haskell libraries and programming structures that make these abstract ideas concrete and usable in real-world applications.</p>
<p>One such concept is <strong>Monads</strong>, which extend the idea of functors by providing a formal framework for chaining computations that include side effects. In Haskell, monads are central to managing effects such as IO, state, and exceptions in a pure functional context. The <strong><code>Monad</code> type class</strong> is provided in the <code>base</code> library, and instances like <strong><code>Maybe</code></strong>, <strong><code>IO</code></strong>, and <strong><code>Either</code></strong> are common monads that allow for composition of effectful computations. Libraries such as <strong><code>mtl</code></strong> and <strong><code>transformers</code></strong> provide monad transformers, which allow you to stack and combine multiple monadic effects.</p>
<p><strong>Applicative Functors</strong>, a concept that extends functors and lies between functors and monads, are implemented via the <strong><code>Applicative</code> type class</strong> in the <code>base</code> library. Applicative functors are useful for computations where effects are independent and can be applied in parallel. The popular <strong><code>Control.Applicative</code></strong> module contains utilities like <strong><code>&lt;*&gt;</code></strong> that allow for combining effects in an applicative context. Libraries like <strong><code>optparse-applicative</code></strong> use this concept to create complex command-line interfaces in a compositional way.</p>
<p>Haskell also introduces <strong>Arrows</strong>, a generalization of both monads and applicative functors, useful for describing computations with complex input-output relationships. The <strong><code>Arrow</code> type class</strong> in the <code>base</code> library provides an abstraction for computations that are not easily expressible using monads alone. Libraries like <strong><code>Control.Arrow</code></strong> provide combinators for working with arrows, and arrow-based programming is prominent in areas like <strong>functional reactive programming (FRP)</strong>. The <strong><code>Yampa</code></strong> library, for instance, leverages arrows to manage time-varying values, making it useful for games, simulations, and reactive systems.</p>
<p>Another advanced concept is <strong>Lenses</strong>, which provide a composable way to manage and transform immutable data structures. The <strong><code>lens</code></strong> library is the most prominent implementation of this idea in Haskell, providing a powerful abstraction for accessing and modifying nested data structures. Lenses make it easy to work with deeply nested records, a common scenario in real-world applications. Lenses combine functional programming principles with category theory concepts like <strong>functors</strong> and <strong>monoids</strong>, allowing developers to create complex transformations in a modular and reusable way.</p>
<p>Lastly, <strong>Type Classes</strong> in Haskell provide a way to define generic interfaces that can be implemented by multiple types. This concept is closely related to the idea of <strong>categorical products</strong> and <strong>exponentials</strong>, as it allows for polymorphic functions that can operate on various data types in a compositional manner. Libraries like <strong><code>base</code></strong> provide common type classes like <strong><code>Functor</code></strong>, <strong><code>Monad</code></strong>, and <strong><code>Foldable</code></strong>, which are essential for leveraging category theory principles in practical programming.</p>
<p>These advanced concepts, grounded in category theory and lambda calculus, are implemented through a rich ecosystem of Haskell libraries and programming structures. They provide developers with powerful tools for building modular, scalable, and maintainable systems while ensuring correctness and composability at every level.</p>
</section>
</section>
<section id="some-references-for-a-self-study-path" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="some-references-for-a-self-study-path">Some references for a self-study path</h2>
<p>For a solid self-study path into Haskell, category theory, and their applications in secure coding, asynchronous systems, distributed systems, and blockchain, start with resources tailored to functional programming and category theory.</p>
<p><strong>Learn You a Haskell for Great Good!</strong> by Miran Lipovača<sup>11</sup> is a beginner-friendly guide that introduces Haskell with engaging examples, making it an excellent starting point for understanding functional programming. Following that, <strong>“Haskell Programming from First Principles”</strong><sup>12</sup> by Christopher Allen and Julie Moronuki offers a more thorough exploration of Haskell, covering the language’s foundational concepts in depth. As you progress, <strong>Real World Haskell</strong><sup>13</sup> by Bryan O’Sullivan, Don Stewart, and John Goerzen will help bridge the gap between academic knowledge and practical application, particularly in real-world software development scenarios.</p>
<div class="no-row-height column-margin column-container"><div id="fn11"><p><sup>11</sup>&nbsp;Lipovača M. “Learn You a Haskell for Great Good!” <em>No Starch Press</em> (2011). ISBN: 9781593272838.</p></div><div id="fn12"><p><sup>12</sup>&nbsp;Allen C., and Moronuki J. “Haskell Programming from First Principles” <em>Self-published</em> (2016). ISBN: 9780692636946.</p></div><div id="fn13"><p><sup>13</sup>&nbsp;O’Sullivan B., Don Stewart, and Goerzen J. “Real World Haskell” <em>O’Reilly Media</em> (2008). ISBN: 9780596514983.</p></div><div id="fn14"><p><sup>14</sup>&nbsp;Milewski B. “Category Theory for Programmers” <em>Leanpub</em> (2019). ISBN: 9781727640791. See also the <a href="https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/">online</a> version.</p></div><div id="fn15"><p><sup>15</sup>&nbsp;Mac Lane S. “Categories for the Working Mathematician” <em>Springer</em> (1998). ISBN: 9780387984032.</p></div></div><p>To dive into category theory, particularly as it applies to functional programming, <strong>Category Theory for Programmers</strong><sup>14</sup> by Bartosz Milewski is an essential resource. This book demystifies category theory for developers, providing clear explanations with code examples in Haskell. Milewski’s blog series on category theory further supplements this learning with a more informal, hands-on approach. For those interested in understanding category theory at a deeper level, <strong>Categories for the Working Mathematician</strong><sup>15</sup> by Saunders Mac Lane offers a more rigorous mathematical foundation, although it is more abstract and theoretical.</p>
<p>As you build your understanding of Haskell and category theory, you can explore specialized applications in areas like secure coding and blockchain. For secure coding, <strong>Functional Programming in Scala</strong><sup>16</sup> by Paul Chiusano and Runar Bjarnason applies functional programming principles in a way that emphasizes safety and correctness, concepts essential to secure systems. In blockchain, Haskell’s strong typing system and mathematical precision have made it a popular choice, and you can explore <strong>IOHK’s</strong><sup>17</sup> resources on using Haskell for blockchain development, particularly within the Cardano ecosystem. For asynchronous and distributed systems, <strong>Distributed Systems with Node.js: Building Enterprise-Ready Backend Services</strong><sup>18</sup> by Thomas Hunter II explores functional programming patterns in distributed systems, offering a path to scaling your knowledge of Haskell and functional paradigms to complex, real-world systems.</p>
<div class="no-row-height column-margin column-container"><div id="fn16"><p><sup>16</sup>&nbsp;Chiusano P., Bjarnason R. “Functional Programming in Scala” <em>Manning Publications</em> (2014). ISBN: 9781617290657.</p></div><div id="fn17"><p><sup>17</sup>&nbsp;IOHK, the company behind Cardano, uses Haskell for its blockchain development. You can explore their <a href="https://plutus.iohk.io/">Plutus platform</a> for smart contract development using Haskell.</p></div><div id="fn18"><p><sup>18</sup>&nbsp;Hunter II T. “Distributed Systems with Node.js: Building Enterprise-Ready Backend Services.” <em>O’Reilly Media</em> (2020). ISBN: 9781492077299.</p></div><div id="fn19"><p><sup>19</sup>&nbsp;Fong B., and Spivak D.I. “An Invitation to Applied Category Theory: Seven Sketches in Compositionality” <em>Cambridge University Press</em> (2019). DOI: <a href="https://doi.org/10.1017/9781108668804">10.1017/9781108668804</a>. <a href="https://arxiv.org/abs/1803.05316">arXiv</a>.</p></div></div><p>To deepen your understanding of how composability, a core concept in both category theory and software engineering, can be leveraged in real-world applications, <strong>An Invitation to Applied Category Theory: Seven Sketches in Compositionality</strong><sup>19</sup> by Brendan Fong and David Spivak offers an excellent guide. This book emphasizes how category theory, and more specifically compositionality, can be applied across various domains, including software engineering. It provides detailed case studies and examples that demonstrate how formal composability enables us to tackle complex systems with modular, scalable solutions.</p>
<p>Fong and Spivak also taught a <a href="https://ocw.mit.edu/courses/18-s097-applied-category-theory-january-iap-2019/">course</a> at MIT based on this book, where they introduced students to applied category theory with practical applications in mind. The <a href="https://www.youtube.com/playlist?list=PLhgq-BqyZ7i5lOqOqqRiS0U5SwTmPpHQ5">videos</a> from this course are available online, providing a valuable resource for those looking to explore these concepts in greater depth through structured lectures and problem-solving sessions. This combination of book and course materials makes an ideal starting point for developers interested in applying category theory to real-world software engineering challenges, enabling them to design more reliable, maintainable, and scalable systems.</p>
</section>
<section id="other-references" class="level2">
<h2 class="anchored" data-anchor-id="other-references">Other references</h2>
<p>Bradley TD., Terilla J., and Vlassopoulos Y. “An Enriched Category Theory of Language: From Syntax to Semantics” <em>La Matematica 1</em>, 551–580 (2022). DOI: <a href="https://doi.org/10.1007/s44007-022-00021-2">10.1007/s44007-022-00021-2</a>. <a href="https://arxiv.org/abs/2106.07890">arXiv</a>.</p>
<p>Lesani M., Sun C., and Palsberg J. “Safe and efficient hybrid memory management for safe languages” <em>ACM SIGPLAN Notices</em> 49, no. 1 (2014): 55-66. DOI: <a href="https://doi.org/10.1145/2544173.2535872">10.1145/2544173.2535872</a>.</p>
<p>McBride C., and Paterson R. “Applicative programming with effects” <em>Journal of Functional Programming</em> 18, no. 1 (2008): 1-13. DOI: <a href="https://doi.org/10.1017/S0956796807006326">10.1017/S0956796807006326</a>.</p>
<p>Claessen K., and Hughes J. “QuickCheck: a lightweight tool for random testing of Haskell programs” <em>ACM SIGPLAN Notices</em> 35, no. 9 (2000): 268-279. DOI: <a href="https://doi.org/10.1145/357766.351266">10.1145/357766.351266</a>.</p>
<p>Stewart D., and Bergmark A. “Building Reliable Systems with Functional Programming in Haskell” <em>Communications of the ACM</em> 62, no. 11 (2019): 66-75. DOI: <a href="https://doi.org/10.1145/3363825">10.1145/3363825</a>.</p>


</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/">CC BY-NC-ND 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{montano2024,
  author = {Montano, Antonio},
  title = {The {Relationship} {Between} {Category} {Theory,} {Lambda}
    {Calculus,} and {Functional} {Programming} in {Haskell}},
  date = {2024-08-10},
  url = {https://antomon.github.io/posts/category-theory-functional-programming-compositionality/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-montano2024" class="csl-entry quarto-appendix-citeas">
Montano, Antonio. 2024. <span>“The Relationship Between Category Theory,
Lambda Calculus, and Functional Programming in Haskell.”</span> August
10, 2024. <a href="https://antomon.github.io/posts/category-theory-functional-programming-compositionality/">https://antomon.github.io/posts/category-theory-functional-programming-compositionality/</a>.
</div></div></section></div> ]]></description>
  <category>Haskell</category>
  <category>mathematics</category>
  <category>programming</category>
  <category>theory</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/category-theory-functional-programming-compositionality/</guid>
  <pubDate>Fri, 09 Aug 2024 22:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/category-theory-functional-programming-compositionality/monad_diagram.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>GPT-4 Anniversary</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/gpt-4-anniversary/</link>
  <description><![CDATA[ 





<section id="it-feels-like-a-lifetime-but-its-only-been-a-year" class="level2">
<h2 class="anchored" data-anchor-id="it-feels-like-a-lifetime-but-its-only-been-a-year">It feels like a lifetime, but it’s only been a year!</h2>
<p>March 2023 marked a turning point in the field of artificial intelligence with the release of <a href="https://openai.com/research/gpt-4">OpenAI’s GPT-4</a>. This powerful language model, boasting significant advancements over its predecessors, sent shockwaves through various industries and ignited discussions about the future of human-machine interaction. One year later, it’s clear that GPT-4’s impact has been wide-ranging and continues to evolve.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/gpt-4-anniversary/sama tweet.png" class="img-fluid figure-img" alt="Sam Altman tweet"></p>
<figcaption>Sam Altman tweet</figcaption>
</figure>
</div>
<p>One of the most notable effects has been the acceleration of AI acceptance. GPT-4’s ability to perform exceptionally on standardized tests, generate human-quality writing, and integrate seamlessly with multimodal data like images and sound, has fostered a sense of legitimacy for large language models. This has emboldened researchers and businesses to explore AI applications with greater confidence.</p>
<p>In the course of evaluating the competencies of GPT-4, OpenAI subjected the model to a series of standardized academic and professional examinations, including the Uniform Bar Exam, the Law School Admission Test (LSAT), the Graduate Record Examination (GRE) Quantitative section, and assorted Advanced Placement (AP) subject tests. GPT-4 demonstrated proficiency across numerous assessments, achieving scores comparable to those of human test-takers. This implies that, were GPT-4 to be evaluated purely on its capacity to perform on these tests, it would possess the qualifications to gain admission into law schools and a broad range of universities.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/gpt-4-anniversary/gpt-4 exams.png" class="img-fluid figure-img" alt="GPT-4 exams results from the March 2023 announcement"></p>
<figcaption>GPT-4 exams results from the March 2023 announcement</figcaption>
</figure>
</div>
<p>Prior LLMs often struggled with tasks requiring an understanding of context spread across long stretches of text. With a context windows from 8k to 32k tokens, GPT-4 was able to analyze a much larger chunk of text, allowing it to grasp complex relationships between ideas and follow long-range dependencies.</p>
<p>On September 25th, 2023, OpenAI <a href="https://openai.com/research/gpt-4v-system-card">announced</a> the rollout of two new features that extend how people can interact with its recent and most advanced model, GPT-4: the ability to ask questions about images and to use speech as an input to a query. Then, on November 6th, 2023, OpenAI announced API access to GPT-4 with Vision. This functionality marked GPT-4’s move into being a multimodal model. This means that the model can accept multiple “modalities” of input – text and images – and return results based on those inputs.</p>
<p>After a year, GPT-4 remains one of the most advanced LLMs, even though the competition is fierce and with formidable opponents. If the rumors are confirmed, in the coming months we will have an even more powerful version that will continue to amaze us, just like the previous ones.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/gpt-4-anniversary/murati-1y.png" class="img-fluid figure-img" alt="Mira Murati one-year anniversary celebration tweet"></p>
<figcaption>Mira Murati one-year anniversary celebration tweet</figcaption>
</figure>
</div>
</section>
<section id="outstanding-achievements" class="level2">
<h2 class="anchored" data-anchor-id="outstanding-achievements">Outstanding achievements</h2>
<section id="the-turing-test" class="level3">
<h3 class="anchored" data-anchor-id="the-turing-test">The Turing Test</h3>
<section id="what-is-about" class="level4">
<h4 class="anchored" data-anchor-id="what-is-about">What is about</h4>
<p>The Turing Test, introduced by British mathematician and computer scientist Alan Turing in 1950, is a benchmark for evaluating a machine’s ability to exhibit intelligent behavior indistinguishable from that of a human. In his seminal paper, “Computing Machinery and Intelligence,” Turing proposed the question, “Can machines think?” and introduced the concept of the “imitation game” as a criterion for machine intelligence. The test involves a human judge engaging in natural language conversations with both a machine and a human without seeing them. If the judge cannot reliably tell the machine from the human, the machine is said to have passed the Turing Test. This test has become a fundamental concept in the philosophy of artificial intelligence, sparking debates about the nature of intelligence and the potential of machines to emulate human-like consciousness and reasoning.</p>
<p>The Turing Test’s significance lies in its simplicity and profound implications. It provides a straightforward criterion for intelligence that does not rely on the machine’s ability to replicate the human brain’s workings but rather on the outcome of its interactions. Passing the Turing Test is considered a milestone for AI, suggesting that the machine can replicate human-like responses under certain conditions, thereby challenging the distinctions between human and machine intelligence.</p>
</section>
<section id="ocean-big-5" class="level4">
<h4 class="anchored" data-anchor-id="ocean-big-5">OCEAN Big-5</h4>
<p>Expanding on the OCEAN Big-5, also known as the Big Five personality traits, it’s a model based on common language descriptors of personality. These traits represent broad dimensions of human personality and include:</p>
<ol type="1">
<li><p><strong>Openness to experience</strong>: Characterized by imagination, creativity, and a willingness to try new things. High openness indicates a person who enjoys novelty, variety, and intellectual pursuits. Lower openness may suggest a more conventional and practical orientation.</p></li>
<li><p><strong>Conscientiousness</strong>: Involves self-discipline, orderliness, and a drive for achievement. Highly conscientious individuals are organized and responsible, often with a strong work ethic. Lower scores may indicate a more relaxed or spontaneous approach to life.</p></li>
<li><p><strong>Extraversion</strong>: Denotes sociability, excitement-seeking, and positive emotions. Extroverts are typically energetic and enjoy being around other people, while introverts (lower extraversion) may prefer solitude and more subdued environments.</p></li>
<li><p><strong>Agreeableness</strong>: Reflects a person’s altruistic, cooperative, and compassionate nature. High agreeableness is associated with trust and helpfulness, whereas lower agreeableness may manifest as skepticism or competitive behavior.</p></li>
<li><p><strong>Neuroticism</strong>: Pertains to emotional stability and the tendency to experience negative emotions. Higher neuroticism scores indicate a greater likelihood of feeling anxious, depressed, or angry, while lower scores suggest a calmer and more resilient disposition.</p></li>
</ol>
<p>These traits provide a framework for understanding human personality and predicting a wide range of behaviors, from academic and occupational success to relationships and well-being. In the context of AI, applying the OCEAN Big-5 to evaluate chatbots like ChatGPT allows researchers to assess how closely these systems mimic human personality traits, contributing to the ongoing exploration of machine “personality” and its implications for human-AI interaction.</p>
</section>
<section id="the-research-from-jackson-et-al." class="level4">
<h4 class="anchored" data-anchor-id="the-research-from-jackson-et-al.">The Research from Jackson et al.</h4>
<p>A research consortium led by Matthew Jackson, who holds the William D. Eberle Professorship of Economics within Stanford University’s School of Humanities and Sciences, conducted an empirical analysis of the behavioral and personality attributes of the AI-driven entities within ChatGPT, employing methodologies derived from psychology and behavioral economics. Their findings, documented in the paper <a href="https://www.pnas.org/doi/10.1073/pnas.2313925121">A Turing test of whether AI chatbots are behaviorally similar to humans</a> published in the Proceedings of the National Academy of Sciences, demonstrated that ChatGPT 4, exhibited indistinguishability from human participants in behavioral assessments. Notably, when the AI opted for atypical human behavioral patterns, it manifested increased levels of cooperativeness and altruism.</p>
<p>This investigative endeavor subjected versions 3 and 4 of ChatGPT to a prevalent personality assessment alongside a series of behavioral experiments designed to forecast socio-economic and ethical decision-making tendencies. These experiments encompassed standardized scenarios that required participants to make choices on dilemmas such as betraying a complicit criminal or allocating monetary resources under various incentive structures. The AI responses were benchmarked against a dataset comprising over 100,000 human participants spanning 50 nations.</p>
<p>Within the OCEAN Big-5, ChatGPT version 4 aligned with the normal human range for these traits but ranked in the lower third percentile in terms of agreeableness compared to the human sample. Despite passing the Turing Test, this level of agreeableness suggests limited social appeal.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/gpt-4-anniversary/pnas.2313925121fig01.jpg" class="img-fluid figure-img" width="600"></p>
<figcaption>“Big Five” personality profiles of ChatGPT-4 and ChatGPT-3 compared with the distributions of human subjects. The blue, orange, and green lines correspond to the median scores of humans, ChatGPT-4, and ChatGPT-3 respectively; the shaded areas represent the middle 95% of the scores, across each of the dimensions. ChatGPT’s personality profiles are within the range of the human distribution, even though ChatGPT-3 scored noticeably lower in Openness.</figcaption>
</figure>
</div>
<p>Comparative analysis between versions 3 and 4 revealed significant advancements in the latter’s performance, with version 3 displaying agreeableness and openness to experience at the lower end of the human spectrum, indicative of a lesser capacity for novel ideas and experiences.</p>
<p>The methodology for assessing AI behavior in the experimental games involved calculating the frequency of specific actions (e.g., equitable distribution of funds) among both human participants and the AI. Subsequently, the researchers compared a randomly selected human action to one from the AI sessions to ascertain the likelihood of human origin. In the majority of these exercises, actions taken by version 4 were more consistently aligned with human behavior than those of version 3, which did not meet the Turing Test criteria.</p>
</section>
</section>
<section id="impact-on-work" class="level3">
<h3 class="anchored" data-anchor-id="impact-on-work">Impact on Work</h3>
<p>The study <a href="https://www.hbs.edu/ris/Publication%20Files/24-013_d9b45b68-9e74-42d6-a1c6-c72fb70c7282.pdf">Navigating the Jagged Technological Frontier: Field Experimental Evidence of the Effects of AI on Knowledge Worker Productivity and Quality</a> by Dell’Acqua et al.&nbsp;explores the impact of artificial intelligence (AI), specifically Large Language Models (LLMs) like GPT-4, on the productivity and quality of work among knowledge workers at Boston Consulting Group (BCG). This comprehensive experiment involved 758 consultants and aimed to understand how AI affects complex, knowledge-intensive tasks.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/gpt-4-anniversary/Distribution-output-quality.png" class="img-fluid figure-img" alt="Distribution of output quality across all the tasks" width="900"></p>
<figcaption>Distribution of output quality across all the tasks. The blue group did not use AI, the green and red groups used AI, the red group got some additional training on how to use AI</figcaption>
</figure>
</div>
<p>The study introduces the concept of a “jagged technological frontier,” suggesting that AI capabilities are uneven across different tasks. Some tasks are significantly enhanced by AI, leading to improved productivity and quality, while others, seemingly similar in difficulty, lie outside AI’s current capabilities and can lead to decreased performance when AI is utilized.</p>
<p>Participants were divided into three groups: a control group with no AI access, a group with access to GPT-4, and a group with GPT-4 access plus a prompt engineering overview. The findings revealed that for tasks within AI’s capabilities, the use of AI led to a notable increase in both the quantity and quality of work. Consultants were able to complete more tasks and with better outcomes, demonstrating that AI can be a powerful tool for augmenting human capabilities in knowledge work.</p>
<p>However, for tasks selected to be outside the AI’s frontier, reliance on AI resulted in a decrease in performance. This highlights the importance of understanding AI’s limitations and suggests that indiscriminate use of AI can have negative consequences.</p>
<p>The study also observed two distinct patterns of AI integration among successful users: “Centaurs,” who strategically divided tasks between themselves and AI, and “Cyborgs,” who integrated AI more fully into their workflow. These findings suggest varying approaches to integrating AI into professional tasks, emphasizing the need for users to adapt their strategies based on the task at hand and AI’s capabilities.</p>
<p>In summary, the study provides empirical evidence on the dual role of AI in enhancing and sometimes detracting from professional knowledge work. It highlights the need for careful consideration of when and how to deploy AI tools, as well as the potential for AI to significantly impact work processes and outcomes within its capabilities. The concept of the jagged technological frontier offers a framework for understanding the complex and evolving relationship between AI and human work, underscoring the importance of navigating this frontier effectively to harness the benefits of AI while mitigating its risks.</p>
</section>
</section>
<section id="march-2024-landscape" class="level2">
<h2 class="anchored" data-anchor-id="march-2024-landscape">March 2024 landscape</h2>
<section id="openai-current-offering" class="level3">
<h3 class="anchored" data-anchor-id="openai-current-offering">OpenAI current offering</h3>
<p>GPT-4 is available in the OpenAI API to <a href="https://help.openai.com/en/articles/7102672-how-can-i-access-gpt-4">paying customers</a>. Like <strong><code>gpt-3.5-turbo</code></strong>, GPT-4 is optimized for chat but works well for traditional completions tasks using the <a href="https://platform.openai.com/docs/api-reference/chat">Chat Completions API</a>. Learn how to use GPT-4 in our <a href="https://platform.openai.com/docs/guides/text-generation">text generation guide</a>.</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th style="text-align: left;"><strong>MODEL</strong></th>
<th style="text-align: left;"><strong>DESCRIPTION</strong></th>
<th style="text-align: left;"><strong>CONTEXT WINDOW</strong></th>
<th style="text-align: left;"><strong>TRAINING DATA</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">gpt-4-0125-preview</td>
<td style="text-align: left;"><strong>GPT-4 Turbo</strong><br>
The latest GPT-4 model intended to reduce cases of “laziness” where the model doesn’t complete a task. Returns a maximum of 4,096 output tokens. <a href="https://openai.com/blog/new-embedding-models-and-api-updates">Learn more</a>.</td>
<td style="text-align: left;">128,000 tokens</td>
<td style="text-align: left;">Up to Dec 2023</td>
</tr>
<tr class="even">
<td style="text-align: left;">gpt-4-turbo-preview</td>
<td style="text-align: left;">Currently points to <code>gpt-4-0125-preview</code>.</td>
<td style="text-align: left;">128,000 tokens</td>
<td style="text-align: left;">Up to Dec 2023</td>
</tr>
<tr class="odd">
<td style="text-align: left;">gpt-4-1106-preview</td>
<td style="text-align: left;">GPT-4 Turbo model featuring improved instruction following, JSON mode, reproducible outputs, parallel function calling, and more. Returns a maximum of 4,096 output tokens. This is a preview model. <a href="https://openai.com/blog/new-models-and-developer-products-announced-at-devday">Learn more</a>.</td>
<td style="text-align: left;">128,000 tokens</td>
<td style="text-align: left;">Up to Apr 2023</td>
</tr>
<tr class="even">
<td style="text-align: left;">gpt-4-vision-preview</td>
<td style="text-align: left;">GPT-4 with the ability to understand images, in addition to all other GPT-4 Turbo capabilities. Currently points to <code>gpt-4-1106-vision-preview</code>.</td>
<td style="text-align: left;">128,000 tokens</td>
<td style="text-align: left;">Up to Apr 2023</td>
</tr>
<tr class="odd">
<td style="text-align: left;">gpt-4-1106-vision-preview</td>
<td style="text-align: left;">GPT-4 with the ability to understand images, in addition to all other GPT-4 Turbo capabilities. Returns a maximum of 4,096 output tokens. This is a preview model version. <a href="https://openai.com/blog/new-models-and-developer-products-announced-at-devday">Learn more</a>.</td>
<td style="text-align: left;">128,000 tokens</td>
<td style="text-align: left;">Up to Apr 2023</td>
</tr>
<tr class="even">
<td style="text-align: left;">gpt-4</td>
<td style="text-align: left;">Currently points to <code>gpt-4-0613</code>. See <a href="https://platform.openai.com/docs/models/continuous-model-upgrades">continuous model upgrades</a>.</td>
<td style="text-align: left;">8,192 tokens</td>
<td style="text-align: left;">Up to Sep 2021</td>
</tr>
<tr class="odd">
<td style="text-align: left;">gpt-4-0613</td>
<td style="text-align: left;">Snapshot of <code>gpt-4</code> from June 13th 2023 with improved function calling support.</td>
<td style="text-align: left;">8,192 tokens</td>
<td style="text-align: left;">Up to Sep 2021</td>
</tr>
<tr class="even">
<td style="text-align: left;">gpt-4-32k</td>
<td style="text-align: left;">Currently points to <code>gpt-4-32k-0613</code>. See <a href="https://platform.openai.com/docs/models/continuous-model-upgrades">continuous model upgrades</a>. This model was never rolled out widely in favor of GPT-4 Turbo.</td>
<td style="text-align: left;">32,768 tokens</td>
<td style="text-align: left;">Up to Sep 2021</td>
</tr>
<tr class="odd">
<td style="text-align: left;">gpt-4-32k-0613</td>
<td style="text-align: left;">Snapshot of <code>gpt-4-32k</code> from June 13th 2023 with improved function calling support. This model was never rolled out widely in favor of GPT-4 Turbo.</td>
<td style="text-align: left;">32,768 tokens</td>
<td style="text-align: left;">Up to Sep 2021</td>
</tr>
</tbody>
</table>
</section>
<section id="openai-pricing" class="level3">
<h3 class="anchored" data-anchor-id="openai-pricing">OpenAI pricing</h3>
<section id="gpt-4-turbo" class="level4">
<h4 class="anchored" data-anchor-id="gpt-4-turbo"><strong>GPT-4 Turbo</strong></h4>
<table class="caption-top table">
<colgroup>
<col style="width: 38%">
<col style="width: 30%">
<col style="width: 30%">
</colgroup>
<tbody>
<tr class="odd">
<td><strong>Model</strong></td>
<td><strong>Input</strong></td>
<td><strong>Output</strong></td>
</tr>
<tr class="even">
<td>gpt-4-0125-preview</td>
<td>$10.00&nbsp;/ 1M tokens</td>
<td>$30.00&nbsp;/ 1M tokens</td>
</tr>
<tr class="odd">
<td>gpt-4-1106-preview</td>
<td>$10.00&nbsp;/ 1M tokens</td>
<td>$30.00&nbsp;/ 1M tokens</td>
</tr>
<tr class="even">
<td>gpt-4-1106-vision-preview</td>
<td>$10.00&nbsp;/ 1M tokens</td>
<td>$30.00&nbsp;/ 1M tokens</td>
</tr>
</tbody>
</table>
</section>
<section id="gpt-4" class="level4">
<h4 class="anchored" data-anchor-id="gpt-4"><strong>GPT-4</strong></h4>
<table class="caption-top table">
<tbody>
<tr class="odd">
<td><strong>Model</strong></td>
<td><strong>Input</strong></td>
<td><strong>Output</strong></td>
</tr>
<tr class="even">
<td>gpt-4</td>
<td>$30.00&nbsp;/ 1M tokens</td>
<td>$60.00&nbsp;/ 1M tokens</td>
</tr>
<tr class="odd">
<td>gpt-4-32k</td>
<td>$60.00&nbsp;/ 1M tokens</td>
<td>$120.00&nbsp;/ 1M tokens</td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="competitors" class="level3">
<h3 class="anchored" data-anchor-id="competitors">Competitors</h3>
<p>Now in 2024, there is a fierce competition from Anthropic, Cohere, Google, and others.</p>
<section id="anthropic" class="level4">
<h4 class="anchored" data-anchor-id="anthropic">Anthropic</h4>
<p><a href="https://www.anthropic.com/news/claude-3-family" title="Claude 3">Claude 3</a> family of models employ various training methods, such as unsupervised learning and <a href="https://arxiv.org/abs/2212.08073" title="Constitutional AI">Constitutional AI</a>. A key enhancement in the Claude 3 family is multimodal input capabilities with text output, allowing users to upload images (e.g., tables, graphs, photos) along with text prompts for richer context and expanded use cases.</p>
<p>Opus, the most powerful model from Anthropic, outperforms GPT-4, GPT-3.5 and Gemini Ultra on a wide range of benchmarks. This includes topping the leaderboard on academic benchmarks like GSM-8k for mathematical reasoning and MMLU for expert-level knowledge.</p>
<p>Sonnet, the mid-range model, offers businesses a more cost-effective solution for routine data analysis and knowledge work, maintaining high performance without the premium price tag of the flagship model. Meanwhile, Haiku is designed to be swift and economical, suited for applications such as consumer-facing chatbots, where responsiveness and cost are crucial factors.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/gpt-4-anniversary/claude-comparison.webp" class="img-fluid figure-img" alt="Comparison of the Claude 3 with leading models" width="900"></p>
<figcaption>Comparison of the Claude 3 with leading models from the Anthropic announcement</figcaption>
</figure>
</div>
<p>In addition, Claude 3 models demonstrate sophisticated computer vision abilities on par with other state-of-the-art models. This new modality opens up use cases where enterprises need to extract information from images, documents, charts and diagrams.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/gpt-4-anniversary/claude-comparison-vision.webp" class="img-fluid figure-img" width="900"></p>
<figcaption>Comparison of the Claude 3 vision capabilities with leading models from the Anthropic announcement</figcaption>
</figure>
</div>
</section>
<section id="cohere" class="level4">
<h4 class="anchored" data-anchor-id="cohere">Cohere</h4>
<p>While OpenAI has garnered widespread attention through the viral phenomenon of its ChatGPT chatbot, Cohere has adopted a more focused strategy, engaging directly with corporate clients to customize its AI models according to their unique requirements. This approach enables Cohere to achieve greater cost efficiency compared to competitors who aim at broad consumer markets.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 31%">
<col style="width: 32%">
<col style="width: 34%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"><strong>Cohere API Pricing</strong></th>
<th style="text-align: left;"><strong>$ / M input tokens</strong></th>
<th style="text-align: left;"><strong>$ / M output tokens</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Command</td>
<td style="text-align: left;">$1.00</td>
<td style="text-align: left;">$2.00</td>
</tr>
<tr class="even">
<td style="text-align: left;">Command-R</td>
<td style="text-align: left;">$0.50</td>
<td style="text-align: left;">$1.50</td>
</tr>
</tbody>
</table>
<p><a href="https://txt.cohere.com/command-r/?_gl=1*1ckv15z*_ga*MTk1NTk5MTAyLjE3MDg5NzkzNzE.*_ga_CRGS116RZS*MTcxMDY3MTUwNC4zLjEuMTcxMDY3MjI0MC4zMS4wLjA." title="Command-R">Command-R</a> integrates seamlessly with Cohere’s Embed and Rerank models, providing retrieval-augmented generation (RAG) functionalities. A distinctive feature of Command-R is its ability to provide explicit citations in its outputs, reducing the occurrence of fabrications and facilitating user access to further information from the original sources.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/gpt-4-anniversary/Multilingual-Evals--1--1.png" class="img-fluid figure-img" alt="Multilingual MMLU from Cohere announcement" width="700"></p>
<figcaption>Multilingual MMLU from Cohere announcement</figcaption>
</figure>
</div>
<p>The capability of Command-R to utilize external tools marks a significant advancement for developers in the corporate sector. This feature permits the model to link with external resources such as search engines, APIs, databases, and functions, thereby enriching its functionality through the utilization of data and operations available via these tools. This aspect is especially beneficial for businesses that store a substantial portion of their data in external repositories.</p>
<p>The adoption of tool usage opens the door to a broad spectrum of new applications. For example, developers can instruct Command-R to suggest a specific tool or a combination thereof, along with guidance on their usage. This enables chatbots to interact with customer relationship management (CRM) systems to update deal statuses or to employ Python interpreters for performing data science tasks. Additionally, it allows for the transformation of user inquiries into search commands for vector databases or search engines, empowering work assistants to autonomously navigate through various databases and platforms to gather pertinent information or execute comparative evaluations.</p>
<p>Tool usage with Command-R involves a four-stage process: initially, developers configure which tools the model can access and the format of interactions (e.g., API calls, JSON-formatted instructions). Command-R then judiciously selects the suitable tools and parameters for these interactions. Subsequently, developers execute these tool interactions, obtaining results, which are then fed back into Command-R to generate the final response.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/gpt-4-anniversary/cohere-tool-use.png" class="img-fluid figure-img" alt="Cohere tool usage" width="900"></p>
<figcaption>Cohere tool usage</figcaption>
</figure>
</div>
<p>Beyond its RAG and tool integration features, Command-R benefits from an extended context window capability of up to 128k tokens and offers competitive pricing for Cohere’s hosted API service. Moreover, the model delivers robust performance across ten primary languages, encompassing English, French, Spanish, Italian, German, Portuguese, Japanese, Korean, Arabic, and Chinese.</p>
</section>
</section>
</section>
<section id="lets-celebrate" class="level2">
<h2 class="anchored" data-anchor-id="lets-celebrate">Let’s Celebrate!</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/gpt-4-anniversary/1-year-image-prompt.png" class="img-fluid figure-img" alt="ChatGPT self-portrait"></p>
<figcaption>ChatGPT self-portrait</figcaption>
</figure>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>generative ai</category>
  <category>machine learning</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/gpt-4-anniversary/</guid>
  <pubDate>Thu, 14 Mar 2024 23:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/gpt-4-anniversary/1-year-image.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Intervento al DABS Day 2024 - Università Ca’ Foscari</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/intervento-dabs-day-2024-ca-foscari/</link>
  <description><![CDATA[ 





<section id="genai-a-venezia" class="level2">
<h2 class="anchored" data-anchor-id="genai-a-venezia">GenAI a Venezia</h2>
<p>Bel pomeriggio presso l’Università Ca’ Foscari di Venezia, ospite del Dipartimento di Economia e dell’evento DABS Day 2024.</p>
<p>Coll’intervento di apertura dell’evento, ho portato una serie di spunti sulla intelligenza artificiale generativa, utili al confronto con i ragazzi, gli altri ospiti e il corpo docente.</p>
<p>Il talk è stato organizzato in 4 sezioni:</p>
<ol type="1">
<li><p>Il contesto: Aspettative tra alti e bassi. Un breve excursus storico per arrivare alla rivouluzione del deep learning e dei transformer.</p></li>
<li><p>Le promesse: sarà un estate perenne? La principale promessa della fase storica corrente e cioè la polivalenza dei nuovi modelli di reti neurali generative.</p></li>
<li><p>Le sfide: grandi guadagni, grandi rischi. La rivoluzione della IA generativa porta con sé molte sfide, tutte proporzionali alle promesse e alle aspettative suscitate.</p></li>
<li><p>Il futuro: IA importante come fuoco per l’umanità. Difficile trovare una metafora per definire l’impatto della IA generativa sull’umanità, ma il fuoco sembra essere la migliore per il CEO di Alphabet (vedi anche mio altro <a href="https://antomon.github.io/posts/ai-important-as-fire/">post</a> sul tema). Quindi, rivolgo uno sguardo alle rivoluzioni tecnologiche precedenti e riporto alcune raccomandazioni per il presente e il futuro prossimo.</p></li>
</ol>
<p>Si possono scaricare le slide in formato <a href="https://github.com/antomon/antomon.github.io/blob/ab2afdffdaa015f1dad52fc0a1de3dd7cc171b35/posts/intervento-dabs-day-2024-ca-foscari/GENAI-TALK-20240311-FULL.pptx" title="PPTX">PPTX</a> (Powerpoint). Presentano delle animazioni, quindi devono essere fruite nella modalità di esecuzione di Powerpoint.</p>
<p>Contattami per:</p>
<ol type="1">
<li><p>Stato e trend della GenAI.</p></li>
<li><p>Applicazioni aziendali della GenAI.</p></li>
<li><p>Selezione di strumenti e creazione di team per l’introduzione e sfruttamento della GenAI.</p></li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/intervento-dabs-day-2024-ca-foscari/brochure.png" class="img-fluid figure-img" alt="Brochure DABS Day"></p>
<figcaption>Brochure DABS Day</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/intervento-dabs-day-2024-ca-foscari/start.png" class="img-fluid figure-img" alt="Si inizia!"></p>
<figcaption>Si inizia!</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/intervento-dabs-day-2024-ca-foscari/aspettative.jpg" class="img-fluid figure-img" alt="Le montagne russe delle aspettative della IA!"></p>
<figcaption>Le montagne russe delle aspettative della IA!</figcaption>
</figure>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>generative ai</category>
  <category>machine learning</category>
  <category>talk</category>
  <category>🇮🇹</category>
  <guid>https://antomon.github.io/posts/intervento-dabs-day-2024-ca-foscari/</guid>
  <pubDate>Wed, 13 Mar 2024 23:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/intervento-dabs-day-2024-ca-foscari/sangiobbe2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>AI as Important as Fire, Generative AI as the Printing Press, Autonomous Agents as the Wheel – What’s Next?</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/ai-important-as-fire/</link>
  <description><![CDATA[ 





<section id="metaphors-for-the-artificial-intelligence-revolution" class="level2">
<h2 class="anchored" data-anchor-id="metaphors-for-the-artificial-intelligence-revolution">Metaphors for the artificial intelligence revolution</h2>
<section id="fire-and-electricity-the-dual-nature-of-transformative-technologies" class="level3">
<h3 class="anchored" data-anchor-id="fire-and-electricity-the-dual-nature-of-transformative-technologies">Fire and electricity: the dual nature of transformative technologies</h3>
<p>Sundar Pichai, the CEO of Alphabet and Google, has repeatedly emphasized the significance of artificial intelligence (AI), comparing its importance to that of fire and electricity. He argues that AI is a “profound technology,” possibly more consequential than these monumental discoveries in human history. Pichai’s comparison highlights the transformative potential of AI across all facets of human life, from healthcare and education to manufacturing and beyond, heralding a new era of innovation and societal change.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://antomon.github.io/posts/ai-important-as-fire/pichai-fire.png" class="img-fluid figure-img" alt="Sundar Pichai in 2018 and 2023"></p>
<figcaption>Sundar Pichai in 2018 and 2023</figcaption>
</figure>
</div>
<p>Pichai’s assertion invites a deeper philosophical exploration of transformative technologies and their impact on human civilization. The invention of fire marked a pivotal moment in human history, providing warmth, protection, and a means to cook food—fundamentally altering our nutritional intake and social structures. Fire reshaped the boundaries of survival and socialization, enabling humans to gather, protect, and thrive. Similarly, the discovery of electricity revolutionized the industrial world, ushering in the modern era of technology and convenience—an interconnected system that became the lifeblood of contemporary civilization.</p>
<p>Artificial intelligence, according to Pichai, stands on the threshold of becoming the next great leap, akin to fire and electricity. AI is not merely a tool but a foundational force capable of redefining what it means to be human. The philosophical implications are profound: AI challenges our understanding of intelligence, creativity, and even consciousness, compelling us to reconsider the boundaries between human and machine. If fire enabled us to thrive in harsh environments and electricity facilitated the proliferation of industry, AI may enable us to expand our cognitive capabilities and bridge the divide between the physical and digital realms. In doing so, it forces us to confront deep ethical questions about autonomy, identity, and the nature of existence itself.</p>
<p>The dual nature of transformative technologies—their capacity to benefit and to harm—is intrinsic to Pichai’s analogy. Fire can provide warmth or devastate entire forests, just as electricity can illuminate or electrocute. AI, similarly, holds immense potential for both positive and negative outcomes. It presents ethical dilemmas that humanity must navigate, such as privacy concerns, job displacement, and the potential for autonomous weapons. These challenges are not merely technical but philosophical, requiring us to reconsider the meaning of progress, the nature of work, and the sanctity of human life. As with fire and electricity, the societal impact of AI will depend on how we harness its power and develop governance structures to ensure its ethical use.</p>
<p>The potential for AI to enhance human life is vast. In healthcare, AI can assist in diagnosing diseases with greater accuracy, enabling early intervention and personalized treatment plans. In education, AI-powered platforms can provide tailored learning experiences, adapting to the needs of individual students and making education more accessible to underserved populations. In industry, AI can optimize production processes, reduce waste, and improve safety by taking on hazardous tasks. However, automation threatens to displace millions of jobs, and the concentration of AI capabilities in the hands of a few powerful entities could exacerbate social and economic inequalities. The challenge lies in navigating these complexities to create a future where AI serves all of humanity.</p>
<p>AI also has the potential to reshape our social structures. In healthcare, AI-enabled diagnostics and personalized treatments can lead to more efficient healthcare systems, reducing costs and improving care, particularly in underserved regions. This could ultimately help bridge healthcare disparities and improve the quality of life for millions. In agriculture, AI-powered systems can optimize crop yields, enhance food security, and reduce the environmental impact of farming, contributing to a more sustainable future.</p>
<p>In education, AI can be a powerful tool for lifelong learning. By offering personalized, adaptive learning experiences, AI can empower individuals to acquire new skills and knowledge continuously, adapting to the changing demands of the labor market. This could lead to a society where education is more equitable and accessible, allowing people from all backgrounds to reach their full potential. However, such advancements necessitate addressing concerns around data privacy, algorithmic bias, and the digital divide, which could prevent some communities from benefiting equally from AI technologies.</p>
</section>
<section id="generative-ai-the-printing-press-of-the-digital-age" class="level3">
<h3 class="anchored" data-anchor-id="generative-ai-the-printing-press-of-the-digital-age">Generative AI: the printing press of the digital age</h3>
<p>If artificial intelligence as a whole can be compared to the significance of fire for the development of humanity, generative AI, one of its most innovative subcategories, might be likened to the invention of the movable type printing press. Johannes Gutenberg’s invention in the 15th century marked a turning point in the dissemination of knowledge, culture, and education. The printing press democratized information, breaking down barriers to education and making knowledge accessible to a broader population—catalyzing movements such as the Renaissance, the Reformation, and the Scientific Revolution.</p>
<p>Generative AI holds a similar promise in the digital age. It allows for the democratization of content creation, enabling individuals without specialized skills to produce complex content, including texts, images, music, and videos. This capability could break down barriers to creative and innovative expression, fundamentally changing the nature of content production and consumption. The printing press made books widely available, fueling an explosion of literacy and intellectual exchange; generative AI has the potential to do the same for creative production, allowing new voices to emerge and making creativity accessible on an unprecedented scale.</p>
<p>The implications extend beyond democratization. Generative AI could accelerate innovation by rapidly generating new ideas and solutions to complex problems, acting as a collaborator in scientific and creative endeavors. It could personalize education by providing adaptive learning materials that cater to the unique needs of each student, making learning more efficient and engaging. Just as the printing press was a catalyst for societal change, generative AI could usher in a new era of intellectual and cultural renaissance—one where the boundaries between creator and consumer are increasingly blurred, and where creativity and innovation become universal human traits.</p>
<p>However, the rise of generative AI also raises critical ethical and philosophical questions. Who owns the content generated by AI? How do we ensure that these technologies are not used to spread misinformation or manipulate public opinion? The democratization of content creation comes with the risk of amplifying harmful narratives, making it difficult to discern truth from fabrication. Additionally, the use of generative AI in creative industries poses challenges to traditional notions of authorship and originality. As AI-generated content becomes more sophisticated, we must grapple with questions about the value of human creativity and the role of the artist in a world where machines can produce art, literature, and music that rival human creations.</p>
<p>The transformative power of generative AI also has implications for social and cultural dynamics. By making creative tools accessible to a wider audience, generative AI has the potential to diversify the voices and perspectives represented in media and art. This could lead to a more inclusive cultural landscape, where marginalized communities have greater opportunities to share their stories and contribute to the collective narrative. At the same time, the widespread use of AI-generated content could lead to a homogenization of culture, as algorithms prioritize certain styles, themes, or formats based on popularity and user engagement. The challenge lies in fostering diversity while avoiding the pitfalls of algorithmic conformity.</p>
<p>Generative AI also has the potential to transform the entertainment industry. By automating certain aspects of content creation, it can streamline the production process and enable creators to experiment with new ideas and formats. This could lead to a surge in innovative and experimental content, expanding the boundaries of what is possible in storytelling, visual arts, and music. However, this raises concerns about the displacement of creative professionals and the need to establish ethical standards for the use of AI in artistic endeavors. The interplay between human creativity and machine-generated content will be a defining feature of the future cultural landscape, and it is essential to ensure that AI augments rather than replaces the role of human creators.</p>
</section>
<section id="autonomous-agents-the-wheel-of-the-digital-and-physical-world" class="level3">
<h3 class="anchored" data-anchor-id="autonomous-agents-the-wheel-of-the-digital-and-physical-world">Autonomous agents: the wheel of the digital and physical world</h3>
<p>Autonomous agents, whether physical robots or virtual systems, represent a critical frontier in the evolution of artificial intelligence. These agents can operate in both digital environments, such as virtual assistants and software bots, and physical settings, like robots and drones. Their capabilities encompass a wide range of applications that can transform our interaction with both digital and physical realms.</p>
<p>Autonomous agents, another category within the broad spectrum of artificial intelligence, can be compared to the invention of the wheel for their potential impact on society and the progress of humanity. The wheel was a foundational invention that enabled the development of transportation, trade, and communication—facilitating the expansion of human civilization by overcoming physical limitations.</p>
<p>Similarly, autonomous agents promise to revolutionize the way we interact with both the physical and digital worlds. Autonomous vehicles, drones, and automated delivery systems could transform transportation and logistics, making them safer, more efficient, and accessible. Industrial and domestic automation could see autonomous agents taking on repetitive or dangerous tasks, improving safety and productivity in both work and everyday environments. In healthcare, autonomous robots and virtual assistants could provide personalized support to patients and the elderly, enhancing access to care and quality of life.</p>
<p>Virtual autonomous agents, such as chatbots and AI-driven customer service representatives, are also transforming how businesses interact with their customers. These digital agents can handle routine inquiries, provide instant support, and offer personalized recommendations, enhancing customer experiences and allowing human employees to focus on more complex tasks. In the financial sector, virtual agents are being used to automate trading, analyze market trends, and assist customers with financial planning, showcasing the versatility of these systems in various industries.</p>
<p>Perhaps most significantly, autonomous agents could enable exploration and research in environments that are inhospitable or inaccessible to humans—from the depths of the ocean to the surface of Mars. Just as the wheel allowed humans to move beyond their immediate physical surroundings, autonomous agents could allow us to extend our reach beyond our physical and cognitive limitations, expanding our understanding of both the world and the universe.</p>
<p>The integration of autonomous agents into society also presents profound ethical and social challenges. The deployment of autonomous systems in public spaces, such as self-driving cars and delivery drones, raises questions about safety, liability, and the potential for accidents. Who is responsible when an autonomous vehicle is involved in a collision? How do we ensure that these systems are designed and operated in a way that prioritizes human safety and well-being? The use of autonomous agents in law enforcement and surveillance also raises concerns about privacy, civil liberties, and the potential for abuse. As these technologies become more pervasive, it is crucial to establish clear ethical guidelines and regulatory frameworks to govern their use.</p>
<p>Moreover, the rise of autonomous agents has significant implications for the labor market and the nature of work. As machines take on tasks that were previously performed by humans, there is a risk of widespread job displacement, particularly in industries such as transportation, manufacturing, and logistics. While autonomous agents have the potential to increase efficiency and reduce costs, they also threaten the livelihoods of millions of workers. To address this challenge, we must invest in education and training programs that equip individuals with the skills needed to thrive in an economy increasingly dominated by automation. We must also consider new economic models, such as universal basic income, to ensure that the benefits of automation are shared equitably across society.</p>
<p>The potential of autonomous agents to enhance productivity and efficiency is undeniable, but it also requires careful consideration of how these technologies will affect human labor and social structures. In addition to reskilling workers, we must foster a culture of lifelong learning, where individuals are encouraged to adapt to new roles and embrace emerging opportunities. Governments, businesses, and educational institutions must collaborate to create pathways for workers to transition into new careers and ensure that the benefits of automation are widely distributed.</p>
</section>
</section>
<section id="the-ethical-and-philosophical-imperative" class="level2">
<h2 class="anchored" data-anchor-id="the-ethical-and-philosophical-imperative">The Ethical and philosophical imperative</h2>
<p>The comparisons of AI to fire, electricity, the printing press, and the wheel serve as powerful metaphors for the transformative potential of this technology. However, they also underscore the ethical imperative that comes with such power. The history of technological progress is not without its dark chapters—fire led to warfare, electricity to new forms of control, and the printing press to the spread of propaganda. AI, if mishandled, could exacerbate inequalities, infringe on privacy, and even threaten the autonomy of individuals and nations.</p>
<p>To navigate these challenges, we must engage in a deep philosophical inquiry into the nature of progress and the role of technology in human life. True progress lies not in technological advancement alone but in harnessing these tools for the collective good of humanity. This requires a commitment to ethical principles, transparency, and governance frameworks that ensure AI technologies are developed and used in ways that promote equity, justice, and human flourishing.</p>
<p>The transformative potential of AI also calls for a redefinition of human identity and purpose. As AI systems become increasingly capable of performing tasks that were once the exclusive domain of humans—from creative expression to decision-making—we must ask ourselves what it means to be human in an age of intelligent machines. How do we define our value and purpose when machines can rival or even surpass our cognitive abilities? The answer may lie in embracing the unique qualities that define human experience—empathy, ethical reasoning, and the capacity for meaningful relationships—and in ensuring that AI serves to enhance rather than diminish these qualities.</p>
<p>We must also consider the broader societal implications of AI. How do we ensure that the benefits of AI are distributed equitably, rather than concentrated in the hands of a few powerful corporations or nations? The development and deployment of AI technologies must be guided by a commitment to social justice, with a focus on reducing inequalities and promoting inclusive growth. This requires collaboration between governments, industry, and civil society to create policies and frameworks that prioritize the well-being of all individuals, particularly those who are most vulnerable to the disruptive effects of technological change.</p>
<p>Furthermore, we must address the potential biases embedded in AI systems. Machine learning algorithms are trained on vast datasets, which often contain biases that reflect existing societal inequalities. If left unchecked, these biases can be perpetuated and even amplified by AI systems, leading to discriminatory outcomes in areas such as hiring, lending, and law enforcement. Ensuring fairness and accountability in AI requires rigorous testing, transparency, and the inclusion of diverse perspectives in the development process. Ethical AI must be designed to serve all of humanity, regardless of race, gender, socioeconomic status, or geographic location.</p>
</section>
<section id="the-ai-singularity" class="level2">
<h2 class="anchored" data-anchor-id="the-ai-singularity">The AI singularity</h2>
<section id="definition" class="level3">
<h3 class="anchored" data-anchor-id="definition">Definition</h3>
<p>The concept of the AI singularity refers to a hypothetical point in time when artificial intelligence surpasses human-level intelligence and gains the capability to continuously improve itself. This would lead to an exponential increase in intelligence, resulting in transformative changes that are difficult to predict or control. The term “singularity” was popularized by mathematician and science fiction writer Vernor Vinge in the early 1990s, and later expanded upon by futurist Ray Kurzweil in his book <em>The Singularity is Near</em> (2005). Vinge suggested that once we create an intelligence greater than our own, it would fundamentally change human society and lead to a future that is beyond our current understanding.</p>
</section>
<section id="the-impact-of-the-ai-singularity" class="level3">
<h3 class="anchored" data-anchor-id="the-impact-of-the-ai-singularity">The impact of the AI singularity</h3>
<p>The concept of the AI singularity has significant potential impacts that could redefine every aspect of human life, society, and even the global order. If and when AI surpasses human-level intelligence and gains the ability to self-improve, the consequences could be profound and far-reaching. Below are several key areas where the impact of the AI singularity may be most transformative:</p>
<ol type="1">
<li><p>Economic disruption and reimagined labor markets:</p>
<p>The singularity could bring about an era of radical economic transformation, characterized by the automation of virtually all jobs. As AI systems become capable of performing tasks across every sector, from manual labor to highly specialized cognitive work, traditional employment models may become obsolete. While this could lead to immense gains in productivity and efficiency, it also raises questions about the future of work, economic inequality, and social stability. The need for new economic paradigms—such as universal basic income (UBI) or other forms of wealth redistribution—will become increasingly urgent to ensure that the benefits of AI-driven productivity are shared equitably across society.</p></li>
<li><p>Acceleration of scientific discovery:</p>
<p>One of the most promising impacts of the singularity is the potential for an unprecedented acceleration in scientific discovery. Superintelligent AI could solve complex problems that have stumped humanity for decades, such as finding cures for currently incurable diseases, creating sustainable energy sources, or unlocking the mysteries of quantum mechanics. This rapid pace of discovery could dramatically improve quality of life and enable us to tackle some of the most pressing challenges facing our planet, from climate change to resource scarcity.</p></li>
<li><p>Reimagining human identity and purpose:</p>
<p>The singularity will inevitably challenge our conception of what it means to be human. When machines can surpass human intelligence and creativity, we must redefine our purpose and identity in a world where our traditional roles are no longer necessary. This shift will require a deep philosophical inquiry into the qualities that make us uniquely human—such as empathy, emotional intelligence, and moral reasoning. As AI takes on more responsibilities, we may come to see our value not in what we can produce, but in our capacity to form meaningful connections, experience emotions, and create ethical frameworks that guide the development of technology.</p></li>
<li><p>Existential risks and ethical concerns</p>
<p>The singularity also presents existential risks that must be addressed with care and foresight. A superintelligent AI could become uncontrollable, leading to scenarios where its objectives are misaligned with human values. This could result in catastrophic consequences if, for example, AI prioritizes efficiency or optimization at the expense of human welfare. Ensuring that AI systems are aligned with human values and operate under ethical constraints is of paramount importance. This will require international collaboration, transparent AI development processes, and rigorous oversight to prevent unintended negative outcomes.</p></li>
<li><p>Shift in power dynamics</p>
<p>The arrival of the singularity could fundamentally alter global power dynamics. Nations or corporations that achieve superintelligent AI first could gain immense strategic advantages, leading to new forms of geopolitical competition and imbalance. This concentration of power could exacerbate existing inequalities and create new divides between those who control advanced AI technologies and those who do not. It is crucial to develop international agreements and regulatory frameworks to prevent monopolization of AI capabilities and to ensure that the benefits are distributed globally rather than concentrated in the hands of a few.</p></li>
<li><p>Merging of human and artificial intelligence</p>
<p>The singularity may also herald the merging of human and artificial intelligence. Technologies such as brain-computer interfaces (BCIs) could enable direct integration between our minds and advanced AI systems, enhancing our cognitive abilities and creating a symbiotic relationship between human and machine. This merging could lead to new forms of consciousness and collective intelligence, blurring the lines between biological and artificial entities. While the prospect of augmenting human intelligence is exciting, it also raises ethical and philosophical questions about autonomy, privacy, and the essence of individuality.</p></li>
<li><p>The need for a new social contract</p>
<p>As AI becomes increasingly autonomous and capable, society will need to establish a new social contract that defines the rights and responsibilities of both humans and intelligent machines. Questions about AI personhood, legal accountability, and moral status will need to be addressed. Should AI systems be granted rights similar to humans if they achieve consciousness? Who is liable for decisions made by superintelligent systems? These questions are complex and will require input from ethicists, policymakers, technologists, and the general public to develop frameworks that ensure justice and equity in a post-singularity world.</p></li>
</ol>
<p>The impact of the AI singularity will not be uniform; it will bring both opportunities and challenges. To navigate this future, humanity must engage in proactive, collaborative efforts to shape the trajectory of AI development in a way that maximizes benefits and minimizes risks. By embracing ethical considerations, fostering global cooperation, and ensuring inclusivity, we can strive to create a future where AI acts as a partner in human progress rather than a force that divides or endangers us.</p>
</section>
<section id="is-ai-singularity-the-next-step-of-human-evolution" class="level3">
<h3 class="anchored" data-anchor-id="is-ai-singularity-the-next-step-of-human-evolution">Is AI singularity the next step of human evolution?</h3>
<p>The notion of the AI singularity as the next step in human evolution has been a subject of intense debate among philosophers, futurists, and researchers. This concept posits that humanity is on the brink of a transformative leap, where our species transcends its biological limitations by merging with advanced artificial intelligence. Futurist Ray Kurzweil, a prominent advocate of this idea, argues that the singularity will enable humans to dramatically enhance their cognitive abilities through technological augmentation, effectively seizing control of their own evolutionary trajectory. Kurzweil envisions a new era characterized by the convergence of biological and machine intelligence, leading to a post-human future with vastly expanded capabilities and lifespans.</p>
<p>Philosopher Nick Bostrom has significantly contributed to this discourse, particularly through his influential works such as <em>Superintelligence: Paths, Dangers, Strategies</em> (2014) and more recently <em>Deep Utopia: Life and Meaning in a Solved World</em>. In <em>Deep Utopia</em>, Bostrom explores the implications of achieving a “solved world”—a technologically mature state where all significant scientific problems have been resolved, and humanity exists in a state of abundance and harmony. He delves into whether such a state would be fulfilling and meaningful for humans or post-humans, questioning if the absence of challenges would render human activities redundant or devoid of purpose.</p>
<p>Bostrom introduces the concepts of shallow and deep redundancy to analyze this potential future. **Shallow redundancy refers to a scenario where machines can perform all economically valuable tasks better than humans, leading to job displacement but still allowing humans to engage in creative pursuits and leisure activities for personal fulfillment. Deep redundancy, however, implies a state where even leisure activities and personal endeavors become meaningless because AI can perform them more effectively, potentially leading to existential boredom and a lack of purpose.</p>
<p>He further examines whether modifying our mental states through technological means—what he terms “plasticity and autopotency”—could alleviate feelings of redundancy. However, he cautions that artificially induced contentment does not necessarily equate to a meaningful life. Drawing on thought experiments like the character Peer from Greg Egan’s <em>Permutation City</em>, who endlessly carves perfect chair legs without experiencing boredom yet leads a profoundly unfulfilling existence, Bostrom highlights the limitations of such approaches.</p>
<p>Bostrom’s exploration leads to a critical examination of the nature of meaning and purpose in a post-singularity world. He engages with philosophical theories, such as those proposed by Thaddeus Metz, which suggest that a meaningful life requires an overarching, transcendental purpose that encompasses significant personal effort and contributes to something beyond oneself. In a “solved world,” finding such meaning may be inherently challenging, as traditional drivers of human purpose—struggle, growth, and the pursuit of knowledge—may no longer exist in the same form.</p>
<p>By refraining from providing a definitive answer about the meaning of life in this context, Bostrom underscores the complexity of the issue. His work serves as both a speculative inquiry and a cautionary reflection on the potential psychological and existential implications of the singularity as the next step in human evolution.</p>
<p>The idea that the AI singularity could represent an evolutionary leap is grounded in the belief that technological advancement is an extension of natural evolution. Just as humanity evolved through natural selection to adapt to its environment, the development of superintelligent AI could be seen as the next phase, where humans enhance their own cognitive and physical abilities through artificial means. This perspective, however, raises significant ethical and existential questions about identity, consciousness, and the essence of what it means to be human.</p>
<p>Moreover, the potential risks associated with relinquishing control to entities that may not share human values or priorities cannot be overlooked. Critics argue that the singularity could lead to a loss of human autonomy, as machines become capable of making decisions that surpass human understanding. There are concerns about the potential for AI to exacerbate existing social inequalities, create new forms of disenfranchisement, or even pose existential threats to humanity if not properly managed.</p>
<p>While some view the singularity and the advent of a “deep utopia” as an inevitable and potentially beneficial progression of human evolution, others remain deeply skeptical. They warn that the consequences of creating superintelligent AI are highly unpredictable and could lead to unforeseen negative outcomes, including a sense of purposelessness or loss of meaning in human lives. The debate continues to evolve, with experts from various fields contributing perspectives on the philosophical, ethical, and societal implications of such a profound transformation.</p>
<p>As we stand on the cusp of potentially revolutionary AI advancements, Bostrom’s concept of Deep Utopia serves both as an aspirational vision and a cautionary tale. It reminds us of the profound stakes involved in shaping the future of human and artificial intelligence. The path forward requires not only technological innovation but also deep ethical reflection, robust governance frameworks, and global cooperation to ensure that the potential benefits of AI are realized while mitigating its risks.</p>
<p>In conclusion, whether the AI singularity represents the next step in human evolution remains a question of intense debate and speculation. What is clear, however, is that the rapid advancement of AI technology is already reshaping our world in profound ways. As we continue to explore the possibilities and challenges of AI, it is crucial that we approach this potential evolutionary leap with a balance of optimism and caution, and with a deep commitment to preserving and enhancing human values and well-being.</p>
</section>
</section>
<section id="further-reflections-on-the-singularity-philosophical-and-ethical-dimensions" class="level2">
<h2 class="anchored" data-anchor-id="further-reflections-on-the-singularity-philosophical-and-ethical-dimensions">Further reflections on the singularity: philosophical and ethical dimensions</h2>
<p>To explore the implications of the AI singularity, it is essential to engage with the philosophical and ethical dimensions that underlie this transformative prospect. The singularity is not merely a technological milestone but a convergence point where technological capability intersects with fundamental questions about consciousness, agency, and morality.</p>
<section id="the-nature-of-consciousness-and-machine-intelligence" class="level3">
<h3 class="anchored" data-anchor-id="the-nature-of-consciousness-and-machine-intelligence">The nature of consciousness and machine intelligence</h3>
<p>A critical question that arises in the context of the singularity is whether artificial intelligence can achieve consciousness or subjective experience akin to human awareness. Philosophers like David Chalmers have articulated the “hard problem of consciousness,” which questions how and why physical processes in the brain give rise to subjective experience. If AI were to develop consciousness, this would not only redefine the boundaries between human and machine but also necessitate a reevaluation of moral and legal considerations concerning AI entities.</p>
<p>From a computational perspective, proponents of strong AI argue that consciousness can emerge from sufficiently complex information processing systems. If the brain is viewed as a biological computer, then it is conceivable that an artificial system with comparable complexity could achieve consciousness. Critics, however, point to the qualitative differences between biological and artificial systems, emphasizing that consciousness may involve non-computational elements that cannot be replicated in machines.</p>
<p>This debate has profound ethical implications. If AI systems were to become conscious, questions about their rights, moral status, and treatment would become paramount. The potential for sentient AI raises concerns about creating entities capable of suffering, obligating us to consider the ethical responsibilities we have towards them. This challenges existing ethical frameworks and calls for the development of new theories that can accommodate non-human forms of consciousness.</p>
</section>
<section id="the-problem-of-control-and-alignment" class="level3">
<h3 class="anchored" data-anchor-id="the-problem-of-control-and-alignment">The problem of control and alignment</h3>
<p>One of the central challenges associated with the singularity is the “alignment problem”—ensuring that superintelligent AI systems act in ways that are aligned with human values and goals. Philosophers and AI researchers, such as Stuart Russell, have emphasized the difficulty of specifying objectives that capture the complexity of human values without unintended consequences.</p>
<p>The control problem is exacerbated by the possibility that a superintelligent AI could develop instrumental goals that conflict with human interests. For example, an AI programmed to maximize a particular objective might pursue that goal at the expense of other values, leading to harmful outcomes. This scenario underscores the need for robust mechanisms to align AI behavior with ethical principles.</p>
<p>Various approaches have been proposed to address the alignment problem, including:</p>
<ul>
<li><p>Value learning: Developing AI systems that can learn and internalize human values through observation and interaction.</p></li>
<li><p>Cooperative inverse reinforcement learning: Modeling AI objectives based on inferred human preferences rather than explicitly programmed goals.</p></li>
<li><p>Ethical frameworks in AI design: Incorporating ethical theories, such as utilitarianism or deontological ethics, into AI decision-making processes.</p></li>
<li><p>Formal verification: Applying mathematical techniques to prove that AI systems will behave as intended under all possible conditions.</p></li>
</ul>
<p>These approaches, however, face significant technical and philosophical challenges. Human values are complex, context-dependent, and often conflicting. Translating them into computational terms that an AI can understand and act upon is a non-trivial task. Moreover, the diversity of moral perspectives across cultures complicates the establishment of a universal set of values for AI alignment.</p>
</section>
<section id="transhumanism-and-the-future-of-humanity" class="level3">
<h3 class="anchored" data-anchor-id="transhumanism-and-the-future-of-humanity">Transhumanism and the future of humanity</h3>
<p>The singularity is closely associated with transhumanism, a philosophical movement that advocates for the use of technology to enhance human physical and cognitive abilities. Transhumanists envision a future where humans transcend biological limitations through genetic engineering, cybernetic augmentation, and mind uploading.</p>
<p>This perspective raises fundamental questions about identity and what it means to be human. If individuals can alter their cognitive capacities or merge their consciousness with AI, traditional notions of selfhood and personal continuity may be disrupted. Philosophers like Derek Parfit have explored the implications of such scenarios on personal identity, suggesting that psychological continuity, rather than physical or biological continuity, may define the self.</p>
<p>Ethical considerations also emerge concerning access and inequality. If only a subset of the population can afford or choose to enhance themselves, this could lead to new forms of social stratification. The prospect of “enhanced” humans coexisting with “unenhanced” humans presents challenges for social cohesion, justice, and equality.</p>
</section>
<section id="existential-risk-and-moral-responsibility" class="level3">
<h3 class="anchored" data-anchor-id="existential-risk-and-moral-responsibility">Existential risk and moral responsibility</h3>
<p>The potential risks associated with the singularity extend to existential threats—scenarios where the existence of humanity or our future potential is jeopardized. Nick Bostrom has highlighted the moral responsibility to mitigate existential risks, arguing that preserving the long-term future of humanity is of paramount ethical importance.</p>
<p>The development of superintelligent AI introduces uncertainties that could have irreversible consequences. As such, there is a moral imperative to approach AI development with caution, prioritizing safety and risk mitigation. This involves interdisciplinary collaboration among technologists, ethicists, policymakers, and other stakeholders to ensure that AI advancements do not compromise humanity’s future.</p>
</section>
<section id="the-role-of-philosophical-inquiry-in-ai-development" class="level3">
<h3 class="anchored" data-anchor-id="the-role-of-philosophical-inquiry-in-ai-development">The Role of philosophical inquiry in AI development</h3>
<p>Philosophy plays a crucial role in navigating the complexities introduced by the singularity. It provides the tools to critically examine assumptions, clarify concepts, and explore the implications of emerging technologies. Philosophical inquiry can contribute to:</p>
<ul>
<li><p>Ethical frameworks: Developing normative guidelines for AI behavior and decision-making.</p></li>
<li><p>Conceptual analysis: Clarifying definitions of intelligence, consciousness, autonomy, and other key concepts.</p></li>
<li><p>Value alignment: Informing the alignment problem by exploring the nature of human values and moral reasoning.</p></li>
<li><p>Policy and governance: Guiding the creation of laws and regulations that reflect ethical considerations and societal priorities.</p></li>
</ul>
<p>By integrating philosophical perspectives into AI research and development, we can better anticipate and address the challenges posed by the singularity.</p>
</section>
<section id="shaping-the-future-beyond-the-singularity" class="level3">
<h3 class="anchored" data-anchor-id="shaping-the-future-beyond-the-singularity">Shaping the future beyond the singularity</h3>
<p>As we continue along the exponential trend of innovation, it is natural to wonder what might come after the singularity. If AI progresses to a point where it surpasses human intelligence and initiates self-improvement cycles, the subsequent trajectory becomes highly speculative. However, considering potential post-singularity scenarios can help us prepare for and influence the direction of future developments.</p>
<p>One possibility is the emergence of a complex technological ecosystem where AI entities interact, evolve, and perhaps even compete or cooperate independently of human intervention. This ecosystem could resemble a form of artificial life, exhibiting behaviors and dynamics analogous to biological ecosystems.</p>
<p>In such a scenario, questions about stewardship and responsibility become even more critical. Humanity would need to consider its role within this new ecosystem—whether as observers, participants, or regulators. The ethical treatment of AI entities, especially if they possess consciousness or sentience, would be a pressing concern.</p>
<p>The singularity could also enable humanity to embark on cosmic expansion, leveraging advanced AI to explore and potentially colonize other planets or star systems. This raises intriguing connections to the Fermi Paradox—the question of why we have not yet encountered evidence of extraterrestrial civilizations despite the vastness of the universe.</p>
<p>Some theorists suggest that the singularity could be a “Great Filter” event that civilizations either fail to navigate or that fundamentally changes their detectable footprint in the universe. If humanity successfully navigates the singularity, we might gain insights into the prevalence of intelligent life and the factors that influence its development.</p>
</section>
<section id="ethical-frameworks-for-post-human-intelligence" class="level3">
<h3 class="anchored" data-anchor-id="ethical-frameworks-for-post-human-intelligence">Ethical frameworks for post-human intelligence</h3>
<p>As intelligence transcends human limitations, the development of ethical frameworks suitable for post-human or machine intelligences becomes essential. Traditional human-centric ethics may not suffice for entities with vastly different cognitive architectures or experiential modalities.</p>
<p>Exploring concepts like panpsychism (the idea that consciousness is a fundamental feature of all matter) or developing new ethical theories that account for non-biological consciousness could provide a foundation for these frameworks. Engaging with these ideas requires interdisciplinary collaboration among philosophers, cognitive scientists, AI researchers, and other fields.</p>
<p>A central challenge in the post-singularity future is ensuring that the core values that define humanity—such as compassion, justice, and the pursuit of knowledge—are preserved and promoted. This involves embedding these values into the fabric of AI systems and fostering a culture that prioritizes ethical considerations alongside technological advancement.</p>
<p>Education and public engagement play vital roles in this process. By cultivating ethical awareness and critical thinking skills, society can better navigate the complexities of a world transformed by advanced AI. Encouraging diverse perspectives and inclusive dialogue ensures that a broad range of values and experiences inform the development of AI technologies.</p>
<p>Addressing the challenges and opportunities presented by the singularity requires unprecedented levels of global collaboration. The transnational nature of AI development means that actions in one part of the world can have far-reaching impacts. International agreements, cooperative research initiatives, and shared governance structures can help manage risks and distribute benefits equitably.</p>
<p>Global collaboration also extends to sharing knowledge and resources to bridge technological divides. Ensuring that all regions and communities have access to AI advancements is crucial for promoting global stability and preventing exacerbation of existing inequalities.</p>
</section>
</section>
<section id="final-remarks" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks">Final remarks</h2>
<p>The journey toward and beyond the AI singularity presents a convergence of technological potential and profound philosophical inquiry. As we stand on the cusp of this transformative era, it is imperative that we engage deeply with the ethical, social, and existential questions that arise.</p>
<p>By approaching AI development with intentionality, humility, and a commitment to the common good, we can strive to shape a future where technology enhances the human experience without compromising the values and principles that define us. The singularity need not be an endpoint or an insurmountable challenge; instead, it can be an opportunity for humanity to reflect, adapt, and evolve in harmony with the intelligent systems we create.</p>
<p>The path forward requires collective effort—a symbiosis of technological innovation and philosophical wisdom. Together, we can navigate the complexities of the singularity and forge a future that honors our shared humanity while embracing the possibilities of a world enriched by artificial intelligence.</p>
</section>
<section id="reading-recommendations" class="level2">
<h2 class="anchored" data-anchor-id="reading-recommendations">Reading recommendations</h2>
<ol type="1">
<li><p>Ray Kurzweil - <em>The Singularity is Near: When Humans Transcend Biology</em> (2005)</p>
<p>In this seminal work, futurist and inventor Ray Kurzweil explores the concept of the technological singularity—a future point when machine intelligence will surpass human intelligence, leading to unprecedented technological growth. Kurzweil delves into how exponential advancements in genetics, nanotechnology, robotics, and artificial intelligence will converge to transform human life fundamentally. He discusses the potential for humans to transcend biological limitations by merging with technology, resulting in enhanced cognitive abilities, extended lifespans, and even immortality. The book combines scientific analysis with speculative foresight, offering both optimistic predictions about solving global challenges and cautionary notes about the ethical implications of such profound changes. Kurzweil’s vision is grounded in detailed projections and a deep understanding of technological trends, making it a crucial read for anyone interested in the future of humanity.</p></li>
<li><p>Nick Bostrom - <em>Superintelligence: Paths, Dangers, Strategies</em> (2014)</p>
<p>Philosopher Nick Bostrom provides a comprehensive examination of the potential development of superintelligent AI—machines that surpass human intelligence across all domains. The book explores various pathways through which superintelligence might emerge, such as whole brain emulation, artificial intelligence, and biological enhancements. Bostrom meticulously analyzes the existential risks associated with superintelligent AI, emphasizing the “control problem”: how to ensure that such powerful entities remain aligned with human values and do not act in ways that could be detrimental to humanity. He proposes strategic frameworks for managing these risks, including the importance of global coordination, ethical AI design, and the development of value alignment protocols. The book is a rigorous philosophical inquiry that blends technical detail with accessible language, making it a foundational text in the field of AI ethics and existential risk studies.</p></li>
<li><p>Stuart Russell - <em>Human Compatible: Artificial Intelligence and the Problem of Control</em> (2019)</p>
<p>AI researcher Stuart Russell addresses the critical challenge of aligning advanced artificial intelligence with human values and interests. He critiques the standard model of AI development, which focuses on creating machines that optimize predefined objectives, arguing that this approach is inherently flawed and potentially dangerous. Russell proposes a new paradigm called “provably beneficial AI,” where machines are designed to be uncertain about human preferences and learn them through continuous interaction. This approach aims to ensure that AI systems remain under human control and act in ways that are beneficial to humanity. The book goes into technical aspects of AI alignment, ethical considerations, and policy implications, providing practical solutions to the control problem. Russell’s insights are grounded in decades of experience in AI research, making this book an essential resource for understanding how to create safe and beneficial AI systems.</p></li>
<li><p>David J. Chalmers - <em>The Conscious Mind: In Search of a Fundamental Theory</em> (1996)</p>
<p>Philosopher David J. Chalmers tackles one of the most profound questions in philosophy and cognitive science: the nature of consciousness. He distinguishes between “easy” problems (explaining cognitive functions and behaviors) and the “hard problem” (explaining subjective experience or qualia). Chalmers argues that physical processes alone cannot account for consciousness and proposes a form of non-reductive functionalism, suggesting that consciousness is a fundamental feature of the universe, akin to space and time. The book critically examines materialist theories and introduces the idea of “naturalistic dualism,” positing that while consciousness arises from physical systems, it cannot be fully explained by them. Chalmers’ work has significant implications for artificial intelligence, particularly concerning whether machines could ever possess conscious experience and what that would entail ethically and philosophically.</p></li>
<li><p>Max Tegmark - <em>Life 3.0: Being Human in the Age of Artificial Intelligence</em> (2017)</p>
<p>Physicist Max Tegmark explores the future of life in the context of artificial intelligence, categorizing life into three stages: Life 1.0 (biological evolution), Life 2.0 (cultural evolution), and Life 3.0 (technological evolution). He discusses how AI could enable Life 3.0, where beings can design both their hardware and software, leading to unprecedented control over their destiny. Tegmark examines a range of scenarios, from beneficial outcomes where AI helps solve complex global problems to dystopian futures where AI poses existential threats. He addresses ethical considerations, such as the importance of AI alignment with human values, the potential impact on employment and economies, and the need for global cooperation in AI governance. The book encourages readers to actively participate in shaping the future of AI to ensure it benefits all of humanity.</p></li>
<li><p>Francis Fukuyama - <em>Our Posthuman Future: Consequences of the Biotechnology Revolution</em> (2002)</p>
<p>Political scientist Francis Fukuyama analyzes the social, ethical, and political implications of advancements in biotechnology that could alter human nature. He expresses concerns about technologies like genetic engineering, neuropharmacology, and life extension therapies, which could lead to fundamental changes in human characteristics and exacerbate social inequalities. Fukuyama argues that such technologies could disrupt the concept of human dignity and the universal principles upon which democratic societies are built. He advocates for the regulation of biotechnological research and the establishment of international norms to prevent potential abuses. The book provides a critical perspective on the pursuit of technological progress without adequate ethical considerations, emphasizing the need to balance innovation with the preservation of core human values.</p></li>
<li><p>Derek Parfit - <em>Reasons and Persons</em> (1984)</p>
<p>Philosopher Derek Parfit offers a profound exploration of personal identity, rationality, and ethics. Challenging traditional notions of identity, Parfit argues that personal identity is not what matters for survival; instead, psychological continuity and connectedness are crucial. He introduces thought experiments involving teleportation, split brains, and fission to illustrate how identity can be fluid and not tied to a singular, unchanging self. The book also examines self-interest, future generations’ ethics, and moral reasoning, proposing that our actions should be guided by impartial considerations rather than personal identity. Parfit’s work has significant implications for ethical theory and has influenced debates on topics like cloning, artificial intelligence, and transhumanism, particularly regarding how we value future selves and others in our moral calculations.</p></li>
<li><p>Shannon Vallor - <em>Technology and the Virtues: A Philosophical Guide to a Future Worth Wanting</em> (2016)</p>
<p>Philosopher Shannon Vallor integrates virtue ethics with the challenges posed by emerging technologies such as artificial intelligence, robotics, and bioengineering. She argues that traditional ethical frameworks are insufficient to address the rapid technological changes reshaping society. Vallor proposes the development of “technomoral virtues”—character traits that enable individuals and communities to navigate the ethical complexities of a technologically advanced world. These virtues include honesty, courage, empathy, and justice, adapted to the context of digital life. The book provides practical guidance on cultivating these virtues through education and social practices, aiming to foster a society capable of making wise and ethical technological choices. Vallor’s work emphasizes the importance of human character in shaping a future that aligns with our deepest values.</p></li>
<li><p>Vernor Vinge - “The Coming Technological Singularity: How to Survive in the Post-Human Era” (1993)</p>
<p>In this influential essay, mathematician and science fiction author Vernor Vinge introduces the concept of the technological singularity—a point where artificial intelligence exceeds human intelligence, leading to explosive technological growth and changes that are impossible to predict. Vinge explores potential pathways to the singularity, including the development of supercomputers, intelligent networks, and human-computer interfaces. He discusses the implications of such a future, where human cognition may be enhanced or rendered obsolete by machine intelligence. Vinge raises critical questions about how humanity can prepare for and survive in a post-human era, emphasizing the need for proactive thinking about AI’s impact on society. His essay has been foundational in framing contemporary discussions about the singularity and the future of artificial intelligence.</p></li>
<li><p>James Barrat - <em>Our Final Invention: Artificial Intelligence and the End of the Human Era</em> (2013)</p>
<p>Journalist and filmmaker James Barrat provides a cautionary examination of artificial general intelligence (AGI) and its potential risks to humanity. Drawing on interviews with AI experts, scientists, and futurists, Barrat explores scenarios where AGI could surpass human control, leading to unintended and possibly catastrophic consequences. He discusses the competitive pressures driving AI development without sufficient safety measures and highlights the difficulties in aligning AI goals with human values. The book emphasizes the existential risks posed by unchecked AI advancement, such as loss of control over autonomous weapons or economic systems. Barrat calls for increased awareness, ethical considerations, and the implementation of safeguards in AI research to prevent potentially irreversible harm to humanity.</p></li>
</ol>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>essay</category>
  <category>generative ai</category>
  <category>machine learning</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/ai-important-as-fire/</guid>
  <pubDate>Fri, 09 Feb 2024 23:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/ai-important-as-fire/red-face.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Color Space Sampling 101</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/color-space-sampling-101/</link>
  <description><![CDATA[ 





<section id="color-spaces" class="level2">
<h2 class="anchored" data-anchor-id="color-spaces">Color spaces</h2>
<p>Let’s break down the concept of a color space into simple terms first, and then delve into the technical aspects.</p>
<section id="layman-terms" class="level3">
<h3 class="anchored" data-anchor-id="layman-terms">Layman terms</h3>
<p>Imagine you have a huge box of crayons with every color you can think of. A color space is like picking a smaller box from this huge collection. This smaller box contains a specific range of colors that you can use for a particular purpose, like drawing a picture or printing a photograph.</p>
<p>Just like you can’t use the colors outside your chosen crayon box, a color space defines the range of colors (or ‘gamut’) that can be represented or reproduced in a medium, whether it’s a computer screen, a camera, or a printed page. Different color spaces are like different sets of crayons, each suited for different tasks or equipment.</p>
</section>
<section id="technically-speaking" class="level3">
<h3 class="anchored" data-anchor-id="technically-speaking">Technically speaking</h3>
<p>A color space is a specific organization of colors, which in a more formal setting can be described by the mathematics of color models. It’s a three-dimensional model where each color is represented by a unique point within a coordinate system.</p>
<p>Technically, a color space maps out a range of colors in terms of intensity values across different channels (like red, green, blue in RGB color space). It provides a standard by which we can define and reproduce colors across different devices and mediums.</p>
<p>Components of a color space are:</p>
<ul>
<li><p>Primary Colors: These are the reference colors used in a color model. For example, RGB uses red, green, and blue as primary colors.</p></li>
<li><p>Gamut: This is the complete subset of colors that can be accurately represented within a given color space.</p></li>
<li><p>Color model: The underlying mathematical model describing the way colors can be represented as tuples of numbers (e.g., RGB, CMYK, HSL).</p></li>
<li><p>Perceptual uniformity: Some color spaces (like CIELab) are designed to be perceptually uniform. This means that a change of the same amount in a color value should produce a change of about the same visual importance.</p></li>
<li><p>Device-dependent vs device-independent: Color spaces can be device-dependent (like Adobe RGB, specific to monitors and printers) or device-independent (like CIELab), which abstracts color definitions from specific devices, allowing for consistent color reproduction across different devices.</p></li>
<li><p>Standardization: Standards such as sRGB are established to ensure uniform color representation across different digital devices and platforms, crucial in digital media and web content.</p></li>
</ul>
<p>In essence, a color space is a framework that allows for consistent and precise color representation, ensuring that the colors you see and use are the same across various devices and mediums.</p>
</section>
</section>
<section id="rgb-and-srgb-color-spaces" class="level2">
<h2 class="anchored" data-anchor-id="rgb-and-srgb-color-spaces">RGB and sRGB Color Spaces</h2>
<p>The RGB color space, foundational in the realm of digital imaging and display technologies, represents colors through the additive combination of the red (R), green (G), and blue (B) primary colors. For instance, combining red and green light produces yellow, red and blue produce magenta, and green and blue create cyan.</p>
<p>The intensity of each primary color, typically represented by a value ranging from 0 to 255 in digital systems, combines to produce a wide spectrum of colors. This model is intrinsically linked to the way human vision perceives color through cone cells sensitive to these three color wavelengths.</p>
<p>In the digital context, the RGB color space is device-dependent, meaning the exact color rendition can vary across different devices like monitors, cameras, and scanners. This variation stems from differences in how devices are manufactured and the specific characteristics of their RGB color filters. As a result, a color seen on one RGB device might not look exactly the same on another, leading to inconsistencies in color reproduction.</p>
<p>sRGB, which stands for standard Red Green Blue, emerged as a standardization effort to tackle these inconsistencies, especially pertinent in consumer electronics and online content. Developed jointly by HP and Microsoft in 1996, sRGB provides a specific implementation of the RGB color space with well-defined chromaticities for the red, green, and blue primaries. It also specifies a transfer function (or gamma curve), which defines how the numerical values of R, G, and B map to actual luminance levels. In sRGB, this curve is a piecewise function: a linear segment in the darkest shades and a power function in the rest of the range, with a gamma value of approximately 2.2, which is close to the perceptual linearization of human vision.</p>
<p>One of the limitations of sRGB is its relatively narrow color gamut compared to other color spaces like Adobe RGB or ProPhoto RGB. This limitation is particularly evident in highly saturated colors, where sRGB can fail to reproduce the vibrancy seen in the real world or in wider-gamut color spaces. However, its ubiquity and standardization across a wide array of devices and software make it the default choice for web content, consumer electronics, and standard digital photography. Its compatibility and predictability across different platforms ensure that colors rendered in sRGB appear reasonably consistent on most modern displays, which are typically calibrated to this color space.</p>
<p>In current usage, while professional-grade equipment and applications might opt for wider-gamut color spaces like Adobe RGB, sRGB remains the principal color space for web-based content, ensuring that colors are represented uniformly across different viewing platforms. In essence, while RGB lays the foundation for digital color representation, sRGB standardizes this representation for widespread and consistent use in digital media.</p>
<section id="number-of-colors" class="level3">
<h3 class="anchored" data-anchor-id="number-of-colors">Number of Colors</h3>
<p>In both RGB and sRGB color spaces, the total number of colors that can be represented depends on the bit depth per channel. In typical scenarios where each of the RGB channels (Red, Green, Blue) is allocated 8 bits (which is quite common in consumer electronics and digital imagery), each channel can represent 2^8 or 256 distinct levels of intensity.</p>
<p>Since RGB and sRGB both use three channels, the total number of representable colors is calculated by multiplying the number of possibilities in each channel. So, the calculation would be:</p>
<blockquote class="blockquote">
<p>256 (Red) x 256 (Green) x 256 (Blue) = 16,777,216 total colors</p>
</blockquote>
<p>Therefore, both RGB and sRGB color spaces can represent approximately 16.7 million different colors when using an 8-bit per channel system. It’s important to note that this count is the same for both RGB and sRGB because the difference between these two spaces lies not in the number of colors they can represent but in how they interpret these colors (i.e., the color gamut and the mapping of color values to actual colors on a screen).</p>
<p>For images with higher bit depth per channel (like 10-bit, 12-bit, etc.), the total number of representable colors increases exponentially, allowing for a much richer and more nuanced color representation. However, the standard in most common digital applications remains 8-bit per channel.</p>
<p>Here are some examples of how certain colors are represented within this range:</p>
<ol type="1">
<li><p>Red: Pure red is represented as (255, 0, 0). This means the red channel is at its maximum, while green and blue are at their minimum.</p></li>
<li><p>Green: Pure green is (0, 255, 0), with the green channel at maximum and the others at minimum.</p></li>
<li><p>Blue: Pure blue appears as (0, 0, 255), with the blue channel at its maximum.</p></li>
<li><p>Yellow: Yellow is a mix of red and green, so it’s represented as (255, 255, 0).</p></li>
<li><p>Cyan: Cyan is a mix of green and blue, shown as (0, 255, 255).</p></li>
<li><p>Magenta: Magenta combines red and blue, represented as (255, 0, 255).</p></li>
<li><p>Black: Black is the absence of color in the RGB space, so all channels are at their minimum: (0, 0, 0).</p></li>
<li><p>White: White is the combination of all colors at their maximum intensity, so it’s (255, 255, 255).</p></li>
<li><p>Gray: Shades of gray are created when all three channels have equal intensity. For example, a medium gray might be (128, 128, 128).</p></li>
<li><p>Orange: Orange can vary in shade but is generally a mix of red and some green, such as (255, 165, 0).</p></li>
</ol>
<p>These examples provide a basic understanding of how different colors are represented in the RGB color space. By adjusting the intensity values of the red, green, and blue channels, a wide range of colors can be created.</p>
</section>
<section id="display-standards" class="level3">
<h3 class="anchored" data-anchor-id="display-standards">Display Standards</h3>
<p>The standard for most consumer TVs and monitors is typically an 8-bit per channel RGB color system. This means that each of the three color channels (Red, Green, Blue) can display 256 levels of intensity (from 0 to 255), resulting in 16,777,216 possible colors (256^3 = 16,777,216). This is often referred to as “True Color” or “24-bit color” (8 bits x 3 channels).</p>
<p>However, there is an increasing trend towards higher bit depths in newer, higher-end TVs and monitors, especially those geared towards professional use or high-quality entertainment experiences. These include:</p>
<ol type="1">
<li><p>10-bit color depth: With 10 bits per channel, a display can produce 1,024 levels of intensity per channel, resulting in a total of about 1.07 billion colors (1,024^3). This is significant for professional-grade monitors used in color-critical tasks like photo and video editing.</p></li>
<li><p>12-bit color depth: Some very high-end and specialized monitors and TVs offer 12-bit color, with 4,096 levels per channel, totaling around 68.7 billion colors (4,096^3). These are less common and are typically used in professional and cinematic settings.</p></li>
<li><p>HDR (high dynamic range): Modern high-end TVs and some monitors support HDR standards like HDR10, Dolby Vision, or HDR10+, which often use a 10-bit or even 12-bit color depth. HDR doesn’t just increase the number of colors; it also enhances the contrast and brightness, leading to a more dynamic and realistic image.</p></li>
<li><p>Wide color gamut: Apart from bit depth, many newer displays also support a wider color gamut (such as DCI-P3 or Rec. 2020), meaning they can display a broader range of colors than the traditional sRGB gamut.</p></li>
</ol>
<p>It’s important to note that to fully utilize these higher color depths and wider gamuts, the content being displayed (like movies, TV shows, or games) must also be created to support these standards, and the device’s hardware and software must be compatible with these advanced color features.</p>
</section>
<section id="complementary-colors" class="level3">
<h3 class="anchored" data-anchor-id="complementary-colors">Complementary Colors</h3>
<p>A complementary color is defined as a color that, when combined with a given color, produces a neutral color (white, gray, or black). Complementary colors are positioned opposite each other on the color wheel, a tool used to represent the relationships between colors.</p>
<p>In the RGB model, which is used for light-emitting sources like computer screens, the primary colors are red, green, and blue. The complementary color of red is cyan (a mix of green and blue), green’s complementary color is magenta (a mix of red and blue), and blue’s complementary color is yellow (a mix of red and green). When combined in this model, a color and its complementary produce white light. For example, combining red light with cyan light will result in white light.</p>
</section>
<section id="other-notations-for-rgb-color-space" class="level3">
<h3 class="anchored" data-anchor-id="other-notations-for-rgb-color-space">Other Notations for RGB Color Space</h3>
<section id="hex" class="level4">
<h4 class="anchored" data-anchor-id="hex">HEX</h4>
<p>HEX color notation is a staple in web and digital design, providing a succinct way to represent RGB colors. It encodes RGB values into a 6-digit hexadecimal number, prefaced by a hash symbol. Each pair of digits in this format, ranging from 00 to FF, corresponds to the red, green, and blue components of a color. This compact and efficient representation makes HEX particularly popular in coding and digital design environments.</p>
</section>
<section id="decimal" class="level4">
<h4 class="anchored" data-anchor-id="decimal">Decimal</h4>
<p>Decimal color notation is another way to describe RGB colors, similar to HEX but using decimal numbers. It presents colors with three values, each ranging from 0 to 255, for the red, green, and blue components. This approach is particularly user-friendly in programming and digital contexts, where working with decimal numbers is common.</p>
</section>
</section>
</section>
<section id="cmy-and-cmyk-color-spaces" class="level2">
<h2 class="anchored" data-anchor-id="cmy-and-cmyk-color-spaces">CMY and CMYK Color Spaces</h2>
<p>The CMY and CMYK color models are primarily used in color printing and are fundamentally different from the RGB color model, which is used in electronic displays. Both CMY and CMYK are based on the subtractive color model, unlike the additive nature of RGB.</p>
<section id="cmy" class="level3">
<h3 class="anchored" data-anchor-id="cmy">CMY</h3>
<p>CMY operates on the subtractive principle where colors are created by subtracting light. This model is based on the way light is absorbed and reflected off surfaces. It uses cyan, magenta, and yellow as its primary colors. These are the complementary colors of red, green, and blue (RGB), respectively.</p>
<p>In CMY, colors are created by partially or entirely subtracting the primary colors of light. For example, subtracting green from white light leaves magenta, subtracting red gives cyan, and subtracting blue yields yellow.</p>
<p>CMY is used in color printing. By combining varying amounts of cyan, magenta, and yellow, a wide range of colors can be reproduced. When all three colors are combined at their full intensity, they theoretically produce black, but in practice, they produce a muddy dark brown or gray.</p>
</section>
<section id="cmyk" class="level3">
<h3 class="anchored" data-anchor-id="cmyk">CMYK</h3>
<p>CMYK adds a fourth component, “key” (black), to the CMY model. The ‘K’ component is used because pure black cannot be created reliably through the combination of CMY inks due to imperfections in ink pigments. Adding black ink allows for deeper, more accurate, and consistent blacks.</p>
<p>CMYK creates colors through a subtractive process by layering different amounts of cyan, magenta, yellow, and black ink on paper. The more ink used, the darker the color becomes. Black ink in CMYK is also more economical and provides better shadow detail than CMY, making it a more efficient color model for full-color printing.</p>
</section>
<section id="differences-with-rgb" class="level3">
<h3 class="anchored" data-anchor-id="differences-with-rgb">Differences with RGB</h3>
<p>The most important difference is that RGB is an additive color model used in electronic displays, where colors are created by combining light. CMY and CMYK are subtractive, used in printing, where colors are created by subtracting light. Or, with different words, RGB is used for digital screens like monitors, TVs, and cameras, where light is emitted directly. CMY and CMYK are used in printing on physical media, where light is reflected.</p>
<p>In RGB, black is the absence of light, while in CMYK, black is a separate ink component for deeper and more uniform blacks.</p>
</section>
</section>
<section id="hsl-and-hsv-color-spaces" class="level2">
<h2 class="anchored" data-anchor-id="hsl-and-hsv-color-spaces">HSL and HSV Color Spaces</h2>
<p>Both HSL (hue, saturation, lightness) and HSV (hue, saturation, value) are color models used to represent the RGB color space in terms that are more intuitive for humans to understand and manipulate. These models describe colors in terms of their shade (hue), intensity (saturation), and brightness (lightness/value):</p>
<ul>
<li><p>HSL:</p>
<ul>
<li><p>Hue: Represents the type of color, or the color itself. It is typically measured in degrees around a color wheel, with red at 0°, green at 120°, and blue at 240°.</p></li>
<li><p>Saturation: Indicates the intensity or purity of the color. In HSL, saturation ranges from 0%, which is a shade of gray, to 100%, which is the full color.</p></li>
<li><p>Lightness: Also known as luminance, lightness defines how light or dark a color is. A lightness of 0% is black, 50% is the true color, and 100% is white.</p></li>
</ul></li>
<li><p>HSV:</p>
<ul>
<li><p>Hue: Similar to HSL, it defines the color itself.</p></li>
<li><p>Saturation: Measures the intensity or vibrancy of the color. It ranges from 0%, which is completely unsaturated (gray), to 100%, which is the most saturated form of the color.</p></li>
<li><p>Value: Also known as brightness, it represents the brightness or darkness of the color. A value of 0% is black, and 100% is the brightest form of the color.</p></li>
</ul></li>
</ul>
<section id="differences-with-rgb-1" class="level4">
<h4 class="anchored" data-anchor-id="differences-with-rgb-1">Differences with RGB</h4>
<p>RGB represents colors by specifying the intensity of each primary color, making it less intuitive for tasks like adjusting brightness or saturation. HSL and HSV are transformations of the RGB color model designed to be more intuitive for human perception. They allow for easier adjustments of color properties like shade, intensity, and brightness.</p>
<p>HSL and HSV are often used in color picker tools in graphic design software because they offer a more user-friendly way to select and manipulate colors. Moreover, they separate the chromatic information (hue and saturation) from the achromatic information (lightness/value), unlike RGB where all three parameters mix chromatic and achromatic components.</p>
<p>While RGB is suited for electronic displays and color mixing with light, HSL and HSV are more suited for tasks that involve adjusting and fine-tuning colors, like in graphic design and photo editing. In essence, HSL and HSV are used to represent the same colors as RGB but in a way that aligns more closely with how people think about and perceive colors. This makes them particularly useful in interfaces and applications where users need to make precise adjustments to color properties.</p>
</section>
</section>
<section id="yiq-and-yuv-color-spaces" class="level2">
<h2 class="anchored" data-anchor-id="yiq-and-yuv-color-spaces">YIQ and YUV Color Spaces</h2>
<p>YIQ and YUV are color spaces primarily used in the broadcasting industry, particularly in television systems. Both are designed to split a color signal into luminance and chrominance components, but they are used in different television standards.</p>
<p>The YIQ color space was predominantly used in the NTSC color television system, mainly in North America. In YIQ, ‘Y’ stands for the luminance component, which represents the brightness of the image. The ‘I’ and ‘Q’ components represent the chrominance or color information. ‘I’ carries information about the orange-cyan range, while ‘Q’ carries information about the green-magenta range. The separation of luminance and chrominance in YIQ allowed NTSC broadcasts to be compatible with black-and-white televisions. Luminance (Y) could be displayed by black-and-white TVs, while color TVs could use all three components (Y, I, Q) to display the full color image.</p>
<p>YUV is similar to YIQ in that it also separates the color signal into luminance (Y) and two chrominance components (U and V). YUV is used in the PAL and SECAM color television systems, prevalent in Europe and other parts of the world. The ‘Y’ component, like in YIQ, represents the image brightness. ‘U’ represents the blue-luminance difference, and ‘V’ represents the red-luminance difference. This separation was also designed for compatibility with black-and-white TVs, with the added advantage of better color quality compared to NTSC, although at a slightly lower resolution.</p>
<p>Both YIQ and YUV were developed to maximize the efficiency of color transmission in broadcasting and to ensure backward compatibility with black-and-white television systems. They differ from RGB, which is used in electronic displays and combines red, green, and blue light to produce colors. While RGB is more straightforward for generating colors electronically, YIQ and YUV are more efficient for broadcasting purposes because they separate the brightness of the image from the color information, which can be more efficiently compressed and transmitted.</p>
<p>The use of YIQ has declined with the shift towards digital broadcasting, which often uses other color spaces like YCbCr. YUV, on the other hand, is still relevant in many video processing applications and is closely related to the YCbCr color space used in digital video.</p>
</section>
<section id="cie-color-spaces" class="level2">
<h2 class="anchored" data-anchor-id="cie-color-spaces">CIE Color Spaces</h2>
<p>The International Commission on Illumination, known as CIE (Commission Internationale de l’Éclairage), is a significant organization in the field of color and lighting standards. CIE has introduced several critical color spaces, including XYZ, CIELab, and CIELCh, each serving unique purposes in color science.</p>
<section id="xyz" class="level3">
<h3 class="anchored" data-anchor-id="xyz">XYZ</h3>
<p>The CIE XYZ color space, established in 1931, is foundational in the field of colorimetry. It’s a device-independent model representing color perceptions of a standard observer. In XYZ, ‘X’ represents a mix of cone response curves, ‘Y’ denotes luminance, and ‘Z’ corresponds to blue stimulation. This color space serves as a reference, allowing for the translation of colors between different systems and devices. The gamut of XYZ encompasses all perceivable colors, making it a comprehensive standard for color representation.</p>
</section>
<section id="cielab" class="level3">
<h3 class="anchored" data-anchor-id="cielab">CIELab</h3>
<p>The CIELab (or Lab) color space, introduced in 1976, with its broad gamut and perceptually uniform characteristics, is designed to encompass the entire range of colors visible to the human eye. This extensive gamut means it can represent colors that are outside the range of many display systems and printers.</p>
<p>In CIELab:</p>
<ul>
<li><p>The ‘L’ component (lightness) ranges from 0 to 100, where 0 represents black, and 100 represents white. This vertical axis accounts for the luminance of colors.</p></li>
<li><p>The ‘a’ component operates on a green to red axis. Negative values of ‘a’ indicate green, while positive values indicate red.</p></li>
<li><p>The ‘b’ component works on a blue to yellow axis, with negative values representing blue and positive values indicating yellow.</p></li>
</ul>
<p>This structure allows for a precise and detailed representation of colors. For example:</p>
<ul>
<li><p>A strong green might be denoted as (L=50, a=-50, b=50), representing a mid-level lightness with a strong green component and a touch of yellow.</p></li>
<li><p>A deep red could be represented as (L=40, a=60, b=30), indicating a darker shade (lower lightness) with a dominant red component and some yellow.</p></li>
</ul>
<p>The notation in CIELab is quite distinct from RGB. While RGB specifies the intensity of red, green, and blue light to create colors (like RGB(255, 0, 0) for bright red), CIELab describes colors in terms of lightness and color-opponent dimensions, which align more closely with the human perception of colors.</p>
<p>This perceptual uniformity – where a given numerical change corresponds to a roughly equal perceptual change in color – is a key feature of CIELab. It ensures that when colors are altered or compared in this space, the perceived differences are consistent across the color spectrum.</p>
<p>CIELab’s broad gamut and perceptual uniformity make it a preferred choice in industries where accurate color differentiation and measurement are critical, like paint manufacturing, textile production, and quality control in various product design processes. It’s also commonly used in digital imaging and photography for color correction and editing, as it offers more intuitive control over color adjustments than RGB.</p>
<p>A classic example of colors that can be represented in CIELab but are often outside the gamut of many RGB devices are certain highly saturated cyans and blues. For instance, a very bright, saturated cyan might be represented in CIELab as something like (L=90, a=-40, b=-15). This color would be extremely vivid and might not be accurately displayed on a standard RGB monitor, which would struggle to reproduce its intensity and saturation. Similarly, some extremely bright and saturated yellows and greens can also fall outside the typical RGB gamut. These colors are so vivid that they can only be seen under intense lighting conditions, such as direct sunlight, and cannot be fully replicated on standard digital displays.</p>
</section>
<section id="cielch" class="level3">
<h3 class="anchored" data-anchor-id="cielch">CIELCh</h3>
<p>CIELCh is a color space closely related to CIELab but represented in cylindrical coordinates instead of Cartesian ones. It’s derived from the CIELab color space and is designed to represent color in a way that’s more intuitive and aligned with how humans perceive color changes.</p>
<p>In CIELCh, the components represent:</p>
<ol type="1">
<li><p>L (lightness): Just like in CIELab, ‘L’ in CIELCh represents the lightness of the color, with 0 being black and 100 being white.</p></li>
<li><p>C (chroma): This is essentially the saturation of the color. Chroma in CIELCh is derived from the a* and b* components of CIELab. It represents the vividness or intensity of the color. Higher chroma values indicate more intense, vivid colors, while lower chroma values result in duller, more washed-out colors.</p></li>
<li><p>h (hue angle): Instead of using the a* and b* Cartesian coordinates to define the hue, CIELCh uses an angle in a cylindrical space. This hue angle starts from the positive a* axis and is usually measured in degrees (0° to 360°). Different values correspond to different hues (colors), similar to positions on a traditional color wheel. For example, 0° or 360° represents red/magenta, 90° represents yellow, 180° represents green, and 270° represents blue.</p></li>
</ol>
<p>The transformation from CIELab to CIELCh is a conversion from Cartesian to cylindrical coordinates. The lightness (L) remains the same, but the a* and b* values in CIELab are converted to chroma (C) and hue (h) in CIELCh. The formulae for these conversions involve trigonometric functions where chroma (C) is calculated as the square root of (a*^2 + b*^2), and the hue angle (h) is calculated using the arctan function.</p>
<p>CIELCh is useful in various applications that require intuitive color adjustment and selection. The cylindrical representation makes it easier to understand and manipulate hue and saturation independently of lightness, which aligns more closely with how people think about and use color, especially in fields like graphic design, painting, and digital media.</p>
<p>This color space is particularly favored for tasks where color harmony and balance are important, as it allows for a straightforward manipulation of color relationships and contrasts.</p>
</section>
<section id="cieluv" class="level3">
<h3 class="anchored" data-anchor-id="cieluv">CIELUV</h3>
<p>CIELUV is a color space introduced by the International Commission on Illumination (CIE) to enable more effective color communication, especially for light emitting or reflecting surfaces. It’s part of the CIE 1976 color spaces, which also include CIELab.</p>
<p>The name CIELUV comes from the CIE L<em>u</em>v* color space. It’s designed similarly to CIELab, with ‘L’ representing lightness. However, while CIELab uses ‘a’ and ‘b’ for color-opponent dimensions, CIELUV uses ‘u*’ and ‘v*’ for chromaticity. These dimensions are based on the CIE 1960 u-v chromaticity diagram, which is a projection of the CIE XYZ color space.</p>
<p>CIELUV is particularly useful for applications like lighting design, video, and other emissive display applications where color gamut is crucial. One of its strengths lies in its ability to accurately represent highly saturated colors, a limitation in the CIELab color space.</p>
<p>In terms of technical details, the ‘L’ in CIELUV represents the perceived lightness, similar to CIELab. The ‘u*’ and ‘v*’ coordinates, however, are calculated differently, focusing on chromaticity. This difference stems from the way the two color spaces project the XYZ space into the color-opponent dimensions. In CIELUV, these projections are designed to better represent the way we perceive color in light-emitting sources.</p>
<p>When comparing CIELUV to CIELab, the key difference lies in their treatment of chromaticity and the types of applications they’re best suited for. CIELab is generally preferred for surface colors (like paint or ink), where color is a result of light reflecting off an object. In contrast, CIELUV is more suited for light-emitting sources (like displays or lights), where color is produced by light itself.</p>
<p>Both color spaces derive from the XYZ model and share the lightness dimension (L*). However, their approach to chromaticity makes them suitable for different applications and types of color processing. CIELUV’s emphasis on chromaticity makes it a valuable tool in industries dealing with light sources, displays, and environments where the light’s color itself is the primary concern.</p>
</section>
<section id="lchab" class="level3">
<h3 class="anchored" data-anchor-id="lchab">LCH(ab)</h3>
<p>The LCH(ab) color space, often simply referred to as LCH, is a color model derived from the CIELab color space. It represents colors in a more intuitive way compared to the Cartesian coordinates (a* and b*) used in CIELab. The LCH color model is based on cylindrical coordinates rather than Cartesian coordinates and consists of three components:</p>
<ol type="1">
<li><p>Lightness (L): Similar to the L* in CIELab, it represents the lightness of the color, where 0 is black, 100 is white, and values in between represent various shades of gray.</p></li>
<li><p>Chroma (C): Chroma in LCH is analogous to saturation in other color models. It represents the intensity or purity of the color. Higher chroma values indicate more vibrant colors, while lower values result in more muted tones.</p></li>
<li><p>Hue (H): Hue is represented as an angle (in degrees) around a color wheel. It defines the type of color (such as red, blue, green, yellow, etc.). In LCH, hue starts at 0 degrees for red and moves through the spectrum, with green at 120 degrees, blue at 240 degrees, and so forth.</p></li>
</ol>
<p>The LCH color space is particularly useful in applications where understanding and manipulating the color relationships and harmonies are important. It’s often used in graphic design, painting, and digital media for this reason. By separating the color components in this way, LCH allows designers to adjust hue and chroma independently of lightness, which can be more intuitive than working with the a* and b* coordinates in CIELab.</p>
<p>In essence, LCH(ab) offers a perceptually-based approach to color representation, aligning closely with how humans perceive and interpret color differences, making it a valuable tool in color-sensitive work.</p>
</section>
</section>
<section id="color-space-as-a-mathematical-space-subset" class="level2">
<h2 class="anchored" data-anchor-id="color-space-as-a-mathematical-space-subset">Color Space as a Mathematical Space Subset</h2>
<p>The concept of whether color spaces are subsets of integer or real mathematical spaces can be understood in terms of how they represent color values and the precision with which they operate.</p>
<ol type="1">
<li><p>RGB: RGB, commonly used in digital displays and imaging, typically uses integer values in practical applications, especially in 8-bit per channel systems where each color (Red, Green, Blue) is represented by an integer from 0 to 255. However, in more precise applications, such as high dynamic range (HDR) imaging or in professional color grading, RGB values can be represented in a floating-point format (real numbers), allowing for a finer gradation and a wider range of color intensities.</p></li>
<li><p>CIELab and CIELuv: Both CIELab and CIELuv are part of the CIE 1976 color space. They are generally considered to be subsets of the real number space. The L*, a*, b* (CIELab) and L*, u*, v* (CIELuv) coordinates are typically represented as real numbers to allow for a high degree of precision, which is crucial in color matching and colorimetric applications. This representation aligns with their design as perceptually uniform spaces, where small changes in values correspond to consistent perceptual differences in color.</p></li>
<li><p>HEX: The HEX color notation, used predominantly in web design, is based on integer values. It is essentially a hexadecimal representation of RGB values, where each color channel is represented by two hexadecimal digits, corresponding to an integer value between 0 and 255.</p></li>
<li><p>CIE XYZ: The CIE XYZ color space, which serves as a foundation for many other color spaces, including CIELab and CIELuv, represents colors using real numbers. This representation allows for a high degree of precision and is important for scientific and industrial applications where accurate color measurement and reproduction are necessary.</p></li>
<li><p>YIQ, YUV, and others: Used primarily in broadcasting and video processing, these color spaces often use real numbers for greater precision, especially in professional applications. However, for standard television broadcast and consumer electronics, these values are typically quantized into integer values.</p></li>
</ol>
<p>In summary, while practical implementations of these color spaces in digital devices often use integer values for ease of processing and storage, the theoretical models of most advanced color spaces, especially those used in colorimetry and professional applications, rely on real numbers for greater precision and a more accurate representation of color.</p>
</section>
<section id="color-spaces-conversion-libraries" class="level2">
<h2 class="anchored" data-anchor-id="color-spaces-conversion-libraries">Color Spaces Conversion Libraries</h2>
<section id="python-colormath" class="level3">
<h3 class="anchored" data-anchor-id="python-colormath">python-colormath</h3>
<p><a href="https://python-colormath.readthedocs.io/en/latest/" title="python-colormath">python-colormath</a> is a simple Python module that spares the user from directly dealing with color math. Some features include:</p>
<ul>
<li><p>Support for a wide range of color spaces. A good chunk of the CIE spaces, RGB, HSL/HSV, CMY/CMYK, and many more.</p></li>
<li><p>Conversions between the various color spaces. For example, XYZ to sRGB, Spectral to XYZ, CIELab to Adobe RGB.</p></li>
<li><p>Calculation of color difference. All CIE Delta E functions, plus CMC.</p></li>
<li><p>Chromatic adaptations (changing illuminants).</p></li>
<li><p>RGB to hex and vice-versa.</p></li>
<li><p>16-bit RGB support.</p></li>
<li><p>Runs on Python 2.7 and Python 3.3+.</p></li>
</ul>
<p>To convert a color from sRGB to CIELab using the Python <code>colormath</code> library, you first need to ensure that <code>colormath</code> is installed in your Python environment. You can install it using pip:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install colormath</span></code></pre></div>
<p>Once <code>colormath</code> is installed, you can use it to perform the conversion. Here’s a simple example:</p>
<div class="sourceCode" id="annotated-cell-2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> colormath.color_objects <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sRGBColor, LabColor, XYZColor, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="annotated-cell-2-2">                                    LCHabColor, LCHuvColor, HSVColor, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="annotated-cell-2-3">                                    CMYColor, CMYKColor</span>
<span id="annotated-cell-2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> colormath.color_conversions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> convert_color</span>
<span id="annotated-cell-2-5"></span>
<span id="annotated-cell-2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define an sRGB color (is_upscaled=True if you're using 0-255 range)</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-2-7" class="code-annotation-target">rgb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sRGBColor(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">128.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">128.</span>, is_upscaled<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="annotated-cell-2-8"></span>
<span id="annotated-cell-2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the sRGB color to other color spaces</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-2-10" class="code-annotation-target">lab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> convert_color(rgb, LabColor)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CIELab</span></span>
<span id="annotated-cell-2-11">xyz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> convert_color(rgb, XYZColor)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># XYZ </span></span>
<span id="annotated-cell-2-12">lch_ab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> convert_color(rgb, LCHabColor) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LCH(ab)</span></span>
<span id="annotated-cell-2-13">lch_uv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> convert_color(rgb, LCHuvColor) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LCH(uv)</span></span>
<span id="annotated-cell-2-14">hsv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> convert_color(rgb, HSVColor)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># HSV</span></span>
<span id="annotated-cell-2-15">cmy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> convert_color(rgb, CMYColor)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CMY</span></span>
<span id="annotated-cell-2-16">cmyk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> convert_color(rgb, CMYKColor)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CMYK</span></span>
<span id="annotated-cell-2-17"></span>
<span id="annotated-cell-2-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the colors in different color spaces  </span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-2-19" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CIELab: "</span>, lab)</span>
<span id="annotated-cell-2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CIELab:  LabColor (lab_l:29.7843 lab_a:58.9285 lab_b:-36.4932) </span></span>
<span id="annotated-cell-2-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XYZ: "</span>, xyz)         </span>
<span id="annotated-cell-2-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># XYZ:  XYZColor (xyz_x:0.1280 xyz_y:0.0615 xyz_z:0.2093)</span></span>
<span id="annotated-cell-2-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LCH(ab): "</span>, lch_ab)  </span>
<span id="annotated-cell-2-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LCH(ab):  LCHabColor (lch_l:29.7843 lch_c:69.3132 lch_h:328.2310)</span></span>
<span id="annotated-cell-2-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LCH(uv): "</span>, lch_uv)  </span>
<span id="annotated-cell-2-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LCH(uv):  LCHuvColor (lch_l:29.7843 lch_c:67.8446 lch_h:307.7154)</span></span>
<span id="annotated-cell-2-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HSV: "</span>, hsv)         </span>
<span id="annotated-cell-2-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># HSV:  HSVColor (hsv_h:300.0000 hsv_s:1.0000 hsv_v:0.5020)</span></span>
<span id="annotated-cell-2-29"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CMY: "</span>, cmy)         </span>
<span id="annotated-cell-2-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CMY:  CMYColor (cmy_c:0.4980 cmy_m:1.0000 cmy_y:0.4980)</span></span>
<span id="annotated-cell-2-31"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CMYK: "</span>, cmyk)       </span>
<span id="annotated-cell-2-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CMYK:  CMYKColor (cmyk_c:0.0000 cmyk_m:1.0000 cmyk_y:0.0000 cmyk_k:0.4980)</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-2" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="7" data-code-annotation="1">An sRGB color is defined with the red, green, and blue components. If you’re using values in the 0-255 range, set <code>is_upscaled=True</code> so that <code>colormath</code> knows to scale them down to 0-1.</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="10" data-code-annotation="2">The <code>convert_color</code> function is used to convert the defined sRGB color to the CIELab color space.</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="19" data-code-annotation="3">Finally, the resulting CIELab color is printed out. Other conversions follow.</span>
</dd>
</dl>
<p>The output will be the CIELab representation of the given sRGB color. Keep in mind that <code>colormath</code> handles these conversions assuming standard conditions and may not account for specific display or lighting characteristics unless explicitly specified.</p>
</section>
<section id="other-libraries" class="level3">
<h3 class="anchored" data-anchor-id="other-libraries">Other Libraries</h3>
<p>There are several other libraries in Python and other programming languages that can be used to convert between color spaces. Here are a few notable ones:</p>
<ol type="1">
<li><p>OpenCV (Python, C++, Java): Primarily known for its extensive functionalities in computer vision, OpenCV also offers color space conversion functions. It can handle conversions between various color spaces, including RGB, HSV, CIELab, and more.</p></li>
<li><p>Pillow (Python): The Pillow library, which is an extension of the Python Imaging Library (PIL), includes functions for converting images between different color spaces.</p></li>
<li><p>Color.js (JavaScript): A JavaScript library for color conversion and manipulation, it supports a wide range of color spaces and is particularly useful for web development.</p></li>
<li><p>D3.js (JavaScript): While primarily a library for producing interactive data visualizations, D3.js also includes methods for color space conversion, useful in the context of web design and visualizations.</p></li>
<li><p>Tinycolor (JavaScript): A small, fast library for color manipulation and conversion in JavaScript. It supports RGB, HSV, HSL, and HEX formats.</p></li>
<li><p>Colorspacious (Python): A Python library designed to convert and manipulate various color spaces with a focus on perceptual uniformity and color difference calculations.</p></li>
<li><p>Matplotlib (Python): Although mainly a plotting library, Matplotlib in Python can convert colors between RGB and other color spaces as part of its plotting functionalities.</p></li>
</ol>
<p>Each of these libraries has its own set of features and strengths, and the choice of library can depend on the specific requirements of your project, such as the programming language you’re using, the color spaces you need to work with, and the level of precision or control you need over the color conversion process.</p>
</section>
</section>
<section id="python-script-for-cielab-color-sampling-and-conversion" class="level2">
<h2 class="anchored" data-anchor-id="python-script-for-cielab-color-sampling-and-conversion">Python Script for CIELab Color Sampling and Conversion</h2>
<p>The Python script is designed to uniformly sample the CIELab color space and convert these samples to RGB. It also finds the nearest CIELab color to a given target color, either in CIELab or RGB space, and saves comparison charts. The script contains several key functions:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">generate_uniform_lab_samples(n_samples)</span></code></pre></div>
<p>This function generates uniformly distributed samples in the CIELab color space. It calculates the number of points per dimension based on the cubic root of the total number of desired samples, creating a grid of points in the CIELab space. If more points are generated than needed, it randomly samples from these points to get the desired number.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">lab_to_rgb(lab_arr)</span></code></pre></div>
<p>This function converts a batch of CIELab values to RGB and marks any colors that are approximated due to out-of-gamut issues. It uses the <code>skimage</code> library for the CIELab to RGB conversion and checks for any warnings during the conversion process, specifically looking for “negative Z values” which indicate an approximation.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">rgb_to_lab(rgb)</span></code></pre></div>
<p>This function converts an RGB color to the CIELab color space. It normalizes the RGB values (assuming they are in the 0-255 range) and uses the <code>colormath</code> library to perform the conversion.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">create_color_chart_with_spacing(lab_samples, rgb_samples, approx_flags, square_size_cm, spacing_cm, label_font_size, text_spacing_cm, save_path)</span></code></pre></div>
<p>This function creates a square image containing color squares with spacing between them. Each square represents a color sample. It calculates the total image size considering the spacing and text space and then uses <code>matplotlib</code> to create and save the image.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">find_nearest_color_lab(target_lab, generated_lab_samples)</span></code></pre></div>
<p>This function finds the nearest CIELab color to a given target color among generated samples using Delta E. It compares the target color with each generated sample using the <code>delta_e_cie2000</code> function from the <code>colormath</code> library.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">save_comparison_chart(target_lab, nearest_lab, square_size, spacing, save_path)</span></code></pre></div>
<p>This function saves an image with two squares: one for the target color and one for the nearest CIELab color. It draws the squares and saves the image using <code>matplotlib</code>.</p>
<p>The script also includes a section at the end for generating samples, converting them, and saving comparison charts.</p>
<p>This code is a comprehensive tool for exploring and visualizing the CIELab color space, its conversion to RGB, and the assessment of color proximity within this space.</p>
<p>Download the <a href="https://github.com/antomon/antomon.github.io/blob/b6d9822757db56d5906f1b3f8e6bb6e3040e7c3a/_static/posts/colors-101/cielab_sampler.ipynb">Jupyter notebook</a> or open it in Colab (click on the badge below) to sample the CIELab space and get the nearest sample of a given color.</p>
<p><a href="https://colab.research.google.com/github/antomon/antomon.github.io/blob/b6d9822757db56d5906f1b3f8e6bb6e3040e7c3a/_static/posts/colors-101/cielab_sampler.ipynb"><img src="https://colab.research.google.com/assets/colab-badge.svg" class="img-fluid" alt="Open In Colab"></a></p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p><a href="https://cie.co.at/" title="CIE website">CIE website</a>: International Commission on Illumination official website</p>
<p><a href="http://www.brucelindbloom.com/" title="Bruce Justin Lindbloom's website">Bruce Justin Lindbloom’s website</a>: useful for color spaces conversion formulas</p>
<p><a href="https://johnthemathguy.blogspot.com/" title="John the Math Guy's website">John the Math Guy’s website</a>: outstanding resource for color theory</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>programming</category>
  <category>Python</category>
  <category>tutorial</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/color-space-sampling-101/</guid>
  <pubDate>Fri, 26 Jan 2024 23:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/color-space-sampling-101/colors101.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Singletons in Python</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/python-singleton/</link>
  <description><![CDATA[ 





<p>Before diving into different implementations of a Python <strong>singleton</strong>, it’s essential to understand the concept from both theoretical and practical perspectives.</p>
<section id="what-is-a-design-pattern" class="level2">
<h2 class="anchored" data-anchor-id="what-is-a-design-pattern">What is a design pattern?</h2>
<p>A <strong>design pattern</strong> is a reusable solution to common problems that software developers encounter during application development. It represents best practices for addressing recurring design challenges, enabling developers to write code that is more flexible, maintainable, and reusable. Design patterns also provide a common vocabulary for designers and developers to communicate their approaches to solving software design problems.</p>
<p>Design patterns can be categorized into three main types:</p>
<ul>
<li><p>Creational patterns: Focus on object creation, optimizing efficiency and controlling how instances are instantiated. Examples include singleton, Factory Method, Builder, Prototype, and Abstract Factory.</p></li>
<li><p>Structural patterns: Deal with object composition, ensuring that relationships between components are efficient and effective. Examples include Adapter, Bridge, Composite, Decorator, Facade, and Proxy.</p></li>
<li><p>Behavioral patterns: Define how objects interact and communicate with each other. Examples include Strategy, Observer, Command, State, and Iterator.</p></li>
</ul>
</section>
<section id="what-is-a-creational-design-pattern" class="level2">
<h2 class="anchored" data-anchor-id="what-is-a-creational-design-pattern">What is a creational design pattern?</h2>
<p>A <strong>creational design pattern</strong> focuses on how objects are created, helping developers manage complex instantiation processes in a more adaptable and reusable manner. By abstracting the object creation process, creational patterns allow the code to be more flexible and maintainable. Some common creational design patterns include:</p>
<ul>
<li><p>Factory Method: Defines an interface for creating an object but lets subclasses decide the specific type of object to create.</p></li>
<li><p>Abstract Factory: Provides an interface for creating families of related objects without specifying their concrete classes.</p></li>
<li><p>Builder: Separates the construction of a complex object from its representation, allowing the construction process to produce different outcomes.</p></li>
<li><p>Prototype: Creates new objects by copying an existing instance, which serves as a prototype.</p></li>
<li><p>Singleton: Ensures that a class has only one instance while providing a global access point to that instance.</p></li>
</ul>
</section>
<section id="more-on-singletons" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="more-on-singletons">More on singletons</h2>
<p>The <strong>singleton pattern</strong> serves two primary purposes:</p>
<ol type="1">
<li><p>Ensure that a class has only one instance: The main goal of the singleton pattern is to control the number of instances of a class. This pattern is particularly useful when managing shared resources, such as database connections or configuration files. If an object already exists, any subsequent request to create the class should return the existing instance.</p>
<p>This behavior cannot be easily implemented using a typical constructor, as constructors are designed to return new objects each time they are invoked.</p></li>
<li><p>Provide a global access point to the instance: The singleton pattern also allows the instance to be accessed globally, similar to a global variable. However, unlike global variables, the singleton pattern ensures that the instance cannot be accidentally overwritten or modified by other parts of the code, reducing the risk of errors and crashes.</p>
<p>By encapsulating the logic that guarantees a single instance within the class itself, the code remains more organized and consistent.</p></li>
</ol>
<p>So, the singleton pattern is especially helpful when dealing with shared resources, where having multiple instances would lead to inefficiency, resource conflicts, or inconsistencies.</p>
<section id="naive-implementation" class="level3">
<h3 class="anchored" data-anchor-id="naive-implementation">Naive implementation</h3>
<p>A basic singleton can be implemented by keeping track of whether an instance has already been created. If an instance exists, any request for a new instance will return the existing one. This approach provides a global point of access to shared resources. Here is a simple implementation of a singleton in Python:</p>
<div class="sourceCode" id="annotated-cell-1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Logger:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-1-2" class="code-annotation-target">  _instance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="annotated-cell-1-3"></span>
<span id="annotated-cell-1-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__new__</span>(cls, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-1-5" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> cls._instance:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-1-6" class="code-annotation-target">      cls._instance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Logger, cls).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__new__</span>(cls, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="annotated-cell-1-7"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-1-8" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> cls._instance</span>
<span id="annotated-cell-1-9"></span>
<span id="annotated-cell-1-10">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-1-11" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>):</span>
<span id="annotated-cell-1-12">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-1-13"></span>
<span id="annotated-cell-1-14">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> write_log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, message):</span>
<span id="annotated-cell-1-15">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log.append(message)</span>
<span id="annotated-cell-1-16"></span>
<span id="annotated-cell-1-17">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> read_log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-1-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log</span>
<span id="annotated-cell-1-19"></span>
<span id="annotated-cell-1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="annotated-cell-1-21">logger1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Logger()</span>
<span id="annotated-cell-1-22">logger2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Logger()</span>
<span id="annotated-cell-1-23"></span>
<span id="annotated-cell-1-24">logger1.write_log(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Log message 1"</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-1-25" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(logger2.read_log())</span>
<span id="annotated-cell-1-26"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-1-27" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(logger1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> logger2)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-1" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="2" data-code-annotation="1">Initializes the class variable <code>_instance</code> to <code>None</code> to store the singleton instance.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="5" data-code-annotation="2">Checks if <code>_instance</code> is <code>None</code>, meaning no instance has been created yet.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="6" data-code-annotation="3">Creates a new instance using <code>super().__new__</code> and assigns it to <code>_instance</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="8" data-code-annotation="4">Returns the singleton instance.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="11" data-code-annotation="5">Checks if the <code>log</code> attribute is already initialized to prevent re-initialization.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="25" data-code-annotation="6">Output: <code>['Log message 1']</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="27" data-code-annotation="7">Output: <code>True</code>.</span>
</dd>
</dl>
<p>In this example, the <code>Logger</code> class ensures that only one instance is created by overriding the <code>__new__</code> method. When <code>logger1</code> and <code>logger2</code> are instantiated, they both reference the same instance, demonstrating the singleton pattern in action.</p>
</section>
<section id="disadvantages" class="level3">
<h3 class="anchored" data-anchor-id="disadvantages">Disadvantages</h3>
<p>While the singleton pattern offers advantages like centralized control and resource efficiency, it also has some notable downsides:</p>
<ul>
<li><p>Increased Coupling: Since singletons provide a global point of access, they can increase coupling between different components of an application. This can make refactoring or isolating parts of the system for testing more challenging.</p></li>
<li><p>Global State: Introducing a global state can lead to unpredictable behavior, making it difficult to track changes and understand the state of the application.</p></li>
<li><p>Testing Challenges: Singletons can complicate testing because enforcing a single instance can make it difficult to create isolated testing scenarios or simulate different states.</p></li>
</ul>
<p>Due to these potential issues, some developers view the singleton pattern as an antipattern and recommend using it only when its benefits outweigh the disadvantages.</p>
</section>
<section id="single-responsibility-principle" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="single-responsibility-principle">Single Responsibility Principle</h3>
<p>The <strong>Single Responsibility Principle (SRP)</strong> is one of the SOLID principles<sup>1</sup> of object-oriented design. It states that a class should have only one reason to change, meaning it should have a single responsibility or function within the system.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;The SOLID principles are a set of five fundamental design guidelines aimed at making software more understandable, flexible, and maintainable. The acronym <strong>SOLID</strong> stands for: Single Responsibility Principle, Open/Closed Principle (OCP), Liskov Substitution Principle (LSP), Interface Segregation Principle (ISP), Dependency Inversion Principle (DIP). These principles were introduced by Robert C. Martin, also known as <em>Uncle Bob</em>, in the early 2000s. They have become a cornerstone in object-oriented design and programming, promoting best practices that help developers build robust and scalable software systems.See Martin, R. C. (2002). <em>Agile Software Development, Principles, Patterns, and Practices</em>. Prentice Hall. ISBN: 978-0135974445.</p></div></div><p>Singletons often violate SRP because they typically serve two distinct purposes:</p>
<ol type="1">
<li><p>Managing their own instance: The singleton pattern ensures that only one instance of a class is created, and this instance management logic is built into the class itself.</p></li>
<li><p>Providing functional behavior: In addition to managing their own instance, singleton classes also provide functionality related to their main purpose (e.g., logging, configuration management, etc.).</p></li>
</ol>
<p>By combining both instance management and functional behavior, a singleton class is taking on more than one responsibility, which violates SRP. This dual responsibility can lead to increased complexity, reduced maintainability, and challenges when attempting to test or extend the class.</p>
</section>
<section id="a-real-world-application" class="level3">
<h3 class="anchored" data-anchor-id="a-real-world-application">A real-world application</h3>
<p>One of the simplest ways to implement the singleton pattern is by using a class-level attribute to store the instance. This method is both straightforward and effective.</p>
<p>Consider a scenario where we want to manage application-wide logging. The singleton pattern ensures that all parts of the application use the same logger object:</p>
<div class="sourceCode" id="annotated-cell-2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Logger:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-2-2" class="code-annotation-target">  _instance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="annotated-cell-2-3"></span>
<span id="annotated-cell-2-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__new__</span>(cls, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-2-5" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cls._instance <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-2-6" class="code-annotation-target">      cls._instance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Logger, cls).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__new__</span>(cls, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-2-7" class="code-annotation-target">      cls._instance.log <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-2-8"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-2-9" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> cls._instance</span>
<span id="annotated-cell-2-10"></span>
<span id="annotated-cell-2-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> write_log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, message):</span>
<span id="annotated-cell-2-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log.append(message)</span>
<span id="annotated-cell-2-13"></span>
<span id="annotated-cell-2-14">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> read_log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-2-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log</span>
<span id="annotated-cell-2-16"></span>
<span id="annotated-cell-2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="annotated-cell-2-18">logger1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Logger()</span>
<span id="annotated-cell-2-19">logger2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Logger()</span>
<span id="annotated-cell-2-20"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-2-21" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(logger1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> logger2)</span>
<span id="annotated-cell-2-22"></span>
<span id="annotated-cell-2-23">logger1.write_log(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Log message 1"</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-2-24" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(logger2.read_log())</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-2" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="2" data-code-annotation="1">Initializes the class variable <code>_instance</code> to <code>None</code> to store the singleton instance.</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="5" data-code-annotation="2">Checks if <code>_instance</code> is <code>None</code> to determine if an instance already exists.</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="6" data-code-annotation="3">Creates a new instance using <code>super().__new__</code> and assigns it to <code>_instance</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="7" data-code-annotation="4">Initializes the <code>log</code> attribute with an empty list.</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="9" data-code-annotation="5">Returns the singleton instance.</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="21" data-code-annotation="6">Output: <code>True</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="24" data-code-annotation="7">Output: <code>['Log message 1']</code>.</span>
</dd>
</dl>
<p>In this example, the <code>Logger</code> class is used to manage application-wide logging. The <code>__new__</code> method ensures that only one instance of the class is created. If an instance already exists, it is returned; otherwise, a new instance is created. This approach is effective and easy to understand, making it a good choice for simpler use cases.</p>
</section>
</section>
<section id="alternative-implementations" class="level2">
<h2 class="anchored" data-anchor-id="alternative-implementations">Alternative implementations</h2>
<p>The singleton pattern can be implemented in several ways in Python, including using a base class, a decorator, or even a metaclass.</p>
<section id="using-a-base-class" class="level3">
<h3 class="anchored" data-anchor-id="using-a-base-class">Using a base class</h3>
<p>One way to implement the singleton pattern is by using a base class that other classes inherit from. This base class defines the singleton behavior, ensuring that only one instance of the derived class is created.</p>
<div class="sourceCode" id="annotated-cell-3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SingletonBase:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-3-2" class="code-annotation-target">  _instances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="annotated-cell-3-3"></span>
<span id="annotated-cell-3-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__new__</span>(cls, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-3-5" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cls <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> cls._instances:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-3-6" class="code-annotation-target">      cls._instances[cls] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(SingletonBase, cls).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__new__</span>(cls, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="annotated-cell-3-7"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-3-8" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> cls._instances[cls]</span>
<span id="annotated-cell-3-9"></span>
<span id="annotated-cell-3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="annotated-cell-3-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Logger(SingletonBase):</span>
<span id="annotated-cell-3-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-3-13" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>):</span>
<span id="annotated-cell-3-14">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-3-15"></span>
<span id="annotated-cell-3-16">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> write_log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, message):</span>
<span id="annotated-cell-3-17">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log.append(message)</span>
<span id="annotated-cell-3-18"></span>
<span id="annotated-cell-3-19">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> read_log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-3-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log</span>
<span id="annotated-cell-3-21"></span>
<span id="annotated-cell-3-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Testing the singleton behavior</span></span>
<span id="annotated-cell-3-23">logger1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Logger()</span>
<span id="annotated-cell-3-24">logger2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Logger()</span>
<span id="annotated-cell-3-25"></span>
<span id="annotated-cell-3-26">logger1.write_log(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Log message 1"</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-3-27" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(logger2.read_log())</span>
<span id="annotated-cell-3-28"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-3-29" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(logger1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> logger2)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-3" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="2" data-code-annotation="1">Initializes a class-level dictionary <code>_instances</code> to keep track of singleton instances.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="5" data-code-annotation="2">Checks if the class (<code>cls</code>) is not in <code>_instances</code> to determine if an instance has been created.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="6" data-code-annotation="3">Creates a new instance and stores it in <code>_instances</code> under the class key.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="8" data-code-annotation="4">Returns the singleton instance from <code>_instances</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="13" data-code-annotation="5">Checks if the <code>log</code> attribute is already initialized to prevent re-initialization.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="27" data-code-annotation="6">Output: <code>['Log message 1']</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="29" data-code-annotation="7">Output: <code>True</code>.</span>
</dd>
</dl>
<p>In this implementation:</p>
<ul>
<li><p>The <code>SingletonBase</code> class ensures that only one instance of any subclass is created by maintaining a dictionary (<code>_instances</code>) of instances.</p></li>
<li><p>The <code>Logger</code> class inherits from <code>SingletonBase</code>, resulting in shared behavior and a single instance.</p></li>
</ul>
<p>This approach is useful when multiple classes need to follow the singleton pattern, allowing for reuse of the singleton logic.</p>
</section>
<section id="using-a-decorator" class="level3">
<h3 class="anchored" data-anchor-id="using-a-decorator">Using a decorator</h3>
<section id="what-is-a-decorator" class="level4">
<h4 class="anchored" data-anchor-id="what-is-a-decorator">What is a decorator?</h4>
<p>A <strong>decorator</strong> in Python is a function that allows you to modify the behavior of another function or class without changing its code. Decorators provide a clean, readable way to extend functionality by “wrapping” a function or class, making it easy to add behavior dynamically.</p>
<p>Decorators are commonly used in web frameworks to handle concerns like authentication, logging, and caching. They are an effective way to separate cross-cutting concerns from the main logic of a function, leading to more organized and maintainable code.</p>
<p>Below is an example of using a decorator to log function calls:</p>
<div class="sourceCode" id="annotated-cell-4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-4-1" class="code-annotation-target"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> log_decorator(func):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-4-2" class="code-annotation-target">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> wrapper(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-4-3" class="code-annotation-target">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Calling function '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>func<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">' with arguments </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>args<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> and </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>kwargs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-4-4" class="code-annotation-target">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-4-5" class="code-annotation-target">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Function '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>func<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">' returned </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-4-6"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-4-7" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="annotated-cell-4-8"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-4-9" class="code-annotation-target">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> wrapper</span>
<span id="annotated-cell-4-10"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-4-11" class="code-annotation-target"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@log_decorator</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="9" onclick="event.preventDefault();">9</a><span id="annotated-cell-4-12" class="code-annotation-target"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add(a, b):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="10" onclick="event.preventDefault();">10</a><span id="annotated-cell-4-13" class="code-annotation-target">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="annotated-cell-4-14"></span>
<span id="annotated-cell-4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using the decorated function</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="11" onclick="event.preventDefault();">11</a><span id="annotated-cell-4-16" class="code-annotation-target">add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-4" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="1" data-code-annotation="1">Defines the <code>log_decorator</code> function, which accepts another function <code>func</code> as its argument.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="2" data-code-annotation="2">Defines an inner function <code>wrapper</code> that can accept any number of positional (<code>*args</code>) and keyword (<code>**kwargs</code>) arguments.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="3" data-code-annotation="3">Prints a message indicating that <code>func</code> is being called, along with the arguments passed to it.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="4" data-code-annotation="4">Calls the original function <code>func</code> with the provided arguments and stores the result in <code>result</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="5" data-code-annotation="5">Prints a message indicating that <code>func</code> has returned a value, displaying the result.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="7" data-code-annotation="6">Returns the <code>result</code> obtained from calling <code>func</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="9" data-code-annotation="7">Returns the <code>wrapper</code> function, effectively replacing <code>func</code> with <code>wrapper</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="11" data-code-annotation="8">Applies the <code>log_decorator</code> to the <code>add</code> function using the decorator syntax.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="12" data-code-annotation="9">Defines the <code>add</code> function, which takes two arguments <code>a</code> and <code>b</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="10">10</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="13" data-code-annotation="10">Returns the sum of <code>a</code> and <code>b</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-4" data-target-annotation="11">11</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="16" data-code-annotation="11">Calls the decorated <code>add</code> function with arguments <code>3</code> and <code>5</code>.</span>
</dd>
</dl>
</section>
<section id="code" class="level4">
<h4 class="anchored" data-anchor-id="code">Code</h4>
<p>To implement the singleton pattern using decorators, we create a decorator function that wraps a class, ensuring that only one instance of that class is created.</p>
<section id="step-1-create-a-wrapper-class" class="level5">
<h5 class="anchored" data-anchor-id="step-1-create-a-wrapper-class">Step 1: Create a wrapper class</h5>
<p>The wrapper class is responsible for storing the instance of the decorated class and ensuring that any subsequent requests return the same instance.</p>
<div class="sourceCode" id="annotated-cell-5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SingletonInstanceWrapper:</span>
<span id="annotated-cell-5-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, cls):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-5-3" class="code-annotation-target">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__wrapped__ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cls</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-5-4" class="code-annotation-target">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._instance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="annotated-cell-5-5"></span>
<span id="annotated-cell-5-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-5-7" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._instance <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-5-8" class="code-annotation-target">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._instance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__wrapped__(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="annotated-cell-5-9"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-5" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-5-10" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._instance</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-5" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="3" data-code-annotation="1">Stores the original class in the <code>__wrapped__</code> attribute.</span>
</dd>
<dt data-target-cell="annotated-cell-5" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="4" data-code-annotation="2">Initializes <code>_instance</code> to <code>None</code> to hold the singleton instance.</span>
</dd>
<dt data-target-cell="annotated-cell-5" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="7" data-code-annotation="3">Checks if <code>_instance</code> is <code>None</code> to determine if an instance needs to be created.</span>
</dd>
<dt data-target-cell="annotated-cell-5" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="8" data-code-annotation="4">Creates a new instance of the decorated class and assigns it to <code>_instance</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-5" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-5" data-code-lines="10" data-code-annotation="5">Returns the singleton instance.</span>
</dd>
</dl>
</section>
<section id="step-2-create-the-decorator-function" class="level5">
<h5 class="anchored" data-anchor-id="step-2-create-the-decorator-function">Step 2: Create the decorator function</h5>
<p>Next, we need a decorator function that returns an instance of the wrapper class. This function will make it easy to apply the singleton pattern to any class by simply adding a decorator.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ensure_single_instance(cls):</span>
<span id="cb1-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> SingletonInstanceWrapper(cls)</span></code></pre></div>
</section>
<section id="step-3-use-the-decorator" class="level5">
<h5 class="anchored" data-anchor-id="step-3-use-the-decorator">Step 3: Use the decorator</h5>
<p>We can now use the decorator to enforce singleton behavior on any class. Let’s apply it to a <code>Logger</code> class to see how it works:</p>
<div class="sourceCode" id="annotated-cell-7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-7-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@ensure_single_instance</span></span>
<span id="annotated-cell-7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Logger:</span>
<span id="annotated-cell-7-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-7-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-7-5"></span>
<span id="annotated-cell-7-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> write_log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, message):</span>
<span id="annotated-cell-7-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log.append(message)</span>
<span id="annotated-cell-7-8"></span>
<span id="annotated-cell-7-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> read_log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-7-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log</span>
<span id="annotated-cell-7-11"></span>
<span id="annotated-cell-7-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="annotated-cell-7-13">logger1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Logger()</span>
<span id="annotated-cell-7-14">logger2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Logger()</span>
<span id="annotated-cell-7-15"></span>
<span id="annotated-cell-7-16">logger1.write_log(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Log message 1"</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-7-17" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(logger2.read_log())</span>
<span id="annotated-cell-7-18"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-7-19" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(logger1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> logger2)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-7" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="17" data-code-annotation="1">Output: <code>['Log message 1']</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-7" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="19" data-code-annotation="2">Output: <code>True</code>.</span>
</dd>
</dl>
<p>In this example, the <code>Logger</code> class is decorated with <code>@ensure_single_instance</code>. As a result, both <code>logger1</code> and <code>logger2</code> refer to the same instance, demonstrating the singleton behavior.</p>
<p>This approach highlights the power of combining decorators with the singleton pattern. By adding the <code>@ensure_single_instance</code> decorator, we ensure that the <code>Logger</code> class functions as a singleton, with all instances referring to the same underlying object. This simplifies the code and makes the intent explicit, enhancing readability and maintainability.</p>
</section>
</section>
</section>
<section id="using-a-metaclass" class="level3">
<h3 class="anchored" data-anchor-id="using-a-metaclass">Using a metaclass</h3>
<p>A metaclass can also be used to implement the singleton pattern. A <strong>metaclass</strong> is a class of a class, meaning it defines how classes behave. By using a metaclass, you can control the instantiation process of classes, making it a suitable tool for enforcing the singleton pattern.</p>
<p>Below is an example of how to implement the singleton pattern using a metaclass:</p>
<div class="sourceCode" id="annotated-cell-8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SingletonMeta(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-8-2" class="code-annotation-target">  _instances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="annotated-cell-8-3"></span>
<span id="annotated-cell-8-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(cls, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-8-5" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cls <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> cls._instances:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-8-6" class="code-annotation-target">      cls._instances[cls] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(SingletonMeta, cls).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="annotated-cell-8-7"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-8-8" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> cls._instances[cls]</span>
<span id="annotated-cell-8-9"></span>
<span id="annotated-cell-8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="annotated-cell-8-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Logger(metaclass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SingletonMeta):</span>
<span id="annotated-cell-8-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-8-13" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>):</span>
<span id="annotated-cell-8-14">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-8-15"></span>
<span id="annotated-cell-8-16">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> write_log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, message):</span>
<span id="annotated-cell-8-17">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log.append(message)</span>
<span id="annotated-cell-8-18"></span>
<span id="annotated-cell-8-19">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> read_log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-8-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log</span>
<span id="annotated-cell-8-21"></span>
<span id="annotated-cell-8-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Testing the singleton behavior</span></span>
<span id="annotated-cell-8-23">logger1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Logger()</span>
<span id="annotated-cell-8-24">logger2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Logger()</span>
<span id="annotated-cell-8-25"></span>
<span id="annotated-cell-8-26">logger1.write_log(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Log message 1"</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-8-27" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(logger2.read_log())</span>
<span id="annotated-cell-8-28"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-8-29" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(logger1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> logger2)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-8" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="2" data-code-annotation="1">Initializes a class-level dictionary <code>_instances</code> to store instances of classes using this metaclass.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="5" data-code-annotation="2">Checks if the class (<code>cls</code>) is not in <code>_instances</code> to see if an instance has been created.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="6" data-code-annotation="3">Creates a new instance using <code>super().__call__</code> and stores it in <code>_instances</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="8" data-code-annotation="4">Returns the singleton instance from <code>_instances</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="13" data-code-annotation="5">Checks if the <code>log</code> attribute is already set to avoid re-initialization.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="27" data-code-annotation="6">Output: <code>['Log message 1']</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-8" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="29" data-code-annotation="7">Output: <code>True</code>.</span>
</dd>
</dl>
<p>In this implementation:</p>
<ul>
<li><p>The <code>SingletonMeta</code> class is a metaclass that overrides the <code>__call__</code> method. This method is responsible for creating instances of classes.</p></li>
<li><p>The <code>__call__</code> method checks if an instance already exists in the <code>_instances</code> dictionary. If not, it creates a new instance and stores it. Otherwise, it returns the existing instance.</p></li>
<li><p>The <code>Logger</code> class uses <code>SingletonMeta</code> as its metaclass, ensuring that only one instance is ever created.</p></li>
</ul>
<p>This approach is particularly powerful because it allows you to enforce singleton behavior at the metaclass level, meaning that any class using <code>SingletonMeta</code> as its metaclass will automatically follow the singleton pattern. This approach is also more flexible and reusable compared to other singleton implementations.</p>
<p>Using metaclasses for singletons allows for a more Pythonic approach to instance management, especially when working with multiple classes that need to follow the singleton pattern.</p>
</section>
<section id="comparing-the-three-implementations" class="level3">
<h3 class="anchored" data-anchor-id="comparing-the-three-implementations">Comparing the three implementations</h3>
<p>Each of the three implementations of the singleton pattern—using a base class, a decorator, and a metaclass—has its own advantages and use cases:</p>
<ul>
<li><p>Base class implementation: This approach is useful when multiple classes need to follow the singleton pattern. It allows for reuse of the singleton logic, as any class inheriting from the base class will automatically follow the singleton behavior. However, it introduces tight coupling with the base class, which might limit flexibility.</p></li>
<li><p>Decorator implementation: The decorator approach makes the intent to create a singleton explicit in the class definition. It keeps the singleton logic separate from the core functionality of the class, promoting better separation of concerns. This method is highly readable, but requires a decorator function and an additional wrapper class, which can add some complexity.</p></li>
<li><p>Metaclass implementation: Using a metaclass to enforce the singleton pattern is a powerful and Pythonic solution. It allows multiple classes to follow the singleton pattern without explicit inheritance or decoration. This approach is highly reusable and works well when you need singleton behavior across different classes without modifying each class definition. However, metaclasses can be more difficult to understand, especially for developers who are not familiar with Python’s metaclass system.</p></li>
</ul>
</section>
</section>
<section id="taking-into-account-thread-safety" class="level2">
<h2 class="anchored" data-anchor-id="taking-into-account-thread-safety">Taking into account thread-safety</h2>
<p>It’s crucial to understand when explicit thread safety management is needed, as it comes with a computational cost. In Python, the Global Interpreter Lock (GIL) ensures that only one thread executes Python bytecode at a time, which can mitigate the need for additional thread safety in simpler scenarios. However, more advanced data structures involving non-atomic operations still require explicit thread safety with locks to prevent issues when multiple threads are accessing or modifying shared resources.</p>
<p>To make singleton implementations thread-safe, we need to ensure that multiple threads do not create multiple instances simultaneously. Below are thread-safe versions of the singleton pattern implemented using a base class, a decorator, and a metaclass.</p>
<section id="using-a-base-class-1" class="level3">
<h3 class="anchored" data-anchor-id="using-a-base-class-1">Using a base class</h3>
<p>In a thread-safe singleton implementation using a base class, we use a lock to ensure that only one thread can create the instance at a time:</p>
<div class="sourceCode" id="annotated-cell-9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-9-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> threading</span>
<span id="annotated-cell-9-2"></span>
<span id="annotated-cell-9-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SingletonBaseThreadSafe:</span>
<span id="annotated-cell-9-4">  _instances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-9-5" class="code-annotation-target">  _lock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threading.Lock()</span>
<span id="annotated-cell-9-6"></span>
<span id="annotated-cell-9-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__new__</span>(cls, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="annotated-cell-9-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cls <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> cls._instances:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-9-9" class="code-annotation-target">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> cls._lock:</span>
<span id="annotated-cell-9-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cls <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> cls._instances:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-9-11" class="code-annotation-target">          cls._instances[cls] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(SingletonBaseThreadSafe, cls).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__new__</span>(cls, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="annotated-cell-9-12"></span>
<span id="annotated-cell-9-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> cls._instances[cls]</span>
<span id="annotated-cell-9-14"></span>
<span id="annotated-cell-9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="annotated-cell-9-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Logger(SingletonBaseThreadSafe):</span>
<span id="annotated-cell-9-17">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-9-18" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>):</span>
<span id="annotated-cell-9-19">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-9-20"></span>
<span id="annotated-cell-9-21">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> write_log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, message):</span>
<span id="annotated-cell-9-22">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log.append(message)</span>
<span id="annotated-cell-9-23"></span>
<span id="annotated-cell-9-24">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> read_log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-9-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log</span>
<span id="annotated-cell-9-26"></span>
<span id="annotated-cell-9-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Testing the singleton behavior</span></span>
<span id="annotated-cell-9-28">logger1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Logger()</span>
<span id="annotated-cell-9-29">logger2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Logger()</span>
<span id="annotated-cell-9-30"></span>
<span id="annotated-cell-9-31">logger1.write_log(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Log message 1"</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-9-32" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(logger2.read_log())</span>
<span id="annotated-cell-9-33"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-9-34" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(logger1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> logger2)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-9" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="1" data-code-annotation="1">Imports the <code>threading</code> module to use threading locks.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="5" data-code-annotation="2">Initializes a class-level lock <code>_lock</code> to ensure thread safety.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="9" data-code-annotation="3">Acquires the lock to prevent multiple threads from entering the critical section.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="11" data-code-annotation="4">Creates the singleton instance inside the locked section if it doesn’t exist.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="18" data-code-annotation="5">Checks if the <code>log</code> attribute is already initialized.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="32" data-code-annotation="6">Output: <code>['Log message 1']</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-9" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="34" data-code-annotation="7">Output: <code>True</code>.</span>
</dd>
</dl>
<p>In this implementation:</p>
<ul>
<li><p>A class-level lock (<code>_lock</code>) is used to ensure that only one thread can execute the code that creates the singleton instance.</p></li>
<li><p>The <code>with cls._lock</code> statement prevents multiple threads from entering the critical section where the instance is created, ensuring thread safety.</p></li>
</ul>
</section>
<section id="using-a-decorator-1" class="level3">
<h3 class="anchored" data-anchor-id="using-a-decorator-1">Using a decorator</h3>
<p>The decorator-based singleton can be made thread-safe by adding a lock to ensure only one thread creates the instance:</p>
<div class="sourceCode" id="annotated-cell-10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-10-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> threading</span>
<span id="annotated-cell-10-2"></span>
<span id="annotated-cell-10-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SingletonInstanceWrapperThreadSafe:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-10-4" class="code-annotation-target">  _lock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threading.Lock()</span>
<span id="annotated-cell-10-5"></span>
<span id="annotated-cell-10-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, cls):</span>
<span id="annotated-cell-10-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__wrapped__ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cls</span>
<span id="annotated-cell-10-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._instance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="annotated-cell-10-9"></span>
<span id="annotated-cell-10-10">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="annotated-cell-10-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._instance <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-10-12" class="code-annotation-target">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._lock:</span>
<span id="annotated-cell-10-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._instance <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-10-14" class="code-annotation-target">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._instance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__wrapped__(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="annotated-cell-10-15"></span>
<span id="annotated-cell-10-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._instance</span>
<span id="annotated-cell-10-17"></span>
<span id="annotated-cell-10-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ensure_single_instance_thread_safe(cls):</span>
<span id="annotated-cell-10-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> SingletonInstanceWrapperThreadSafe(cls)</span>
<span id="annotated-cell-10-20"></span>
<span id="annotated-cell-10-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="annotated-cell-10-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@ensure_single_instance_thread_safe</span></span>
<span id="annotated-cell-10-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Logger:</span>
<span id="annotated-cell-10-24">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-10-25">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-10-26"></span>
<span id="annotated-cell-10-27">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> write_log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, message):</span>
<span id="annotated-cell-10-28">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log.append(message)</span>
<span id="annotated-cell-10-29"></span>
<span id="annotated-cell-10-30">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> read_log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-10-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log</span>
<span id="annotated-cell-10-32"></span>
<span id="annotated-cell-10-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Testing the singleton behavior</span></span>
<span id="annotated-cell-10-34">logger1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Logger()</span>
<span id="annotated-cell-10-35">logger2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Logger()</span>
<span id="annotated-cell-10-36"></span>
<span id="annotated-cell-10-37">logger1.write_log(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Log message 1"</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-10-38" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(logger2.read_log())</span>
<span id="annotated-cell-10-39"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-10" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-10-40" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(logger1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> logger2)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-10" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="1" data-code-annotation="1">Imports the <code>threading</code> module.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="4" data-code-annotation="2">Initializes a class-level lock <code>_lock</code> to manage thread access.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="12" data-code-annotation="3">Acquires the lock to enter the critical section safely.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="14" data-code-annotation="4">Creates the singleton instance within the locked section if it doesn’t exist.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="38" data-code-annotation="5">Output: <code>['Log message 1']</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-10" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-10" data-code-lines="40" data-code-annotation="6">Output: <code>True</code>.</span>
</dd>
</dl>
<p>In this implementation:</p>
<ul>
<li><p>A class-level lock (<code>_lock</code>) is used to prevent multiple threads from creating multiple instances simultaneously.</p></li>
<li><p>The <code>with self._lock</code> statement ensures that only one thread can execute the code that initializes the singleton instance.</p></li>
</ul>
</section>
<section id="using-a-metaclass-1" class="level3">
<h3 class="anchored" data-anchor-id="using-a-metaclass-1">Using a metaclass</h3>
<p>For a thread-safe singleton using a metaclass, we add a lock to the metaclass to ensure that only one thread can create the instance:</p>
<div class="sourceCode" id="annotated-cell-11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-11-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> threading</span>
<span id="annotated-cell-11-2"></span>
<span id="annotated-cell-11-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SingletonMetaThreadSafe(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>):</span>
<span id="annotated-cell-11-4">  _instances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-11-5" class="code-annotation-target">  _lock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threading.Lock()</span>
<span id="annotated-cell-11-6"></span>
<span id="annotated-cell-11-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(cls, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="annotated-cell-11-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cls <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> cls._instances:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-11-9" class="code-annotation-target">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> cls._lock:</span>
<span id="annotated-cell-11-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cls <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> cls._instances:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-11-11" class="code-annotation-target">          cls._instances[cls] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(SingletonMetaThreadSafe, cls).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="annotated-cell-11-12"></span>
<span id="annotated-cell-11-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> cls._instances[cls]</span>
<span id="annotated-cell-11-14"></span>
<span id="annotated-cell-11-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="annotated-cell-11-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Logger(metaclass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SingletonMetaThreadSafe):</span>
<span id="annotated-cell-11-17">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-11-18" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>):</span>
<span id="annotated-cell-11-19">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-11-20"></span>
<span id="annotated-cell-11-21">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> write_log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, message):</span>
<span id="annotated-cell-11-22">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log.append(message)</span>
<span id="annotated-cell-11-23"></span>
<span id="annotated-cell-11-24">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> read_log(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-11-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log</span>
<span id="annotated-cell-11-26"></span>
<span id="annotated-cell-11-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Testing the singleton behavior</span></span>
<span id="annotated-cell-11-28">logger1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Logger()</span>
<span id="annotated-cell-11-29">logger2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Logger()</span>
<span id="annotated-cell-11-30"></span>
<span id="annotated-cell-11-31">logger1.write_log(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Log message 1"</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-11-32" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(logger2.read_log())</span>
<span id="annotated-cell-11-33"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-11" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-11-34" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(logger1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> logger2)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-11" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="1" data-code-annotation="1">Imports the <code>threading</code> module.</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="5" data-code-annotation="2">Initializes a class-level lock <code>_lock</code> in the metaclass.</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="9" data-code-annotation="3">Uses the lock to prevent concurrent instance creation.</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="11" data-code-annotation="4">Creates the singleton instance inside the critical section.</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="18" data-code-annotation="5">Checks if the <code>log</code> attribute is already set to avoid re-initialization.</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="32" data-code-annotation="6">Output: <code>['Log message 1']</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-11" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-11" data-code-lines="34" data-code-annotation="7">Output: <code>True</code>.</span>
</dd>
</dl>
<p>In this implementation:</p>
<ul>
<li><p>The metaclass <code>SingletonMetaThreadSafe</code> uses a class-level lock (<code>_lock</code>) to prevent multiple threads from creating multiple instances.</p></li>
<li><p>The <code>with cls._lock</code> statement ensures thread safety by restricting access to the instance creation code to only one thread at a time.</p></li>
</ul>
</section>
<section id="summary" class="level3">
<h3 class="anchored" data-anchor-id="summary">Summary</h3>
<p>All three implementations ensure that the singleton instance is created in a thread-safe manner by using locks. This prevents multiple threads from creating separate instances, ensuring the singleton property holds even in concurrent environments.</p>
<p>In CPython, the reference implementation of Python, the GIL ensures that only one thread executes Python bytecode at a time. This means that even without explicit locks, bytecode execution is atomic at the interpreter level, which can mitigate some thread safety concerns for simple operations. However, the GIL does not protect against all threading issues, especially when dealing with non-atomic operations or when interfacing with external systems and I/O operations. Therefore, relying solely on the GIL for thread safety is not advisable.</p>
<p>Moreover, there are proposals like <strong><a href="https://peps.python.org/pep-0703/">PEP 703</a></strong> titled <em>Making the Global Interpreter Lock Optional in CPython</em>, which aim to make the GIL optional in future versions of Python. If such changes are implemented, threads could execute Python bytecode concurrently, removing the atomicity guarantees currently provided by the GIL. This would increase the importance of explicit thread safety mechanisms in your code.</p>
<p>Given these considerations, it’s important to implement explicit thread safety measures, such as locks, in your singleton implementations. This ensures that your code is robust not only in the current CPython environment but also in future Python interpreters that may not have a GIL. By proactively managing thread safety, you can prevent subtle bugs and race conditions that could occur in a truly concurrent execution environment.</p>
<p>While each singleton implementation method—base class, decorator, or metaclass—has its own strengths, the choice depends on the specific requirements of your application, such as readability, reusability, and your familiarity with Python’s advanced features like metaclasses or decorators. Regardless of the method chosen, incorporating explicit thread safety measures is crucial for maintaining the singleton property in multi-threaded applications, both now and in anticipation of future developments in Python’s concurrency model.</p>
</section>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final thoughts</h2>
<p>The singleton pattern is a powerful tool when used appropriately, particularly for managing shared resources like configuration settings or logging mechanisms. However, it’s important to weigh the benefits of the singleton pattern against its potential downsides. Overusing it or applying it in the wrong context can lead to design issues such as increased coupling, global state management problems, and violations of the Single Responsibility Principle.</p>
<p>The singleton pattern can be implemented in several ways, each with its pros and cons. The base class implementation is straightforward and easy to reuse but can introduce tight coupling. The decorator implementation provides clear separation of concerns and is highly readable but may add complexity due to the need for additional wrapper classes. The metaclass approach is powerful and reusable across different classes without modifying their definitions, but it may be challenging for developers who are not familiar with metaclasses.</p>
<p>In summary, while the singleton pattern is useful, its usage should be carefully considered and limited to cases where ensuring a single instance truly adds value to the application. Understanding the trade-offs of different implementations will help you make the best design decisions for your specific needs.</p>


</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>programming</category>
  <category>Python</category>
  <category>tutorial</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/python-singleton/</guid>
  <pubDate>Thu, 07 Dec 2023 23:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/python-singleton/singletons.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Homomorphic Encryption for Developers</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/homomorphic-encryption-developers/</link>
  <description><![CDATA[ 






<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://antomon.github.io/posts/homomorphic-encryption-developers/homomorphic-encryption.png" class="img-fluid" data-fig-format="png,webp"></p>
</div></div><section id="roadmap" class="level2">
<h2 class="anchored" data-anchor-id="roadmap">Roadmap</h2>
<p>In this tutorial, you’ll learn:</p>
<ul>
<li><p>Motivation for homomorphic encryption: Why processing on encrypted data matters in real-world scenarios (healthcare, finance, public cloud).</p></li>
<li><p>Fundamental building blocks: We recap the necessary number theory, group theory, and RSA to establish a strong cryptographic foundation.</p></li>
<li><p>Types of homomorphic encryption: We’ll dissect partially, somewhat, and fully homomorphic schemes, clarifying their strengths and limitations.</p></li>
<li><p>Integration with other privacy techniques: You’ll see how HE connects with Differential Privacy, Secure Multiparty Computation, Zero-Knowledge Proofs, and more.</p></li>
<li><p>Use cases and applications: Cloud computing, blockchain, secure data federation, private information retrieval, and advanced cryptographic protocols.</p></li>
<li><p>Challenges, limitations, and future directions: Noise growth, performance overhead, circuit depth, key management, as well as emerging research directions and post-quantum considerations.</p></li>
</ul>
<p>By the end, you’ll understand how HE fits into the broader cryptographic ecosystem, and you’ll be ready to start prototyping with existing HE libraries.</p>
</section>
<section id="introduction" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Imagine you’re building a healthcare app that needs to analyze patient data stored in the cloud. Since the data is sensitive, you encrypt it before sending it. However, every time you need to analyze the data, you have to decrypt it, which means the data is exposed and creates a security risk.</p>
<p>This is the main problem with traditional encryption systems like RSA<sup>1</sup> and AES<sup>2</sup>. They protect data while it’s stored or sent, but as soon as you need to use the data, you have to decrypt it. It’s like keeping money in a safe but needing to take it out every time you want to count it. This fundamental limitation makes it challenging to keep sensitive information secure throughout its lifecycle, especially as more applications rely on cloud computing, where the need for remote processing is common.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;The RSA algorithm is named after its inventors: Rivest, Shamir, and Adleman, who developed it in 1977. It is a widely-used asymmetric encryption method that relies on the computational difficulty of factoring large integers, currently enabling secure data transmission with a public key for encryption and a private key for decryption. Quantum computers can use Shor’s algorithm to factor integers exponentially faster than classical algorithms, making RSA effectively insecure against quantum attacks. See: Rivest, R. L., Shamir, A., &amp; Adleman, L. (1978). <strong>A method for obtaining digital signatures and public-key cryptosystems</strong>. <em>Communications of the ACM</em>, 21(2), 120–126. <a href="https://doi.org/10.1145/359340.359342">DOI</a>, and Shor, P. W. (1994). <strong>Algorithms for quantum computation: Discrete logarithms and factoring</strong>. <em>Proceedings of the 35th Annual Symposium on Foundations of Computer Science</em>, 124–134. IEEE. <a href="https://doi.org/10.1109/SFCS.1994.365700">DOI</a></p></div><div id="fn2"><p><sup>2</sup>&nbsp;The AES algorithm (Advanced Encryption Standard) is a symmetric encryption standard established by the National Institute of Standards and Technology (NIST) in 2001, based on the Rijndael cipher designed by Joan Daemen and Vincent Rijmen. It is widely used for secure data encryption due to its speed and robustness. See: Daemen, J., &amp; Rijmen, V. (1998). <strong>Advanced Encryption Standard (AES) (FIPS PUB 197)</strong>. <em>Federal Information Processing Standards Publications</em>. National Institute of Standards and Technology (NIST). <a href="https://csrc.nist.gov/publications/fips/fips197/fips-197.pdf">Download</a>. AES relies on the computational difficulty of brute-forcing keys, which requires trying all possible key combinations. Quantum computers can use <strong>Grover’s algorithm</strong>, which provides a quadratic speedup for searching through possible keys. Instead of taking <img src="https://latex.codecogs.com/png.latex?2%5En"> steps to brute-force an <img src="https://latex.codecogs.com/png.latex?n">-bit key, Grover’s algorithm reduces it to approximately <img src="https://latex.codecogs.com/png.latex?2%5E%7Bn/2%7D"> steps. This means that AES-128 (128-bit keys) would have the equivalent security of a 64-bit key against a quantum computer, making it potentially vulnerable. AES-256 is considered quantum-resistant for the foreseeable future because Grover’s algorithm would reduce its effective strength to <img src="https://latex.codecogs.com/png.latex?2%5E%7B128%7D">, which is still computationally infeasible. See: UK National Cyber Security Centre. <strong>On the practical cost of Grover’s algorithm for AES key recovery</strong>. <em>Fifth PQC Standardization Conference</em>. <a href="https://csrc.nist.gov/csrc/media/Events/2024/fifth-pqc-standardization-conference/documents/papers/on-practical-cost-of-grover.pdf">Download</a></p></div></div><p>Homomorphic encryption (HE) aims to solve this problem by allowing data to remain encrypted even while it’s being processed. It promises to make the cloud much safer for storing and analyzing data, which could have far-reaching impacts on healthcare, finance, and many other fields. Imagine being able to calculate the average income of a group of people without ever knowing how much any individual earns, that’s the promise of HE.</p>
<section id="the-challenge-with-data-security" class="level3">
<h3 class="anchored" data-anchor-id="the-challenge-with-data-security">The challenge with data security</h3>
<p>Even when data is encrypted and stored in the cloud, there are still some risks:</p>
<ol type="1">
<li><p>Metadata exposure: Even if the data is encrypted, cloud providers can still see some information:</p>
<ul>
<li>When the data is accessed.</li>
<li>How much data is being processed.</li>
<li>Patterns of usage that could reveal some details.</li>
</ul>
<p>Metadata may not contain the actual content of the data, but it can still provide insights that compromise privacy. For instance, frequent access to a medical record could imply a serious health condition, even if the actual diagnosis remains encrypted.</p></li>
<li><p>Trust issues: Cloud providers or intermediaries who have access to encryption keys could:</p>
<ul>
<li>Access decrypted data when it’s being processed.</li>
<li>Keep metadata even after the service ends.</li>
<li>Create privacy risks by storing information about data access, which could help them infer details even if the data itself is never fully decrypted</li>
</ul>
<p>These issues highlight the importance of removing the need to trust third parties. HE can help solve this problem by ensuring that data remains encrypted, even when it’s being analyzed.</p></li>
</ol>
</section>
<section id="computing-on-encrypted-data" class="level3">
<h3 class="anchored" data-anchor-id="computing-on-encrypted-data">Computing on encrypted data</h3>
<p>Let’s say Alice has some data <img src="https://latex.codecogs.com/png.latex?m">, and Bob has a function <img src="https://latex.codecogs.com/png.latex?f">. Alice wants to know the answer to <img src="https://latex.codecogs.com/png.latex?f(m)">:</p>
<ul>
<li>Traditional approach: Alice has to share <img src="https://latex.codecogs.com/png.latex?m"> with Bob.</li>
</ul>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div id="fig-traditional-approach-diagram" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-traditional-approach-diagram-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div>
<pre class="mermaid mermaid-js" data-label="fig-traditional-approach-diagram">%%{init: {"theme": "neo", "look": "handDrawn"}}%%
flowchart TD
  subgraph Client["Client"]
    C1[["Step 1: Prepare private data $$\ m$$"]]
    C2[/"Step 2: Send $$\ m$$ to Server"/]
    C3[["Step 5: Receive $$\ f(m)$$ from Server"]]
  end
  subgraph Server["Server"]
    S1[["Step 3: Perform computation $$\ f(m)$$"]]
    S2[/"Step 4: Send $$\ f(m)$$ back to Client"/]
  end
  C1 --&gt; C2
  C2 --&gt; S1
  S1 --&gt; S2
  S2 --&gt; C3

  style C1 stroke:#000000
  style C2 stroke:#000000
  style C3 stroke:#000000
  style S1 stroke:#000000
  style S2 stroke:#000000
  style Client stroke:#00C853,fill:#00C853,color:#000000
  style Server stroke:#FFD600,fill:#FFD600,color:#000000
  linkStyle 0 stroke:#000000,fill:none
  linkStyle 1 stroke:#000000,fill:none
  linkStyle 2 stroke:#000000,fill:none
  linkStyle 3 stroke:#000000
</pre>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-traditional-approach-diagram-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: A simple client-server scenario for the traditional approach, where C is Client (Alice) and S is Server (Bob)
</figcaption>
</figure>
</div>
</div>
</div>
<ul>
<li>HE approach: Alice sends an encrypted version of <img src="https://latex.codecogs.com/png.latex?m"> to Bob, and Bob does the calculations on the encrypted data.</li>
</ul>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div id="fig-simple-he-diagram" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-simple-he-diagram-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div>
<pre class="mermaid mermaid-js" data-label="fig-simple-he-diagram">%%{init: {"theme": "neo", "look": "handDrawn"}}%%
flowchart TD
  subgraph Client["Client"]
    C1[["Step 1: Encrypt private data $$\ Enc(m)$$"]]
    C2[/"Step 2: Send $$\ Enc(m)\ $$ to Server"/]
    C3[/"Step 3: Send query $$\ f()\ $$ to Server"/]
    C4[["Step 6: Compute $$\ Dec(Enc(f(m)))=f(m)\ $$"]]
  end
  subgraph Server["Server"]
    S1[["Step 4: Perform $$\ Eval(f, Enc(m))=Enc(f(m))\ $$"]]
    S2[\"Step 5: Return $$\ Enc(f(m))\ $$ to Client"\]
  end
  C1 --&gt; C2
  C2 --&gt; C3
  C3 --&gt; S1
  S1 --&gt; S2
  S2 --&gt; C4

  style C1 stroke:#000000
  style C2 stroke:#000000
  style C3 stroke:#000000
  style C4 stroke:#000000
  style S1 stroke:#000000
  style S2 stroke:#000000
  style Client stroke:#00C853,fill:#00C853,color:#000000
  style Server stroke:#FFD600,fill:#FFD600,color:#000000
  linkStyle 0 stroke:#000000,fill:none
  linkStyle 1 stroke:#000000,fill:none
  linkStyle 2 stroke:#000000,fill:none
  linkStyle 3 stroke:#000000,fill:none
  linkStyle 4 stroke:#000000
</pre>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-simple-he-diagram-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: A simple client-server HE scenario, where C is Client (Alice) and S is Server (Bob)
</figcaption>
</figure>
</div>
</div>
</div>
<p>In traditional encryption, encrypted data can’t be processed in any useful way. HE is different, because it keeps the relationships between numbers, even when they’re encrypted. Here’s a simple example:</p>
<ul>
<li><p>Let’s say you have two numbers, <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b">.</p></li>
<li><p>You encrypt them to get <img src="https://latex.codecogs.com/png.latex?Enc(a)"> and <img src="https://latex.codecogs.com/png.latex?Enc(b)">.</p></li>
<li><p>With HE, you can add <img src="https://latex.codecogs.com/png.latex?Enc(a)"> and <img src="https://latex.codecogs.com/png.latex?Enc(b)"> and get an encrypted result that, when decrypted, gives you <img src="https://latex.codecogs.com/png.latex?a%20+%20b">.</p></li>
</ul>
<p>This means you can perform calculations on encrypted data without having to decrypt it first. The ability to compute on encrypted data without decryption is what makes HE so revolutionary. In essence, it allows data to stay secure throughout its entire lifecycle, from collection to storage to processing.</p>
<p>HE works by using complex mathematical operations that preserve the structure of the data even when it’s encrypted. The mathematics behind this is quite advanced, involving abstract algebra and number theory. These mathematical techniques ensure that operations such as addition and multiplication can be performed on the encrypted data in a way that yields correct results when decrypted.</p>
</section>
<section id="semantic-security-and-controlled-malleability" class="level3">
<h3 class="anchored" data-anchor-id="semantic-security-and-controlled-malleability">Semantic security and controlled malleability</h3>
<p>HE is possible thanks to two key cryptographic concepts: <strong>semantic security</strong> and <strong>controlled malleability</strong>. While these might sound technical, they’re not too hard to understand when broken down.</p>
<p>First, let’s talk about semantic security. This property ensures that encrypted data reveals absolutely nothing about the original data. For example, even if you encrypt the same message twice, the results will look completely different every time, like writing a note and hiding it in different locked boxes that look unique each time. This randomness makes it impossible for someone to guess the original message just by looking at the encrypted result. Semantic security is a cornerstone of most modern encryption schemes, such as AES for secure data storage and RSA for transmitting confidential messages over the internet. In these systems, semantic security ensures that an attacker cannot deduce the plaintext, even if they intercept encrypted messages.</p>
<p>Now, let’s look at controlled malleability. Normally, encryption schemes are designed to prevent any modification of encrypted data. For example, in secure messaging or financial transactions, tampering with ciphertexts could lead to corruption or malicious alterations. This is why many encryption schemes aim to be non-malleable, ensuring ciphertexts cannot be manipulated in any meaningful way. However, some cryptographic protocols intentionally use a controlled form of malleability. For instance:</p>
<ul>
<li><p>RSA encryption supports a basic level of malleability, enabling certain transformations (e.g., multiplying ciphertexts) that correspond to transformations on the plaintext. This is leveraged in digital signatures and secure voting systems.</p></li>
<li><p>Secure Multi-Party Computation (SMC) uses malleable properties to allow multiple parties to jointly compute a function over their inputs without revealing them to each other.</p></li>
</ul>
<p>HE takes controlled malleability a step further by enabling a rich set of mathematical operations, such as additions and multiplications, to be performed directly on encrypted data. This means that encrypted data can be actively processed, opening up new possibilities for secure computation without exposing sensitive information.</p>
<p>By combining semantic security with controlled malleability, HE represents a powerful new paradigm in cryptography. While semantic security ensures that the original data remains completely hidden, controlled malleability allows computations on that hidden data in a secure and predictable way. Together, these concepts extend the boundaries of what encryption can achieve, enabling privacy-preserving technologies that go far beyond the limitations of traditional cryptographic schemes.</p>
</section>
<section id="types-of-he" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="types-of-he">Types of HE</h3>
<p>HE encompasses various schemes, each with distinct capabilities, applications, and a shared mathematical heritage that connects their evolution. These different types of HE have progressively built on one another, with each advancement adding new capabilities while maintaining foundational principles rooted in number theory and algebra.</p>
<ol type="1">
<li><p><strong>Partially Homomorphic Encryption (PHE):</strong></p>
<ul>
<li><p>PHE supports a single type of operation, either addition or multiplication, on encrypted data, which offers high efficiency due to its limited operational scope.</p></li>
<li><p>Applications: Ideal for scenarios requiring only one type of computation. For instance, PHE is utilized in secure voting systems, where votes are encrypted and then aggregated (added) without decryption, ensuring voter privacy and data integrity.</p></li>
<li><p>Historical context: The concept of PHE dates back to 1978 with the introduction of the RSA algorithm, which supports multiplicative homomorphism. Subsequent schemes, such as the Paillier cryptosystem introduced in 1999, provided additive homomorphism, allowing for the addition of encrypted values. These early approaches laid the mathematical foundation for later, more complex forms of HE. The development of RSA was also a part of broader cryptographic breakthroughs in public-key cryptography, which fundamentally changed secure communication by allowing encryption without pre-shared keys.</p></li>
<li><p>Some notable examples:</p>
<ul>
<li>RSA: Supports multiplication as the homomorphic operation.</li>
<li>Paillier: Addition.</li>
<li>ElGamal: Multiplication.</li>
<li>Goldwasser-Micali: XOR.</li>
<li>Okamoto-Uchiyama: Addition.</li>
</ul></li>
</ul></li>
<li><p><strong>Somewhat Homomorphic Encryption (SWHE):</strong></p>
<ul>
<li><p>SWHE enables both addition and multiplication operations but only up to a certain depth or number of operations. It balances between operational flexibility and computational efficiency, making it suitable for applications with limited computational requirements.</p></li>
<li><p>Applications: SWHE is applied in secure data aggregation, where a limited number of operations are performed on encrypted data to compute aggregate statistics without exposing individual data points.</p></li>
<li><p>Historical context: SWHE schemes emerged as researchers sought to extend the capabilities of PHE. By building on the foundational mathematics of PHE, these schemes introduced the ability to perform both additive and multiplicative operations, though with certain limitations. This progression marked an important step towards achieving fully HE. The development of SWHE was influenced by lattice-based cryptography, which also played a crucial role in providing security against quantum computing attacks, linking SWHE to advances in post-quantum cryptography.</p></li>
</ul></li>
<li><p><strong>Fully Homomorphic Encryption (FHE):</strong></p>
<ul>
<li><p>FHE allows an unlimited number of both addition and multiplication operations on encrypted data. While computationally intensive, FHE provides the most comprehensive functionality, enabling complex computations on encrypted datasets.</p></li>
<li><p>Applications: FHE is particularly valuable in privacy-preserving data processing, such as performing machine learning algorithms on encrypted medical records, allowing for data analysis without compromising patient confidentiality.</p></li>
<li><p>Historical context: The concept of FHE was first realized by Craig Gentry in 2009<sup>3</sup>, marking a significant advancement in cryptography. Gentry’s construction built upon the principles and challenges addressed by PHE and SWHE, demonstrating that it was possible to perform arbitrary computations on encrypted data without decryption. This breakthrough opened new avenues for secure data processing, rooted in the same mathematical lineage that began with PHE. Gentry’s work was heavily influenced by the concept of ideal lattices and the use of bootstrapping, which allowed for refreshing encrypted data, a concept that is closely related to error correction techniques used in coding theory. FHE also contributed to advancements in multi-party computation and secure function evaluation, highlighting its relationship with other cryptographic fields focused on secure collaborative computing.</p></li>
</ul></li>
</ol>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;Gentry, C. (2009). <strong>Fully homomorphic encryption using ideal lattices</strong>. <em>Proceedings of the 41st Annual ACM Symposium on Theory of Computing</em>, 169–178. <a href="https://doi.org/10.1145/1536414.1536440">DOI</a></p></div></div></section>
<section id="how-he-enhances-private-computing" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="how-he-enhances-private-computing">How HE enhances private computing</h3>
<p>HE can be combined with other privacy techniques to keep data secure while still being able to use it. These techniques are independent but can work well together with HE to achieve privacy goals:</p>
<ul>
<li><p><strong>Differential Privacy (DP)</strong>: DP<sup>4</sup> is a method that ensures individual data points in a dataset can’t be identified, even if the results are analyzed multiple times. By adding noise to the output, DP protects people’s privacy while still allowing useful insights to be gained from the data. HE can be combined with DP to keep data encrypted during analysis, while DP adds another layer of privacy. For example, a healthcare company could use HE to compute encrypted patient data and add DP to ensure that the output does not compromise individual identities.</p></li>
<li><p><strong>Secure Multi-Party Computation (SMC)</strong>: SMC<sup>5</sup> allows several parties to jointly compute a result from their inputs without revealing those inputs to each other. HE is often used in SMC to make sure the data stays encrypted throughout the computation. This way, everyone can contribute without giving up their private data. For example, multiple banks could jointly analyze data to detect fraud patterns without sharing individual customer information.</p></li>
<li><p><strong>Zero-Knowledge Proofs (ZKPs)</strong>: ZKPs<sup>6</sup> are a way to prove that a statement is true without revealing any other information beyond the fact that the statement is true. ZKPs can be combined with HE to verify computations on encrypted data without revealing any sensitive information. This is particularly useful in scenarios like blockchain, where privacy and verification are both important. For instance, ZKPs could allow someone to prove they have enough funds for a transaction without revealing their exact account balance.</p></li>
</ul>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;Dwork, C., &amp; Roth, A. (2014). <strong>The algorithmic foundations of differential privacy</strong>. <em>Foundations and Trends in Theoretical Computer Science</em>, 9(3–4), 211–407. <a href="https://doi.org/10.1561/0400000042">DOI</a></p></div><div id="fn5"><p><sup>5</sup>&nbsp;Yao, A. C. (1982). <strong>Protocols for secure computations</strong>. <em>23rd annual symposium on foundations of computer science (SFCS 1982)</em> (pp.&nbsp;160-164). IEEE. <a href="https://doi.org/10.1109/SFCS.1982.38">DOI</a></p></div><div id="fn6"><p><sup>6</sup>&nbsp;Goldwasser, S., Micali, S., &amp; Rackoff, C. (1989). <strong>The knowledge complexity of interactive proof systems</strong>. <em>SIAM Journal on computing</em>, 18(1), 186-208. <a href="https://doi.org/10.1137/0218012">DOI</a></p></div></div></section>
<section id="applications-of-he" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="applications-of-he">Applications of HE</h3>
<section id="public-cloud-services" class="level4">
<h4 class="anchored" data-anchor-id="public-cloud-services">Public cloud services</h4>
<p>Imagine a giant digital library that many people share—this is essentially what a public cloud service is. Services like Google Drive, Dropbox, Microsoft Azure, or any Software as a Service (SaaS) application, such as email platforms, social networks, or collaboration tools, are examples where many users store and process their data in the same place. It’s like having your personal locker in a public gym—while you have your private space, you’re still using a shared facility. The more “layers” or services your data interacts with, the greater the privacy risks become, as each layer can potentially expose your data to further vulnerabilities.</p>
<p>The challenge with public clouds is keeping your information private while still being able to use all the helpful features they offer. Think about it like this: you want to ask someone to count your money, but you don’t want them to see how much you have. That’s where HE comes in: it lets the cloud service work with your data without actually seeing what’s in it.</p>
<p>Public cloud services are used for various purposes, including data storage, file sharing, and running applications remotely. The privacy challenge in public cloud services is significant, as many users want the benefits of powerful processing without sacrificing the confidentiality of their data. HE offers a groundbreaking solution, allowing computations to be performed while the data remains encrypted. This means users can get useful insights and results from their data without exposing it to the cloud provider or any unauthorized third party.</p>
<p>HE enables users to make the most of public cloud services without giving up their privacy. For example, organizations can store and process customer information, health records, and financial data without ever exposing sensitive information. This capability makes public cloud services more secure and suitable for a wide range of applications involving confidential data. Additionally, HE can help governments, businesses, and individuals alike to harness the full potential of cloud-based services without the fear of privacy breaches.</p>
<p>Moreover, HE provides a way for SaaS applications like email platforms and social networks to perform useful functions on user data while maintaining privacy. For instance, an email service could filter spam emails or provide automated categorization features without actually accessing the content of your emails. Similarly, a social network could analyze user preferences to deliver targeted content or enhance user experience, all while keeping personal data fully encrypted.</p>
<p>When using SaaS applications, data often passes through multiple “layers” of services, each adding to the potential privacy risks. These layers could involve data storage, processing, and analysis, all of which need to be handled with the utmost care. HE mitigates these risks by ensuring that data is encrypted throughout its entire journey—from storage to computation. This makes public cloud services and SaaS platforms much safer environments for processing sensitive information, as the data remains encrypted at every stage.</p>
<p>Real-world examples:</p>
<ul>
<li><p>Navigation apps: Helps you find your way without revealing where you are. Imagine telling someone, “I’m somewhere in New York” and getting directions without revealing your exact street corner. The privacy benefit is that your location stays secret while still getting accurate directions. HE allows navigation services to process your location data while keeping the exact coordinates hidden, ensuring your privacy while still providing efficient route guidance. This is especially important for users who are concerned about sharing their real-time location with third parties.</p></li>
<li><p>Health monitoring Devices: Your smartwatch or fitness tracker can process your health data securely. It’s like having a doctor analyze your health charts while they’re in a sealed envelope. You get health insights while keeping your personal metrics private. Imagine that a health service aggregates data from thousands of users’ fitness trackers to find patterns in sleep quality. HE allows this analysis while keeping every user’s specific sleep data private, so the service can improve recommendations without compromising privacy. This means that even if the cloud service processes millions of health records, individual users’ data remains secure and confidential.</p></li>
<li><p>Personal finance: Gets insights from your data without exposing the details. Similar to having someone tell you if your spending is normal for your age group without seeing your actual purchases. You learn from your data while keeping it confidential. A budgeting app could use HE to compare a user’s spending habits against aggregate data to provide personalized recommendations, all while keeping individual transactions encrypted and secure. For instance, the app could analyze spending trends, identify areas for improvement, and suggest budgeting strategies—all without ever accessing your raw financial data in a readable form.</p></li>
<li><p>Email filtering: Modern email services often use filters to identify spam, categorize messages, and even detect potential phishing attacks. With HE, these services can perform all of these operations without having to read the content of your emails. This ensures that your private messages remain confidential while still benefiting from advanced filtering and organizational features. Imagine an email provider categorizing your emails into folders such as Promotions, Social, and Primary—all without actually knowing what the emails say.</p></li>
<li><p>Social networks: Social media platforms often use algorithms to suggest content based on user behavior. With HE, these platforms can analyze user interactions, such as likes, comments, and shares, to provide tailored content recommendations, all while keeping user behavior encrypted. For example, if a social network wants to recommend friends or content, it can do so based on encrypted data, ensuring that your activity and preferences are kept private.</p></li>
<li><p>Collaboration tools: SaaS collaboration tools like document editors or project management software can use HE to provide enhanced features while keeping user data private. Imagine multiple users collaborating on a shared document, HE can ensure that the document remains encrypted while allowing authorized users to make edits and comments. This is crucial for businesses that need to ensure confidentiality while leveraging the benefits of cloud-based collaboration.</p></li>
</ul>
<p>HE represents a transformative approach to data privacy, particularly in the context of public cloud services and SaaS applications. However, as the usage of digital services continues to expand, the potential for data misuse also grows, posing significant risks to both individuals and companies. Data can be weaponized for malicious purposes, from targeted disinformation to financial exploitation, and traditional privacy measures, such as DP, may not be sufficient to fully protect sensitive information in these evolving digital landscapes. DP, while effective at masking individual contributions in datasets, often relies on the careful calibration of privacy budgets and noise, which can degrade utility or be insufficient against sophisticated attacks like reconstruction or linkage attacks, where adversaries can leverage external datasets to infer private information. HE, on the other hand, offers a promising solution by enabling computation on encrypted data without ever exposing it, providing a stronger safeguard against these emerging threats.</p>
</section>
<section id="private-cloud-computing" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="private-cloud-computing">Private cloud computing</h4>
<p>Private cloud computing provides organizations with greater control over their data and infrastructure compared to public cloud environments. This model is particularly suitable for handling sensitive information but requires a sophisticated, defense-in-depth approach to maintain data privacy and security throughout its lifecycle.</p>
<p>Private clouds are often employed by organizations that need to comply with stringent regulatory requirements, such as those related to healthcare, finance, or government operations. These regulations, including standards like HIPAA, GDPR, NIS2, and PCI DSS, mandate strict data protection protocols and require demonstrable security controls and audit trails.</p>
<p>Despite the advantages of private clouds, they remain susceptible to various threats across different layers of the technology stack. Infrastructure layer threats include software vulnerabilities in virtualization platforms, hypervisors, or orchestration tools, which can lead to risks such as privilege escalation or remote code execution (RCE). Hardware vulnerabilities, such as side-channel attacks exploiting cache timing, power analysis, or electromagnetic emanations, also pose significant risks. Physical security concerns, such as cold boot attacks and DMA attacks, along with supply chain vulnerabilities in hardware components or firmware, further complicate the security landscape.</p>
<p>Network layer threats include attacks such as ARP poisoning, VLAN hopping, and compromises of software-defined networking (SDN) controllers. Weaknesses in virtual network functions (VNFs) and east-west traffic attacks between workloads within the cloud are also notable vulnerabilities.</p>
<p>Application layer threats involve issues like API security vulnerabilities, container escape risks that allow attackers to move from containers to host systems, weaknesses in securing microservice interactions, and data leakage through application logic flaws.</p>
<p>Human and operational threats are also significant. Configuration drift and misconfigurations can lead to gradual deviation from secure states, while inadequate privilege management and insider threats (both malicious and unintentional) can compromise security. Operational security failures, such as lapses in maintaining secure practices, are also critical factors that must be addressed.</p>
<p>To mitigate these risks, organizations need a comprehensive, multi-layered security strategy that implements defense-in-depth through multiple complementary technologies. HE serves as one critical component within this broader security architecture, particularly for protecting data confidentiality during processing. Various cryptographic and security measures work together as follows:</p>
<ul>
<li><p>In the foundational security layer, hardware security modules (HSMs) are used for key management, providing secure storage and handling of cryptographic keys which are crucial for HE operations. Trusted platform modules (TPMs) ensure boot integrity, establishing a trusted baseline for secure operations, which is essential for protecting the integrity of encrypted data processed using HE. Secure boot and measured boot processes protect the system from boot-level attacks, creating a secure foundation for any HE-related operations. Physical security controls and monitoring provide physical safeguards for cloud hardware, preventing physical attacks that could compromise the hardware used to perform HE computations.</p></li>
<li><p>In the network security layer, microsegmentation with zero-trust principles limits lateral movement within the network, ensuring that even if an attacker gains access, they cannot reach the nodes performing HE computations. Virtual network encryption ensures data confidentiality across virtual networks, which complements HE by protecting data during transit, even before or after HE-based processing. Network access control with 802.1x enforces authentication for devices on the network, preventing unauthorized devices from accessing data that may be encrypted using HE. SDN security, involving the separation of control and data planes, helps mitigate vulnerabilities within SDN environments, providing a secure pathway for the data to be processed using HE without risking exposure.</p></li>
<li><p>For data in transit, Transport Layer Security (TLS) 1.3 with perfect forward secrecy protects data from interception, while IPsec provides network-level encryption, ensuring that data remains secure during transmission before and after HE operations. For data at rest, AES-256 encryption with secure key management protects stored data from unauthorized access, complementing HE by providing strong encryption when data is not actively being processed. Format-preserving encryption is used for structured data, allowing for HE-based operations to occur without altering the structure of sensitive datasets, which is particularly useful for preserving data integrity while performing encrypted computations.</p></li>
<li><p>For data in use, HE is combined with Trusted Execution Environments (TEEs)<sup>7</sup> for enhanced data protection during processing. TEEs provide a secure, isolated hardware environment for executing sensitive operations, protecting against unauthorized access by ensuring that data and computations are shielded from other processes on the system. HE further enhances this by keeping the data encrypted even within the TEE, ensuring that even if the secure environment is compromised, the data remains confidential.</p></li>
<li><p>SMC is also employed for collaborative computations without revealing individual inputs. Advanced integrations include using HE with Intel SGX for secure computation spaces, hybrid HE-MPC protocols for efficient distributed computing, and memory encryption with AMD SEV or Intel TDX for enhanced data protection.</p></li>
<li><p>HE can also be integrated with Attribute-Based Encryption (ABE)<sup>8</sup> to allow fine-grained access control, ensuring that data access is granted only to users with specific attributes or roles. Identity-Based Encryption (IBE)<sup>9</sup> simplifies key management by allowing public keys to be derived from unique user identifiers, reducing the complexity of certificate distribution (Boneh, D., &amp; Franklin, M., 2001). ZKPs provide anonymous authentication, allowing users to prove their identity or access rights without revealing any underlying sensitive information. By combining these techniques, HE ensures that data remains encrypted throughout its lifecycle while still allowing flexible and secure access management, simplified key handling, and privacy-preserving authentication.</p></li>
</ul>
<div class="no-row-height column-margin column-container"><div id="fn7"><p><sup>7</sup>&nbsp;McKeen, F., Alexandrovich, I., Berenzon, A., Rozas, C., Shafi, H., Shanbhogue, V., &amp; Savagaonkar, U. R. (2013). <strong>Innovative instructions and software model for isolated execution</strong>. <em>Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy (HASP)</em>. https://doi.org/10.1145/2487726.2488368</p></div><div id="fn8"><p><sup>8</sup>&nbsp;Goyal, V., Pandey, O., Sahai, A., &amp; Waters, B. (2006). <strong>Attribute-based encryption for fine-grained access control of encrypted data</strong>. <em>Proceedings of the 13th ACM Conference on Computer and Communications Security (CCS)</em>, 89-98. <a href="https://doi.org/10.1145/1180405.1180418">DOI</a></p></div><div id="fn9"><p><sup>9</sup>&nbsp;Boneh, D., &amp; Franklin, M. (2001). <strong>Identity-based encryption from the Weil pairing</strong>. <em>SIAM Journal on Computing</em>, 32(3), 586-615. <a href="https://doi.org/10.1137/S0097539701398521">DOI</a></p></div></div><p>This layered approach ensures that HE is not deployed in isolation but rather as part of a comprehensive security architecture where each component strengthens the overall security posture. The combination of these technologies provides defense-in-depth while addressing specific threats at each layer of the infrastructure.</p>
<p>Real-world examples:</p>
<ul>
<li><p>Medical research: HE, when combined with AES-256 encryption and TEEs, allows hospitals to study patient data while maintaining privacy. Within the private cloud, patient data is securely stored using AES-256 encryption and processed within TEEs, while HE allows computations on encrypted data without decryption. For example, doctors can analyze medical images with patient details encrypted and isolated, enabling researchers to identify important patterns without seeing individual patient information. When data needs to be shared across institutions, SMC is used to ensure data privacy, thereby identifying effective treatments and new drug opportunities while ensuring patient privacy.</p></li>
<li><p>Financial services: In the private cloud, financial institutions store customer data encrypted using AES-256 and conduct computations using HE combined with TEEs. TLS ensures data confidentiality when it moves in and out of the private cloud. HE, in combination with TLS for data in transit and TEEs for processing, helps financial institutions process banking information while keeping account details secret. Banks can use HE to assess loan applications by running risk analyses on encrypted financial data within TEEs, enabling automated decision-making without exposing customers’ financial histories. This combination ensures data remains confidential throughout its lifecycle, from transmission to analysis.</p></li>
<li><p>Defense sector: Within a private cloud environment, sensitive defense-related data is encrypted with AES-256 and processed securely using HE and TEEs. For example, a remote-controlled drone can perform target calculations using HE while ensuring that even if intercepted, the encrypted data and computations remain confidential, safeguarding operational integrity. Logistics data can also be analyzed collaboratively among trusted partners using SMPC without revealing the underlying sensitive information, ensuring data privacy and safeguarding national security interests. TLS and IPsec are used to protect data that enters or exits the private cloud, ensuring that no sensitive information is exposed during transmission.</p></li>
</ul>
</section>
<section id="blockchain-technology" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="blockchain-technology">Blockchain technology</h4>
<p>Blockchain technology can be thought of as a digital ledger that everyone can see—like a giant spreadsheet that tracks transactions. The challenge is: how do you keep certain details private on this public ledger? It’s similar to wanting to tell people you bought something without revealing how much you paid for it.</p>
<p>Blockchain technology is known for its transparency and security, which are useful for verifying transactions. However, this transparency also creates a privacy challenge. To address this, HE, ZKPs, and SMC are employed to protect sensitive information while maintaining the integrity and verifiability of blockchain data.</p>
<section id="he-zkps-and-smc" class="level5">
<h5 class="anchored" data-anchor-id="he-zkps-and-smc">HE, ZKPs, and SMC</h5>
<p>HE ensures that sensitive information remains protected throughout the process. In blockchain systems, this is crucial for maintaining privacy without compromising the ability to verify data integrity. For example, HE can be used to perform operations on encrypted transaction details, such as calculating total transaction amounts or processing smart contract conditions, enabling stakeholders to verify outcomes without seeing the underlying sensitive data. In privacy-focused Layer 2 solutions on Ethereum, HE can be applied to compute transaction fees or aggregate user balances in encrypted form, maintaining both privacy and scalability. Similarly, in blockchain-based supply chain systems, HE enables participants to encrypt transaction details before adding them to the blockchain, ensuring that sensitive information (like pricing or quantities) remains hidden while the overall process can still be verified by stakeholders. This privacy-preserving transparency is crucial in competitive environments, allowing stakeholders to verify product provenance without exposing confidential business information.</p>
<p>ZKPs are leveraged in blockchain to enhance privacy by allowing parties to prove that certain statements are true without revealing specific information. In supply chain scenarios, ZKPs can prove that specific procedures were followed or quality standards were met without disclosing proprietary details. This ensures compliance while maintaining confidentiality. In digital identity verification, ZKPs allow individuals to prove attributes of their identity (such as being of legal age) without exposing their full identity or birthdate, ensuring privacy and compliance.</p>
<p>SMC is leveraged to enable collaborative decision-making or data aggregation on the blockchain without exposing individual inputs. This is particularly useful in decentralized finance (DeFi) platforms or voting mechanisms within decentralized governance systems. For instance, in Decentralized Autonomous Organizations (DAOs), SMC allows members to collectively compute outcomes (such as voting results) while keeping individual votes private, ensuring both transparency and privacy in the decision-making process.</p>
<p>Both HE and ZKPs aim to preserve privacy while proving computation correctness. They are often used together to enhance privacy in blockchain systems. For instance, HE can encrypt inputs while ZKPs prove the correctness of computations on these encrypted inputs. zk-SNARKs (Zero-Knowledge Succinct Non-Interactive Arguments of Knowledge) can also be used to prove the correct execution of homomorphic operations, providing efficient and verifiable computations. Hybrid protocols that combine HE and ZKPs create efficient, private smart contracts where the correctness of encrypted computations is guaranteed without revealing sensitive information.</p>
<p>SMC and HE are complementary technologies for performing private computations on blockchain. HE can be integrated within SMC protocols to reduce the number of communication rounds required, leading to more efficient computations. Hybrid protocols that combine FHE and SMC provide improved performance and security in blockchain applications. For example, SMC and HE are used together in threshold cryptography implementations to enable secure collaborative decision-making and private data aggregation, while ensuring sensitive information remains confidential.</p>
</section>
<section id="other-cryptographic-techniques" class="level5 page-columns page-full">
<h5 class="anchored" data-anchor-id="other-cryptographic-techniques">Other cryptographic techniques</h5>
<p>The following cryptographic techniques share a common foundation in supporting privacy-preserving, hidden but verifiable computations on blockchain. These methods are often combined to enhance privacy, security, and efficiency in blockchain systems:</p>
<ul>
<li><p><strong>Commitment schemes and HE</strong>: A commitment scheme<sup>10</sup> is a cryptographic protocol that allows one party to commit to a chosen value while keeping it hidden from others, with the ability to reveal the value later. It ensures both secrecy and the ability to verify the commitment, which is essential for many blockchain applications. Commitment schemes and HE support hidden but verifiable computations on blockchain. Homomorphic commitments allow computations to be performed on committed values without revealing them, which can be combined with HE for verifiable encrypted computations. This combination is particularly useful in confidential transaction protocols, where participants need to commit to transaction values while still allowing certain operations to be verified.</p></li>
<li><p><strong>Threshold cryptography and HE</strong>: Threshold cryptography<sup>11</sup> is a cryptographic approach in which a secret is divided into multiple parts, and a predefined number (or threshold) of those parts is required to reconstruct the secret. This approach ensures security by distributing control among several parties, reducing the risk of a single point of failure. In blockchain, threshold cryptography can be used for distributed key generation, ensuring that no single entity has full access to sensitive information, thereby enhancing security and resilience in systems like multi-signature wallets or decentralized voting. HE shares common mathematical foundations with threshold cryptography. Threshold Fully Homomorphic Encryption (TFHE)<sup>12</sup> schemes allow distributed key generation and secure computations among multiple parties without revealing individual contributions. Multi-key HE is another application, enabling secure distributed computations while ensuring privacy. These techniques can also be used for shared decryption of homomorphically processed data, ensuring that no single participant can access the data in its entirety.</p></li>
<li><p><strong>Ring signatures and HE</strong>: A ring signature<sup>13</sup> is a type of digital signature that allows a member of a group to sign a message on behalf of the group, without revealing which specific member signed it. This provides anonymity for the signer while still proving that they are part of the group. HE and ring signatures are used together to support privacy-preserving operations on blockchain. For example, they can be combined to develop privacy-preserving voting schemes where votes are encrypted using HE, while ring signatures provide anonymity. They can also be used in anonymous credential systems where user attributes are encrypted, supporting confidential transactions without revealing individual identities.</p></li>
</ul>
<div class="no-row-height column-margin column-container"><div id="fn10"><p><sup>10</sup>&nbsp;Brassard, G., Chaum, D., &amp; Crépeau, C. (1988). <strong>Minimum disclosure proofs of knowledge</strong>. <em>Journal of Computer and System Sciences</em>, 37(2), 156-189. <a href="https://doi.org/10.1016/0022-0000(88)90005-0">DOI</a></p></div><div id="fn11"><p><sup>11</sup>&nbsp;Desmedt, Y. (1994). <strong>Threshold cryptography</strong>. <em>European Transactions on Telecommunications</em>, 5(4), 449-457. <a href="https://doi.org/10.1002/ett.4460050407">DOI</a></p></div><div id="fn12"><p><sup>12</sup>&nbsp;Asharov, G., Jain, A., López-Alt, A., Tromer, E., Vaikuntanathan, V., &amp; Wichs, D. (2012). <strong>Multiparty computation with low communication, computation and interaction via threshold FHE</strong>. <em>Advances in Cryptology–EUROCRYPT 2012</em> (pp.&nbsp;483-501). Springer, Berlin, Heidelberg. <a href="https://doi.org/10.1007/978-3-642-29011-4_29">DOI</a></p></div><div id="fn13"><p><sup>13</sup>&nbsp;Rivest, R. L., Shamir, A., &amp; Tauman, Y. (2001). <strong>How to leak a secret</strong>. <em>International Conference on the Theory and Application of Cryptology and Information Security</em> (pp.&nbsp;552-565). Springer, Berlin, Heidelberg. <a href="https://doi.org/10.1007/3-540-45682-1_32">DOI</a></p></div></div></section>
<section id="real-world-applications" class="level5">
<h5 class="anchored" data-anchor-id="real-world-applications">Real-world applications</h5>
<p>The integration of advanced cryptographic techniques into blockchain technology enables various real-world applications that enhance privacy, security, and transparency. Below are examples of how these techniques are used in practice:</p>
<ul>
<li><p>Supply chain management (Ethereum-based systems): In blockchain-based supply chain systems, HE can keep transaction details private while allowing stakeholders to verify the authenticity and origin of goods. For example, in a global supply chain where manufacturers, suppliers, and logistics providers contribute information about a product’s journey, HE ensures that while the overall process can be verified, no sensitive information (like supplier pricing or quantities) is exposed to unauthorized parties. ZKPs further enhance privacy by allowing parties to prove they followed specific procedures or met quality standards without disclosing proprietary details. These technologies ensure compliance and transparency while maintaining competitive confidentiality.</p></li>
<li><p>Digital identity verification (Algorand blockchain): HE is used to allow individuals to prove aspects of their identity without revealing unnecessary information. For instance, a person can prove they are of legal drinking age without revealing their birthdate using a blockchain-based identity verification system. ZKPs are also used in this scenario to validate identity attributes securely, ensuring privacy while maintaining compliance with regulations.</p></li>
<li><p>Decentralized marketplace transactions (Ethereum Layer 2 solutions): Buyers and sellers in a decentralized marketplace can use HE to conduct transactions privately, keeping details like transaction amounts or account balances confidential. For example, a user buying digital art can make payments using HE, ensuring that neither the marketplace nor any third parties can access their financial details.</p></li>
<li><p>Real estate transactions via Smart Contracts (Hyperledger Fabric): In a real estate transaction conducted through a smart contract, HE can be used to keep payment amounts and identities confidential while executing securely on the blockchain. This ensures compliance with local regulations while maintaining privacy for both buyers and sellers.</p></li>
<li><p>Luxury goods supply chain (VeChain): A luxury goods manufacturer may use blockchain to track the journey of products from factory to retailer. HE would keep sensitive details like supplier pricing confidential while providing proof of authenticity to consumers. For example, a watch manufacturer might leverage HE to ensure that authenticity data is available to buyers while keeping internal processes private.</p></li>
<li><p>Age verification for digital services (Cardano blockchain): Using HE, a user can prove they are above the legal age to access age-restricted products without revealing their full identity. A blockchain-based gaming platform could use HE to verify users’ ages while protecting personal data from exposure.</p></li>
<li><p>National election voting system (Tezos blockchain): In a national election using blockchain, HE keeps voter identities and preferences confidential while allowing an accurate vote count. Voters can cast their ballots online through a secure blockchain-based voting system, ensuring that individual privacy is maintained while the results remain transparent and trustworthy.</p></li>
<li><p>DAO voting (Ethereum-based DAOs): In DAOs where members vote on proposals, HE allows each vote to remain encrypted while ensuring accuracy in vote counting. This is particularly useful for DAOs managing decentralized funds, where members vote on fund allocation without revealing individual preferences.</p></li>
</ul>
</section>
</section>
<section id="secure-data-operations" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="secure-data-operations">Secure data operations</h4>
<p>Secure data operations involve multiple organizations working together with their data while keeping individual information private. In Federated Learning<sup>14</sup> (FL) scenarios, where multiple entities (e.g., hospitals, financial institutions) collaborate on training a machine learning model without sharing raw data, HE and DP play crucial roles in preserving privacy throughout the process. Each participant retains control of their data and only shares encrypted model updates or contributions, which are combined to produce a global model.</p>
<div class="no-row-height column-margin column-container"><div id="fn14"><p><sup>14</sup>&nbsp;FL, introduced by McMahan et al.&nbsp;(2017), represents a paradigm shift in machine learning by enabling model training on decentralized data. This approach was developed to address the growing privacy concerns and regulatory requirements around data protection while maintaining the benefits of large-scale machine learning. The key innovation of FL lies in its “bring the code to the data” rather than “bring the data to the code” approach. In the FL framework, instead of collecting raw data from users’ devices, the model itself travels to where the data resides. Local models are trained on individual devices, and only model updates are shared with the central server, never the raw data. The paper defined the federated averaging (FedAvg) algorithm, which remains the foundation for many modern FL systems. The authors demonstrated that their approach could train deep neural networks using unbalanced and non-IID (Independent and Identically Distributed) data distributed across millions of mobile devices. See: McMahan, H. B., Moore, E., Ramage, D., Hampson, S., &amp; y Arcas, B. A. (2017). <strong>Communication-efficient learning of deep networks from decentralized data</strong>. <em>Proceedings of the 20th International Conference on Artificial Intelligence and Statistics (AISTATS)</em>. <a href="https://proceedings.mlr.press/v54/mcmahan17a.html">Download</a></p></div></div><p>DP works in tandem with HE to ensure privacy by adding random noise to the final results. This makes it difficult to determine if an individual’s data is part of the dataset or not. Imagine you are trying to guess the favorite fruit of a group of people, but you cannot be certain about any single person’s choice because a bit of randomness is added to their answers. This randomness helps protect individual privacy while still allowing you to make general conclusions about the group.</p>
<ul>
<li><p>Adding noise: DP adds noise to the final results of computations so that individual contributions are hidden. This noise is carefully controlled to strike a balance between privacy and accuracy.</p></li>
<li><p>Privacy budget: The privacy budget, represented by <img src="https://latex.codecogs.com/png.latex?%5Cepsilon">, controls how much noise is added. A smaller <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> means more noise and greater privacy, but less accurate results. Conversely, a larger <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> means less noise, resulting in more accuracy but reduced privacy.</p></li>
<li><p>Mathematical definition: DP ensures that the results of computations are nearly identical, regardless of whether an individual is included in the dataset. This is achieved through the privacy budget <img src="https://latex.codecogs.com/png.latex?%5Cepsilon">, which limits the amount of information that can be inferred about any single data point. The smaller the value of <img src="https://latex.codecogs.com/png.latex?%5Cepsilon">, the stronger the privacy protection, as it reduces the likelihood that an individual’s data can be distinguished in the output.</p></li>
</ul>
<p>The integration of HE and DP technologies creates a multi-layered privacy framework that enhances privacy at different stages of the data lifecycle:</p>
<ol type="1">
<li><p>Initial data protection: Each participating organization encrypts its data using HE, ensuring the raw data remains secure even during computations. For instance, in FL, each hospital encrypts patient data so that it never leaves the hospital in a readable form.</p></li>
<li><p>Secure computation: Using HE, model updates are computed directly on encrypted data. For example, in training a machine learning model, HE allows hospitals to calculate model updates without decrypting patient data. All computations are performed while the data is encrypted, ensuring no sensitive information is exposed.</p></li>
<li><p>Privacy-preserving output: After computations, DP adds controlled noise to the model updates to prevent inference attacks. The privacy budget <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> is tracked across training iterations to ensure cumulative privacy loss remains acceptable, meaning that the privacy of individual data points is still maintained.</p></li>
</ol>
<section id="privacy-budget-management" class="level5">
<h5 class="anchored" data-anchor-id="privacy-budget-management">Privacy budget management</h5>
<p>The privacy budget management becomes more sophisticated when combining HE and DP. Advanced composition theorems help manage privacy loss in repeated operations:</p>
<ul>
<li><p>Basic composition: Every time a query is made on the data, some privacy is lost. Basic composition means that the total privacy loss simply adds up for each query.</p></li>
<li><p>Advanced composition: Privacy loss grows more slowly (with the square root of the number of queries), which helps limit the total loss.</p></li>
<li><p>Moments accountant: This technique provides even tighter privacy control, especially for scenarios like machine learning, where many computations need to be performed. It allows the privacy budget to be managed more efficiently.</p></li>
</ul>
<p>In practice, organizations can achieve strong privacy guarantees while still getting useful results. For example, with , there is strong privacy protection with only a small chance of leaking information, and the resulting analysis typically has an error of 1-10%, which is acceptable for most real-world uses.</p>
</section>
<section id="advanced-protocols" class="level5">
<h5 class="anchored" data-anchor-id="advanced-protocols">Advanced protocols</h5>
<p>The combination of HE and DP also enables advanced protocols, such as:</p>
<ul>
<li><p>Private Set Intersection with DP guarantees: Imagine two organizations wanting to compare customer lists without revealing all their data to each other. Private Set Intersection allows them to find common customers while using DP to ensure no extra information is leaked.</p></li>
<li><p>Secure aggregation: Multiple parties can contribute encrypted data, and the aggregate result can be computed without revealing the individual contributions. DP ensures that even if the aggregate result is shared, the privacy of individual contributors is preserved.</p></li>
<li><p>Privacy-preserving machine learning: This approach allows models to be trained using data from different organizations while ensuring data privacy. HE ensures data is never decrypted, while DP guarantees that the trained model does not reveal any individual’s data.</p></li>
</ul>
<p>When implementing these techniques, several practical considerations must be addressed:</p>
<ul>
<li><p>Performance optimization:</p>
<ul>
<li><p>Batching homomorphic operations: Performing many homomorphic operations together can make them more efficient, helping to manage the increased computational cost of using HE.</p></li>
<li><p>Optimizing noise addition: Adding noise carefully helps maintain data utility while preserving privacy.</p></li>
<li><p>Managing computational overhead: HE and DP both introduce computational complexity. Efficiently managing this overhead is critical to make these privacy-preserving techniques practical.</p></li>
</ul></li>
<li><p>Security parameters:</p>
<ul>
<li><p>Key size selection: Choosing the right key size for HE is important. Larger keys provide stronger security but also increase computational cost.</p></li>
<li><p>Noise parameter tuning: DP requires careful tuning of noise parameters to ensure privacy without losing too much accuracy.</p></li>
<li><p>Privacy budget allocation: Allocating the privacy budget effectively helps balance the level of privacy protection with the need for accurate results.</p></li>
</ul></li>
<li><p>Protocol design:</p>
<ul>
<li><p>Communication efficiency: In FL, communication efficiency is crucial since participants need to exchange encrypted model updates.</p></li>
<li><p>Error handling: Noise and ciphertext expansion can introduce errors, which need to be managed to ensure accurate results.</p></li>
<li><p>Protocol composition: Combining different privacy-preserving techniques requires careful protocol design to maintain privacy guarantees throughout complex workflows.</p></li>
</ul></li>
</ul>
<p>These technical foundations enable organizations to implement robust privacy-preserving data operations while maintaining precise control over privacy guarantees and computational efficiency. The framework provides mathematical certainty about privacy protection while enabling valuable data analysis and collaboration.</p>
</section>
<section id="real-world-applications-1" class="level5">
<h5 class="anchored" data-anchor-id="real-world-applications-1">Real-world applications</h5>
<ul>
<li><p>Joint medical research: Multiple hospitals can use HE and DP to collaborate on research involving sensitive patient data, such as detecting trends in rare diseases. Each hospital encrypts its patient records, and encrypted datasets are analyzed together to identify emerging health issues without compromising patient confidentiality. After computation, DP ensures that individual patient contributions are hidden by adding noise to the model updates, ensuring privacy. For example, HE can be used to detect early indicators of a rare genetic disorder by combining encrypted datasets from various hospitals, while DP prevents any single patient’s data from being identified in the final results.</p></li>
<li><p>Corporate surveys: HE can be used to perform privacy-preserving surveys across companies in a specific industry to compare salary ranges or employee satisfaction without sharing individual responses. Each company’s data is encrypted before submission, and the combined analysis reveals industry trends while keeping each company’s data private. DP is used to add noise to the aggregated survey results, ensuring that individual responses cannot be inferred, even if someone tries to analyze the outputs in detail.</p></li>
<li><p>Financial fraud detection consortium: Banks can collaborate to detect fraud patterns by sharing encrypted transaction records. HE allows the encrypted data to be analyzed collectively to identify unusual patterns across multiple institutions. DP is applied to the final aggregated fraud detection results to ensure that no single bank’s customer data can be inferred from the analysis. For instance, encrypted datasets can be used to spot potential fraud schemes involving cross-bank transactions without compromising any bank’s customer data.</p></li>
<li><p>Government resource auctions: Governments can use HE in auctions for spectrum licenses or natural resources. Participants submit their bids in an encrypted form, ensuring that their bidding strategy is kept secret. DP adds an additional layer of privacy by ensuring that even the aggregated bidding data cannot reveal individual bidding strategies. Only the winning bid is revealed at the end, preserving fairness and confidentiality throughout the auction process.</p></li>
<li><p>Collaborative pharmaceutical research: Pharmaceutical companies can collaborate to analyze clinical trial data securely. HE allows them to combine and analyze encrypted datasets from multiple trials, enhancing the ability to identify effective treatments faster. DP adds noise to the outputs, ensuring that the results cannot be traced back to any individual patient in the clinical trials. This helps companies work together on drug development without exposing sensitive patient data.</p></li>
<li><p>Cross-border health data analysis: During public health crises, different countries’ health agencies can use HE to securely share and analyze encrypted health data. For example, during a pandemic, agencies can combine encrypted data on infection rates, hospital capacity, and resources needed. DP ensures that the final combined results maintain privacy, so that individual contributions from specific regions cannot be identified, ensuring coordinated responses while maintaining privacy across borders.</p></li>
<li><p>Collaborative risk assessment for insurance: Insurance companies can share encrypted claims data to develop better risk models that help predict and price insurance products. HE allows insurers to perform calculations on encrypted claims data, and DP adds noise to the resulting models, preventing any individual customer’s claims data from being exposed. For instance, multiple insurers can securely collaborate to build risk prediction models for natural disasters while keeping individual customer claims data confidential.</p></li>
</ul>
</section>
</section>
<section id="private-information-retrieval" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="private-information-retrieval">Private Information Retrieval</h4>
<p>Private Information Retrieval (PIR) is a cryptographic technique that allows a client to retrieve data from a large database held by a server without revealing which specific piece of data is being requested. More formally, PIR ensures that the query sent by the client does not leak any information to the server about the data being retrieved, while still enabling the server to provide the correct response.</p>
<p>PIR is especially useful in situations where privacy is crucial, such as when accessing large public databases or confidential corporate data. It allows users to perform queries without revealing their interests or compromising their privacy. This ensures that sensitive information remains confidential, even when interacting with third-party databases, thereby enhancing both security and user trust.</p>
<p>HE has had a profound impact on the evolution of PIR, particularly by enabling more efficient and practical implementations of single-server PIR schemes. HE allows computation on encrypted data without revealing the underlying plaintext, which means a server can process queries directly on encrypted requests, ensuring that the data and the query both remain confidential. This approach significantly improves the efficiency and security of PIR, as it removes the need for multiple non-colluding servers and allows for privacy-preserving data retrieval with a single server setup.</p>
<p>The integration of HE into PIR protocols leverages its ability to perform arithmetic operations on encrypted data, enabling the server to respond to client queries without ever decrypting them. This not only enhances the privacy guarantees but also makes PIR more scalable and practical in real-world applications. By using HE, single-server PIR implementations can efficiently compute responses to encrypted queries, minimizing computational overhead while maintaining strong privacy protections. In practice, tools like Microsoft’s SEAL library incorporate HE, specifically Ring Learning With Errors (Ring-LWE), to implement these capabilities.</p>
<p>PIR implementations generally follow two main approaches. The first is the Chor-Goldreich-Kushilevitz (CGK)<sup>15</sup> scheme for information-theoretic PIR, which provides unconditional security by distributing the database across multiple non-colluding servers. The second approach uses HE and lattice-based methods for computational PIR, which rely on cryptographic assumptions and typically operate with a single server. These lattice-based approaches leverage mathematical structures called lattices to create secure encryption schemes that allow efficient query processing while maintaining privacy.</p>
<div class="no-row-height column-margin column-container"><div id="fn15"><p><sup>15</sup>&nbsp;The Chor-Goldreich-Kushilevitz (CGK) scheme is an information-theoretic approach to Private Information Retrieval (PIR). It was proposed by researchers Benny Chor, Oded Goldreich, Eyal Kushilevitz, and Madhu Sudan. The CGK scheme ensures that a client can retrieve data from a database without revealing any information about which data is being requested. This method achieves unconditional privacy, meaning the privacy guarantee does not depend on computational assumptions but rather on the architecture of the system. In the CGK scheme, the database is replicated across multiple non-colluding servers. The client sends specially crafted queries to each server, ensuring that no single server learns which data is being retrieved. As long as the servers do not collude with each other, the client’s privacy is preserved. The approach offers perfect privacy, but it requires the assumption that multiple servers are involved and that they do not share information about their interactions with the client. The CGK scheme is significant in scenarios where high privacy guarantees are required, but it comes with the practical limitation of needing multiple non-colluding servers, which may not always be feasible in real-world applications. See: Chor, B., Goldreich, O., Kushilevitz, E., &amp; Sudan, M. (1998). <strong>Private information retrieval</strong>. <em>Journal of the ACM (JACM)</em>, 45(6), 965-981. <a href="https://doi.org/10.1145/293347.293350">DOI</a>.</p></div></div><p>The use of HE has fundamentally transformed single-server PIR, making it a more viable and efficient solution for privacy-preserving data retrieval. This combination of theoretical approaches and practical implementations has made PIR increasingly applicable across a wide range of privacy-sensitive scenarios, including its use in Private Set Intersection (PSI). The significance of HE cannot be overstated, as it not only strengthens privacy guarantees in PIR but also paves the way for other advanced cryptographic constructions, ultimately broadening the scope and utility of secure data retrieval solutions.</p>
<p>One notable example of PIR in action is its integration with Private Set Intersection (PSI)<sup>16</sup>. PSI allows two or more parties to find common elements in their datasets without revealing any additional information beyond the intersection itself. For instance, two companies may wish to identify common customers without sharing their entire customer lists. By leveraging PIR, each party can retrieve information about the intersection privately, ensuring that no non-intersecting data is exposed. This approach is particularly valuable in scenarios where maintaining the confidentiality of the datasets is crucial, such as in healthcare collaborations or financial partnerships.</p>
<div class="no-row-height column-margin column-container"><div id="fn16"><p><sup>16</sup>&nbsp;Freedman, M. J., Nissim, K., &amp; Pinkas, B. (2004). <strong>Efficient private matching and set intersection</strong>. <em>International Conference on the Theory and Applications of Cryptographic Techniques (EUROCRYPT)</em>, 3027, 1-19. <a href="https://doi.org/10.1007/978-3-540-24676-3_1">DOI</a>. This reference covers foundational work on PSI, introducing efficient protocols for private set intersection and private matching.</p></div></div><p>Real-world examples:</p>
<ul>
<li><p>Patent database retrieval: A client can request a specific record from a large patent database without revealing which one they need. The client sends an encrypted index of the record, and the server processes this to return the encrypted result. For example, researchers can use PIR to access specific patents in the US patent database for a project without revealing which patents they are interested in. This ensures that sensitive intellectual property research remains confidential.</p></li>
<li><p>Medical information retrieval: PIR allows a patient to retrieve a specific medical record from a hospital database without the hospital knowing which record was requested. For example, a patient undergoing treatment for a sensitive condition can use PIR to retrieve specific medical records without revealing their interest to the hospital staff, thereby ensuring full confidentiality. This approach is especially beneficial for patients dealing with stigmatized conditions, allowing them to maintain privacy while managing their health.</p></li>
<li><p>Corporate data retrieval: Employees of a company can retrieve records from a confidential database without revealing which record they are looking for. For instance, an employee working on a confidential project could use PIR to access specific internal documents without revealing the nature of their query to the IT team, ensuring that confidential research remains secure. This is particularly important for organizations in competitive industries, where safeguarding project details and proprietary research is essential.</p></li>
<li><p>Academic research collaboration: PIR enables multiple research institutions to collaboratively access sensitive datasets while maintaining the confidentiality of each request. For example, researchers studying sensitive health data across different universities can use PIR to collaborate on a large-scale study while maintaining privacy regarding their specific research interests.</p></li>
<li><p>Customer support information retrieval: Customer service representatives can use PIR to access specific customer records without revealing which record is being accessed to unauthorized personnel. For instance, a representative could retrieve a customer’s previous support history without the support platform’s backend knowing which customer record was accessed. This helps maintain the privacy of sensitive customer information.</p></li>
<li><p>E-commerce product information: PIR allows buyers to access specific product details from a large e-commerce catalog without revealing which product they are interested in. For instance, a user researching a high-value item can retrieve product information without revealing their interest, thereby preventing targeted marketing or price manipulation by the platform.</p></li>
<li><p>Government records access: PIR enables citizens to access certain public records without the government knowing which specific record is being accessed. For example, a journalist researching a sensitive topic can use PIR to access specific government documents without revealing their focus, ensuring freedom of information while maintaining confidentiality.</p></li>
<li><p>Intellectual property research: Legal teams or corporations can search through a database of patents or trademarks without revealing the specific intellectual property they are researching. For instance, during early stages of product development, a company can use PIR to verify patent details without competitors learning about their research interests, thus maintaining strategic confidentiality.</p></li>
<li><p>Human resources record access: HR personnel can access specific employee records without revealing which record they are interested in to other departments or unauthorized personnel. For example, during an internal audit, an HR manager might need to review sensitive records without exposing which employees are being audited, ensuring privacy and avoiding unnecessary speculation.</p></li>
<li><p>Legal document retrieval: Law firms often need to access specific legal documents from a shared database without disclosing which document they are searching for, especially during cases involving multiple parties. For instance, during a merger or acquisition, legal teams can use PIR to access critical contract details without tipping off competing firms about their focus, keeping negotiations confidential.</p></li>
<li><p>Supply chain data access: PIR allows manufacturers to access specific supply chain information from a shared logistics database without revealing their focus to other stakeholders. For example, a car manufacturer may verify part availability without revealing to suppliers which model they are currently prioritizing, thereby maintaining competitive confidentiality.</p></li>
<li><p>Market analysis for financial institutions: Financial analysts may need to retrieve specific market data from a large dataset without revealing which data points they are interested in. By using PIR, analysts can query the database and obtain encrypted results without disclosing their market focus. For example, an investment firm researching emerging markets can access key economic indicators without revealing their specific interests, thereby maintaining a competitive edge.</p></li>
</ul>
</section>
</section>
<section id="beyond-he" class="level3">
<h3 class="anchored" data-anchor-id="beyond-he">Beyond HE</h3>
<p>HE is a powerful tool in cryptography that has the potential to revolutionize data privacy. It allows computations to be carried out on encrypted data without requiring access to the original plaintext. This capability has significant implications for secure data processing, enabling cloud-based services to perform calculations on sensitive information while preserving privacy. However, despite its transformative possibilities, HE comes with several limitations and challenges that must be addressed before it can be widely adopted in practical applications.</p>
<p>Below, we outline some of the challenges and constraints associated with HE, providing a deeper understanding of its current limitations and the efforts needed to overcome them.</p>
<section id="challenges" class="level4">
<h4 class="anchored" data-anchor-id="challenges">Challenges</h4>
<ol type="1">
<li><p>Encrypted output: While HE allows for arbitrary computations on encrypted data, the outcome of these computations is still encrypted. This means that the result is only useful to someone with the secret key to decrypt it. For example, if a cloud server performs a complex computation on encrypted health records, the resulting encrypted output cannot be interpreted without the corresponding decryption key. This presents a challenge for practical implementations, as it requires data owners to perform decryption locally to understand the results. In contrast, other techniques like obfuscation and functional encryption enable certain types of encrypted computations where the output is directly accessible in plaintext. These techniques can be more practical in situations where immediate interpretation of results is required. Another drawback of the encrypted output is the lack of flexibility for collaboration. In many use cases, organizations need to share the results of computations with multiple stakeholders who may not have access to the decryption key. This means that HE, by default, limits the ease of sharing processed information unless additional mechanisms for key distribution are implemented. As a result, using HE often necessitates careful planning around how decryption keys are managed and shared, which can introduce additional security concerns. Managing key distribution securely while ensuring accessibility is an ongoing area of research in the field of cryptography.</p></li>
<li><p>Single key requirement: To perform computations on encrypted data, all inputs must be encrypted using the same key. This constraint limits scenarios where data from multiple sources, encrypted with different keys, needs to be jointly processed. For instance, in a scenario where multiple healthcare providers wish to collaborate on a dataset of encrypted patient records, each provider’s data must be encrypted with the same key for joint analysis to be possible. This presents a significant barrier to collaboration, as coordinating the use of a single encryption key across multiple entities introduces security and logistical challenges. Addressing this limitation often requires the use of advanced key management techniques or trusted intermediaries, which can complicate the overall system architecture. Techniques like SMC can sometimes be used alongside HE to facilitate joint computations without sharing a common key, but these solutions tend to increase computational overhead and complexity. Moreover, the need for a single key also raises concerns about key compromise—if the key is exposed, all encrypted data becomes vulnerable, making key security a critical aspect of using HE in real-world applications. Researchers are actively exploring methods to allow computations on data encrypted with different keys, such as through key homomorphism or the use of proxy re-encryption. These approaches aim to enable interoperability between datasets encrypted with different keys, thereby enhancing the practicality of HE for collaborative applications. However, these methods are still in their experimental stages and are not yet widely adopted in mainstream cryptographic systems.</p></li>
<li><p>No integrity guarantees: HE allows for computations on encrypted data, but it does not provide a mechanism to verify that the computations were performed correctly. In other words, there is no inherent way to confirm if the resulting ciphertext is genuinely the outcome of the intended computation or if it is simply a new encryption of an unrelated value. This lack of integrity verification is a significant limitation, particularly in scenarios where the correctness of the computation is critical, such as financial transactions or medical data analysis. Without integrity guarantees, there is a risk that a malicious server could manipulate the computation process, resulting in incorrect outputs without detection. For instance, if a cloud provider intentionally or unintentionally alters the computation on encrypted financial records, the resulting encrypted output could be incorrect, leading to potential financial losses for the data owner. To address this issue, additional cryptographic tools such as ZKPs can be used in combination with HE to provide assurance that computations were performed correctly. ZKPs allow one party to prove to another that a computation was executed as expected without revealing any information about the input data. By integrating ZKPs with HE, it is possible to create a system where the server can provide verifiable proof that it performed the computation correctly. However, adding ZKPs to the process increases computational complexity and may impact performance, making it important to balance the need for integrity with the computational resources available. Another approach to ensuring the integrity of computations is the use of blockchain technology. By recording the steps of the computation on a blockchain, it is possible to create a transparent and tamper-resistant log that can be audited by all parties involved. This method, while promising, also introduces additional overhead and requires careful consideration of scalability, especially when dealing with large volumes of data.</p></li>
</ol>
</section>
<section id="future-directions" class="level4">
<h4 class="anchored" data-anchor-id="future-directions">Future directions</h4>
<p>In addition to the limitations outlined above, HE faces several other challenges that need to be addressed to make it more practical for widespread use. These challenges include:</p>
<ol type="1">
<li><p>Performance overheads: HE is computationally intensive compared to traditional encryption methods. Performing even basic operations on encrypted data can require significantly more processing power and time. FHE, which supports arbitrary computations, is particularly demanding and often impractical for real-time applications due to its high computational costs. Researchers are working on optimizing FHE schemes to reduce these performance overheads, but significant progress is still needed before they can be used in everyday applications. Advances such as bootstrapping optimizations and hardware acceleration are being explored to mitigate these challenges.</p></li>
<li><p>Large ciphertext sizes: Encrypted data under HE schemes tends to be much larger than the original plaintext data. This increase in data size, known as ciphertext expansion, can lead to storage and bandwidth issues, particularly when dealing with large datasets. For example, encrypting a simple medical record using FHE can result in a ciphertext that is several orders of magnitude larger than the original record. This makes storage and transmission of encrypted data more challenging, especially in environments with limited resources. Researchers are investigating techniques like compression schemes and more efficient ciphertext representations to reduce the overhead associated with HE.</p></li>
<li><p>Complexity of implementation: Implementing HE is complex and requires a deep understanding of advanced mathematics and cryptographic principles. This complexity makes it difficult for developers to integrate HE into their applications without specialized knowledge. To address this barrier, researchers and developers are working on creating libraries and tools that simplify the use of HE, making it more accessible to non-experts. However, there is still a long way to go before these tools are as user-friendly as traditional encryption libraries. Efforts like Microsoft SEAL, PALISADE, and other open-source libraries are helping bridge this gap, but more work is needed to make HE adoption mainstream.</p></li>
<li><p>Lack of standardization: Another challenge with HE is the lack of standardization across different implementations. Currently, there are multiple HE schemes, each with its unique properties, trade-offs, and performance characteristics. This fragmentation makes it difficult for developers and organizations to choose the right scheme for their needs and complicates interoperability between systems using different HE protocols. Ongoing efforts by organizations such as the HomomorphicEncryption.org community aim to create standardized benchmarks and guidelines to help users navigate the complexities of HE and choose the most suitable options for their use cases.</p></li>
<li><p>Key management and distribution: The effective management of encryption keys is a critical factor in ensuring the security of HE systems. As discussed earlier, HE often requires a single key to encrypt all data inputs, making key distribution a complex challenge, particularly in collaborative environments. If the key is compromised, all encrypted data becomes vulnerable. Key rotation mechanisms, secure key storage solutions, and the development of multi-key HE are all areas of active research to address these key management challenges. Proxy re-encryption and distributed key generation are also being explored as potential solutions to facilitate secure key sharing across different entities without compromising security.</p></li>
<li><p>Scalability issues: HE can be difficult to scale, especially for applications requiring large-scale data processing, such as big data analytics or machine learning. The computational overhead and increased data sizes make scaling HE to handle vast amounts of information a considerable challenge. Researchers are exploring the use of hybrid cryptographic solutions, where HE is combined with other privacy-preserving techniques like DP and SMC, to achieve a balance between scalability and privacy. These hybrid approaches can potentially make HE more viable for large-scale, real-time applications by distributing the computational burden and reducing latency.</p></li>
</ol>
</section>
</section>
</section>
<section id="foundations-of-he" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="foundations-of-he">Foundations of HE</h2>
<p>Having explored the high-level benefits and use cases of HE, from cloud-based analytics to privacy-preserving computations, we now turn to the mathematical underpinnings that make these capabilities possible. In the sections ahead, we’ll look at the abstract algebra concepts that allow encrypted values to behave almost like ordinary data, so that addition, multiplication, and even more complex operations can be carried out securely.</p>
<p>We’ll begin by examining homomorphisms, the structural <em>translations</em> that keep arithmetic consistent between plaintext and ciphertext. Next, we’ll see how groups, rings, and fields fit into HE, and why functional completeness—the ability to both add and multiply encrypted data—is a cornerstone of fully homomorphic schemes. Finally, we’ll dissect the main building blocks of a typical HE setup (KeyGen, Enc, Dec, and Eval) and learn how noise management, parameter selection, and other technical considerations come together to deliver robust security without sacrificing too much performance. By grounding ourselves in these foundational concepts, we’ll gain a clearer sense of how HE works, equipping us to better understand why it is so transformative for secure data processing.</p>
<section id="homomorphisms" class="level3">
<h3 class="anchored" data-anchor-id="homomorphisms">Homomorphisms</h3>
<p>Homomorphisms are an important concept in abstract algebra, referring to a function between two algebraic structures that preserves the operations of those structures. Simply put, if we have two sets, each with their own operations, a homomorphism ensures that operations performed on elements of the first set correspond directly to the operations on their mapped elements in the second set.</p>
<p>Let’s break this down with a simple analogy. Imagine we have two different languages, but both languages describe similar actions. A homomorphism is like a translation between these languages that ensures the meaning of sentences is preserved. If you take an action in the first language, the translation will represent the same action in the second language. The structure remains consistent.</p>
<p>Consider two sets of numbers, <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?B">, where <img src="https://latex.codecogs.com/png.latex?B"> is derived from <img src="https://latex.codecogs.com/png.latex?A"> using a homomorphism function. If we take two numbers, <img src="https://latex.codecogs.com/png.latex?3"> and <img src="https://latex.codecogs.com/png.latex?5">, from <img src="https://latex.codecogs.com/png.latex?A"> and add them to get <img src="https://latex.codecogs.com/png.latex?8">, the homomorphism ensures that their images in <img src="https://latex.codecogs.com/png.latex?B">, <img src="https://latex.codecogs.com/png.latex?6"> and <img src="https://latex.codecogs.com/png.latex?10">, also add up to give the corresponding result, which is <img src="https://latex.codecogs.com/png.latex?16">.</p>
<p>In formal terms, let <img src="https://latex.codecogs.com/png.latex?A"> be represented by elements <img src="https://latex.codecogs.com/png.latex?a_1,%20a_2%20%5Cin%20A">, and <img src="https://latex.codecogs.com/png.latex?B"> by their corresponding images under the homomorphism <img src="https://latex.codecogs.com/png.latex?f:%20A%20%20%20%20o%20B">. If <img src="https://latex.codecogs.com/png.latex?a_1%20=%203"> and <img src="https://latex.codecogs.com/png.latex?a_2%20=%205">, then:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aa_1%20+%20a_2%20=%208%0A"></p>
<p>Applying the homomorphism <img src="https://latex.codecogs.com/png.latex?f">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(a_1)%20=%206,%20%5Cquad%20f(a_2)%20=%2010%0A"></p>
<p>Thus:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(a_1%20+%20a_2)%20=%20f(a_1)%20+%20f(a_2)%20=%206%20+%2010%20=%2016%0A"></p>
<p>This demonstrates how the homomorphism preserves the operation between the sets.</p>
</section>
<section id="he-scheme" class="level3">
<h3 class="anchored" data-anchor-id="he-scheme">HE scheme</h3>
<p>An encryption scheme is called <strong>homomorphic</strong> over an operation <img src="https://latex.codecogs.com/png.latex?%5Cstar"> if it supports the following property:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AEnc(m_1)%20%5Cstar%20Enc(m_2)%20=%20Enc(m_1%20%5Cstar%20m_2),%20%5Cquad%20%5Cforall%20m_1,%20m_2%20%5Cin%20M%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?Enc"> is the encryption algorithm, and <img src="https://latex.codecogs.com/png.latex?M"> is the set of all possible messages. This property means that performing the operation on encrypted data yields the same result as performing the operation on the plaintexts and then encrypting the outcome.</p>
<p>Let’s make this more concrete with a simple example. Suppose we have two numbers, <img src="https://latex.codecogs.com/png.latex?m_1%20=%205"> and <img src="https://latex.codecogs.com/png.latex?m_2%20=%203">, and we want to add them, that is <img src="https://latex.codecogs.com/png.latex?%5Cstar"> represents addition. Normally, we would calculate <img src="https://latex.codecogs.com/png.latex?5%20+%203%20=%208">. In a HE scheme, instead of adding <img src="https://latex.codecogs.com/png.latex?5"> and <img src="https://latex.codecogs.com/png.latex?3"> directly, we first encrypt them:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AEnc(5),%20%5Cquad%20Enc(3)%0A"></p>
<p>If the encryption scheme is homomorphic over addition, we can add these encrypted values directly:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AEnc(5)%20+%20Enc(3)%20=%20Enc(8)%0A"></p>
<p>After computing on the encrypted values, we can decrypt the result to get the sum:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0ADec(Enc(8))%20=%208%0A"></p>
</section>
<section id="functional-completeness" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="functional-completeness">Functional completeness</h3>
<p>Imagine you have a secret message inside a locked box, and you want someone else to be able to perform some calculations on it without unlocking the box. HE allows this kind of magic. But how much can they really do with the box still locked?</p>
<p>Functional completeness is a fancy way of saying that if we can perform just two basic kinds of calculations on our locked message, then we can actually compute <em>anything</em>. These two basic calculations are <strong>addition</strong> and <strong>multiplication</strong>.</p>
<p>Think of these as building blocks, like Lego pieces. With just addition and multiplication, you can build any mathematical function you want. It’s a bit like how you only need a few types of Lego pieces to build a spaceship, a car, or even a whole castle. Addition and multiplication are enough to recreate every possible calculation.</p>
<p>In fact, even in the world of computers and logic, every complicated decision or process can be broken down into combinations of simpler pieces. For example, <strong>XOR</strong> (which acts like addition without carrying over numbers) and <strong>AND</strong> (which acts like multiplication) are the Lego pieces of digital logic. If an encryption system allows you to perform these two operations, you can calculate any kind of logical operation on encrypted data—without ever seeing the original secret message.</p>
<p>It is also worth noting that <strong>NAND</strong> or <strong>NOR</strong> gates alone can form a complete basis for Boolean logic. This means that, just like addition and multiplication, NAND or NOR are also sufficient to represent any Boolean function. This is an interesting parallel to the completeness of addition and multiplication in HE.</p>
<p>This is why addition and multiplication are so powerful. They are enough to make the encryption scheme fully homomorphic, meaning it can perform <em>any</em> kind of computation on encrypted data, keeping the secrets locked up but still allowing useful work to be done. In simple terms, if you can add and multiply, you can do it all!</p>
<section id="formal-definition" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="formal-definition">Formal definition</h4>
<p>To formally understand functional completeness in HE, it’s important to start with the algebraic foundations. So, let’s come back to the definition of homomorphism as a structure-preserving map between two algebraic structures, such as groups, rings, or fields. This means that the operations defined in one structure are preserved under the mapping to the other structure. In the context of HE, the homomorphism property allows operations to be carried out on encrypted data that mirror operations on the plaintext.</p>
<p><strong>Group</strong> is a set equipped with an operation that satisfies closure, associativity, has an identity element, and where every element has an inverse. When we extend these properties to include additional operations like multiplication, we get rings and fields, which have more complex properties. In a <strong>ring</strong>, both addition and multiplication are defined, but not every element necessarily has a multiplicative inverse. In a <strong>field</strong>, every non-zero element has a multiplicative inverse, making it a richer structure.</p>
<p>In HE, we work with these algebraic structures because they provide the foundation for well-defined operations on encrypted data. The key operations, namely addition and multiplication, are defined over these structures in a way that ensures they behave predictably and securely. When we say that an encryption scheme is homomorphic, we mean that it allows addition and multiplication to be performed on encrypted values, and the result, when decrypted, matches what would have been obtained if the operations were performed directly on the plaintext values.</p>
<p>Functional completeness, in this context, refers to the ability of an encryption scheme to support arbitrary computations on encrypted data by leveraging both addition and multiplication. These two operations are fundamental because they form a functionally complete set over finite fields. The latter distinction is important because functional completeness is well-defined in finite fields due to properties like closure under addition and multiplication. In infinite fields, however, the same guarantees may not hold, and constructing certain functions can be more challenging. The finite nature ensures that every combination of addition and multiplication stays within the set, which is a crucial requirement for functional completeness in encryption schemes. Moreover, since physical computations in digital systems are inherently carried out over finite fields, this limitation does not affect practical applications. As a matter of fact, digital systems use finite representations (such as bits), and operations are performed over well-defined finite fields like <strong>GF(2)</strong><sup>17</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn17"><p><sup>17</sup>&nbsp;GF(2), or Galois Field of order 2, is a finite field consisting of just two elements: usually represented as 0 and 1. See: van Lint, J. H., &amp; Wilson, R. M. (2001). <strong>A Course in Combinatorics</strong> (2nd ed.). Cambridge University Press. <a href="https://doi.org/10.1017/CBO9780511987045">DOI</a></p></div></div><p>To clarify the connection with the previous discussion, consider <strong>Boolean circuits</strong>, which are a model of computation used in computer science to represent logical functions. A Boolean circuit consists of logic gates such as XOR and AND, which can be seen as parallels to addition and multiplication, and can be combined to represent any possible computation, as supported by the concept of Turing completeness, which states that any computation can be performed given sufficient resources and the right set of operations, such as XOR and AND, which were previously introduced as parallels to addition and multiplication, and together are sufficient to represent any computable function.</p>
<p>Similarly, in arithmetic circuits, addition and multiplication serve as the fundamental operations. By chaining these operations together, we can construct any polynomial function. The ability to construct polynomial functions is significant because, according to the <strong>Stone-Weierstrass theorem</strong><sup>18</sup>, any continuous function can be approximated by a polynomial to any desired degree of accuracy. This means that by constructing polynomial functions, we can represent a wide range of complex computations, including those needed for encryption and data processing. In the context of HE, this enables us to perform arbitrary functions on encrypted data, ultimately allowing powerful and flexible operations while preserving data privacy. In the context of HE, this means we can perform a wide variety of operations on encrypted data, ultimately allowing us to evaluate arbitrary functions while preserving data privacy. This explanation builds on the algebraic foundations discussed earlier, demonstrating how addition and multiplication form a functionally complete set for building complex computations, both in logical and arithmetic contexts.</p>
<div class="no-row-height column-margin column-container"><div id="fn18"><p><sup>18</sup>&nbsp;Rudin, W. (1976). <strong>Principles of Mathematical Analysis</strong> (3rd ed.). McGraw-Hill. ISBN: 978-0070856134</p></div></div><p>In HE, an encryption scheme is said to be <strong>fully homomorphic</strong> if it supports both addition and multiplication on encrypted data, without needing to decrypt it. This property allows for the evaluation of any arithmetic circuit or Boolean circuit on encrypted data, effectively enabling arbitrary computation while preserving the confidentiality of the original data.</p>
<p>For instance, in the context of Boolean logic, XOR can be represented by addition (without carry), and AND can be represented by multiplication. These two gates are sufficient to build any Boolean function, making them functionally complete. Therefore, an encryption scheme that supports homomorphic addition and multiplication can evaluate any Boolean function, making it a FHE scheme.</p>
</section>
<section id="relevance-in-he" class="level4">
<h4 class="anchored" data-anchor-id="relevance-in-he">Relevance in HE</h4>
<p>The concept of functional completeness is crucial because it determines the power and flexibility of a HE scheme. If an encryption scheme can only support addition or only multiplication, it is called <strong>PHE</strong>. Such schemes can perform useful but limited computations, like adding encrypted numbers together or multiplying them by a constant. However, they cannot handle more complex functions that require a combination of both operations.</p>
<p>Examples of partially HE schemes include <strong>RSA</strong>, which is <strong>multiplicatively homomorphic</strong>, and <strong>Paillier</strong>, which is <strong>additively homomorphic</strong>. These schemes allow for specific types of computations on encrypted data but lack the flexibility of fully HE.</p>
<p>A <strong>FHE</strong> scheme, on the other hand, allows for arbitrary computations on encrypted data. This means that any function, no matter how complex, can be evaluated while the data remains encrypted.</p>
</section>
</section>
<section id="symmetric-vs.-asymmetric-he" class="level3">
<h3 class="anchored" data-anchor-id="symmetric-vs.-asymmetric-he">Symmetric vs.&nbsp;asymmetric HE</h3>
<p>HE schemes can be broadly categorized into <strong>symmetric</strong> and <strong>asymmetric</strong> types, each with unique characteristics and use cases. Symmetric HE uses the same key for both encryption and decryption, while asymmetric HE uses different keys for encryption and decryption.</p>
<section id="symmetric-he" class="level4">
<h4 class="anchored" data-anchor-id="symmetric-he">Symmetric HE</h4>
<p>In symmetric HE, the same secret key is used for both encryption and decryption.&nbsp;This approach is often simpler to implement and is computationally efficient compared to asymmetric schemes.&nbsp;Imagine you and your friend have the same combination lock. You can lock up a message, and your friend can unlock it using the same combination. In symmetric HE, the same secret key is used to lock (encrypt) and unlock (decrypt) the data, even when performing computations.</p>
<p>Symmetric HE schemes are generally faster and require less computational power than asymmetric ones. This is because symmetric algorithms tend to have simpler key structures, leading to more efficient operations.&nbsp;The key size in symmetric HE schemes can be smaller while maintaining an equivalent level of security compared to asymmetric systems.</p>
<p>One of the primary challenges of symmetric HE is key management. If multiple users need access to the encrypted data, the secret key must be shared securely, which can be challenging, especially in distributed environments.&nbsp;In multi-user scenarios, symmetric encryption poses a security risk since all parties must share the same key. If any user mishandles the key, the entire system’s security is compromised.</p>
<p>Symmetric HE is most suitable for use cases where there is a trusted environment, such as a single user encrypting their own data for secure local processing or a tightly controlled group where the key can be securely shared.</p>
</section>
<section id="asymmetric-he" class="level4">
<h4 class="anchored" data-anchor-id="asymmetric-he">Asymmetric HE</h4>
<p>Asymmetric HE schemes utilize a pair of keys: a <strong>public key</strong> for encryption and a <strong>private key</strong> for decryption. The public key can be shared openly, allowing anyone to encrypt data, but only the holder of the corresponding private key can decrypt it.&nbsp;Imagine you have a special mailbox with a slot that anyone can drop letters into (public key) but only you have the key to open the mailbox and read the letters (private key). Asymmetric HE works similarly, allowing anyone to encrypt data, but only the intended recipient can decrypt it.</p>
<p>Asymmetric HE schemes are generally more computationally intensive than symmetric ones. The key structures and encryption/decryption algorithms tend to be more complex, leading to slower performance.&nbsp;To achieve a similar level of security, asymmetric keys need to be larger compared to symmetric keys, which can increase storage and processing requirements.</p>
<p>Asymmetric HE is ideal for scenarios involving multiple users, such as cloud computing, where data needs to be encrypted by many users but only decrypted by a trusted party. The use of a public key enables easy data sharing without compromising the security of the private key.&nbsp;Since the public key is openly distributed, any number of users can encrypt data, making asymmetric HE more scalable for environments involving many participants.</p>
</section>
</section>
<section id="key-components-of-an-he-scheme" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="key-components-of-an-he-scheme">Key components of an HE scheme</h3>
<p>An HE scheme is fundamentally characterized by four essential operations: <img src="https://latex.codecogs.com/png.latex?KeyGen">, <img src="https://latex.codecogs.com/png.latex?Enc">, <img src="https://latex.codecogs.com/png.latex?Dec">, and <img src="https://latex.codecogs.com/png.latex?Eval">. These components work together to enable secure computation on encrypted data while maintaining the critical property of homomorphism. Let’s explore each component in detail and understand their mathematical foundations, practical implications, and the subtle nuances involved.</p>
<p>The four core components that make HE functional are discussed in detail below:</p>
<ul>
<li><p>The <img src="https://latex.codecogs.com/png.latex?KeyGen"> algorithm is the foundation of any HE scheme’s security. It generates the cryptographic keys necessary for the system’s operation.</p>
<p>Imagine that <img src="https://latex.codecogs.com/png.latex?KeyGen"> is like creating a secure lock and key for a treasure chest. If the lock is too simple, it might be easy for a thief to pick it, compromising the security of the chest. On the other hand, if the lock is extremely complex, it might take a very long time to make and might even be difficult for the rightful owner to use efficiently. In HE, <img src="https://latex.codecogs.com/png.latex?KeyGen"> works in a similar way: it needs to create a key that is strong enough to keep attackers out but also practical enough for users to operate. The security parameter <img src="https://latex.codecogs.com/png.latex?%5Clambda"> is like deciding how sophisticated the lock should be, higher values make it harder for unauthorized access but require more effort and resources to manage.</p>
<ul>
<li><p>For symmetric HE: <img src="https://latex.codecogs.com/png.latex?k%20%5Cleftarrow%20KeyGen(1%5E%5Clambda)">, where <img src="https://latex.codecogs.com/png.latex?%5Clambda"> is the security parameter, and <img src="https://latex.codecogs.com/png.latex?k"> is the secret key.</p></li>
<li><p>For asymmetric HE: <img src="https://latex.codecogs.com/png.latex?(pk,%20sk)%20%5Cleftarrow%20KeyGen(1%5E%5Clambda)">, where <img src="https://latex.codecogs.com/png.latex?pk"> is the public key and <img src="https://latex.codecogs.com/png.latex?sk"> is the secret key. The security parameter <img src="https://latex.codecogs.com/png.latex?%5Clambda"> determines the computational hardness of breaking the encryption scheme. Larger values of <img src="https://latex.codecogs.com/png.latex?%5Clambda"> provide stronger security but increase computational overhead. The key generation process typically involves:</p>
<ul>
<li><p>Generation of random numbers: Random numbers are generated from a specified distribution, such as uniform, Gaussian, or discrete Gaussian distributions. For example, uniform distributions ensure equal likelihood across a range, while Gaussian distributions are used to introduce controlled randomness with a specific mean and standard deviation. Discrete Gaussian distributions, common foundational in HE, particularly in lattice-based cryptography, add noise with precision suitable for cryptographic operations. The randomness is crucial for ensuring that every generated key is unique and unpredictable.</p></li>
<li><p>Mathematical operations: Complex mathematical operations are used based on the scheme’s underlying hardness assumptions. For example, mathematical frameworks in HE, such as Ring-LWE (Learning With Errors) and NTRU (Nth degree Truncated Polynomial Ring) are foundational in HE. These frameworks define problems that are computationally infeasible to solve without specific secret information (such as the private or secret key generated during the <img src="https://latex.codecogs.com/png.latex?KeyGen"> phase), ensuring the security of the encryption scheme. These assumptions make it computationally infeasible for an attacker to derive the private key from the public key or ciphertexts, as they are based on the hardness of specific mathematical problems (e.g., Ring-LWE or NTRU). These problems require secret information, such as the private or secret key generated during the <img src="https://latex.codecogs.com/png.latex?KeyGen"> phase, to be solvable within a practical timeframe.</p></li>
<li><p>Parameter generation: Generation of additional parameters is often required for homomorphic evaluation, such as relinearization keys in some schemes. These parameters help to maintain efficiency and support specific operations like multiplication without a significant increase in ciphertext size. Relinearization keys simplify the increased complexity that occurs after a ciphertext multiplication by “recompressing” the resulting ciphertext into a manageable size and form, ensuring efficient further computations. Without these keys, ciphertexts could grow exponentially, making further evaluations impractical.</p></li>
</ul></li>
</ul>
<p>The robustness of the <img src="https://latex.codecogs.com/png.latex?KeyGen"> function directly impacts the overall security of the HE scheme. It must ensure that the generated keys meet the desired security standards while balancing the computational resources required for efficient operation.</p></li>
<li><p>The <img src="https://latex.codecogs.com/png.latex?Enc"> encryption function transforms plaintext messages into ciphertexts. In HE schemes, this process must preserve the algebraic structure that enables homomorphic operations:</p>
<ul>
<li><p>For symmetric HE: <img src="https://latex.codecogs.com/png.latex?c%20%5Cleftarrow%20Enc(k,%20m)">, where <img src="https://latex.codecogs.com/png.latex?m"> is the plaintext message, <img src="https://latex.codecogs.com/png.latex?k"> is the secret key, and <img src="https://latex.codecogs.com/png.latex?c"> is the resulting ciphertext.</p></li>
<li><p>For asymmetric HE: <img src="https://latex.codecogs.com/png.latex?c%20%5Cleftarrow%20Enc(pk,%20m)">, where <img src="https://latex.codecogs.com/png.latex?pk"> is the public key.</p></li>
</ul>
<p>Key characteristics of the encryption process include:</p>
<ul>
<li><p>Addition of random noise: The encryption process introduces random noise into the plaintext to ensure semantic security, making it computationally difficult for an adversary to distinguish between different ciphertexts. While this noise is critical for maintaining security, it must be carefully controlled to avoid excessive growth that can disrupt subsequent computations. Effective noise management ensures that the ciphertext remains usable for homomorphic operations without compromising security.</p></li>
<li><p>Message embedding: The message is embedded into a structured mathematical framework, such as polynomial rings<sup>19</sup> or lattice-based constructions. This embedding serves two purposes: first, to secure the message against unauthorized access, and second, to enable efficient computations on encrypted data. By embedding the message in a way that retains the necessary algebraic properties, the encryption scheme supports operations like addition and multiplication directly on ciphertexts.</p></li>
</ul>
<p>The encryption step is not just about securing the data but also ensuring that the encrypted data can still participate in meaningful computations. This dual requirement makes HE distinct from conventional encryption methods.</p></li>
</ul>
<div class="no-row-height column-margin column-container"><div id="fn19"><p><sup>19</sup>&nbsp;A <em>polynomial ring</em> is an algebraic structure where the elements are polynomials, and it is closed under addition and multiplication. This means that adding or multiplying two polynomials within the ring always results in another polynomial within the same ring, making it an ideal framework for cryptographic operations like those leveraged in HE.</p></div></div><ul>
<li><p>The <img src="https://latex.codecogs.com/png.latex?Dec"> decryption function recovers the original plaintext from the ciphertext:</p>
<ul>
<li><p>For symmetric HE: <img src="https://latex.codecogs.com/png.latex?m%20%5Cleftarrow%20Dec(k,%20c)">.</p></li>
<li><p>For asymmetric HE: <img src="https://latex.codecogs.com/png.latex?m%20%5Cleftarrow%20Dec(sk,%20c)">.</p></li>
</ul>
<p>Critical aspects of the decryption process include:</p>
<ul>
<li><p>Noise removal: Decryption involves removing the noise added during encryption. This is achieved by leveraging the secret key or decryption algorithm to isolate the original message from the noisy ciphertext. Noise levels must remain below a threshold defined by the scheme’s parameters; otherwise, the decryption process may fail, yielding incorrect results. Techniques like modulus alignment<sup>20</sup> or parameter scaling<sup>21</sup> are often used to ensure the noise is adequately suppressed during decryption.</p></li>
<li><p>Extraction from mathematical structure: The message is extracted from its embedded mathematical structure. This involves interpreting the ciphertext within the mathematical framework it was transformed into during encryption (e.g., polynomial rings or lattice structures). Decryption uses the secret key to reverse this transformation by applying the inverse operations in the specified algebraic domain. This process isolates the plaintext while ensuring that noise and other artifacts are accounted for, reconstructing the original message accurately.</p></li>
<li><p>Error handling: Error handling is crucial for situations where noise growth has exceeded acceptable bounds. When the noise level is too high, the decryption process may fail, indicating that the homomorphic operations performed exceeded the scheme’s limitations.</p></li>
<li><p>Integrity verification: Decryption must ensure that the recovered message is the exact original plaintext without any alterations. This process involves verifying the correctness of the decryption by checking the consistency of the output with the encryption parameters and the intended operations performed during evaluation. Integrity verification is essential to detect and prevent errors introduced during encryption, evaluation, or decryption. This may include confirming that noise levels remained within permissible thresholds and that no tampering or corruption of ciphertext occurred throughout the process.</p></li>
</ul>
<p>The computational efficiency and correctness of the decryption process are vital for the practical usability of an HE scheme. It must accurately recover the plaintext without compromising security.</p></li>
</ul>
<div class="no-row-height column-margin column-container"><div id="fn20"><p><sup>20</sup>&nbsp;The <em>modulus</em> serves as the upper limit for the arithmetic space within which operations are performed. When ciphertexts undergo operations like addition or multiplication, their noise increases, and the resulting values may exceed the modulus. Modulus alignment scales the ciphertext back to a compatible modulus, ensuring that it remains within the arithmetic boundaries required by the HE scheme and enabling accurate decryption.</p></div><div id="fn21"><p><sup>21</sup>&nbsp;<em>Parameter scaling</em> involves adjusting specific parameters, such as scaling factors or precision levels. For example, plaintexts are often scaled (multiplied) by a large constant before encryption to ensure sufficient precision during operations. This scaling factor helps maintain accuracy when performing computations on ciphertexts. However, if not properly adjusted, it can lead to noise accumulation or overflow errors.</p></div></div><ul>
<li><p>The <img src="https://latex.codecogs.com/png.latex?Eval"> evaluation function is the distinguishing feature of HE, enabling computation on encrypted data. For a function <img src="https://latex.codecogs.com/png.latex?f"> and ciphertexts <img src="https://latex.codecogs.com/png.latex?c_1,%20c_2,%20%5Cdots,%20c_n">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ac_%7Bresult%7D%20%5Cleftarrow%20Eval(eval%5C_key,%20f,%20c_1,%20%5Cdots,%20c_n)%0A"></p>
<p>The <img src="https://latex.codecogs.com/png.latex?Eval"> function must satisfy the homomorphic property:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0ADec(sk,%20Eval(eval%5C_key,%20f,%20c_1,%20%5Cdots,%20c_n))%20=%20f(Dec(sk,%20c_1),%20%5Cdots,%20Dec(sk,%20c_n))%0A"></p>
<p>In simple terms, the equation says that if you evaluate a function on encrypted data, then decrypt the result, you will get the same outcome as if you had evaluated the function directly on the unencrypted data. Terms explanation:</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?Eval(eval%5C_key,%20f,%20c_1,%20%5Cdots,%20c_n)"> represents applying the function <img src="https://latex.codecogs.com/png.latex?f"> to the encrypted values (ciphertexts) <img src="https://latex.codecogs.com/png.latex?c_1,%20c_2,%20%5Cdots,%20c_n"> using an evaluation key.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?Dec(sk,%20Eval(...))"> means that you decrypt the output of this evaluated ciphertext using the secret key <img src="https://latex.codecogs.com/png.latex?sk">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?f(Dec(sk,%20c_1),%20%5Cdots,%20Dec(sk,%20c_n))"> represents applying the function <img src="https://latex.codecogs.com/png.latex?f"> to the original plaintext values that were encrypted.</p></li>
</ul>
<p>Key considerations for the evaluation function include:</p>
<ol type="1">
<li><p>Correctness: The evaluation must preserve the relationship between the function applied to plaintexts and the function applied to ciphertexts (here, <img src="https://latex.codecogs.com/png.latex?%5Cboxplus"> and <img src="https://latex.codecogs.com/png.latex?%5Cboxdot"> represent homomorphic addition and multiplication operations):</p>
<ul>
<li><p>For addition: <img src="https://latex.codecogs.com/png.latex?Dec(c_1%20%5Cboxplus%20c_2)%20=%20Dec(c_1)%20+%20Dec(c_2)">.</p></li>
<li><p>For multiplication: <img src="https://latex.codecogs.com/png.latex?Dec(c_1%20%5Cboxdot%20c_2)%20=%20Dec(c_1)%20%5Ctimes%20Dec(c_2)">.</p></li>
</ul></li>
<li><p>Noise management: Each homomorphic operation increases the noise level in the ciphertext due to the mathematical transformations applied during evaluation. Noise control is essential to ensure that computations remain accurate and ciphertexts decrypt correctly. Techniques like modulus switching and bootstrapping are employed to manage noise. Modulus switching reduces noise by scaling down ciphertexts to a smaller modulus, aligning them with parameters such as the scaling factor, which determines how plaintexts are encoded into ciphertexts. Bootstrapping, on the other hand, resets the noise entirely by re-encrypting the ciphertext and refreshing its parameters, such as the modulus. These approaches ensure that noise levels remain within tolerable limits, enabling accurate decryption and supporting further computations. In particular:</p>
<ul>
<li><p>Addition operations: During addition, the noise levels from the input ciphertexts combine, leading to a linear increase in noise. Modulus switching can be used here to prevent the combined noise from exceeding tolerable limits, ensuring that further operations can still be performed without requiring bootstrapping.</p></li>
<li><p>Multiplication operations: Multiplication causes a more significant challenge due to exponential noise growth. This is because the interaction of ciphertext terms amplifies the noise and can quickly surpass the allowable threshold. Bootstrapping is particularly crucial in these cases to reset noise levels after one or more multiplications, enabling further computations without risking decryption failure.</p></li>
</ul></li>
<li><p>Ciphertext format preservation: The output ciphertext must maintain a consistent format to support further homomorphic computations without interruptions. Ensuring that the ciphertext remains in a format compatible with the scheme’s parameters prevents issues in subsequent operations, including decryption at the end of the computation process. To achieve this:</p></li>
</ol>
<ul>
<li><p>To support further operations, the ciphertext’s structure must remain aligned with the homomorphic scheme’s requirements. Techniques like modulus switching or parameter adjustments during evaluation help preserve this format, enabling seamless execution of complex computations.</p></li>
<li><p>Proper size management is also crucial to maintain efficiency. Modulus switching not only helps align the ciphertext’s format but also prevents excessive size growth. Without such controls, ciphertext expansion can render the scheme impractical for real-world applications.</p></li>
</ul>
<ol start="4" type="1">
<li><p>Performance considerations: Efficient evaluation requires careful attention to several performance-related factors. These considerations ensure the scheme remains practical for real-world applications while balancing computational overhead and security.</p>
<ul>
<li><p>Circuit depth optimization: In leveled HE schemes, the number of operations is limited by the depth of the computational circuit. Reducing circuit depth minimizes noise growth and improves efficiency. Techniques such as modulus switching (introduced earlier) and parameter optimization are often used to manage this depth effectively, ensuring operations stay within the allowed limits.</p></li>
<li><p>Memory management: Homomorphic operations often result in ciphertext expansion, where the size of ciphertexts increases with each operation. This can lead to significant memory demands, especially when working with large datasets or deep circuits. Efficient memory management strategies, such as controlling ciphertext growth through size management techniques (e.g., modulus alignment), are crucial to maintaining performance.</p></li>
<li><p>Computational complexity: Different homomorphic operations have varying computational costs. Addition is computationally inexpensive and introduces manageable noise, while multiplication is more resource-intensive and causes exponential noise growth. Techniques like bootstrapping, already seen, play a key role in managing this complexity by resetting noise levels and enabling further computations.</p></li>
</ul></li>
<li><p>Special evaluation keys: They play a crucial role in extending the functionality of HE schemes by enabling specific operations and improving efficiency during evaluation. These keys are generated during the <img src="https://latex.codecogs.com/png.latex?KeyGen"> phase and are used as follows:</p>
<ul>
<li><p>Relinearization keys: After multiplication, the resulting ciphertext may have increased complexity. Relinearization keys are used to simplify the ciphertext, making it more manageable for subsequent operations.</p></li>
<li><p>Rotation keys: These keys enable operations that involve rotating encrypted vectors, which are essential in applications like matrix multiplication or encrypted machine learning. They facilitate secure transformations within encrypted data while preserving homomorphic properties.</p></li>
<li><p>Bootstrapping keys: In FHE schemes, bootstrapping keys are indispensable for managing noise. They refresh noisy ciphertexts by re-encrypting them, resetting noise levels, and allowing unlimited operations without risking decryption failure.</p></li>
</ul></li>
</ol>
<p>The evaluation function is what sets HE apart from traditional encryption schemes. It allows encrypted data to be processed without compromising security, making it highly suitable for scenarios where data privacy is critical. In practice, there may be many different computations required, which means multiple <img src="https://latex.codecogs.com/png.latex?Eval"> operations might be needed. Each <img src="https://latex.codecogs.com/png.latex?Eval"> operation allows a specific computation to be performed on the encrypted data, such as addition, multiplication, or other custom functions, without revealing the underlying data. Additionally, <img src="https://latex.codecogs.com/png.latex?Eval"> operations can be composed, meaning that the result of one evaluation can be used as input for another.</p></li>
</ul>
<section id="security-and-functionality-properties" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="security-and-functionality-properties">Security and functionality properties</h4>
<p>The interaction between these components must satisfy several security and functionality properties:</p>
<ul>
<li><p>Semantic security: The encryption process (<img src="https://latex.codecogs.com/png.latex?Enc">) ensures that ciphertexts reveal no information about the plaintexts, even if intercepted by an adversary. This is achieved through the addition of random noise during <img src="https://latex.codecogs.com/png.latex?Enc">, which obfuscates the relationship between the plaintext and ciphertext. The security of semantic encryption relies on hardness assumptions such as Ring-LWE or NTRU, ensuring that decryption without the secret key is computationally infeasible.</p></li>
<li><p>Compactness: In the evaluation process (<img src="https://latex.codecogs.com/png.latex?Eval">), the size of ciphertexts should remain independent of the complexity of the function <img src="https://latex.codecogs.com/png.latex?f">. Techniques like modulus switching and relinearization, introduced during evaluation, ensure compactness by controlling ciphertext growth and preserving efficiency. Without these techniques, ciphertexts could grow exponentially, rendering the scheme impractical.</p></li>
<li><p>Circuit privacy: To preserve the confidentiality of the computation, the evaluated ciphertext must not reveal information about the function <img src="https://latex.codecogs.com/png.latex?f"> applied during <img src="https://latex.codecogs.com/png.latex?Eval">. Bootstrapping and parameter adjustments obscure the internal operations, ensuring that proprietary algorithms or sensitive computations remain private.</p></li>
<li><p>Noise growth bounds: Every homomorphic operation increases noise in ciphertexts. Noise management techniques, such as modulus switching and bootstrapping, introduced in <img src="https://latex.codecogs.com/png.latex?Eval">, provide clear bounds on noise growth. These bounds define the maximum circuit depth that can be evaluated before decryption becomes unreliable. Effective noise control is vital for ensuring that computations on ciphertexts can be completed successfully.</p></li>
<li><p>Efficiency: The efficiency of HE schemes depends on balancing computational overhead, noise management, and security. Operations like addition, which introduce linear noise, are computationally inexpensive. However, multiplication, which introduces exponential noise, requires careful management through relinearization and bootstrapping. The choice of parameters during <img src="https://latex.codecogs.com/png.latex?KeyGen">, such as key length and modulus size<sup>22</sup>, directly impacts the trade-offs between efficiency and security.</p></li>
</ul>
<div class="no-row-height column-margin column-container"><div id="fn22"><p><sup>22</sup>&nbsp;In HE schemes, modulus size and key length are essential cryptographic parameters and FHE and SWHE schemes rely heavily on them. <em>Modulus size</em>, which refers to the number size used in modular arithmetic, impacts both security and computational overhead—larger sizes increase security but require more processing power. <em>Key length</em>, typically measured in bits, determines the strength of encryption; longer keys offer higher security by increasing the complexity of brute-force attacks. These parameters are carefully selected to balance security, performance, and the computational depth of operations, especially in FHE schemes where extensive computations on encrypted data are possible.</p></div></div><p>Understanding these components and their properties is crucial for leveraging HE effectively in theory and practice. These considerations highlight the interplay between the core HE operations and their implications:</p>
<ul>
<li><p>Implementing HE schemes correctly: Each operation, from key generation (<img src="https://latex.codecogs.com/png.latex?KeyGen">) to evaluation (<img src="https://latex.codecogs.com/png.latex?Eval">), requires careful implementation to maintain the scheme’s homomorphic properties. For instance, noise management techniques like modulus switching and bootstrapping must be integrated seamlessly to ensure the scheme’s reliability.</p></li>
<li><p>Choosing appropriate parameters: Selecting suitable parameters—such as key length, modulus size, and noise bounds—is vital for balancing security and efficiency. These parameters, determined during the <img src="https://latex.codecogs.com/png.latex?KeyGen"> phase, dictate the computational depth, noise tolerance, and performance of the scheme.</p></li>
<li><p>Optimizing performance: Real-world applications demand efficiency. Optimizing the encryption (<img src="https://latex.codecogs.com/png.latex?Enc">), evaluation (<img src="https://latex.codecogs.com/png.latex?Eval">), and decryption (<img src="https://latex.codecogs.com/png.latex?Dec">) processes ensures the scheme remains practical. Techniques like relinearization keys and circuit depth optimization are indispensable for achieving computational feasibility.</p></li>
<li><p>Ensuring security guarantees: Security guarantees like semantic security, circuit privacy, and integrity verification must hold throughout the computation. This requires consistent adherence to the principles of noise management and compactness during every stage of the HE workflow.</p></li>
<li><p>Designing efficient protocols: HE enables secure protocols by leveraging its unique properties. Applications like encrypted database queries or privacy-preserving machine learning benefit from advanced evaluation capabilities, such as rotation keys for vector manipulations or bootstrapping keys for resetting noise.</p></li>
</ul>
</section>
</section>
</section>
<section id="homomorphism-on-the-rsa" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="homomorphism-on-the-rsa">Homomorphism on the RSA</h2>
<p>To understand how HE schemes work, we will explore the RSA algorithm. First, we must review some essential mathematical concepts behind encryption schemes.</p>
<section id="number-theory" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="number-theory">Number theory</h3>
<section id="primes-and-factorization" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="primes-and-factorization">Primes and factorization</h4>
<p>The journey into number theory starts with the basic building blocks of integers and their relationships, such as divisibility and the idea of prime numbers.</p>
<blockquote class="blockquote">
<p><strong>Definition (<em>Set of integers</em>)</strong>: The set of integers is denoted as <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D%20=%20%7B...,%20-2,%20-1,%200,%201,%202,%20...%7D">.</p>
</blockquote>
<blockquote class="blockquote">
<p><strong>Definition (<em>Divisibility</em>)</strong>: Two integers <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b"> are divisible if there exists an integer <img src="https://latex.codecogs.com/png.latex?c"> such that <img src="https://latex.codecogs.com/png.latex?b%20=%20a%20%5Ccdot%20c">. When true, this relationship is written as <img src="https://latex.codecogs.com/png.latex?a%20%5Cmid%20b">.</p>
</blockquote>
<p>For example, <img src="https://latex.codecogs.com/png.latex?6%20%5Cmid%2018"> holds because <img src="https://latex.codecogs.com/png.latex?18%20=%206%20%5Ccdot%203">. If <img src="https://latex.codecogs.com/png.latex?a%20%5Cnmid%20b">, then <img src="https://latex.codecogs.com/png.latex?a"> does not divide <img src="https://latex.codecogs.com/png.latex?b">.</p>
<blockquote class="blockquote">
<p><strong>Theorem&nbsp;(<em>Division Algorithm</em>)</strong>: For any integers <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b%20%3E%200">, there exist unique integers <img src="https://latex.codecogs.com/png.latex?q"> (quotient) and <img src="https://latex.codecogs.com/png.latex?r"> (remainder) such that: <img src="https://latex.codecogs.com/png.latex?%0Aa%20=%20q%20%5Ccdot%20b%20+%20r,%20%5Cquad%200%20%5Cleq%20r%20%3C%20b%0A"></p>
</blockquote>
<p>For example, dividing <img src="https://latex.codecogs.com/png.latex?17"> by <img src="https://latex.codecogs.com/png.latex?5"> gives <img src="https://latex.codecogs.com/png.latex?q%20=%203"> and <img src="https://latex.codecogs.com/png.latex?r%20=%202">, as <img src="https://latex.codecogs.com/png.latex?17%20=%203%20%5Ccdot%205%20+%202">.</p>
<p>Prime numbers are the building blocks of integers:</p>
<blockquote class="blockquote">
<p><strong>Definition (<em>Integer primality</em>)</strong>: A number <img src="https://latex.codecogs.com/png.latex?p%20%3E%201"> is prime if its only divisors are <img src="https://latex.codecogs.com/png.latex?1"> and <img src="https://latex.codecogs.com/png.latex?p">.</p>
</blockquote>
<p>For instance, <img src="https://latex.codecogs.com/png.latex?7"> is prime, while <img src="https://latex.codecogs.com/png.latex?12"> is composite because <img src="https://latex.codecogs.com/png.latex?12%20=%202%20%5Ccdot%206">.</p>
<blockquote class="blockquote">
<p><strong>Theorem (<em>Fundamental Theorem of Arithmetic</em>)</strong>: Every integer <img src="https://latex.codecogs.com/png.latex?n%20%3E%201"> can be uniquely expressed as a product of prime powers: <img src="https://latex.codecogs.com/png.latex?%0An%20=%20p_1%5E%7Be_1%7D%20%5Ccdot%20p_2%5E%7Be_2%7D%20%5Ccdots%20p_k%5E%7Be_k%7D%0A"> where <img src="https://latex.codecogs.com/png.latex?p_i"> are distinct primes, <img src="https://latex.codecogs.com/png.latex?i"> and <img src="https://latex.codecogs.com/png.latex?e_i"> are positive integers, and <img src="https://latex.codecogs.com/png.latex?k"> is the number of distinct prime factors of <img src="https://latex.codecogs.com/png.latex?n">.</p>
</blockquote>
<p>For example, <img src="https://latex.codecogs.com/png.latex?84%20=%202%5E2%20%5Ccdot%203%20%5Ccdot%207"> demonstrates this principle.</p>
<div class="page-columns page-full"><blockquote class="blockquote">
<p><strong>Remark</strong>: It is straightforward to compute the product of two large prime numbers <img src="https://latex.codecogs.com/png.latex?p"> and <img src="https://latex.codecogs.com/png.latex?q">. However, the reverse operation, determining the original prime factors from their product <img src="https://latex.codecogs.com/png.latex?n%20=%20p%20%5Ccdot%20q">, is computationally difficult. This difficulty arises from the lack of efficient algorithms for factorizing large integers. The best-known algorithms, such as the General Number Field Sieve (GNFS)<sup>23</sup>, have exponential time complexity for large inputs. This asymmetry makes factoring infeasible within a reasonable timeframe as the bit length of <img src="https://latex.codecogs.com/png.latex?p"> and <img src="https://latex.codecogs.com/png.latex?q"> increases. Moreover, the factors <img src="https://latex.codecogs.com/png.latex?p"> and <img src="https://latex.codecogs.com/png.latex?q"> are typically chosen to be large primes of similar bit length to avoid simple heuristics or optimizations. This problem is so significant that it has its own name, the Integer Factorization Problem (denoted $ [n] $), and it underpins the security of many public-key cryptosystems, including RSA, ensuring that decrypting or compromising encrypted data without the private key remains practically impossible.</p>
</blockquote><div class="no-row-height column-margin column-container"><div id="fn23"><p><sup>23</sup>&nbsp;Lenstra, A. K., &amp; Lenstra, H. W. (1993). <strong>The development of the number field sieve</strong> (Vol. 1554). <em>Springer-Verlag</em>. <a href="https://doi.org/10.1007/BFb0091534">DOI</a></p></div></div></div>
</section>
<section id="greatest-common-divisor" class="level4">
<h4 class="anchored" data-anchor-id="greatest-common-divisor">Greatest common divisor</h4>
<p>To explore relationships between numbers, we often need their greatest common divisor, e.g.&nbsp;to simplify a fraction or to synchronize cycles.</p>
<blockquote class="blockquote">
<p><strong>Definition (<em>Greatest common divisor</em>, <em>GCD</em>)</strong>: The greatest common divisor of two integers <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b">, denoted <img src="https://latex.codecogs.com/png.latex?%5Cgcd(a,%20b)">, is the largest integer dividing both <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b">.</p>
</blockquote>
<p>For example, <img src="https://latex.codecogs.com/png.latex?%5Cgcd(12,%2018)%20=%206">.</p>
<blockquote class="blockquote">
<p><strong>Definition (<em>Relatively primality of integers</em>)</strong>: Two integers are relatively prime if their GCD is <img src="https://latex.codecogs.com/png.latex?1">.</p>
</blockquote>
<p>Finding the GCD is efficient with the Euclidean algorithm:</p>
<blockquote class="blockquote">
<p><strong>Theorem (<em>Euclidean Algorithm</em>)</strong>: The GCD of two integers <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b">, where at least one is nonzero, can be computed using the recursive relation: <img src="https://latex.codecogs.com/png.latex?%0A%5Cgcd(a,%20b)%20=%20%5Cgcd(b,%20a%20%5Cpmod%7Bb%7D).%0A"></p>
</blockquote>
<p>This recursive formula stems from the property of divisors: <img src="https://latex.codecogs.com/png.latex?%0A%5Cgcd(a,%20b)%20=%20%5Cgcd(b,%20a%20-%20q%20%5Ccdot%20b)%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?q"> is the quotient when <img src="https://latex.codecogs.com/png.latex?a"> is divided by <img src="https://latex.codecogs.com/png.latex?b">. Since <img src="https://latex.codecogs.com/png.latex?a%20-%20q%20%5Ccdot%20b%20=%20a%20%5Cpmod%7Bb%7D">, the recursion simplifies to: <img src="https://latex.codecogs.com/png.latex?%0A%5Cgcd(a,%20b)%20=%20%5Cgcd(b,%20r)%0A"> where <img src="https://latex.codecogs.com/png.latex?r%20=%20a%20%5Cpmod%7Bb%7D">.</p>
<p>For example, consider the integers <img src="https://latex.codecogs.com/png.latex?385"> and <img src="https://latex.codecogs.com/png.latex?364">. Using the Euclidean Algorithm: <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cgcd(385,%20364)%20&amp;=%20%5Cgcd(364,%20385%20%5Cpmod%7B364%7D)%20=%20%5Cgcd(364,%2021),%20%5C%5C%0A%5Cgcd(364,%2021)%20&amp;=%20%5Cgcd(21,%20364%20%5Cpmod%7B21%7D)%20=%20%5Cgcd(21,%207),%20%5C%5C%0A%5Cgcd(21,%207)%20&amp;=%20%5Cgcd(7,%2021%20%5Cpmod%7B7%7D)%20=%20%5Cgcd(7,%200)%20=%207.%0A%5Cend%7Baligned%7D%0A"></p>
<p>Thus, <img src="https://latex.codecogs.com/png.latex?%5Cgcd(385,%20364)%20=%207">.</p>
<p>The Euclidean Algorithm can be applied to any integers, positive or negative, as long as at least one of the integers is nonzero. The process uses the relationship <img src="https://latex.codecogs.com/png.latex?%5Cgcd(a,%20b)%20=%20%5Cgcd(b,%20a%20%5Cpmod%7Bb%7D)">, where the modulus operation <img src="https://latex.codecogs.com/png.latex?a%20%5Cpmod%7Bb%7D"> always returns a remainder <img src="https://latex.codecogs.com/png.latex?r"> satisfying <img src="https://latex.codecogs.com/png.latex?0%20%5Cleq%20r%20%3C%20%7Cb%7C">. This means the algorithm effectively reduces to positive remainders during the recursion, even if <img src="https://latex.codecogs.com/png.latex?a"> or <img src="https://latex.codecogs.com/png.latex?b"> starts as a negative number.</p>
<p>Example with negative integers, <img src="https://latex.codecogs.com/png.latex?%5Cgcd(-48,%2018)">: <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cgcd(-48,%2018)%20&amp;=%20%5Cgcd(18,%20-48%20%5Cpmod%7B18%7D)%20=%20%5Cgcd(18,%2012),%20%5C%5C%0A%5Cgcd(18,%2012)%20&amp;=%20%5Cgcd(12,%2018%20%5Cpmod%7B12%7D)%20=%20%5Cgcd(12,%206),%20%5C%5C%0A%5Cgcd(12,%206)%20&amp;=%20%5Cgcd(6,%2012%20%5Cpmod%7B6%7D)%20=%20%5Cgcd(6,%200)%20=%206.%0A%5Cend%7Baligned%7D%0A"></p>
<p>The sign of the integers does not affect the result, as <img src="https://latex.codecogs.com/png.latex?%5Cgcd(-a,%20b)%20=%20%5Cgcd(a,%20b)">.</p>
<p>The GCD is not only useful for determining divisibility but also plays a key role in finding linear combinations of integers. This is formalized in Bézout’s Identity:</p>
<blockquote class="blockquote">
<p><strong>Theorem (<em>Bézout’s Identity</em>)</strong>: For any integers <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b">, there exist integers <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> such that: <img src="https://latex.codecogs.com/png.latex?%0A%5Cgcd(a,%20b)%20=%20ax%20+%20by.%0A"> The integers <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> are called Bézout coefficients.</p>
</blockquote>
<p>These coefficients are not unique; for any integer <img src="https://latex.codecogs.com/png.latex?k">, another pair <img src="https://latex.codecogs.com/png.latex?(x',%20y')"> can be generated as: <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Ax'%20&amp;=%20x%20+%20k%20%5Ccdot%20%5Cfrac%7Bb%7D%7B%5Cgcd(a,%20b)%7D,%20%5C%5C%0Ay'%20&amp;=%20y%20-%20k%20%5Ccdot%20%5Cfrac%7Ba%7D%7B%5Cgcd(a,%20b)%7D.%0A%5Cend%7Baligned%7D%0A"></p>
<p>The <strong>Extended Euclidean Algorithm</strong> builds upon the Euclidean Algorithm to compute the Bézout coefficients <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y">. It works by tracing back the remainders obtained during the GCD computation:</p>
<blockquote class="blockquote">
<p><strong>Algorithm (<em>Extended Euclidean Algorithm</em>)</strong>:</p>
<ol type="1">
<li><p>Input integers <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b">.</p></li>
<li><p>Initialize <img src="https://latex.codecogs.com/png.latex?r_0">, <img src="https://latex.codecogs.com/png.latex?r_1">, <img src="https://latex.codecogs.com/png.latex?s_0">, <img src="https://latex.codecogs.com/png.latex?s_1">, <img src="https://latex.codecogs.com/png.latex?t_0">, <img src="https://latex.codecogs.com/png.latex?t_1">, <img src="https://latex.codecogs.com/png.latex?i">:</p>
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?r_0%20=%20a">, <img src="https://latex.codecogs.com/png.latex?r_1%20=%20b"></li>
<li><img src="https://latex.codecogs.com/png.latex?s_0%20=%201">, <img src="https://latex.codecogs.com/png.latex?s_1%20=%200"></li>
<li><img src="https://latex.codecogs.com/png.latex?t_0%20=%200">, <img src="https://latex.codecogs.com/png.latex?t_1%20=%201"></li>
<li><img src="https://latex.codecogs.com/png.latex?i%20=%201">.</li>
</ol></li>
<li><p>While <img src="https://latex.codecogs.com/png.latex?r_i%20%5Cneq%200">:</p>
<ol type="1">
<li>Compute quotient <img src="https://latex.codecogs.com/png.latex?q%20=%20r_%7Bi-1%7D%20%5Cdiv%20r_i"></li>
<li><img src="https://latex.codecogs.com/png.latex?r_%7Bi+1%7D%20=%20r_%7Bi-1%7D%20-%20q%20%5Ctimes%20r_i"></li>
<li><img src="https://latex.codecogs.com/png.latex?s_%7Bi+1%7D%20=%20s_%7Bi-1%7D%20-%20q%20%5Ctimes%20s_i"></li>
<li><img src="https://latex.codecogs.com/png.latex?t_%7Bi+1%7D%20=%20t_%7Bi-1%7D%20-%20q%20%5Ctimes%20t_i"></li>
<li><img src="https://latex.codecogs.com/png.latex?i%20=%20i%20+%201">.</li>
</ol></li>
<li><p>Return <img src="https://latex.codecogs.com/png.latex?GCD">, <img src="https://latex.codecogs.com/png.latex?x">, and <img src="https://latex.codecogs.com/png.latex?y"> where <img src="https://latex.codecogs.com/png.latex?ax%20+%20by%20=%20%5Cgcd(a,b)">:</p>
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?GCD%20=%20r_%7Bi-1%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?(x,y)%20=%20(s_%7Bi-1%7D,%20t_%7Bi-1%7D)">.</li>
</ol></li>
</ol>
</blockquote>
<p>Below it is shown how the Extended Euclidean Algorithm works step by step with <img src="https://latex.codecogs.com/png.latex?a%20=%2048"> and <img src="https://latex.codecogs.com/png.latex?b%20=%2018">:</p>
<ol type="1">
<li><p>Initialize:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?r_0%20=%2048">, <img src="https://latex.codecogs.com/png.latex?r_1%20=%2018"></li>
<li><img src="https://latex.codecogs.com/png.latex?s_0%20=%201">, <img src="https://latex.codecogs.com/png.latex?s_1%20=%200"></li>
<li><img src="https://latex.codecogs.com/png.latex?t_0%20=%200">, <img src="https://latex.codecogs.com/png.latex?t_1%20=%201"></li>
<li><img src="https://latex.codecogs.com/png.latex?i%20=%201">.</li>
</ul></li>
<li><p>First iteration (<img src="https://latex.codecogs.com/png.latex?i%20=%201">):</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?q%20=%20r_0%20%5Cdiv%20r_1%20=%2048%20%5Cdiv%2018%20=%202"> (quotient)</li>
<li><img src="https://latex.codecogs.com/png.latex?r_2%20=%20r_0%20-%20q%20%5Ctimes%20r_1%20=%2048%20-%202%20%5Ctimes%2018%20=%2012"></li>
<li><img src="https://latex.codecogs.com/png.latex?s_2%20=%20s_0%20-%20q%20%5Ctimes%20s_1%20=%201%20-%202%20%5Ctimes%200%20=%201"></li>
<li><img src="https://latex.codecogs.com/png.latex?t_2%20=%20t_0%20-%20q%20%5Ctimes%20t_1%20=%200%20-%202%20%5Ctimes%201%20=%20-2">.</li>
</ul></li>
<li><p>Second iteration (<img src="https://latex.codecogs.com/png.latex?i%20=%202">):</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?q%20=%20r_1%20%5Cdiv%20r_2%20=%2018%20%5Cdiv%2012%20=%201"></li>
<li><img src="https://latex.codecogs.com/png.latex?r_3%20=%20r_1%20-%20q%20%5Ctimes%20r_2%20=%2018%20-%201%20%5Ctimes%2012%20=%206"></li>
<li><img src="https://latex.codecogs.com/png.latex?s_3%20=%20s_1%20-%20q%20%5Ctimes%20s_2%20=%200%20-%201%20%5Ctimes%201%20=%20-1"></li>
<li><img src="https://latex.codecogs.com/png.latex?t_3%20=%20t_1%20-%20q%20%5Ctimes%20t_2%20=%201%20-%201%20%5Ctimes%20(-2)%20=%203">.</li>
</ul></li>
<li><p>Third iteration (<img src="https://latex.codecogs.com/png.latex?i%20=%203">):</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?q%20=%20r_2%20%5Cdiv%20r_3%20=%2012%20%5Cdiv%206%20=%202"></li>
<li><img src="https://latex.codecogs.com/png.latex?r_4%20=%20r_2%20-%20q%20%5Ctimes%20r_3%20=%2012%20-%202%20%5Ctimes%206%20=%200"></li>
<li><img src="https://latex.codecogs.com/png.latex?s_4%20=%20s_2%20-%20q%20%5Ctimes%20s_3%20=%201%20-%202%20%5Ctimes%20(-1)%20=%203"></li>
<li><img src="https://latex.codecogs.com/png.latex?t_4%20=%20t_2%20-%20q%20%5Ctimes%20t_3%20=%20-2%20-%202%20%5Ctimes%203%20=%20-8">.</li>
</ul></li>
<li><p>Since <img src="https://latex.codecogs.com/png.latex?r_4%20=%200">, we stop and return:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?GCD%20=%20r_3%20=%206"></li>
<li><img src="https://latex.codecogs.com/png.latex?x%20=%20s_3%20=%20-1"></li>
<li><img src="https://latex.codecogs.com/png.latex?y%20=%20t_3%20=%203">.</li>
</ul></li>
</ol>
<p>Therefore:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cgcd(48,18)%20=%206">.</li>
<li>The coefficients are <img src="https://latex.codecogs.com/png.latex?x%20=%20-1"> and <img src="https://latex.codecogs.com/png.latex?y%20=%203">.</li>
<li>We can verify: <img src="https://latex.codecogs.com/png.latex?48%20%5Ctimes%20(-1)%20+%2018%20%5Ctimes%203%20=%20-48%20+%2054%20=%206">.</li>
</ul>
<p>So the equation <img src="https://latex.codecogs.com/png.latex?ax%20+%20by%20=%20%5Cgcd(a,b)"> is satisfied: <img src="https://latex.codecogs.com/png.latex?48(-1)%20+%2018(3)%20=%206">.</p>
<p>This identity is critical in RSA for computing modular inverses, which rely on finding such coefficients.</p>
</section>
</section>
<section id="modular-arithmetic" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="modular-arithmetic">Modular arithmetic</h3>
<p>Modular arithmetic is the backbone of cryptographic systems like RSA, enabling secure and efficient encryption, decryption, and key exchange. By confining computations to equivalence classes, modular arithmetic limits operations to a manageable finite set of remainders <img src="https://latex.codecogs.com/png.latex?%5C%7B0,%201,%20%5Cdots,%20n-1%5C%7D">. This reduction simplifies calculations with large numbers, allowing consistent and efficient arithmetic even when working with very large exponents or products, as is typical in cryptography. For example, modular exponentiation uses this confinement to ensure that intermediate computations remain bounded and practical, avoiding the inefficiencies of dealing with massive numbers directly.</p>
<section id="congruence" class="level4">
<h4 class="anchored" data-anchor-id="congruence">Congruence</h4>
<blockquote class="blockquote">
<p><strong>Definition (<em>Congruence</em>)</strong>: For integers <img src="https://latex.codecogs.com/png.latex?a">, <img src="https://latex.codecogs.com/png.latex?b">, and <img src="https://latex.codecogs.com/png.latex?n"> with <img src="https://latex.codecogs.com/png.latex?n%20%3E%200">, <img src="https://latex.codecogs.com/png.latex?a"> is congruent to <img src="https://latex.codecogs.com/png.latex?b"> modulo <img src="https://latex.codecogs.com/png.latex?n">, written <img src="https://latex.codecogs.com/png.latex?a%20%5Cequiv%20b%20%5Cpmod%7Bn%7D">, if <img src="https://latex.codecogs.com/png.latex?n%20%5Cmid%20(a%20-%20b)">.</p>
</blockquote>
<p>For example, <img src="https://latex.codecogs.com/png.latex?23%20%5Cequiv%208%20%5Cpmod%7B5%7D"> because <img src="https://latex.codecogs.com/png.latex?5%20%5Cmid%20(23%20-%208)">.</p>
<p>This congruence partitions integers into <strong>congruence classes</strong> modulo <img src="https://latex.codecogs.com/png.latex?n">, grouping numbers that share the same remainder when divided by <img src="https://latex.codecogs.com/png.latex?n">. These equivalence classes reduce infinitely many integers to a manageable finite set.</p>
<blockquote class="blockquote">
<p><strong>Theorem (<em>Equivalence relation</em>)</strong>: Congruence modulo <img src="https://latex.codecogs.com/png.latex?n"> satisfies the three fundamental properties of an equivalence relation:</p>
<ol type="1">
<li><p>Reflexivity: <img src="https://latex.codecogs.com/png.latex?a%20%5Cequiv%20a%20%5Cpmod%7Bn%7D">, since <img src="https://latex.codecogs.com/png.latex?n%20%5Cmid%20(a%20-%20a)%20=%200">.</p></li>
<li><p>Symmetry: If <img src="https://latex.codecogs.com/png.latex?a%20%5Cequiv%20b%20%5Cpmod%7Bn%7D">, then <img src="https://latex.codecogs.com/png.latex?b%20%5Cequiv%20a%20%5Cpmod%7Bn%7D">, because <img src="https://latex.codecogs.com/png.latex?n%20%5Cmid%20(a%20-%20b)"> implies <img src="https://latex.codecogs.com/png.latex?n%20%5Cmid%20(b%20-%20a)">.</p></li>
<li><p>Transitivity: If <img src="https://latex.codecogs.com/png.latex?a%20%5Cequiv%20b%20%5Cpmod%7Bn%7D"> and <img src="https://latex.codecogs.com/png.latex?b%20%5Cequiv%20c%20%5Cpmod%7Bn%7D">, then <img src="https://latex.codecogs.com/png.latex?a%20%5Cequiv%20c%20%5Cpmod%7Bn%7D">, as <img src="https://latex.codecogs.com/png.latex?n%20%5Cmid%20(a%20-%20b)"> and <img src="https://latex.codecogs.com/png.latex?n%20%5Cmid%20(b%20-%20c)"> imply <img src="https://latex.codecogs.com/png.latex?n%20%5Cmid%20(a%20-%20c)">.</p></li>
</ol>
</blockquote>
<p>These properties ensure that modular arithmetic forms a consistent framework for mathematical operations.</p>
<blockquote class="blockquote">
<p><strong>Theorem (<em>Congruence and remainders</em>)</strong>: From the Division Algorithm, we have <img src="https://latex.codecogs.com/png.latex?r%20=%20a%20%5Cpmod%7Bb%7D">, meaning <img src="https://latex.codecogs.com/png.latex?a%20%5Cequiv%20b%20%5Cpmod%7Bn%7D"> if and only if <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b"> share the same remainder when divided by <img src="https://latex.codecogs.com/png.latex?n">. Moreover, both <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b"> are congruent to that common remainder: <img src="https://latex.codecogs.com/png.latex?%0Aa%20%5Cequiv%20b%20%5Cpmod%7Bn%7D%20%5Cimplies%20a%20%5Cpmod%7Bn%7D%20=%20b%20%5Cpmod%7Bn%7D.%0A"></p>
</blockquote>
<p>This relationship provides a computational foundation for modular arithmetic.</p>
<p>Every integer modulo <img src="https://latex.codecogs.com/png.latex?n"> can be uniquely represented by a remainder within a specific range. This principle is foundational to modular arithmetic, as it ensures that each congruence class has a single canonical representative. The following theorem formalizes this idea:</p>
<blockquote class="blockquote">
<p><strong>Theorem (<em>Unique representation</em>)</strong>: For <img src="https://latex.codecogs.com/png.latex?n%20%5Cgeq%202">, every integer is congruent modulo <img src="https://latex.codecogs.com/png.latex?n"> to exactly one element of the set <img src="https://latex.codecogs.com/png.latex?%5C%7B0,%201,%202,%20%5Cdots,%20n-1%5C%7D">.</p>
</blockquote>
<p>The notion of congruence naturally leads to the concept of a congruence class, which groups integers that share the same remainder when divided by <img src="https://latex.codecogs.com/png.latex?n">. These classes partition the set of integers into distinct subsets, each representing one equivalence class under congruence modulo <img src="https://latex.codecogs.com/png.latex?n">.</p>
<blockquote class="blockquote">
<p><strong>Definition (<em>Congruence class</em>)</strong>: A congruence class modulo <img src="https://latex.codecogs.com/png.latex?n">, denoted <img src="https://latex.codecogs.com/png.latex?%5Ba%5D_n">, is the set of integers equivalent to <img src="https://latex.codecogs.com/png.latex?a%20%5Cpmod%7Bn%7D">: <img src="https://latex.codecogs.com/png.latex?%0A%5Ba%5D_n%20=%20%5C%7Ba%20+%20kn%20%5Cmid%20k%20%5Cin%20%5Cmathbb%7BZ%7D%5C%7D.%0A"></p>
</blockquote>
<p>These classes partition <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D"> into <img src="https://latex.codecogs.com/png.latex?n"> disjoint subsets, which together form the set <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_n">, the set of equivalence classes modulo <img src="https://latex.codecogs.com/png.latex?n">. Each subset corresponds to a unique remainder in <img src="https://latex.codecogs.com/png.latex?%5C%7B0,%201,%20%5Cdots,%20n-1%5C%7D">.</p>
<p>For example, modulo <img src="https://latex.codecogs.com/png.latex?3">, the congruence classes are:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5B0%5D_3%20=%20%5C%7B...,%20-3,%200,%203,%206,%20...%5C%7D">,</li>
<li><img src="https://latex.codecogs.com/png.latex?%5B1%5D_3%20=%20%5C%7B...,%20-2,%201,%204,%207,%20...%5C%7D">,</li>
<li><img src="https://latex.codecogs.com/png.latex?%5B2%5D_3%20=%20%5C%7B...,%20-1,%202,%205,%208,%20...%5C%7D">.</li>
</ul>
<p>Thus, <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_3%20=%20%5C%7B%5B0%5D_3,%20%5B1%5D_3,%20%5B2%5D_3%5C%7D">, representing all possible congruence classes modulo <img src="https://latex.codecogs.com/png.latex?3">.</p>
<p>The concept of a congruence class provides a structured way to organize integers under modulo <img src="https://latex.codecogs.com/png.latex?n">. Each congruence class contains infinitely many integers that share the same modular properties. To simplify working with these classes, it is common to choose specific representatives for computations. The following definitions introduce the two most commonly used representatives:</p>
<blockquote class="blockquote">
<p><strong>Definition (<em>Least positive representative</em>)</strong>: The least positive representative of a congruence class modulo <img src="https://latex.codecogs.com/png.latex?n"> is the smallest nonnegative integer in the class, given by <img src="https://latex.codecogs.com/png.latex?a%20%5Cpmod%7Bn%7D">.</p>
</blockquote>
<p>For example, consider modulo <img src="https://latex.codecogs.com/png.latex?5">:</p>
<ul>
<li>For <img src="https://latex.codecogs.com/png.latex?%5B7%5D_5">, the least positive representative is <img src="https://latex.codecogs.com/png.latex?7%20%5Cpmod%7B5%7D%20=%202">.</li>
<li>For <img src="https://latex.codecogs.com/png.latex?%5B-11%5D_5">, the least positive representative is <img src="https://latex.codecogs.com/png.latex?-11%20%5Cpmod%7B5%7D%20=%204">.</li>
</ul>
<blockquote class="blockquote">
<p><strong>Definition (<em>Least magnitude representative</em>)</strong>: The least magnitude representative of a congruence class modulo <img src="https://latex.codecogs.com/png.latex?n"> minimizes <img src="https://latex.codecogs.com/png.latex?%7Cr%7C">, where <img src="https://latex.codecogs.com/png.latex?-n/2%20%3C%20r%20%5Cleq%20n/2">.</p>
</blockquote>
<p>Again, for modulo <img src="https://latex.codecogs.com/png.latex?5">:</p>
<ul>
<li>For <img src="https://latex.codecogs.com/png.latex?%5B7%5D_5">, the least magnitude representative is <img src="https://latex.codecogs.com/png.latex?2">, as <img src="https://latex.codecogs.com/png.latex?-5/2%20%3C%202%20%5Cleq%205/2">.</li>
<li>For <img src="https://latex.codecogs.com/png.latex?%5B-11%5D_5">, the least magnitude representative is <img src="https://latex.codecogs.com/png.latex?-1">, as <img src="https://latex.codecogs.com/png.latex?-5/2%20%3C%20-1%20%5Cleq%205/2">.</li>
</ul>
<p>These representatives are key to simplifying modular arithmetic calculations and ensuring consistent results.</p>
</section>
<section id="addition-and-multiplication" class="level4">
<h4 class="anchored" data-anchor-id="addition-and-multiplication">Addition and multiplication</h4>
<p>In modular arithmetic, fundamental operations like addition and multiplication follow specific rules that maintain consistency within the modular system. These rules are formalized in the following theorem:</p>
<blockquote class="blockquote">
<p><strong>Theorem (Modular addition and multiplication)</strong>: For integers <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b">: <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A(a%20+%20b)%20%5Cpmod%7Bn%7D%20&amp;=%20((a%20%5Cpmod%7Bn%7D)%20+%20(b%20%5Cpmod%7Bn%7D))%20%5Cpmod%7Bn%7D,%20%5C%5C%0A(a%20%5Ccdot%20b)%20%5Cpmod%7Bn%7D%20&amp;=%20((a%20%5Cpmod%7Bn%7D)%20%5Ccdot%20(b%20%5Cpmod%7Bn%7D))%20%5Cpmod%7Bn%7D.%0A%5Cend%7Baligned%7D%0A"></p>
</blockquote>
<p>When comparing <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D"> (integers) and <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_n"> (integers modulo n), we find both similarities and key differences in their algebraic properties:</p>
<ol type="1">
<li><p><strong>Similarities</strong>:</p>
<ul>
<li>Both have well-defined addition and multiplication operations.</li>
<li>Zero has no multiplicative inverse in both systems.</li>
<li><img src="https://latex.codecogs.com/png.latex?1"> (and <img src="https://latex.codecogs.com/png.latex?-1"> in <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D"> or its equivalent <img src="https://latex.codecogs.com/png.latex?n-1"> in <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_n">) always has a multiplicative inverse.</li>
</ul></li>
<li><p><strong>Differences</strong>:</p>
<ul>
<li>In <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D">, only <img src="https://latex.codecogs.com/png.latex?%C2%B11"> have multiplicative inverses.</li>
<li>In <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_n">, any element <img src="https://latex.codecogs.com/png.latex?a"> where <img src="https://latex.codecogs.com/png.latex?%5Cgcd(a,n)=1"> has a multiplicative inverse.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D"> is infinite, while <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_n"> has exactly <img src="https://latex.codecogs.com/png.latex?n"> elements.</li>
<li>All operations in <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_n"> are bounded by <img src="https://latex.codecogs.com/png.latex?n">, while operations in <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D"> can grow indefinitely.</li>
</ul></li>
</ol>
<p>This distinction in multiplicative inverses makes <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_n"> particularly useful in applications like cryptography, where invertible elements are crucial for encryption and decryption operations.</p>
</section>
<section id="modular-exponentiation" class="level4">
<h4 class="anchored" data-anchor-id="modular-exponentiation">Modular exponentiation</h4>
<p>Modular exponentiation is a key operation in cryptography, enabling efficient computation of powers modulo a number. This operation is central to cryptographic systems like RSA, where large exponentiations are common.</p>
<blockquote class="blockquote">
<p><strong>Definition (<em>Modular exponentiation</em>)</strong>: Modular exponentiation computes <img src="https://latex.codecogs.com/png.latex?a%5Eb%20%5Cpmod%7Bn%7D">, where <img src="https://latex.codecogs.com/png.latex?a"> is the base, <img src="https://latex.codecogs.com/png.latex?b"> is the exponent, and <img src="https://latex.codecogs.com/png.latex?n"> is the modulus.</p>
</blockquote>
<p>Direct computation is impractical for large <img src="https://latex.codecogs.com/png.latex?b">, so efficient algorithms like <strong>square-and-multiply</strong> are used:</p>
<blockquote class="blockquote">
<p><strong>Algorithm (<em>Right-to-left square-and-multiply algorithm</em>)</strong>:</p>
<ol type="1">
<li><p>Input integers <img src="https://latex.codecogs.com/png.latex?a">, <img src="https://latex.codecogs.com/png.latex?b">, and <img src="https://latex.codecogs.com/png.latex?n"> where <img src="https://latex.codecogs.com/png.latex?a"> is the base, <img src="https://latex.codecogs.com/png.latex?b"> is the exponent, and <img src="https://latex.codecogs.com/png.latex?n"> is the modulus.</p></li>
<li><p>Convert <img src="https://latex.codecogs.com/png.latex?b"> to its binary representation:</p></li>
<li><p>Input integer <img src="https://latex.codecogs.com/png.latex?b">.</p></li>
<li><p>Initialize <img src="https://latex.codecogs.com/png.latex?binary%5C_representation%20=%20%5B%5D">.</p></li>
<li><p>While <img src="https://latex.codecogs.com/png.latex?b%20%3E%200">: 1. Append <img src="https://latex.codecogs.com/png.latex?b%20%5C%5Cpmod%7B2%7D"> to <img src="https://latex.codecogs.com/png.latex?binary%5C_representation"> 2. Update <img src="https://latex.codecogs.com/png.latex?b%20=%20b%20//%202">.</p></li>
<li><p>Initialize <img src="https://latex.codecogs.com/png.latex?reversed%5C_representation%20=%20%5B%5D">.</p></li>
<li><p>For each bit in <img src="https://latex.codecogs.com/png.latex?binary%5C_representation">, starting from the last element, append the bit to <img src="https://latex.codecogs.com/png.latex?reversed%5C_representation">.</p></li>
<li><p>Initialize <img src="https://latex.codecogs.com/png.latex?result%20=%201">.</p></li>
<li><p>For each bit <img src="https://latex.codecogs.com/png.latex?m"> in <img src="https://latex.codecogs.com/png.latex?reversed%5C_representation">:</p>
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?result%20=%20(result%20%5Ccdot%20result)%20%5Cpmod%7Bn%7D">.</li>
<li>If <img src="https://latex.codecogs.com/png.latex?m%20==%201">, then <img src="https://latex.codecogs.com/png.latex?result%20=%20(result%20%5Ccdot%20a)%20%5Cpmod%7Bn%7D">.</li>
</ol></li>
<li><p>Return <img src="https://latex.codecogs.com/png.latex?result">, which is <img src="https://latex.codecogs.com/png.latex?a%5Eb%20%5Cpmod%7Bn%7D">.</p></li>
</ol>
</blockquote>
<p>The alternative lef-to-right approach is obtained omitting steps 2.4 and 2.5, then computing step 4 on <img src="https://latex.codecogs.com/png.latex?binary%5C_representation">.</p>
<p>Let’s compute <img src="https://latex.codecogs.com/png.latex?3%5E%7B13%7D%20%5Cpmod%7B7%7D">:</p>
<ol type="1">
<li><p>Input integers <img src="https://latex.codecogs.com/png.latex?a%20=%203">, <img src="https://latex.codecogs.com/png.latex?b%20=%2013">, and <img src="https://latex.codecogs.com/png.latex?n%20=%207">.</p></li>
<li><p>Initialize <img src="https://latex.codecogs.com/png.latex?binary%5C_representation%20=%20%5B%5D">.</p></li>
<li><p>While <img src="https://latex.codecogs.com/png.latex?b%20%3E%200">:</p>
<ol type="1">
<li>Append <img src="https://latex.codecogs.com/png.latex?13%20%5Cpmod%7B2%7D%20=%201">, <img src="https://latex.codecogs.com/png.latex?binary%5C_representation%20=%20%5B1%5D">.</li>
<li>Update <img src="https://latex.codecogs.com/png.latex?b%20=%2013%20//%202%20=%206">.</li>
<li>Append <img src="https://latex.codecogs.com/png.latex?6%20%5Cpmod%7B2%7D%20=%200">, <img src="https://latex.codecogs.com/png.latex?binary%5C_representation%20=%20%5B1,%200%5D">.</li>
<li>Update <img src="https://latex.codecogs.com/png.latex?b%20=%206%20//%202%20=%203">.</li>
<li>Append <img src="https://latex.codecogs.com/png.latex?3%20%5Cpmod%7B2%7D%20=%201">, <img src="https://latex.codecogs.com/png.latex?binary%5C_representation%20=%20%5B1,%200,%201%5D">.</li>
<li>Update <img src="https://latex.codecogs.com/png.latex?b%20=%203%20//%202%20=%201">.</li>
<li>Append <img src="https://latex.codecogs.com/png.latex?1%20%5Cpmod%7B2%7D%20=%201">, <img src="https://latex.codecogs.com/png.latex?binary%5C_representation%20=%20%5B1,%200,%201,%201%5D">.</li>
<li>Update <img src="https://latex.codecogs.com/png.latex?b%20=%201%20//%202%20=%200">.</li>
</ol></li>
<li><p><img src="https://latex.codecogs.com/png.latex?reversed%5C_representation%20=%20%5B1,%201,%200,%201%5D">.</p></li>
<li><p>Initialize <img src="https://latex.codecogs.com/png.latex?result%20=%201">.</p></li>
<li><p>First iteration (<img src="https://latex.codecogs.com/png.latex?m%20=%201">):</p>
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?result%20=%20(result%20%5Ccdot%20result)%20%5Cpmod%7B7%7D%20=%20(1%20%5Ccdot%201)%20%5Cpmod%7B7%7D%20=%201">.</li>
<li><img src="https://latex.codecogs.com/png.latex?result%20=%20(result%20%5Ccdot%20a)%20%5Cpmod%7B7%7D%20=%20(1%20%5Ccdot%203)%20%5Cpmod%7B7%7D%20=%203">.</li>
</ol></li>
<li><p>Second iteration (<img src="https://latex.codecogs.com/png.latex?m%20=%201">):</p>
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?result%20=%20(result%20%5Ccdot%20result)%20%5Cpmod%7B7%7D%20=%20(3%20%5Ccdot%203)%20%5Cpmod%7B7%7D%20=%202">.</li>
<li><img src="https://latex.codecogs.com/png.latex?result%20=%20(result%20%5Ccdot%20a)%20%5Cpmod%7B7%7D%20=%20(2%20%5Ccdot%203)%20%5Cpmod%7B7%7D%20=%206">.</li>
</ol></li>
<li><p>Third iteration (<img src="https://latex.codecogs.com/png.latex?m%20=%200">):</p>
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?result%20=%20(result%20%5Ccdot%20result)%20%5Cpmod%7B7%7D%20=%20(6%20%5Ccdot%206)%20%5Cpmod%7B7%7D%20=%201">.</li>
<li>No multiplication since <img src="https://latex.codecogs.com/png.latex?m%20=%200">.</li>
</ol></li>
<li><p>Fourth iteration (<img src="https://latex.codecogs.com/png.latex?m%20=%201">):</p>
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?result%20=%20(result%20%5Ccdot%20result)%20%5Cpmod%7B7%7D%20=%20(1%20%5Ccdot%201)%20%5Cpmod%7B7%7D%20=%201">.</li>
<li><img src="https://latex.codecogs.com/png.latex?result%20=%20(result%20%5Ccdot%20a)%20%5Cpmod%7B7%7D%20=%20(1%20%5Ccdot%203)%20%5Cpmod%7B7%7D%20=%203">.</li>
</ol></li>
</ol>
<p>We get <img src="https://latex.codecogs.com/png.latex?result%20=%203">, so <img src="https://latex.codecogs.com/png.latex?3%5E%7B13%7D%20%5Cpmod%7B7%7D%20=%203">.</p>
</section>
<section id="modular-inverse" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="modular-inverse">Modular inverse</h4>
<p>The modular inverse is a fundamental concept in number theory and cryptography. It is essential for solving modular equations, whose solution is determined within a given modulus <img src="https://latex.codecogs.com/png.latex?n">, meaning the values satisfy the equation in terms of congruence relations.</p>
<blockquote class="blockquote">
<p><strong>Definition (<em>Modular inverse</em>)</strong>: The modular inverse of an integer <img src="https://latex.codecogs.com/png.latex?a"> modulo <img src="https://latex.codecogs.com/png.latex?n">, denoted as <img src="https://latex.codecogs.com/png.latex?a%5E%7B-1%7D%20%5Cpmod%7Bn%7D">, is an integer <img src="https://latex.codecogs.com/png.latex?x"> such that: <img src="https://latex.codecogs.com/png.latex?%0Aa%5E%7B-1%7D%20%5Cpmod%7Bn%7D%20=%20a%20%5Ccdot%20x%20%5Cequiv%201%20%5Cpmod%7Bn%7D.%0A"></p>
</blockquote>
<p>The modular inverse relies on several fundamental principles in number theory, including conditions for existence, efficient computation methods, and connections to primality tests. Below we will outline these key theorems, algorithms, and applications.</p>
<blockquote class="blockquote">
<p><strong>Theorem (<em>Existence of modular inverse</em>)</strong>: An integer <img src="https://latex.codecogs.com/png.latex?a"> has a modular inverse modulo <img src="https://latex.codecogs.com/png.latex?n"> if and only if <img src="https://latex.codecogs.com/png.latex?%5Cgcd(a,%20n)%20=%201">. If the modular inverse exists, it is unique modulo <img src="https://latex.codecogs.com/png.latex?n">.</p>
</blockquote>
<p>A proof sketch can be given leveraging the Bézout’s Identity, because if <img src="https://latex.codecogs.com/png.latex?%5Cgcd(a,%20n)%20=%201">, then there exist integers <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> such that: <img src="https://latex.codecogs.com/png.latex?%0Aax%20+%20ny%20=%201.%0A"></p>
<p>Taking this equation modulo <img src="https://latex.codecogs.com/png.latex?n">, we get: <img src="https://latex.codecogs.com/png.latex?%0Aax%20%5Cequiv%201%20%5Cpmod%7Bn%7D%0A"></p>
<p>proving that <img src="https://latex.codecogs.com/png.latex?x"> is the modular inverse of <img src="https://latex.codecogs.com/png.latex?a"> modulo <img src="https://latex.codecogs.com/png.latex?n">. The uniqueness follows from the properties of congruence classes.</p>
<p>The modular inverse can be computed using the Extended Euclidean Algorithm. This algorithm builds on the general method of finding GCD while also determining the coefficients that satisfy Bézout’s Identity. Here, it is specialized to calculate the modular inverse by assuming <img src="https://latex.codecogs.com/png.latex?%5Cgcd(a,%20n)%20=%201">. The steps are given in the following algorithm:</p>
<blockquote class="blockquote">
<p><strong>Algorithm (<em>Modular inverse via Extended Euclidean Algorithm</em>)</strong>:</p>
<ol type="1">
<li><p>Input integers <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?n">, where <img src="https://latex.codecogs.com/png.latex?%5Cgcd(a,%20n)%20=%201">.</p></li>
<li><p>Initialize:</p>
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?r_0%20=%20n">, <img src="https://latex.codecogs.com/png.latex?r_1%20=%20a"> (remainder terms)</li>
<li>Coefficients for <img src="https://latex.codecogs.com/png.latex?n">: <img src="https://latex.codecogs.com/png.latex?s_0%20=%201">, <img src="https://latex.codecogs.com/png.latex?s_1%20=%200"> (coefficients for <img src="https://latex.codecogs.com/png.latex?n">)</li>
<li>Coefficients for <img src="https://latex.codecogs.com/png.latex?a">: <img src="https://latex.codecogs.com/png.latex?t_0%20=%200">, <img src="https://latex.codecogs.com/png.latex?t_1%20=%201"> (coefficients for <img src="https://latex.codecogs.com/png.latex?a">).</li>
</ol></li>
<li><p>While <img src="https://latex.codecogs.com/png.latex?r_1%20%5Cneq%200">:</p>
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?q%20=%20%5Clfloor%20r_0%20/%20r_1%20%5Crfloor"> (quotient)</li>
<li><img src="https://latex.codecogs.com/png.latex?r_2%20=%20r_0%20-%20q%20%5Ccdot%20r_1"></li>
<li><img src="https://latex.codecogs.com/png.latex?s_2%20=%20s_0%20-%20q%20%5Ccdot%20s_1"></li>
<li><img src="https://latex.codecogs.com/png.latex?t_2%20=%20t_0%20-%20q%20%5Ccdot%20t_1"></li>
<li><img src="https://latex.codecogs.com/png.latex?r_0%20=%20r_1">, <img src="https://latex.codecogs.com/png.latex?r_1%20=%20r_2">, <img src="https://latex.codecogs.com/png.latex?s_0%20=%20s_1">, <img src="https://latex.codecogs.com/png.latex?s_1%20=%20s_2">, <img src="https://latex.codecogs.com/png.latex?t_0%20=%20t_1">, <img src="https://latex.codecogs.com/png.latex?t_1%20=%20t_2">.</li>
</ol></li>
<li><p>Return <img src="https://latex.codecogs.com/png.latex?a%5E%7B-1%7D%20%5Cpmod%7Bn%7D">: <img src="https://latex.codecogs.com/png.latex?a%5E%7B-1%7D%20%5Cpmod%7Bn%7D%20=%20t_0%20%5Cpmod%7Bn%7D">.</p></li>
</ol>
</blockquote>
<p>Or defining a function EEA for the Extended Euclidean Algorithm as <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BEEA%7D:%20(a,%20b)%20%5Cto%20(%5Cgcd(a,%20b),%20x,%20y)">, where <img src="https://latex.codecogs.com/png.latex?x"> is the Bézout coefficient for <img src="https://latex.codecogs.com/png.latex?a">:</p>
<blockquote class="blockquote">
<p><strong>Algorithm (<em>Modular inverse via Extended Euclidean Algorithm</em>)</strong>:</p>
<ol type="1">
<li><p>Input integers <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?n">, where <img src="https://latex.codecogs.com/png.latex?%5Cgcd(a,%20n)%20=%201">.</p></li>
<li><p>Call <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BEEA%7D:%20(a,%20n)%20%5Cto%20(%5Cgcd(a,%20n),%20x,%20y)">.</p></li>
<li><p>If <img src="https://latex.codecogs.com/png.latex?%5Cgcd(a,%20n)%20%5Cneq%201"> then return “No modular inverse exists”.</p></li>
<li><p>Return <img src="https://latex.codecogs.com/png.latex?a%5E%7B-1%7D%20%5Cpmod%7Bn%7D">: <img src="https://latex.codecogs.com/png.latex?a%5E%7B-1%7D%20%5Cpmod%7Bn%7D%20=%20x%20%5Cpmod%7Bn%7D">.</p></li>
</ol>
</blockquote>
<p>Fermat’s Little Theorem enables efficient computation of modular inverses and serves as a basis for primality testing:</p>
<blockquote class="blockquote">
<p><strong>Theorem (<em>Fermat’s Little Theorem</em>)</strong>: If <img src="https://latex.codecogs.com/png.latex?p"> is a prime number and <img src="https://latex.codecogs.com/png.latex?a"> is an integer such that <img src="https://latex.codecogs.com/png.latex?p%20%5Cnmid%20a">, then: <img src="https://latex.codecogs.com/png.latex?%0Aa%5E%7Bp-1%7D%20%5Cequiv%201%20%5Cpmod%7Bp%7D.%0A"></p>
</blockquote>
<p>To find the modular inverse, we rewrite <img src="https://latex.codecogs.com/png.latex?a%5E%7Bp-1%7D"> as: <img src="https://latex.codecogs.com/png.latex?%0Aa%5E%7Bp-1%7D%20=%20a%20%5Ccdot%20a%5E%7Bp-2%7D%0A"></p>
<p>Substituting this into Fermat’s Little Theorem gives: <img src="https://latex.codecogs.com/png.latex?%0Aa%20%5Ccdot%20a%5E%7Bp-2%7D%20%5Cequiv%201%20%5Cpmod%7Bp%7D%0A"></p>
<p>By definition, the modular inverse <img src="https://latex.codecogs.com/png.latex?a%5E%7B-1%7D"> satisfies: <img src="https://latex.codecogs.com/png.latex?%0Aa%20%5Ccdot%20a%5E%7B-1%7D%20%5Cequiv%201%20%5Cpmod%7Bp%7D%0A"></p>
<p>Comparing this with the result above, we conclude that <img src="https://latex.codecogs.com/png.latex?a%5E%7Bp-2%7D"> must be the modular inverse of <img src="https://latex.codecogs.com/png.latex?a"> modulo <img src="https://latex.codecogs.com/png.latex?p">; <img src="https://latex.codecogs.com/png.latex?%0Aa%5E%7B-1%7D%20%5Cequiv%20a%5E%7Bp-2%7D%20%5Cpmod%7Bp%7D.%0A"></p>
<p>This theorem provides a more efficient way to compute modular inverses when <img src="https://latex.codecogs.com/png.latex?n"> is prime compared to the Extended Euclidean Algorithm.</p>
<blockquote class="blockquote">
<p><strong>Remark</strong>: <img src="https://latex.codecogs.com/png.latex?p-1"> is the smallest exponent satisfying <img src="https://latex.codecogs.com/png.latex?a%5E%7Bp-1%7D%20%5Cequiv%201%20%5Cpmod%7Bp%7D"> for prime <img src="https://latex.codecogs.com/png.latex?p">.</p>
</blockquote>
<p>By Fermat’s Little Theorem, for any integer <img src="https://latex.codecogs.com/png.latex?a"> such that <img src="https://latex.codecogs.com/png.latex?p%20%5Cnmid%20a">: <img src="https://latex.codecogs.com/png.latex?%0Aa%5E%7Bp-1%7D%20%5Cequiv%201%20%5Cpmod%7Bp%7D.%0A"></p>
<p>Assume, for contradiction, that there exists a smaller positive integer <img src="https://latex.codecogs.com/png.latex?k%20%3C%20p-1"> such that: <img src="https://latex.codecogs.com/png.latex?%0Aa%5Ek%20%5Cequiv%201%20%5Cpmod%7Bp%7D.%0A"></p>
<p>If <img src="https://latex.codecogs.com/png.latex?a%5Ek%20%5Cequiv%201%20%5Cpmod%7Bp%7D">, then we can write <img src="https://latex.codecogs.com/png.latex?p-1"> using the Division Algorithm: <img src="https://latex.codecogs.com/png.latex?%0Ap-1%20=%20q%20%5Ccdot%20k%20+%20r,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?q"> and <img src="https://latex.codecogs.com/png.latex?r"> are integers, and <img src="https://latex.codecogs.com/png.latex?0%20%5Cleq%20r%20%3C%20k">.</p>
<p>Substituting into <img src="https://latex.codecogs.com/png.latex?a%5E%7Bp-1%7D">, this simplifies to: <img src="https://latex.codecogs.com/png.latex?%0Aa%5E%7Bp-1%7D%20=%20a%5E%7Bq%20%5Ccdot%20k%20+%20r%7D%20=%20(a%5Ek)%5Eq%20%5Ccdot%20a%5Er.%0A"></p>
<p>Since <img src="https://latex.codecogs.com/png.latex?a%5Ek%20%5Cequiv%201%20%5Cpmod%7Bp%7D">, we get: <img src="https://latex.codecogs.com/png.latex?%0A(a%5Ek)%5Eq%20%5Cequiv%201%5Eq%20%5Cequiv%201%20%5Cpmod%7Bp%7D.%0A"></p>
<p>Thus: <img src="https://latex.codecogs.com/png.latex?%0Aa%5E%7Bp-1%7D%20%5Cequiv%20a%5Er%20%5Cpmod%7Bp%7D.%0A"></p>
<p>By Fermat’s Little Theorem, <img src="https://latex.codecogs.com/png.latex?a%5E%7Bp-1%7D%20%5Cequiv%201%20%5Cpmod%7Bp%7D">, so: <img src="https://latex.codecogs.com/png.latex?%0Aa%5Er%20%5Cequiv%201%20%5Cpmod%7Bp%7D.%0A"></p>
<p>However, <img src="https://latex.codecogs.com/png.latex?r%20%3C%20k">, contradicting the assumption that <img src="https://latex.codecogs.com/png.latex?k"> is the smallest positive integer such that <img src="https://latex.codecogs.com/png.latex?a%5Ek%20%5Cequiv%201%20%5Cpmod%7Bp%7D">. Hence, no such smaller <img src="https://latex.codecogs.com/png.latex?k%20%3C%20p-1"> exists, and <img src="https://latex.codecogs.com/png.latex?p-1"> must be the smallest exponent satisfying <img src="https://latex.codecogs.com/png.latex?a%5E%7Bp-1%7D%20%5Cequiv%201%20%5Cpmod%7Bp%7D">.</p>
<p>Equivalently, if <img src="https://latex.codecogs.com/png.latex?a%5E%7Bp-1%7D%20%5Cnot%5Cequiv%201%20%5Cpmod%7Bp%7D"> for some <img src="https://latex.codecogs.com/png.latex?a"> with <img src="https://latex.codecogs.com/png.latex?%5Cgcd(a,%20p)%20=%201">, then <img src="https://latex.codecogs.com/png.latex?p"> is composite. However, the converse of Fermat’s Little Theorem is not true: if <img src="https://latex.codecogs.com/png.latex?a%5E%7Bn-1%7D%20%5Cequiv%201%20%5Cpmod%7Bn%7D"> for all <img src="https://latex.codecogs.com/png.latex?a"> with <img src="https://latex.codecogs.com/png.latex?%5Cgcd(a,%20n)%20=%201">, then <img src="https://latex.codecogs.com/png.latex?n"> is not necessarily a prime. In other words, Fermat’s Little Theorem is effective for disproving primality (when the congruence fails), it is insufficient for proving it.</p>
<p>Numbers that satisfy Fermat’s Little Theorem are defined as <strong>Carmichael numbers</strong>:</p>
<ol type="1">
<li>561: <img src="https://latex.codecogs.com/png.latex?561%20=%203%20%5Ccdot%2011%20%5Ccdot%2017">.</li>
<li>1105: <img src="https://latex.codecogs.com/png.latex?1105%20=%205%20%5Ccdot%2013%20%5Ccdot%2017">.</li>
<li>1729: <img src="https://latex.codecogs.com/png.latex?1729%20=%207%20%5Ccdot%2013%20%5Ccdot%2019">.</li>
<li>2465: <img src="https://latex.codecogs.com/png.latex?2465%20=%205%20%5Ccdot%2017%20%5Ccdot%2029">.</li>
<li>2821: <img src="https://latex.codecogs.com/png.latex?2821%20=%207%20%5Ccdot%2013%20%5Ccdot%2031">.</li>
</ol>
<p>In 1994, it was proven by Alford, Granville, and Pomerance<sup>24</sup> that there are infinitely many Carmichael numbers. However, they become increasingly sparse as numbers grow larger.</p>
<div class="no-row-height column-margin column-container"><div id="fn24"><p><sup>24</sup>&nbsp;Alford, W. R., Granville, A., &amp; Pomerance, C. (1994). <strong>There are infinitely many Carmichael numbers</strong>. <em>Annals of Mathematics</em>, 139(3), 703–722. <a href="https://doi.org/10.2307/2118576">DOI</a></p></div></div><p>Defining the function <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BSquare-and-multiply%7D:%20(a,%20b,%20n)%20%5Cto%20a%5Eb%20%5Cpmod%7Bn%7D">, we can apply the following test for primality to <img src="https://latex.codecogs.com/png.latex?n">, choosing as many <img src="https://latex.codecogs.com/png.latex?a"> as possible, where <img src="https://latex.codecogs.com/png.latex?1%20%3C%20a%20%3C%20n">:</p>
<blockquote class="blockquote">
<p><strong>Algorithm (<em>Fermat primality test</em>)</strong>:</p>
<ol type="1">
<li><p>Input integers <img src="https://latex.codecogs.com/png.latex?n"> and <img src="https://latex.codecogs.com/png.latex?a">.</p></li>
<li><p>Call <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BSquare-and-multiply%7D:%20(a,%20n-1,%20n)%20%5Cto%20a%5E%7Bn-1%7D%20%5Cpmod%7Bn%7D">.</p></li>
<li><p>If <img src="https://latex.codecogs.com/png.latex?a%5E%7Bn-1%7D%20%5Cnot%5Cequiv%201%20%5Cpmod%7Bn%7D"> then “<img src="https://latex.codecogs.com/png.latex?n"> is composite” else “<img src="https://latex.codecogs.com/png.latex?n"> is likely prime”.</p></li>
</ol>
</blockquote>
<p>As an alternative to Fermat primality test, there is a brute-force approach for determining whether a number <img src="https://latex.codecogs.com/png.latex?n"> is prime by dividing <img src="https://latex.codecogs.com/png.latex?n"> by smaller prime numbers up to <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7Bn%7D">:</p>
<blockquote class="blockquote">
<p><strong>Algorithm (<em>Trial division primality test</em>)</strong>:</p>
<ol type="1">
<li><p>Input integer <img src="https://latex.codecogs.com/png.latex?n%20%3E%201">.</p></li>
<li><p>If <img src="https://latex.codecogs.com/png.latex?n%20=%202">, return “<img src="https://latex.codecogs.com/png.latex?n"> is prime”.</p></li>
<li><p>If <img src="https://latex.codecogs.com/png.latex?n%20%5Cpmod%7B2%7D%20=%200">, return “<img src="https://latex.codecogs.com/png.latex?n"> is composite”.</p></li>
<li><p>For <img src="https://latex.codecogs.com/png.latex?d"> where <img src="https://latex.codecogs.com/png.latex?d%20=%202k%20+%201"> and <img src="https://latex.codecogs.com/png.latex?1%20%5Cleq%20k%20%5Cleq%20%5Clfloor%20%5Csqrt%7Bn%7D/2%20%5Crfloor">:</p>
<ol type="1">
<li>If <img src="https://latex.codecogs.com/png.latex?n%20%5Cpmod%7Bd%7D%20=%200"> then return “<img src="https://latex.codecogs.com/png.latex?n"> is composite”.</li>
</ol></li>
<li><p>Return “<img src="https://latex.codecogs.com/png.latex?n"> is prime”.</p></li>
</ol>
</blockquote>
<p>The test involves at most <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7Bn%7D"> divisions, making it computationally expensive for large <img src="https://latex.codecogs.com/png.latex?n">, having a time complexity of <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D(%5Csqrt%7Bn%7D)">, assuming that a single modulo operation is <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D(1)">. The algorithm becomes more efficient when using a precomputed list of primes up to <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7Bn%7D">, skipping unnecessary checks for non-prime divisors.</p>
<p>For very large <img src="https://latex.codecogs.com/png.latex?n">, the size of <img src="https://latex.codecogs.com/png.latex?n"> impacts the complexity of each modulo operation. If <img src="https://latex.codecogs.com/png.latex?n"> has <img src="https://latex.codecogs.com/png.latex?b"> bits, then the modulo operation takes <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D(b%5E2)"> time using simple arithmetic or <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D(b%20%5Clog%20b)"> with optimized algorithms. In such cases, the overall complexity becomes <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D(%5Csqrt%7Bn%7D%20%5Ccdot%20%5Ctext%7Bmodulo%20complexity%7D)">.</p>
<p>A more refined algorithm is the Miller-Rabin primality test<sup>25</sup>, which is much faster and more robust than trial division and the basic Fermat test.</p>
<div class="no-row-height column-margin column-container"><div id="fn25"><p><sup>25</sup>&nbsp;Miller, G. L. (1976). <strong>Riemann’s hypothesis and tests for primality</strong>. <em>Journal of Computer and System Sciences</em>, 13(3), 300–317. <a href="https://doi.org/10.1016/S0022-0000(76)80043-8">DOI</a>. Rabin, M. O. (1980). <strong>Probabilistic algorithm for testing primality</strong>. <em>Journal of Number Theory</em>, 12(1), 128–138. <a href="https://doi.org/10.1016/0022-314X(80)90084-0">DOI</a></p></div></div></section>
<section id="eulers-theorem" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="eulers-theorem">Euler’s theorem</h4>
<p>Euler’s theorem is a fundamental result in number theory that generalizes Fermat’s little theorem. It provides a condition for modular exponentiation when the base and modulus are coprime.</p>
<div class="page-columns page-full"><blockquote class="blockquote">
<p><strong>Definition (<em>Euler totient function</em>)</strong>: Let <img src="https://latex.codecogs.com/png.latex?n"> be a positive integer, the Euler totient function, denoted as <img src="https://latex.codecogs.com/png.latex?%5Cphi(n)">, counts the number of positive integers less than <img src="https://latex.codecogs.com/png.latex?n"> that are relatively prime to <img src="https://latex.codecogs.com/png.latex?n"><sup>26</sup>: <img src="https://latex.codecogs.com/png.latex?%0A%5Cphi(n)%20=%20%5Clvert%20%5C%7B%20a%20%5Cin%20%5Cmathbb%7BZ%7D%20:%201%20%5Cleq%20a%20%3C%20n,%20%5Cgcd(a,%20n)%20=%201%20%5C%7D%5Crvert%0A"></p>
</blockquote><div class="no-row-height column-margin column-container"><div id="fn26"><p><sup>26</sup>&nbsp;The symbol <img src="https://latex.codecogs.com/png.latex?%5C#"> denotes the <strong>cardinality</strong> (size) of a set, which represents the number of elements in that set. It is commonly used in combinatorics and number theory. An alternative notation for the cardinality of a set <img src="https://latex.codecogs.com/png.latex?S"> is <img src="https://latex.codecogs.com/png.latex?%7CS%7C">, which is more prevalent in set theory.</p></div></div></div>
<p>Properties of the Euler totient function:</p>
<ol type="1">
<li><p>If <img src="https://latex.codecogs.com/png.latex?p"> is a prime number, then: <img src="https://latex.codecogs.com/png.latex?%0A%5Cphi(p)%20=%20p%20-%201.%0A"></p></li>
<li><p>If <img src="https://latex.codecogs.com/png.latex?n"> has the prime factorization <img src="https://latex.codecogs.com/png.latex?n%20=%20p_1%5E%7Be_1%7D%20p_2%5E%7Be_2%7D%20%5Cdots%20p_k%5E%7Be_k%7D">, then <img src="https://latex.codecogs.com/png.latex?%5Cphi(n)"> is given by: <img src="https://latex.codecogs.com/png.latex?%0A%5Cphi(n)%20=%20n%20%5Cprod_%7Bi=1%7D%5E%7Bk%7D%20%5Cleft(1%20-%20%5Cfrac%7B1%7D%7Bp_i%7D%20%5Cright).%0A"></p></li>
<li><p>The totient function is <strong>multiplicative</strong>, meaning that if <img src="https://latex.codecogs.com/png.latex?m"> and <img src="https://latex.codecogs.com/png.latex?n"> are coprime, then: <img src="https://latex.codecogs.com/png.latex?%0A%5Cphi(mn)%20=%20%5Cphi(m)%20%5Cphi(n).%0A"></p></li>
</ol>
<blockquote class="blockquote">
<p><strong>Theorem (<em>Euler</em>)</strong>: Let <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?n"> be coprime integers (i.e., <img src="https://latex.codecogs.com/png.latex?%5Cgcd(a,%20n)%20=%201">). Then: <img src="https://latex.codecogs.com/png.latex?%0Aa%5E%7B%5Cphi(n)%7D%20%5Cequiv%201%20%5Cpmod%7Bn%7D.%0A"></p>
</blockquote>
<p>This theorem generalizes Fermat’s little theorem, which is a special case when <img src="https://latex.codecogs.com/png.latex?n"> is prime, where <img src="https://latex.codecogs.com/png.latex?%5Cphi(p)%20=%20p%20-%201"> and thus: <img src="https://latex.codecogs.com/png.latex?%0Aa%5E%7Bp-1%7D%20%5Cequiv%201%20%5Cpmod%7Bp%7D.%0A"></p>
<p>Euler’s theorem is widely used in cryptographic algorithms, particularly in the RSA encryption scheme, where it is employed to compute modular inverses efficiently. The theorem allows us to find the modular inverse of <img src="https://latex.codecogs.com/png.latex?a"> modulo <img src="https://latex.codecogs.com/png.latex?n"> when <img src="https://latex.codecogs.com/png.latex?%5Cgcd(a,%20n)%20=%201">, using: <img src="https://latex.codecogs.com/png.latex?%0Aa%5E%7B-1%7D%20%5Cequiv%20a%5E%7B%5Cphi(n)%20-%201%7D%20%5Cpmod%7Bn%7D.%0A"></p>
<p>For example, to compute <img src="https://latex.codecogs.com/png.latex?3%5E%7B%5Cphi(25)%7D%20%5Cpmod%7B25%7D">:</p>
<ul>
<li><p>First, calculate <img src="https://latex.codecogs.com/png.latex?%5Cphi(25)">: <img src="https://latex.codecogs.com/png.latex?%0A%5Cphi(25)%20=%2025%20%5Cleft(%201%20-%20%5Cfrac%7B1%7D%7B5%7D%20%5Cright)%20=%2025%20%5Ctimes%20%5Cfrac%7B4%7D%7B5%7D%20=%2020.%0A"></p></li>
<li><p>Then, <img src="https://latex.codecogs.com/png.latex?%0A3%5E%7B20%7D%20%5Cequiv%201%20%5Cpmod%7B25%7D.%0A"></p></li>
</ul>
<p>Thus, using Euler’s theorem, we can directly conclude that any power of 3 raised to 20 will be congruent to 1 modulo 25.</p>
</section>
<section id="carmichaels-theorem" class="level4">
<h4 class="anchored" data-anchor-id="carmichaels-theorem">Carmichael’s theorem</h4>
<p>Carmichael’s theorem refines Euler’s theorem by defining the smallest exponent that guarantees modular exponentiation behaves predictably for all coprime bases. This exponent is given by the <strong>Carmichael function</strong>, denoted as <img src="https://latex.codecogs.com/png.latex?%5Clambda(n)">.</p>
<blockquote class="blockquote">
<p><strong>Theorem (<em>Carmichael</em>)</strong>: Let <img src="https://latex.codecogs.com/png.latex?n"> be a positive integer. The function <img src="https://latex.codecogs.com/png.latex?%5Clambda(n)"> is the smallest integer such that:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aa%5E%7B%5Clambda(n)%7D%20%5Cequiv%201%20%5Cpmod%7Bn%7D%0A"> for all <img src="https://latex.codecogs.com/png.latex?a%20%5Cin%20%5Cmathbb%7BZ%7D_n%5E*">.</p>
</blockquote>
<p>This function provides a stricter condition than Euler’s theorem and guarantees that for any integer <img src="https://latex.codecogs.com/png.latex?a"> coprime to <img src="https://latex.codecogs.com/png.latex?n">, the smallest exponent <img src="https://latex.codecogs.com/png.latex?e"> for which <img src="https://latex.codecogs.com/png.latex?a%5Ee%20%5Cequiv%201%20%5Cpmod%7Bn%7D"> is always a divisor of <img src="https://latex.codecogs.com/png.latex?%5Clambda(n)">. In other words, the values of <img src="https://latex.codecogs.com/png.latex?e"> that satisfy this condition must be factors of <img src="https://latex.codecogs.com/png.latex?%5Clambda(n)">. By definition, <img src="https://latex.codecogs.com/png.latex?%5Clambda(n)"> is also always a divisor of <img src="https://latex.codecogs.com/png.latex?%5Cphi(n)">: <img src="https://latex.codecogs.com/png.latex?%0A%5Clambda(n)%20%5Cmid%20%5Cphi(n).%0A"></p>
<p>To compute <img src="https://latex.codecogs.com/png.latex?%5Clambda(n)">, we use the least common multiple (lcm) function, which determines the smallest positive integer that is divisible by a given set of numbers.</p>
<blockquote class="blockquote">
<p><strong>Definition (<em>least common multiple)</em></strong>: The lcm of two integers <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b">, denoted as <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Blcm%7D(a,%20b)">, is the smallest positive integer that is a multiple of both <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b">: <img src="https://latex.codecogs.com/png.latex?%0A%5Coperatorname%7Blcm%7D(a,%20b)%20=%20%5Cfrac%7B%7Ca%20%5Ccdot%20b%7C%7D%7B%5Cgcd(a,%20b)%7D,%0A"> where <img src="https://latex.codecogs.com/png.latex?%5Cgcd(a,%20b)"> is the greatest common divisor of <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b">.</p>
</blockquote>
<p>This concept extends naturally to multiple integers, allowing for an efficient computation of <img src="https://latex.codecogs.com/png.latex?%5Clambda(n)"> when <img src="https://latex.codecogs.com/png.latex?n"> has multiple prime factors.</p>
<p>Example: consider <img src="https://latex.codecogs.com/png.latex?n%20=%2018">, which has the prime factorization <img src="https://latex.codecogs.com/png.latex?n%20=%202%20%5Ctimes%203%5E2"> and we compute:<br>
<img src="https://latex.codecogs.com/png.latex?%0A%5Clambda(2)%20=%201,%20%5Cquad%20%5Clambda(3%5E2)%20=%20%5Cphi(3%5E2)%20=%203.%0A"></p>
<p>Since <img src="https://latex.codecogs.com/png.latex?n"> consists of relatively prime factors, we use the least common multiple: <img src="https://latex.codecogs.com/png.latex?%0A%5Clambda(18)%20=%20%5Coperatorname%7Blcm%7D(%5Clambda(2),%20%5Clambda(3%5E2))%20=%20%5Coperatorname%7Blcm%7D(1,%203)%20=%203.%0A"> This tells us that for any integer <img src="https://latex.codecogs.com/png.latex?a"> coprime to 18, the smallest exponent satisfying <img src="https://latex.codecogs.com/png.latex?a%5Ee%20%5Cequiv%201%20%5Cpmod%7B18%7D"> must be a multiple of 3.</p>
<p>To compute <img src="https://latex.codecogs.com/png.latex?%5Clambda(n)"> efficiently for any integer <img src="https://latex.codecogs.com/png.latex?n">, we apply the following structured approach, which relies on prime power properties and the least common multiple:</p>
<ol type="1">
<li><p>If <img src="https://latex.codecogs.com/png.latex?n"> is a power of a single prime, <img src="https://latex.codecogs.com/png.latex?p%5Ee">, we compute <img src="https://latex.codecogs.com/png.latex?%5Clambda(n)"> as follows:</p>
<ul>
<li>When <img src="https://latex.codecogs.com/png.latex?p"> is an <strong>odd prime</strong> or <img src="https://latex.codecogs.com/png.latex?e%20%5Cleq%202">, <img src="https://latex.codecogs.com/png.latex?%5Clambda(p%5Ee)"> is simply <img src="https://latex.codecogs.com/png.latex?%5Cphi(p%5Ee)">, the Euler totient function.</li>
<li>When <img src="https://latex.codecogs.com/png.latex?p%20=%202"> and <img src="https://latex.codecogs.com/png.latex?e%20%5Cgeq%203">, the exponent is halved:<br>
<img src="https://latex.codecogs.com/png.latex?%0A%5Clambda(p%5Ee)%20=%20%5Cfrac%7B1%7D%7B2%7D%20%5Cphi(p%5Ee).%0A"> This accounts for the behavior of powers of 2 in modular arithmetic, ensuring that exponentiation remains consistent with Carmichael’s theorem.</li>
</ul></li>
<li><p>If <img src="https://latex.codecogs.com/png.latex?n"> is a product of multiple <strong>pairwise relatively prime numbers</strong> <img src="https://latex.codecogs.com/png.latex?n_1,%20n_2,%20...,%20n_r">, the Carmichael function is computed using the least common multiple: <img src="https://latex.codecogs.com/png.latex?%0A%5Clambda(n)%20=%20%5Coperatorname%7Blcm%7D(%5Clambda(n_1),%20...,%20%5Clambda(n_r)).%0A"> This ensures that <img src="https://latex.codecogs.com/png.latex?%5Clambda(n)"> is compatible with each individual modulus, making it the smallest exponent that satisfies <img src="https://latex.codecogs.com/png.latex?a%5E%7B%5Clambda(n)%7D%20%5Cequiv%201%20%5Cpmod%7Bn%7D"> for all coprime bases <img src="https://latex.codecogs.com/png.latex?a">.</p></li>
<li><p>If <img src="https://latex.codecogs.com/png.latex?n"> is given in its <strong>prime factorized form</strong>: <img src="https://latex.codecogs.com/png.latex?%0An%20=%20p_1%5E%7Be_1%7D%20p_2%5E%7Be_2%7D%20%5Cdots%20p_r%5E%7Be_r%7D,%0A"> then <img src="https://latex.codecogs.com/png.latex?%5Clambda(n)"> is computed as: <img src="https://latex.codecogs.com/png.latex?%0A%5Clambda(n)%20=%20%5Coperatorname%7Blcm%7D(%5Clambda(p_1%5E%7Be_1%7D),%20...,%20%5Clambda(p_r%5E%7Be_r%7D)).%0A"> This approach ensures that we first compute <img src="https://latex.codecogs.com/png.latex?%5Clambda"> for each prime power individually (using the prime power rule) and then combine the results using the least common multiple.</p></li>
</ol>
<p>By following these structured steps, we can efficiently compute <img src="https://latex.codecogs.com/png.latex?%5Clambda(n)"> for any integer <img src="https://latex.codecogs.com/png.latex?n">, making it a practical function for number theory and cryptographic applications.</p>
<p>Now, let’s introduce numbers that pass Fermat’s primality test despite being composite:</p>
<blockquote class="blockquote">
<p><strong>Definition (<em>Carmichael number</em>)</strong>: a Carmichael number is a composite number <img src="https://latex.codecogs.com/png.latex?n"> that satisfies: <img src="https://latex.codecogs.com/png.latex?%0Aa%5E%7Bn-1%7D%20%5Cequiv%201%20%5Cpmod%7Bn%7D,%0A"> for all <img src="https://latex.codecogs.com/png.latex?a"> coprime to <img src="https://latex.codecogs.com/png.latex?n">.</p>
</blockquote>
<p>A number is Carmichael if and only if <img src="https://latex.codecogs.com/png.latex?%5Clambda(n)"> divides <img src="https://latex.codecogs.com/png.latex?n%20-%201">. For example, consider: <img src="https://latex.codecogs.com/png.latex?%0A%5Clambda(1105)%20=%20%5Coperatorname%7Blcm%7D(%5Clambda(5),%20%5Clambda(13),%20%5Clambda(17))%20=%20%5Coperatorname%7Blcm%7D(4,%2012,%2016)%20=%2048.%0A"> Since <img src="https://latex.codecogs.com/png.latex?48"> divides <img src="https://latex.codecogs.com/png.latex?1105%20-%201%20=%201104">, this confirms that 1105 is a Carmichael number.</p>
<p>Carmichael numbers are important in cryptography because they can deceive certain primality tests, making them crucial in designing secure encryption algorithms.</p>
</section>
<section id="generators" class="level4">
<h4 class="anchored" data-anchor-id="generators">Generators</h4>
<p>A <strong>generator</strong> is a number that, when multiplied by itself multiple times (using modular arithmetic), cycles through many or all possible values before repeating. This cycle length is called the <strong>multiplicative order</strong> of the number. In simple terms, it tells us how long it takes for the number to “reset” back to 1 when repeatedly multiplied by itself modulo <img src="https://latex.codecogs.com/png.latex?n">.</p>
<p>For example, if we take 3 and multiply it repeatedly modulo 7:<br>
<img src="https://latex.codecogs.com/png.latex?%0A3%5E1%20%5Cequiv%203%20%5Cpmod%7B7%7D,%20%5Cquad%203%5E2%20%5Cequiv%209%20%5Cequiv%202%20%5Cpmod%7B7%7D,%20%5Cquad%203%5E3%20%5Cequiv%206%20%5Cpmod%7B7%7D,%20%5Cquad%203%5E4%20%5Cequiv%204%20%5Cpmod%7B7%7D,%20%5Cquad%203%5E5%20%5Cequiv%205%20%5Cpmod%7B7%7D,%20%5Cquad%203%5E6%20%5Cequiv%201%20%5Cpmod%7B7%7D.%0A"><br>
Here, the number 3 cycles through all possible values before repeating, making it a generator modulo 7.</p>
<p>This concept is useful in cryptography because some security systems rely on the fact that <strong>finding how many times you need to multiply a number to get back to 1 (the order) is hard to figure out</strong>. This is used in encryption methods like <strong>Diffie-Hellman key exchange</strong>, which helps people securely share secret keys over public networks.</p>
<p>More formally:</p>
<blockquote class="blockquote">
<p><strong>Definition (<em>Multiplicative order</em>)</strong>: given a positive integer <img src="https://latex.codecogs.com/png.latex?n"> and an element <img src="https://latex.codecogs.com/png.latex?a%20%5Cin%20%5Cmathbb%7BZ%7D_n%5E*">, the multiplicative order of <img src="https://latex.codecogs.com/png.latex?a">, denoted as <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bord%7D_n(a)">, is the smallest integer <img src="https://latex.codecogs.com/png.latex?e%20%3E%201"> such that: <img src="https://latex.codecogs.com/png.latex?%0Aa%5Ee%20%5Cequiv%201%20%5Cpmod%7Bn%7D.%0A"></p>
</blockquote>
<p>Properties of the multiplicative order:</p>
<ol type="1">
<li>The order of <img src="https://latex.codecogs.com/png.latex?a"> always divides <img src="https://latex.codecogs.com/png.latex?%5Cphi(n)">, a consequence of Euler’s theorem.</li>
<li>For any integer <img src="https://latex.codecogs.com/png.latex?i">, <img src="https://latex.codecogs.com/png.latex?a%5Ei%20%5Cequiv%201%20%5Cpmod%7Bn%7D"> if and only if <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bord%7D_n(a)%20%5Cmid%20i">.</li>
</ol>
<blockquote class="blockquote">
<p><strong>Definition (<em>Generator</em>)</strong>: an element <img src="https://latex.codecogs.com/png.latex?g%20%5Cin%20%5Cmathbb%7BZ%7D_n%5E*"> is called a generator (or a primitive root) of <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_n%5E*"> if its order is maximal, meaning: <img src="https://latex.codecogs.com/png.latex?%0A%5Coperatorname%7Bord%7D_n(g)%20=%20%5Cphi(n).%0A"></p>
</blockquote>
<p>This implies that <img src="https://latex.codecogs.com/png.latex?g"> can produce all elements of <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_n%5E*"> through exponentiation.</p>
<p>A generator <img src="https://latex.codecogs.com/png.latex?a"> of <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_n%5E*"> remains a generator under exponentiation if and only if the exponent <img src="https://latex.codecogs.com/png.latex?i"> is chosen correctly, as stated in the following theorem.</p>
<blockquote class="blockquote">
<p><strong>Theorem (<em>Generator preservation</em>)</strong>: if <img src="https://latex.codecogs.com/png.latex?a"> is a generator of <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_n%5E*">, then for any integer <img src="https://latex.codecogs.com/png.latex?i">, the element <img src="https://latex.codecogs.com/png.latex?b%20%5Cequiv%20a%5Ei%20%5Cpmod%7Bn%7D"> is also a generator of <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_n%5E*"> if and only if: <img src="https://latex.codecogs.com/png.latex?%0A%5Cgcd(i,%20%5Cphi(n))%20=%201.%0A"></p>
</blockquote>
<p>This property is essential in cryptographic protocols such as Diffie-Hellman key exchange and RSA encryption, where security relies on the fact that, while it is easy to compute exponentiation modulo <img src="https://latex.codecogs.com/png.latex?n">, finding the original exponent <img src="https://latex.codecogs.com/png.latex?i"> given only the result <img src="https://latex.codecogs.com/png.latex?a%5Ei%20%5Cpmod%7Bn%7D"> (a problem known as the <strong>discrete logarithm problem</strong>) is computationally difficult.</p>
<p>To illustrate the concept of a generator, consider <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_%7B10%7D%5E*">, which consists of the elements: <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%7BZ%7D_%7B10%7D%5E*%20=%20%5C%7B1,%203,%207,%209%5C%7D.%0A"> The totient function gives <img src="https://latex.codecogs.com/png.latex?%5Cphi(10)%20=%204">, so a generator <img src="https://latex.codecogs.com/png.latex?g"> must satisfy <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bord%7D_%7B10%7D(g)%20=%204">.</p>
<p>Checking powers of 3 modulo 10: <img src="https://latex.codecogs.com/png.latex?%0A3%5E1%20%5Cequiv%203%20%5Cpmod%7B10%7D,%20%5Cquad%203%5E2%20%5Cequiv%209%20%5Cpmod%7B10%7D,%20%5Cquad%203%5E3%20%5Cequiv%207%20%5Cpmod%7B10%7D,%20%5Cquad%203%5E4%20%5Cequiv%201%20%5Cpmod%7B10%7D.%0A"> Since the order of 3 is 4, it is a generator of <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_%7B10%7D%5E*">.</p>
</section>
<section id="chinese-remainder-theorem" class="level4">
<h4 class="anchored" data-anchor-id="chinese-remainder-theorem">Chinese Remainder Theorem</h4>
<p>The <strong>Chinese Remainder Theorem (CRT)</strong> is a fundamental result in number theory that provides a way to solve systems of simultaneous congruences when the moduli are pairwise relatively prime.</p>
<blockquote class="blockquote">
<p><strong>Theorem (<em>Chinese Remainder</em>)</strong>: let <img src="https://latex.codecogs.com/png.latex?n_1,%20n_2,%20%5Cdots,%20n_k"> be pairwise relatively prime positive integers, then for any given integers <img src="https://latex.codecogs.com/png.latex?r_1,%20r_2,%20%5Cdots,%20r_k">, the system of congruences: <img src="https://latex.codecogs.com/png.latex?%0Ax%20%5Cequiv%20r_i%20%5Cpmod%7Bn_i%7D,%20%5Cquad%20%5Ctext%7Bfor%20%7D%20i%20=%201,%20%5Cdots,%20k,%0A"> has a unique solution modulo <img src="https://latex.codecogs.com/png.latex?n%20=%20n_1%20n_2%20%5Ccdots%20n_k">.</p>
</blockquote>
<p>The solution is given by: <img src="https://latex.codecogs.com/png.latex?%0Ax%20%5Cequiv%20%5Csum_%7Bi=1%7D%5E%7Bk%7D%20r_i%20%5Ccdot%20c_i%20%5Ccdot%20m_i%20%5Cpmod%7Bn%7D,%0A"> where <img src="https://latex.codecogs.com/png.latex?m_i%20=%20%5Cfrac%7Bn%7D%7Bn_i%7D"> and <img src="https://latex.codecogs.com/png.latex?c_i"> is the modular inverse of <img src="https://latex.codecogs.com/png.latex?m_i"> modulo <img src="https://latex.codecogs.com/png.latex?n_i">, satisfying <img src="https://latex.codecogs.com/png.latex?c_i%20m_i%20%5Cequiv%201%20%5Cpmod%7Bn_i%7D">.</p>
<p>Solving systems with CRT algorithm:</p>
<ol type="1">
<li>Compute <img src="https://latex.codecogs.com/png.latex?n%20=%20n_1%20n_2%20%5Ccdots%20n_k">.</li>
<li>For each <img src="https://latex.codecogs.com/png.latex?i">, compute <img src="https://latex.codecogs.com/png.latex?m_i%20=%20n%20/%20n_i">.</li>
<li>Compute the modular inverse <img src="https://latex.codecogs.com/png.latex?c_i%20%5Cequiv%20m_i%5E%7B-1%7D%20%5Cpmod%7Bn_i%7D">.</li>
<li>Compute <img src="https://latex.codecogs.com/png.latex?x%20=%20%5Csum_%7Bi=1%7D%5E%7Bk%7D%20r_i%20%5Ccdot%20c_i%20%5Ccdot%20m_i"> and reduce modulo <img src="https://latex.codecogs.com/png.latex?n">.</li>
</ol>
<p>For example, solve the system: <img src="https://latex.codecogs.com/png.latex?%0Ax%20%5Cequiv%204%20%5Cpmod%7B9%7D,%20%5Cquad%20x%20%5Cequiv%207%20%5Cpmod%7B13%7D,%20%5Cquad%20x%20%5Cequiv%202%20%5Cpmod%7B17%7D.%0A"></p>
<p>Since 9, 13, and 17 are pairwise relatively prime, we compute: - <img src="https://latex.codecogs.com/png.latex?n%20=%209%20%5Ctimes%2013%20%5Ctimes%2017%20=%201989">. - <img src="https://latex.codecogs.com/png.latex?m_1%20=%201989/9%20=%20221">, <img src="https://latex.codecogs.com/png.latex?m_2%20=%201989/13%20=%20153">, <img src="https://latex.codecogs.com/png.latex?m_3%20=%201989/17%20=%20117">. - Compute the modular inverses: - <img src="https://latex.codecogs.com/png.latex?c_1%20=%20221%5E%7B-1%7D%20%5Cequiv%204%20%5Cpmod%7B9%7D">. - <img src="https://latex.codecogs.com/png.latex?c_2%20=%20153%5E%7B-1%7D%20%5Cequiv%2012%20%5Cpmod%7B13%7D">. - <img src="https://latex.codecogs.com/png.latex?c_3%20=%20117%5E%7B-1%7D%20%5Cequiv%2010%20%5Cpmod%7B17%7D">. - Compute <img src="https://latex.codecogs.com/png.latex?x">: <img src="https://latex.codecogs.com/png.latex?%0A%20%20x%20%5Cequiv%20(4%20%5Ctimes%204%20%5Ctimes%20221%20+%207%20%5Ctimes%2012%20%5Ctimes%20153%20+%202%20%5Ctimes%2010%20%5Ctimes%20117)%20%5Cpmod%7B1989%7D.%0A%20%20"> Evaluating, we find <img src="https://latex.codecogs.com/png.latex?x%20%5Cequiv%208776%20%5Cequiv%20418%20%5Cpmod%7B1989%7D">.</p>
<p>Thus, the unique solution modulo 1989 is <img src="https://latex.codecogs.com/png.latex?x%20%5Cequiv%20418%20%5Cpmod%7B1989%7D">.</p>
<p>This demonstrates the power of the CRT in reconstructing values from modular congruences.</p>
</section>
<section id="quadratic-residues" class="level4">
<h4 class="anchored" data-anchor-id="quadratic-residues">Quadratic residues</h4>
<blockquote class="blockquote">
<p><strong>Definition (<em>Quadratic residue</em>)</strong>: a number <img src="https://latex.codecogs.com/png.latex?a%20%5Cin%20%5Cmathbb%7BZ%7D_n%5E*"> is a quadratic residue modulo <img src="https://latex.codecogs.com/png.latex?n"> if there exists an integer <img src="https://latex.codecogs.com/png.latex?x"> such that: <img src="https://latex.codecogs.com/png.latex?%0Aa%20%5Cequiv%20x%5E2%20%5Cpmod%7Bn%7D.%0A"> Otherwise, <img src="https://latex.codecogs.com/png.latex?a"> is called a <strong>quadratic non-residue</strong> modulo <img src="https://latex.codecogs.com/png.latex?n">.</p>
</blockquote>
<p>This theorem allows us to efficiently determine whether a number is a quadratic residue:</p>
<blockquote class="blockquote">
<p><strong>Theorem(<em>Euler’s criterion</em>)</strong>: Let <img src="https://latex.codecogs.com/png.latex?p"> be an odd prime and <img src="https://latex.codecogs.com/png.latex?a%20%5Cin%20%5Cmathbb%7BZ%7D_p%5E*">. Then:</p>
<ul>
<li>If <img src="https://latex.codecogs.com/png.latex?a"> is a quadratic residue modulo <img src="https://latex.codecogs.com/png.latex?p">: <img src="https://latex.codecogs.com/png.latex?%0Aa%5E%7B(p-1)/2%7D%20%5Cequiv%201%20%5Cpmod%7Bp%7D.%0A"></li>
<li>If <img src="https://latex.codecogs.com/png.latex?a"> is a quadratic non-residue modulo <img src="https://latex.codecogs.com/png.latex?p">: <img src="https://latex.codecogs.com/png.latex?%0Aa%5E%7B(p-1)/2%7D%20%5Cequiv%20-1%20%5Cpmod%7Bp%7D.%0A"></li>
</ul>
</blockquote>
<blockquote class="blockquote">
<p><strong>Definition (<em>Legendre symbol</em>)</strong>: the <strong>Legendre symbol</strong> is a function that determines whether an integer <img src="https://latex.codecogs.com/png.latex?a"> is a quadratic residue modulo an odd prime <img src="https://latex.codecogs.com/png.latex?p">; it is defined as: <img src="https://latex.codecogs.com/png.latex?%0A%5Cleft(%20%5Cfrac%7Ba%7D%7Bp%7D%20%5Cright)%20=%20%5Cbegin%7Bcases%7D%0A0,%20&amp;%20%5Ctext%7Bif%20%7D%20p%20%5Cmid%20a,%20%5C%5C%0A1,%20&amp;%20%5Ctext%7Bif%20%7D%20a%20%5Ctext%7B%20is%20a%20quadratic%20residue%20modulo%20%7D%20p,%20%5C%5C%0A-1,%20&amp;%20%5Ctext%7Bif%20%7D%20a%20%5Ctext%7B%20is%20a%20quadratic%20non-residue%20modulo%20%7D%20p.%0A%5Cend%7Bcases%7D%0A"></p>
</blockquote>
<p>Using Euler’s criterion, we compute: <img src="https://latex.codecogs.com/png.latex?%0A%5Cleft(%20%5Cfrac%7Ba%7D%7Bp%7D%20%5Cright)%20%5Cequiv%20a%5E%7B(p-1)/2%7D%20%5Cpmod%7Bp%7D.%0A"></p>
<p>Then, we can state:</p>
<blockquote class="blockquote">
<p><strong>Theorem (<em>Properties of the Legendre symbol</em>)</strong>: let <img src="https://latex.codecogs.com/png.latex?p"> be an odd prime and <img src="https://latex.codecogs.com/png.latex?a,%20b"> be integers, the Legendre symbol satisfies the following properties:</p>
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?%5Cleft(%20%5Cfrac%7Ba%7D%7Bp%7D%20%5Cright)%20%5Cequiv%20a%5E%7B(p-1)/2%7D%20%5Cpmod%7Bp%7D"> (Euler’s criterion).</li>
<li>If <img src="https://latex.codecogs.com/png.latex?a%20%5Cequiv%20b%20%5Cpmod%7Bp%7D">, then <img src="https://latex.codecogs.com/png.latex?%5Cleft(%20%5Cfrac%7Ba%7D%7Bp%7D%20%5Cright)%20=%20%5Cleft(%20%5Cfrac%7Bb%7D%7Bp%7D%20%5Cright)">.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cleft(%20%5Cfrac%7Ba%20%5Ccdot%20b%7D%7Bp%7D%20%5Cright)%20=%20%5Cleft(%20%5Cfrac%7Ba%7D%7Bp%7D%20%5Cright)%20%5Ctimes%20%5Cleft(%20%5Cfrac%7Bb%7D%7Bp%7D%20%5Cright)"> (Multiplicative property) .</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cleft(%20%5Cfrac%7B2%7D%7Bp%7D%20%5Cright)%20=%20(-1)%5E%7B(p%5E2-1)/8%7D">.</li>
<li>If <img src="https://latex.codecogs.com/png.latex?p"> and <img src="https://latex.codecogs.com/png.latex?q"> are odd primes (Law of quadratic reciprocity) :
<ul>
<li>If <img src="https://latex.codecogs.com/png.latex?p%20%5Cequiv%201%20%5Cpmod%7B4%7D"> or <img src="https://latex.codecogs.com/png.latex?q%20%5Cequiv%201%20%5Cpmod%7B4%7D">, then <img src="https://latex.codecogs.com/png.latex?%5Cleft(%20%5Cfrac%7Bp%7D%7Bq%7D%20%5Cright)%20=%20%5Cleft(%20%5Cfrac%7Bq%7D%7Bp%7D%20%5Cright)">.</li>
<li>If <img src="https://latex.codecogs.com/png.latex?p%20%5Cequiv%20q%20%5Cequiv%203%20%5Cpmod%7B4%7D">, then <img src="https://latex.codecogs.com/png.latex?%5Cleft(%20%5Cfrac%7Bp%7D%7Bq%7D%20%5Cright)%20=%20-%5Cleft(%20%5Cfrac%7Bq%7D%7Bp%7D%20%5Cright)">.</li>
</ul></li>
</ol>
</blockquote>
<p>As an example, for <img src="https://latex.codecogs.com/png.latex?p%20=%2019">, determine whether <img src="https://latex.codecogs.com/png.latex?a%20=%2011"> is a quadratic residue: <img src="https://latex.codecogs.com/png.latex?%0A11%5E%7B(19-1)/2%7D%20=%2011%5E9%20%5Cequiv%20-1%20%5Cpmod%7B19%7D.%0A"> Since the result is -1, <img src="https://latex.codecogs.com/png.latex?11"> is a quadratic non-residue modulo 19.</p>
<p>The <strong>Jacobi symbol</strong> generalizes the Legendre symbol for odd composite moduli:</p>
<blockquote class="blockquote">
<p><strong>Definition (<em>Jacobi symbol</em>)</strong>: <img src="https://latex.codecogs.com/png.latex?%0A%5Cleft(%20%5Cfrac%7Ba%7D%7Bn%7D%20%5Cright)%20=%20%5Cprod_%7Bi=1%7D%5E%7Br%7D%20%5Cleft(%20%5Cfrac%7Ba%7D%7Bp_i%7D%20%5Cright)%5E%7Be_i%7D,%0A"> where <img src="https://latex.codecogs.com/png.latex?n%20=%20p_1%5E%7Be_1%7D%20p_2%5E%7Be_2%7D%20%5Cdots%20p_r%5E%7Be_r%7D"> is the prime factorization of <img src="https://latex.codecogs.com/png.latex?n">.</p>
</blockquote>
<p>The Jacobi symbol shares properties with the Legendre symbol but does not definitively indicate whether <img src="https://latex.codecogs.com/png.latex?a"> is a quadratic residue modulo <img src="https://latex.codecogs.com/png.latex?n">.</p>
<p>If <img src="https://latex.codecogs.com/png.latex?n"> is an odd composite integer, determining whether <img src="https://latex.codecogs.com/png.latex?a"> with <img src="https://latex.codecogs.com/png.latex?%5Cleft(%20%5Cfrac%7Ba%7D%7Bn%7D%20%5Cright)%20=%201"> is a quadratic residue modulo <img src="https://latex.codecogs.com/png.latex?n"> is called the <strong>Quadratic Residuosity Problem (QR)</strong>. This problem is computationally difficult without knowing the factorization of <img src="https://latex.codecogs.com/png.latex?n">, linking it to cryptographic security.</p>
<p>The QP is central to probabilistic encryption schemes such as the Goldwasser-Micali cryptosystem, where the difficulty of distinguishing quadratic residues from non-residues provides semantic security. It is also relevant in zero-knowledge proofs and commitment schemes, where proving knowledge of a square root modulo <img src="https://latex.codecogs.com/png.latex?n"> can be done without revealing the value itself. By leveraging the hardness of the QR problem, cryptographic systems can achieve stronger security guarantees, making it an essential tool in modern cryptography.</p>
</section>
<section id="higher-order-residues" class="level4">
<h4 class="anchored" data-anchor-id="higher-order-residues">Higher-order residues</h4>
<blockquote class="blockquote">
<p><strong>Definition (<em>rth residue modulo</em>)</strong>: an integer <img src="https://latex.codecogs.com/png.latex?a%20%5Cin%20%5Cmathbb%7BZ%7D_n%5E*"> is called an <strong>rth residue modulo</strong> <img src="https://latex.codecogs.com/png.latex?n"> if there exists an integer <img src="https://latex.codecogs.com/png.latex?x%20%5Cin%20%5Cmathbb%7BZ%7D_n%5E*"> such that: <img src="https://latex.codecogs.com/png.latex?%0Aa%20%5Cequiv%20x%5Er%20%5Cpmod%7Bn%7D.%0A"> If no such <img src="https://latex.codecogs.com/png.latex?x"> exists, then <img src="https://latex.codecogs.com/png.latex?a"> is called an <strong>rth non-residue</strong> modulo <img src="https://latex.codecogs.com/png.latex?n">.</p>
</blockquote>
<blockquote class="blockquote">
<p><strong>Lemma (<em>Structure of higher-order residues</em>)</strong>: 1. The set of rth residues modulo <img src="https://latex.codecogs.com/png.latex?n"> that are relatively prime to <img src="https://latex.codecogs.com/png.latex?n"> forms a subgroup of <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_n%5E*">. 2. Each rth residue modulo <img src="https://latex.codecogs.com/png.latex?n"> has the same number of rth roots.</p>
</blockquote>
<p>Determining whether an element is an rth residue modulo <img src="https://latex.codecogs.com/png.latex?n"> is known as the <strong>Higher Residuosity Problem (HRP)</strong>. When <img src="https://latex.codecogs.com/png.latex?n"> is composite and its factorization is unknown, this problem is computationally difficult, making it useful in cryptographic settings. A special case of the HRP occurs when <img src="https://latex.codecogs.com/png.latex?r"> is replaced by <img src="https://latex.codecogs.com/png.latex?n"> and <img src="https://latex.codecogs.com/png.latex?n"> is replaced by <img src="https://latex.codecogs.com/png.latex?n%5E2">, where <img src="https://latex.codecogs.com/png.latex?n%20=%20pq"> is a product of two distinct odd primes. This version is called the <strong>Composite Residuosity Problem (CRP)</strong> and is used in cryptographic protocols such as Paillier encryption.</p>
<blockquote class="blockquote">
<p><strong>Lemma (<em>Residue completeness condition</em>)</strong>: if <img src="https://latex.codecogs.com/png.latex?%5Cgcd(r,%20%5Cphi(n))%20=%201">, then every integer in <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_n%5E*"> is an rth residue modulo <img src="https://latex.codecogs.com/png.latex?n">.</p>
</blockquote>
</section>
<section id="residue-classes" class="level4">
<h4 class="anchored" data-anchor-id="residue-classes">Residue classes</h4>
<blockquote class="blockquote">
<p><strong>Definition (<em>Residue class</em>)</strong>: For fixed integers <img src="https://latex.codecogs.com/png.latex?r,%20n,%20y"> with <img src="https://latex.codecogs.com/png.latex?y%20%5Cin%20%5Cmathbb%7BZ%7D_n%5E*">, an element <img src="https://latex.codecogs.com/png.latex?w%20%5Cin%20%5Cmathbb%7BZ%7D_n%5E*"> is said to belong to a residue class if it can be expressed as: <img src="https://latex.codecogs.com/png.latex?%0Aw%20%5Cequiv%20y%5Em%20%5Ccdot%20u%5Er%20%5Cpmod%7Bn%7D,%0A"> for some integer <img src="https://latex.codecogs.com/png.latex?m"> and some <img src="https://latex.codecogs.com/png.latex?u%20%5Cin%20%5Cmathbb%7BZ%7D_n%5E*">. The residue class of <img src="https://latex.codecogs.com/png.latex?w"> is denoted as: <img src="https://latex.codecogs.com/png.latex?%0ARC%5Bm%5D%20=%20%5C%7B%20w%20%5Cin%20%5Cmathbb%7BZ%7D_n%5E*%20:%20w%20%5Cequiv%20y%5Em%20u%5Er%20%5Cpmod%7Bn%7D%20%5Ctext%7B%20for%20some%20%7D%20u%20%5Cin%20%5Cmathbb%7BZ%7D_n%5E*%20%5C%7D.%0A"></p>
</blockquote>
<p>In particular, <img src="https://latex.codecogs.com/png.latex?RC%5B0%5D"> represents the set of rth residues modulo <img src="https://latex.codecogs.com/png.latex?n">.</p>
<blockquote class="blockquote">
<p><strong>Lemma (<em>Addition and inversion in residue classes</em>)</strong>: 1. If <img src="https://latex.codecogs.com/png.latex?w_1%20%5Cin%20RC%5Bm_1%5D"> and <img src="https://latex.codecogs.com/png.latex?w_2%20%5Cin%20RC%5Bm_2%5D">, then <img src="https://latex.codecogs.com/png.latex?w_1%20%5Ccdot%20w_2%20%5Cin%20RC%5Bm_1%20+%20m_2%5D">. 2. If <img src="https://latex.codecogs.com/png.latex?w%20%5Cin%20RC%5Bm%5D">, then <img src="https://latex.codecogs.com/png.latex?w%5E%7B-1%7D%20%5Cin%20RC%5B-m%5D">.</p>
</blockquote>
<p>The problem of determining the residue class of a given <img src="https://latex.codecogs.com/png.latex?w"> is conjectured to be computationally difficult and is known as the <strong>Residue Class Problem (RCP)</strong>. A special case arises when <img src="https://latex.codecogs.com/png.latex?n"> is composite, known as the <strong>Composite Residuosity Class Problem (CRP)</strong>, forming the basis of secure cryptographic schemes.</p>
<p>A fundamental question in this context is determining the number of distinct rth roots a given residue has. This is particularly important in cryptographic applications, where knowing the structure of these roots can influence security guarantees. The following theorem establishes a precise condition under which an rth residue has exactly r distinct roots:</p>
<blockquote class="blockquote">
<p><strong>Theorem (<em>Uniqueness and count of rth roots</em>)</strong>: Let <img src="https://latex.codecogs.com/png.latex?y%20%5Cin%20%5Cmathbb%7BZ%7D_n%5E*"> be an rth residue modulo <img src="https://latex.codecogs.com/png.latex?n">. If <img src="https://latex.codecogs.com/png.latex?r%20%5Cmid%20%5Cphi(n)"> and <img src="https://latex.codecogs.com/png.latex?%5Cgcd(r,%20%5Cphi(n)/r)%20=%201">, then <img src="https://latex.codecogs.com/png.latex?y"> has exactly <img src="https://latex.codecogs.com/png.latex?r"> distinct rth roots.</p>
</blockquote>
<p>Residue classes provide a structured way to categorize elements of <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_n%5E*"> based on their power relationships, enabling cryptographic operations such as <strong>trapdoor functions</strong>, which allow for efficient decryption while keeping encryption computationally difficult, and <strong>homomorphic encryption</strong> schemes, which enable computations on encrypted data without needing decryption. These concepts are foundational in privacy-preserving cryptographic protocols, such as the <strong>Paillier cryptosystem</strong>, which relies on the Composite Residuosity Problem for encryption, <strong>RSA-based voting schemes</strong>, which utilize quadratic residues for secure tallying, and <strong>homomorphic encryption frameworks</strong> like <strong>ElGamal encryption</strong>, which allow operations on encrypted data without decryption. These methods are crucial in secure voting systems, digital signatures, and confidential data processing.</p>
</section>
<section id="random-number-generators" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="random-number-generators">Random number generators</h4>
<p>In cryptographic applications, particularly homomorphic encryption, random numbers are essential for security. A function <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BRANDINT%7D(a,%20b)"> is defined to return a uniformly selected integer from the range <img src="https://latex.codecogs.com/png.latex?%5Ba,%20b%5D">. Ensuring unpredictability in random numbers is a fundamental challenge in cryptographic design.</p>
<p>Random number generators (RNGs) are categorized into:</p>
<ul>
<li><p><strong>True Random Number Generators (TRNGs)</strong>: Based on physical processes such as thermal noise or electronic circuit randomness, offering high security against prediction.</p></li>
<li><p><strong>Deterministic Random Number Generators (DRNGs)</strong>: Algorithmic methods that produce sequences from an initial seed, commonly used in cryptographic protocols.</p></li>
</ul>
<p>A DRNGs is fast and efficient but can be predictable if its starting value (seed) is not chosen securely. In contrast, a TRNG relies on physical processes to generate randomness, making it more secure but often slower and requiring specialized hardware. To balance speed and security, many systems use a hybrid approach, where a TRNG provides an initial high-quality seed, and a DRNG expands it to generate more random values efficiently.</p>
<p>When generating a cryptographic key, it’s important to use a secure random number generator (RNG) to ensure unpredictability. A common approach is to use a <strong>Cryptographically Secure Pseudorandom Number Generator (CSPRNG)</strong>, which expands a small amount of highly unpredictable data (called a <strong>seed</strong>) into a long sequence of random values.</p>
<p>A <strong>high-entropy seed</strong> means the initial data used to start the generator is difficult to guess, coming from unpredictable sources like hardware noise, mouse movements, or system timings.</p>
<p>One well-known approach is the <strong>Fortuna</strong><sup>27</sup> algorithm, a security-focused random number generator that works as follows:</p>
<div class="no-row-height column-margin column-container"><div id="fn27"><p><sup>27</sup>&nbsp;Fortuna is a CSPRNG designed by cryptographers Bruce Schneier and Niels Ferguson, introduced in their 2003 book Practical Cryptography. It is named after the Roman goddess of chance, Fortuna. Fortuna is designed to be a secure PRNG that can also accept random inputs from analog sources, enhancing its security. It has been adopted in systems like FreeBSD’s /dev/random since version 11 and in Apple’s operating systems since early 2020. See <em>Schneier on Security</em> <a href="https://www.schneier.com/academic/fortuna/">blog post</a>.</p></div></div><ol type="1">
<li><p>Collect random data from multiple sources, such as user input timings, network activity, or hardware randomness.</p></li>
<li><p>Mix the collected data using a cryptographic hash function to update an internal state securely.</p></li>
<li><p>Generate random values using a block cipher (e.g., AES in counter mode) to ensure strong randomness.</p></li>
<li><p>Periodically refresh the seed to prevent attackers from predicting future random outputs.</p></li>
</ol>
<p>This method ensures that even if part of the system state is exposed, the generated numbers remain secure and unpredictable.</p>
<p>For cryptographic security, DRNGs should satisfy:</p>
<ol type="1">
<li><p>Uniform distribution: ensuring statistical randomness.</p></li>
<li><p>Independence: ensuring no correlation between outputs.</p></li>
<li><p>Unpredictability: preventing attackers from inferring future values.</p></li>
</ol>
<p>Secure choices for transition functions include cryptographic hash functions and block ciphers, ensuring resistance to attacks. Well-known cryptographic DRNGs include also:</p>
<ul>
<li><p><strong>Yarrow</strong><sup>28</sup>: used in macOS for secure randomness.</p></li>
<li><p><strong>NIST SP 800-90A DRBG</strong><sup>29</sup>: a standardized family of deterministic random bit generators.</p></li>
</ul>
<div class="no-row-height column-margin column-container"><div id="fn28"><p><sup>28</sup>&nbsp;Kelsey, J., Schneier, B., &amp; Ferguson, N. (1999). <strong>Yarrow-160: Notes on the design and analysis of the Yarrow cryptographic pseudorandom number generator</strong>. <em>Selected Areas in Cryptography</em>, 13–33. <a href="https://doi.org/10.1007/3-540-46513-8_2">DOI</a>.</p></div><div id="fn29"><p><sup>29</sup>&nbsp;Barker, E., &amp; Kelsey, J. (2015). <strong>Recommendation for Random Number Generation Using Deterministic Random Bit Generators</strong>. *SP 800-90A Rev.&nbsp;1. National Institute of Standards and Technology. <a href="https://doi.org/10.6028/NIST.SP.800-90Ar1">DOI</a></p></div></div><p>These RNGs play a crucial role in encryption schemes, key generation, digital signatures, and secure multiparty computation.</p>
</section>
</section>
<section id="group-theory" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="group-theory">Group theory</h3>
<p>Cryptography frequently leverages <strong>groups</strong>, which are sets endowed with an operation that behaves in a mathematically predictable way. This predictability makes them ideal for building secure protocols, ranging from Diffie–Hellman key exchange to advanced homomorphic encryption. In this chapter, we outline core definitions and theorems that underpin these constructions.</p>
<section id="basics" class="level4">
<h4 class="anchored" data-anchor-id="basics">Basics</h4>
<blockquote class="blockquote">
<p><strong>Definition (<em>Group</em>)</strong>: A group <img src="https://latex.codecogs.com/png.latex?(G,%20%5Cstar)"> is a set <img src="https://latex.codecogs.com/png.latex?G"> equipped with a binary operation <img src="https://latex.codecogs.com/png.latex?%5Cstar"> satisfying four key properties:</p>
<ol type="1">
<li><p><strong>Closure</strong>: For any <img src="https://latex.codecogs.com/png.latex?a,%20b%20%5Cin%20G">, the result of <img src="https://latex.codecogs.com/png.latex?a%20%5Cstar%20b"> is still in <img src="https://latex.codecogs.com/png.latex?G">.</p></li>
<li><p><strong>Associativity</strong>: For any <img src="https://latex.codecogs.com/png.latex?a,%20b,%20c%20%5Cin%20G">, <img src="https://latex.codecogs.com/png.latex?(a%20%5Cstar%20b)%20%5Cstar%20c%20=%20a%20%5Cstar%20(b%20%5Cstar%20c)">.</p></li>
<li><p><strong>Identity element</strong>: There exists an element <img src="https://latex.codecogs.com/png.latex?e%20%5Cin%20G"> such that <img src="https://latex.codecogs.com/png.latex?e%20%5Cstar%20a%20=%20a%20%5Cstar%20e%20=%20a"> for all <img src="https://latex.codecogs.com/png.latex?a%20%5Cin%20G">.</p></li>
<li><p><strong>Inverse element</strong>: Each <img src="https://latex.codecogs.com/png.latex?a%20%5Cin%20G"> has an element <img src="https://latex.codecogs.com/png.latex?a%5E%7B-1%7D"> satisfying <img src="https://latex.codecogs.com/png.latex?a%20%5Cstar%20a%5E%7B-1%7D%20=%20a%5E%7B-1%7D%20%5Cstar%20a%20=%20e">.</p></li>
</ol>
</blockquote>
<p>A classic example is the set of integers <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D"> under addition <img src="https://latex.codecogs.com/png.latex?(+)">:</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?0"> is the identity (adding zero changes nothing).</p></li>
<li><p>Every integer <img src="https://latex.codecogs.com/png.latex?n"> has an inverse <img src="https://latex.codecogs.com/png.latex?-n">.</p></li>
</ul>
<p>In <strong>multiplicative</strong> notation, common in cryptography, a group might be a set of <em>invertible</em> numbers modulo <img src="https://latex.codecogs.com/png.latex?n">. For instance, <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_p%5E*"> (integers <img src="https://latex.codecogs.com/png.latex?%5C%7B1,2,%5Cdots,p-1%5C%7D"> under multiplication <img src="https://latex.codecogs.com/png.latex?%5Cpmod%7Bp%7D">) forms a group if <img src="https://latex.codecogs.com/png.latex?p"> is prime.</p>
<p>Groups let us <em>move around</em> elements predictably. For a cryptosystem, that often means repeatedly applying an operation, e.g., exponentiation mod <img src="https://latex.codecogs.com/png.latex?p">, without leaving the safety of the group.</p>
</section>
<section id="multiplicative-vs.-additive-notation" class="level4">
<h4 class="anchored" data-anchor-id="multiplicative-vs.-additive-notation">Multiplicative vs.&nbsp;additive notation</h4>
<p>Groups used in cryptography often come in two flavors:</p>
<ul>
<li><p><strong>Multiplicative groups</strong>, denoted <img src="https://latex.codecogs.com/png.latex?(G,%20%5Ctimes)">. We write the identity as <img src="https://latex.codecogs.com/png.latex?1"> and the inverse of <img src="https://latex.codecogs.com/png.latex?g"> as <img src="https://latex.codecogs.com/png.latex?g%5E%7B-1%7D">. An example is <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_p%5E*">, the nonzero integers mod <img src="https://latex.codecogs.com/png.latex?p">.</p></li>
<li><p><strong>Additive groups</strong>, denoted <img src="https://latex.codecogs.com/png.latex?(G,%20+)">. We write the identity as <img src="https://latex.codecogs.com/png.latex?0"> and the inverse of <img src="https://latex.codecogs.com/png.latex?a"> as <img src="https://latex.codecogs.com/png.latex?-a">. An example is <img src="https://latex.codecogs.com/png.latex?(%5Cmathbb%7BZ%7D,%20+)"> or <img src="https://latex.codecogs.com/png.latex?(%5Cmathbb%7BZ%7D_n,%20+)">.</p></li>
</ul>
<p>Both notations obey the same fundamental group axioms. Cryptographic schemes switch between them depending on context; for instance, elliptic‐curve cryptography usually adopts additive notation, while classical <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_p%5E*"> cryptography uses multiplicative.</p>
</section>
<section id="order-of-a-group-and-order-of-an-element" class="level4">
<h4 class="anchored" data-anchor-id="order-of-a-group-and-order-of-an-element">Order of a group and order of an element</h4>
<blockquote class="blockquote">
<p><strong>Definition (<em>Order of a group</em>)</strong>: The order of a group <img src="https://latex.codecogs.com/png.latex?%7CG%7C"> (or <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bord%7D(G)">) is the number of elements in <img src="https://latex.codecogs.com/png.latex?G"> when <img src="https://latex.codecogs.com/png.latex?G"> is finite. In cryptographic contexts, we often choose large prime‐order groups to avoid certain attacks.</p>
</blockquote>
<blockquote class="blockquote">
<p><strong>Definition (<em>Order of an element</em>)</strong>: The order of an element** <img src="https://latex.codecogs.com/png.latex?g%20%5Cin%20G"> is the smallest positive integer <img src="https://latex.codecogs.com/png.latex?k"> such that <img src="https://latex.codecogs.com/png.latex?%0Ag%5Ek%20=%20e%20%5Cquad%20%5Ctext%7B(multiplicative)%7D,%0A"> or <img src="https://latex.codecogs.com/png.latex?%0Ak%20%5Ccdot%20g%20=%200%20%5Cquad%20%5Ctext%7B(additive)%7D,%0A"> where <img src="https://latex.codecogs.com/png.latex?e"> is the identity. If no finite <img src="https://latex.codecogs.com/png.latex?k"> satisfies this, we say the element has infinite order (common in some infinite groups, but for cryptography we focus on finite ones).</p>
</blockquote>
<p>The order of an element determines how it behaves under repeated application of the group operation. In the multiplicative group <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_p%5E*">, where <img src="https://latex.codecogs.com/png.latex?p"> is prime, any element <img src="https://latex.codecogs.com/png.latex?g"> raised to successive powers, that is <img src="https://latex.codecogs.com/png.latex?g%5E1,%20g%5E2,%20g%5E3,%20%5Cdots">, will eventually cycle back to <img src="https://latex.codecogs.com/png.latex?1">. The smallest positive integer <img src="https://latex.codecogs.com/png.latex?k"> such that <img src="https://latex.codecogs.com/png.latex?g%5Ek%20%5Cequiv%201%20%5Cpmod%7Bp%7D"> is called the order of <img src="https://latex.codecogs.com/png.latex?g">. This cyclic property implies that the powers of <img src="https://latex.codecogs.com/png.latex?g"> form a repeating pattern, which plays a central role in modular arithmetic.</p>
<p>Cryptographic schemes like Diffie–Hellman rely on this structure. They use a generator <img src="https://latex.codecogs.com/png.latex?g"> and compute <img src="https://latex.codecogs.com/png.latex?g%5Ea%20%5Cpmod%7Bp%7D"> for some secret exponent <img src="https://latex.codecogs.com/png.latex?a">. While computing <img src="https://latex.codecogs.com/png.latex?g%5Ea"> is easy, recovering <img src="https://latex.codecogs.com/png.latex?a"> from <img src="https://latex.codecogs.com/png.latex?g%5Ea"> is computationally hard. This problem, finding the exponent given the base and the result, is known as the <strong>discrete logarithm problem</strong>, and it underpins the security of many cryptographic protocols.</p>
</section>
<section id="homomorphisms-1" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="homomorphisms-1">Homomorphisms</h4>
<blockquote class="blockquote">
<p><strong>Definition (<em>Group homomorphism</em>)</strong>: A <strong>group homomorphism</strong> from one group <img src="https://latex.codecogs.com/png.latex?%5Cbigl(G,%5Cstar%5Cbigr)"> to another <img src="https://latex.codecogs.com/png.latex?%5Cbigl(H,%5Ccirc%5Cbigr)"> is a map<br>
<img src="https://latex.codecogs.com/png.latex?%0Af%20:%20G%20%5C,%5Cto%5C,%20H%0A"> that <strong>preserves</strong> the group operation.</p>
</blockquote>
<p>Formally, for all <img src="https://latex.codecogs.com/png.latex?x,y%20%5Cin%20G">, <img src="https://latex.codecogs.com/png.latex?%0A%20%20%20f%5Cbigl(x%20%5Cstar%20y%5Cbigr)%20%5C;=%5C;%20f(x)%5C,%5Ccirc%5C,f(y).%0A"></p>
<p>This means that applying the operation in <img src="https://latex.codecogs.com/png.latex?G"> and then mapping the result is the same as first mapping the inputs and then applying the operation in <img src="https://latex.codecogs.com/png.latex?H">.</p>
<p>If the homomorphism <img src="https://latex.codecogs.com/png.latex?f"> is also bijective (i.e., both injective and surjective), then <img src="https://latex.codecogs.com/png.latex?f"> is called an isomorphism, and we say that <img src="https://latex.codecogs.com/png.latex?G"> and <img src="https://latex.codecogs.com/png.latex?H"> are isomorphic as groups.</p>
<p>Below are some examples that highlight different ways homomorphisms appear:</p>
<ol type="1">
<li>Reduction mod <img src="https://latex.codecogs.com/png.latex?n">:</li>
</ol>
<ul>
<li>Groups: <img src="https://latex.codecogs.com/png.latex?%5Cbigl(%5Cmathbb%7BZ%7D,%20+%5Cbigr)"> and <img src="https://latex.codecogs.com/png.latex?%5Cbigl(%5Cmathbb%7BZ%7D_n,%20+%5Cbigr)"></li>
<li>Map: <img src="https://latex.codecogs.com/png.latex?f(x)%20=%20x%20%5Cbmod%20n">.</li>
</ul>
<p>Check homomorphism:</p>
<ol type="1">
<li>In <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D">, the operation is integer addition <img src="https://latex.codecogs.com/png.latex?(+)">.<br>
</li>
<li>In <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_n">, the operation is addition modulo <img src="https://latex.codecogs.com/png.latex?n">.<br>
</li>
<li>For any <img src="https://latex.codecogs.com/png.latex?x,y%20%5Cin%20%5Cmathbb%7BZ%7D">, <img src="https://latex.codecogs.com/png.latex?%0Af(x%20+%20y)%20=%20(x%20+%20y)%5Cbmod%20n%20%5Cquad%5Ctext%7Band%7D%5Cquad%0Af(x)%5C;+%5C;f(y)%20=%20(x%5Cbmod%20n)%5C;+%5C;(y%5Cbmod%20n).%0A%20%20%20%20"> Since <img src="https://latex.codecogs.com/png.latex?(x%20+%20y)%5Cbmod%20n%20=%20(x%5Cbmod%20n)%20+%20(y%5Cbmod%20n)%5Cbmod%20n,"> the two sides match in <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_n">.</li>
</ol>
<p>Hence <img src="https://latex.codecogs.com/png.latex?f"> respects addition and is a group homomorphism. This is an extremely common map in modular arithmetic.</p>
<ol start="2" type="1">
<li>Exponential map <img src="https://latex.codecogs.com/png.latex?%5Cexp">:</li>
</ol>
<ul>
<li>Groups: <img src="https://latex.codecogs.com/png.latex?%5Cbigl(%5Cmathbb%7BR%7D,%20+%5Cbigr)"> and <img src="https://latex.codecogs.com/png.latex?%5Cbigl(%5Cmathbb%7BR%7D_%7B%3E0%7D,%20%5Ctimes%5Cbigr)">.<br>
</li>
<li>Map: <img src="https://latex.codecogs.com/png.latex?f(x)%20=%20e%5Ex">.</li>
</ul>
<p>Check homomorphism:</p>
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D"> under “<img src="https://latex.codecogs.com/png.latex?+">” is an additive group; <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D_%7B%3E0%7D"> under “<img src="https://latex.codecogs.com/png.latex?%5Ctimes">” is multiplicative.<br>
</li>
<li>For real numbers <img src="https://latex.codecogs.com/png.latex?x,y">, <img src="https://latex.codecogs.com/png.latex?%0Af(x%20+%20y)%20=%20e%5E%7B%5C,x%20+%20y%7D%20=%20e%5Ex%20%5Ccdot%20e%5Ey%20=%20f(x)%5C;%5Ctimes%5C;%20f(y).%0A%20%20%20%20"></li>
</ol>
<p>Hence <img src="https://latex.codecogs.com/png.latex?%5Cexp"> is a homomorphism from an additive group to a multiplicative group. While <img src="https://latex.codecogs.com/png.latex?%5Cexp"> is <em>not</em> typically used directly as a <em>cryptographic</em> function (because <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D"> is infinite‐precision), the idea of mapping addition to multiplication is the same principle that shows up in exponentiation mod <img src="https://latex.codecogs.com/png.latex?p">.</p>
<ol start="3" type="1">
<li>Encryption as a homomorphism:</li>
</ol>
<p>Suppose we have a cryptosystem <img src="https://latex.codecogs.com/png.latex?%5CPi%20=%20(P,C,K,E,D)"> where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?P">: plaintext space (a group with operation <img src="https://latex.codecogs.com/png.latex?%5Cstar">).<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?C">: ciphertext space (a group with operation <img src="https://latex.codecogs.com/png.latex?%5Codot">).<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?K">: key space, from which we draw a key <img src="https://latex.codecogs.com/png.latex?k">.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?E_k">: encryption function.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?D_k">: decryption function.</li>
</ul>
<p>If <img src="https://latex.codecogs.com/png.latex?%5CPi"> is additively homomorphic, then for any plaintexts <img src="https://latex.codecogs.com/png.latex?m_1,m_2%5Cin%20P">, <img src="https://latex.codecogs.com/png.latex?%0A%20%20%20%20D_k%5Cbigl(E_k(m_1)%5C,%5Codot%5C,E_k(m_2)%5Cbigr)%0A%20%20%20%20%5C;=%5C;%0A%20%20%20%20m_1%20%5C;%5Cstar%5C;%20m_2.%0A%20%20"> Such a map <img src="https://latex.codecogs.com/png.latex?E_k"> is effectively a group homomorphism (up to decryption). Concretely:</p>
<ol type="1">
<li>Additively homomorphic: <img src="https://latex.codecogs.com/png.latex?%5Cstar"> = “<img src="https://latex.codecogs.com/png.latex?+">” in plaintext, <img src="https://latex.codecogs.com/png.latex?%5Codot"> = some “<img src="https://latex.codecogs.com/png.latex?%5Coplus">” or “<img src="https://latex.codecogs.com/png.latex?+"> mod N” in ciphertext. Paillier encryption is a classic example that supports <img src="https://latex.codecogs.com/png.latex?E(m_1%20+%20m_2)%5Cequiv%20E(m_1)%5Ccdot%20E(m_2)">.<br>
</li>
<li>Multiplicatively homomorphic: <img src="https://latex.codecogs.com/png.latex?%5Cstar"> = “<img src="https://latex.codecogs.com/png.latex?%5Ctimes">” in plaintext, <img src="https://latex.codecogs.com/png.latex?%5Codot"> = “<img src="https://latex.codecogs.com/png.latex?%5Ctimes">” mod <img src="https://latex.codecogs.com/png.latex?n"> in ciphertext. RSA in raw form is multiplicatively homomorphic over <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D_n%5E*">.</li>
</ol>
<p>Real cryptosystems often require additional mechanisms (like <em>padding</em> in RSA<sup>30</sup>) to prevent malicious manipulations. But the fundamental <em>operation preserved under encryption</em> is precisely a homomorphism property.</p>
<div class="no-row-height column-margin column-container"><div id="fn30"><p><sup>30</sup>&nbsp;When we say that RSA is multiplicatively homomorphic in its raw form, we mean the basic mathematical version of RSA without any padding scheme. In this form, encrypting a product of two messages is equivalent to multiplying their individual encryptions. However, this “raw” RSA is not secure in practice because it is deterministic and vulnerable to certain attacks. Real-world RSA implementations include padding (like OAEP) to ensure security, but these padding schemes break the homomorphic property.</p></div></div></section>
</section>
</section>
<section id="the-rsa-cryptosystem" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-rsa-cryptosystem">The RSA cryptosystem</h2>
<p>The RSA cryptosystem, introduced in 1977 by Ronald Rivest, Adi Shamir, and Leonard Adleman, marked a turning point in the history of cryptography. It was the first widely applicable public-key encryption scheme, enabling secure communication over insecure channels without requiring the sender and receiver to share a secret key in advance. This was revolutionary. Before RSA, virtually all cryptographic systems were symmetric, meaning that both parties had to agree on a shared key, typically through a secure channel—a serious limitation in distributed and open environments like the internet.</p>
<p>The concept of public-key cryptography itself had been proposed only a year earlier, in 1976, by Whitfield Diffie and Martin Hellman. Their work introduced the theoretical foundation for asymmetric key exchange but did not include a concrete implementation. RSA was the first practical realization of this idea, immediately demonstrating how public-key systems could be used not just for key exchange but also for encryption and digital signatures, enabling crucial capabilities like authentication, confidentiality, and integrity.</p>
<p>RSA’s security is based on the mathematical challenge of factoring large composite numbers, a problem for which no efficient classical algorithm is known. Specifically, RSA relies on the assumption that it is computationally infeasible to factor a number <img src="https://latex.codecogs.com/png.latex?n"> that is the product of two large primes. This difficulty underpins the security of RSA keys, making it extremely hard for an attacker to recover the private key from the public one, as long as the key size is sufficiently large.</p>
<p>Over the decades, RSA has become one of the most studied and widely deployed cryptographic algorithms in the world. It serves as the backbone of countless security protocols and standards, including SSL/TLS for secure web browsing, PGP for encrypted email, and many digital certificate infrastructures. RSA also introduced a new generation of cryptographic thinking that spurred the development of modern cryptography as a scientific field, leading to innovations such as zero-knowledge proofs, elliptic curve cryptography, and homomorphic encryption.</p>
<p>In this tutorial, RSA is used as a stepping stone toward understanding more advanced techniques like PHE and eventually FHE. By studying RSA’s structure, limitations, and homomorphic properties (particularly its ability to multiply encrypted values), we lay the groundwork for exploring encryption systems that support computation on encrypted data—a key enabler for secure cloud computing, privacy-preserving machine learning, and other emerging technologies.</p>
<section id="key-generation" class="level3">
<h3 class="anchored" data-anchor-id="key-generation">Key generation</h3>
<p>The RSA algorithm begins with the generation of a key pair: a <strong>public key</strong> that can be shared with anyone, and a <strong>private key</strong> that must be kept secret. The strength of RSA comes from the mathematical properties of prime numbers and modular arithmetic. The key generation process proceeds as follows:</p>
<ol type="1">
<li><p>Select two large prime numbers, <img src="https://latex.codecogs.com/png.latex?p"> and <img src="https://latex.codecogs.com/png.latex?q">, at random. These primes should be of similar bit-length and large enough (e.g., 1024 bits each) to resist modern factoring attacks. The security of RSA depends on the fact that, while multiplying <img src="https://latex.codecogs.com/png.latex?p"> and <img src="https://latex.codecogs.com/png.latex?q"> is easy, factoring their product is computationally hard.</p></li>
<li><p>Compute the modulus: <img src="https://latex.codecogs.com/png.latex?%0An%20=%20p%20%5Ctimes%20q%0A"> The value <img src="https://latex.codecogs.com/png.latex?n"> will be used as the modulus for both encryption and decryption operations. It defines the finite field over which RSA operates.</p></li>
<li><p>Compute Euler’s totient function: <img src="https://latex.codecogs.com/png.latex?%0A%5Cphi(n)%20=%20(p%20-%201)(q%20-%201)%0A"> Since <img src="https://latex.codecogs.com/png.latex?p"> and <img src="https://latex.codecogs.com/png.latex?q"> are prime, <img src="https://latex.codecogs.com/png.latex?%5Cphi(n)"> simply equals the product of <img src="https://latex.codecogs.com/png.latex?p-1"> and <img src="https://latex.codecogs.com/png.latex?q-1">. This value is used to define the multiplicative group structure necessary for decryption.</p></li>
<li><p>Choose an encryption exponent <img src="https://latex.codecogs.com/png.latex?e"> such that: <img src="https://latex.codecogs.com/png.latex?%0A1%20%3C%20e%20%3C%20%5Cphi(n),%20%5Cquad%20%5Cgcd(e,%20%5Cphi(n))%20=%201%0A"> The value <img src="https://latex.codecogs.com/png.latex?e"> must be coprime with <img src="https://latex.codecogs.com/png.latex?%5Cphi(n)"> to ensure that it has a modular inverse. A widely adopted choice is <img src="https://latex.codecogs.com/png.latex?e%20=%2065537">, which provides a good balance between efficiency and security.</p></li>
<li><p>Compute the decryption exponent <img src="https://latex.codecogs.com/png.latex?d"> as the modular inverse of <img src="https://latex.codecogs.com/png.latex?e"> modulo <img src="https://latex.codecogs.com/png.latex?%5Cphi(n)">: <img src="https://latex.codecogs.com/png.latex?%0Ad%20%5Cequiv%20e%5E%7B-1%7D%20%5Cpmod%7B%5Cphi(n)%7D%0A"> This means that <img src="https://latex.codecogs.com/png.latex?d"> satisfies <img src="https://latex.codecogs.com/png.latex?e%20%5Ccdot%20d%20%5Cequiv%201%20%5Cpmod%7B%5Cphi(n)%7D">. It can be computed using the extended Euclidean algorithm.</p></li>
<li><p>Publish the public key <img src="https://latex.codecogs.com/png.latex?(n,%20e)"> and keep the private key <img src="https://latex.codecogs.com/png.latex?d"> secret. The public key is used to encrypt messages or verify digital signatures. The private key is used to decrypt messages or sign them. Together, they form the asymmetric key pair.</p></li>
</ol>
<p>The security of RSA depends on the computational difficulty of factoring the modulus <img src="https://latex.codecogs.com/png.latex?n"> into its two prime factors <img src="https://latex.codecogs.com/png.latex?p"> and <img src="https://latex.codecogs.com/png.latex?q">. As long as <img src="https://latex.codecogs.com/png.latex?n"> is large enough (typically at least 2048 bits), and proper cryptographic padding is used, RSA remains secure against known classical attacks.</p>
</section>
<section id="encryption-and-decryption" class="level3">
<h3 class="anchored" data-anchor-id="encryption-and-decryption">Encryption and decryption</h3>
<p>Once the RSA keys have been generated, the public key <img src="https://latex.codecogs.com/png.latex?(n,%20e)"> can be used to encrypt messages, while the private key <img src="https://latex.codecogs.com/png.latex?d"> is used to decrypt them. The encryption and decryption processes are mathematical inverses of each other, relying on modular exponentiation.</p>
<section id="encryption" class="level4">
<h4 class="anchored" data-anchor-id="encryption">Encryption</h4>
<p>To encrypt a message <img src="https://latex.codecogs.com/png.latex?m">, it must first be represented as an integer such that: <img src="https://latex.codecogs.com/png.latex?%0A0%20%3C%20m%20%3C%20n%0A"></p>
<p>This is usually achieved through a standardized encoding scheme that converts the plaintext (e.g., a string or file) into an integer in the valid range. Once <img src="https://latex.codecogs.com/png.latex?m"> is obtained, the ciphertext <img src="https://latex.codecogs.com/png.latex?c"> is computed using the public key exponent <img src="https://latex.codecogs.com/png.latex?e">: <img src="https://latex.codecogs.com/png.latex?%0Ac%20=%20m%5Ee%20%5Cpmod%7Bn%7D%0A"></p>
<p>This operation is efficient due to fast exponentiation algorithms and can be performed by anyone who has access to the public key.</p>
</section>
<section id="decryption" class="level4">
<h4 class="anchored" data-anchor-id="decryption">Decryption</h4>
<p>To recover the original message from the ciphertext, the recipient uses their private key <img src="https://latex.codecogs.com/png.latex?d"> and performs the following operation: <img src="https://latex.codecogs.com/png.latex?%0Am%20=%20c%5Ed%20%5Cpmod%7Bn%7D%0A"></p>
<p>Because of how <img src="https://latex.codecogs.com/png.latex?d"> was computed (as the modular inverse of <img src="https://latex.codecogs.com/png.latex?e">), this operation correctly reverses the encryption process. That is: <img src="https://latex.codecogs.com/png.latex?%0A(c%5Ed)%5Ee%20%5Cequiv%20m%20%5Cpmod%7Bn%7D%0A"></p>
<p>This symmetry between encryption and decryption lies at the heart of RSA’s functionality: encrypting with the public key and decrypting with the private key yields the original message, and vice versa (this property also enables RSA digital signatures).</p>
<p>In practice, messages are almost never encrypted <em>raw</em> like this. Real-world RSA implementations use padding schemes such as OAEP (Optimal Asymmetric Encryption Padding) to ensure semantic security and protect against various attacks.</p>
</section>
</section>
<section id="homomorphic-evaluation" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="homomorphic-evaluation">Homomorphic evaluation</h3>
<p>One notable property of RSA is its support for <strong>homomorphic multiplication</strong>. If two plaintext messages <img src="https://latex.codecogs.com/png.latex?m_1"> and <img src="https://latex.codecogs.com/png.latex?m_2"> are encrypted separately to produce ciphertexts <img src="https://latex.codecogs.com/png.latex?c_1%20=%20m_1%5Ee%20%5Cpmod%7Bn%7D"> and <img src="https://latex.codecogs.com/png.latex?c_2%20=%20m_2%5Ee%20%5Cpmod%7Bn%7D">, then their product: <img src="https://latex.codecogs.com/png.latex?%0Ac%20=%20c_1%20%5Ccdot%20c_2%20%5Cpmod%7Bn%7D%0A"> is itself a valid ciphertext. Specifically, it decrypts to the product of the original plaintexts: <img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BDec%7D(c)%20=%20(m_1%20%5Ccdot%20m_2)%20%5Cpmod%7Bn%7D%0A"></p>
<p>This means that multiplication on ciphertexts corresponds to multiplication on plaintexts. In homomorphic encryption terminology, this is an <img src="https://latex.codecogs.com/png.latex?Eval"> operation: <img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BEval%7D(%5Ctimes,%20c_1,%20c_2)%20=%20c_1%20%5Ccdot%20c_2%20%5Cpmod%7Bn%7D%0A"></p>
<p>Because RSA only supports multiplication homomorphically (not addition), it is classified as a PHE scheme. This property, while limited, has important applications in cryptographic protocols such as <strong>blind signatures</strong><sup>31</sup> and <strong>verifiable computation</strong><sup>32</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn31"><p><sup>31</sup>&nbsp;A cryptographic protocol that allows a message to be signed by a signer without revealing its content. This is useful in privacy-preserving systems such as electronic voting or anonymous digital cash, where a user wants a valid signature on a message without exposing the message itself.</p></div><div id="fn32"><p><sup>32</sup>&nbsp;A cryptographic technique that enables a client to outsource a computation to an untrusted server and later verify that the result was computed correctly, without redoing the computation. This is particularly important in cloud computing and delegated data processing.</p></div></div></section>
<section id="example" class="level3">
<h3 class="anchored" data-anchor-id="example">Example</h3>
<p>Let’s walk through a hands-on example of RSA’s multiplicative homomorphism.</p>
<p>Suppose we pick two small primes: <img src="https://latex.codecogs.com/png.latex?p%20=%2011"> and <img src="https://latex.codecogs.com/png.latex?q%20=%2013">, so <img src="https://latex.codecogs.com/png.latex?n%20=%20pq%20=%20143">. Compute Euler’s totient:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cphi(n)%20=%20(p%20-%201)(q%20-%201)%20=%2010%20%5Ccdot%2012%20=%20120%0A"></p>
<p>Choose the public exponent <img src="https://latex.codecogs.com/png.latex?e%20=%207">, which is coprime with <img src="https://latex.codecogs.com/png.latex?%5Cphi(n)">. Compute the private exponent <img src="https://latex.codecogs.com/png.latex?d%20=%20e%5E%7B-1%7D%20%5Cpmod%7B%5Cphi(n)%7D%20=%20103">.</p>
<p>Now encrypt two messages, <img src="https://latex.codecogs.com/png.latex?m_1%20=%205"> and <img src="https://latex.codecogs.com/png.latex?m_2%20=%207">:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?c_1%20=%205%5E7%20%5Cpmod%7B143%7D%20=%2078"></li>
<li><img src="https://latex.codecogs.com/png.latex?c_2%20=%207%5E7%20%5Cpmod%7B143%7D%20=%2047"></li>
</ul>
<p>Multiply the ciphertexts:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ac%20=%20c_1%20%5Ccdot%20c_2%20%5Cpmod%7B143%7D%20=%2078%20%5Ccdot%2047%20%5Cpmod%7B143%7D%20=%2045%0A"></p>
<p>Now decrypt:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Am%20=%2045%5E%7B103%7D%20%5Cpmod%7B143%7D%20=%2035%20=%205%20%5Ccdot%207%0A"></p>
<p>The decrypted result equals the product of the original messages. This confirms that:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BDec%7D(c_1%20%5Ccdot%20c_2%20%5Cpmod%7Bn%7D)%20=%20m_1%20%5Ccdot%20m_2%20%5Cpmod%7Bn%7D%0A"></p>
<div class="sourceCode" id="annotated-cell-1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> modinv(a, m):</span>
<span id="annotated-cell-1-2">    t, new_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="annotated-cell-1-3">    r, new_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m, a</span>
<span id="annotated-cell-1-4"></span>
<span id="annotated-cell-1-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> new_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="annotated-cell-1-6">        quotient <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> new_r</span>
<span id="annotated-cell-1-7">        t, new_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_t, t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> quotient <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> new_t</span>
<span id="annotated-cell-1-8">        r, new_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_r, r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> quotient <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> new_r</span>
<span id="annotated-cell-1-9"></span>
<span id="annotated-cell-1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> m <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="annotated-cell-1-11"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-1-12" class="code-annotation-target">p, q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span></span>
<span id="annotated-cell-1-13">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> q</span>
<span id="annotated-cell-1-14">phi_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="annotated-cell-1-15">e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="annotated-cell-1-16">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> modinv(e, phi_n)</span>
<span id="annotated-cell-1-17"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-1-18" class="code-annotation-target">m1, m2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="annotated-cell-1-19"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-1-20" class="code-annotation-target">c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(m1, e, n)</span>
<span id="annotated-cell-1-21">c2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(m2, e, n)</span>
<span id="annotated-cell-1-22"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-1-23" class="code-annotation-target">c_mul <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> n</span>
<span id="annotated-cell-1-24"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-1-25" class="code-annotation-target">m_mul <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(c_mul, d, n)</span>
<span id="annotated-cell-1-26"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-1-27" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Encrypted m1: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>c1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-1-28" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Encrypted m2: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>c2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-1-29" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Encrypted product: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>c_mul<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="9" onclick="event.preventDefault();">9</a><span id="annotated-cell-1-30" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Decrypted product: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>m_mul<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-1" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="12" data-code-annotation="1">RSA setup.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="18" data-code-annotation="2">Plaintexts.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="20" data-code-annotation="3">Encrypt.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="23" data-code-annotation="4">Homomorphic multiplication.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="25" data-code-annotation="5">Decrypt result.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="27" data-code-annotation="6">Output: <code>78</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="28" data-code-annotation="7">Output: <code>47</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="29" data-code-annotation="8">Output: <code>45</code>.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="30" data-code-annotation="9">Output: <code>35</code>.</span>
</dd>
</dl>
</section>
</section>
<section id="fhe-programming-example" class="level2">
<h2 class="anchored" data-anchor-id="fhe-programming-example">FHE programming example</h2>
<p>Below is a simple FHE example using the <strong>Microsoft SEAL</strong> library in Python. Note that this requires installing the Python bindings for SEAL. Depending on your platform, you can either compile them yourself or obtain a precompiled distribution (often referred to as <a href="https://github.com/Huelse/seal-python">SEAL-Python</a>.</p>
<section id="installation" class="level3">
<h3 class="anchored" data-anchor-id="installation">Installation</h3>
<ol type="1">
<li><p><strong>Install SEAL</strong> (C++ library) by following the official <a href="https://github.com/microsoft/SEAL">Microsoft SEAL GitHub</a> instructions.</p></li>
<li><p><strong>Install Python bindings</strong>. For many environments, you can try:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install seal</span></code></pre></div>
<p>or</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install seal-python</span></code></pre></div>
<p>If you encounter errors, consult the seal-python or pybind_seal repository for build instructions on your specific platform (Windows, macOS, Linux).</p></li>
</ol>
</section>
<section id="code" class="level3">
<h3 class="anchored" data-anchor-id="code">Code</h3>
<div class="sourceCode" id="annotated-cell-2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-2-1" class="code-annotation-target"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seal</span>
<span id="annotated-cell-2-2"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-2-3" class="code-annotation-target"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> bfv_demo():</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-2-4" class="code-annotation-target">    parms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.EncryptionParameters(seal.scheme_type.BFV)</span>
<span id="annotated-cell-2-5">    </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-2-6" class="code-annotation-target">    parms.set_poly_modulus_degree(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4096</span>)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-2-7" class="code-annotation-target">    parms.set_coeff_modulus(seal.CoeffModulus.BFVDefault(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4096</span>))</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="6" onclick="event.preventDefault();">6</a><span id="annotated-cell-2-8" class="code-annotation-target">    parms.set_plain_modulus(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65537</span>)</span>
<span id="annotated-cell-2-9">    </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="7" onclick="event.preventDefault();">7</a><span id="annotated-cell-2-10" class="code-annotation-target">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.SEALContext(parms)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="8" onclick="event.preventDefault();">8</a><span id="annotated-cell-2-11" class="code-annotation-target">    keygen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.KeyGenerator(context)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="9" onclick="event.preventDefault();">9</a><span id="annotated-cell-2-12" class="code-annotation-target">    public_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keygen.public_key()</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="10" onclick="event.preventDefault();">10</a><span id="annotated-cell-2-13" class="code-annotation-target">    secret_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keygen.secret_key()</span>
<span id="annotated-cell-2-14">    </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="11" onclick="event.preventDefault();">11</a><span id="annotated-cell-2-15" class="code-annotation-target">    encryptor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.Encryptor(context, public_key)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="12" onclick="event.preventDefault();">12</a><span id="annotated-cell-2-16" class="code-annotation-target">    decryptor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.Decryptor(context, secret_key)</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="13" onclick="event.preventDefault();">13</a><span id="annotated-cell-2-17" class="code-annotation-target">    evaluator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.Evaluator(context)</span>
<span id="annotated-cell-2-18">    </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="14" onclick="event.preventDefault();">14</a><span id="annotated-cell-2-19" class="code-annotation-target">    encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.IntegerEncoder(context)</span>
<span id="annotated-cell-2-20">    </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="15" onclick="event.preventDefault();">15</a><span id="annotated-cell-2-21" class="code-annotation-target">    m1, m2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="16" onclick="event.preventDefault();">16</a><span id="annotated-cell-2-22" class="code-annotation-target">    plain1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder.encode(m1)</span>
<span id="annotated-cell-2-23">    plain2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder.encode(m2)</span>
<span id="annotated-cell-2-24">    </span>
<span id="annotated-cell-2-25">    ciphertext1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.Ciphertext()</span>
<span id="annotated-cell-2-26">    ciphertext2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.Ciphertext()</span>
<span id="annotated-cell-2-27">    </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="17" onclick="event.preventDefault();">17</a><span id="annotated-cell-2-28" class="code-annotation-target">    encryptor.encrypt(plain1, ciphertext1)</span>
<span id="annotated-cell-2-29">    encryptor.encrypt(plain2, ciphertext2)</span>
<span id="annotated-cell-2-30">    </span>
<span id="annotated-cell-2-31">    result_add <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.Ciphertext()</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="18" onclick="event.preventDefault();">18</a><span id="annotated-cell-2-32" class="code-annotation-target">    evaluator.add(ciphertext1, ciphertext2, result_add)</span>
<span id="annotated-cell-2-33">    </span>
<span id="annotated-cell-2-34">    result_mul <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.Ciphertext()</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="19" onclick="event.preventDefault();">19</a><span id="annotated-cell-2-35" class="code-annotation-target">    evaluator.multiply(ciphertext1, ciphertext2, result_mul)</span>
<span id="annotated-cell-2-36">    </span>
<span id="annotated-cell-2-37">    dec_add <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.Plaintext()</span>
<span id="annotated-cell-2-38">    dec_mul <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.Plaintext()</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="20" onclick="event.preventDefault();">20</a><span id="annotated-cell-2-39" class="code-annotation-target">    decryptor.decrypt(result_add, dec_add)</span>
<span id="annotated-cell-2-40">    decryptor.decrypt(result_mul, dec_mul)</span>
<span id="annotated-cell-2-41">    </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="21" onclick="event.preventDefault();">21</a><span id="annotated-cell-2-42" class="code-annotation-target">    res_add <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder.decode_int32(dec_add)</span>
<span id="annotated-cell-2-43">    res_mul <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder.decode_int32(dec_mul)</span>
<span id="annotated-cell-2-44">    </span>
<span id="annotated-cell-2-45">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Original: m1=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>m1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, m2=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>m2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-2-46">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Homomorphic sum: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>res_add<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (expected </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>m1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span>
<span id="annotated-cell-2-47">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Homomorphic product: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>res_mul<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (expected </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>m1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> m2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span>
<span id="annotated-cell-2-48"></span>
<span id="annotated-cell-2-49"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="22" onclick="event.preventDefault();">22</a><span id="annotated-cell-2-50" class="code-annotation-target">    bfv_demo()</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-2" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="1" data-code-annotation="1"><code>import seal</code>: Loads the Microsoft SEAL Python bindings.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="3" data-code-annotation="2"><code>bfv_demo()</code>: Our main function demonstrating the BFV workflow.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="4" data-code-annotation="3"><code>EncryptionParameters</code>: Creates a parameter object for BFV.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="6" data-code-annotation="4"><code>set_poly_modulus_degree(4096)</code>: Sets the polynomial modulus degree (must be a power of 2).<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="7" data-code-annotation="5"><code>set_coeff_modulus(BFVDefault(4096))</code>: Sets default coefficient moduli for BFV at degree 4096.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="6">6</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="8" data-code-annotation="6"><code>set_plain_modulus(65537)</code>: The plain modulus that defines the max range of plaintext values.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="7">7</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="10" data-code-annotation="7"><code>SEALContext</code>: Builds a context object from the chosen parameters.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="8">8</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="11" data-code-annotation="8"><code>KeyGenerator</code>: Object that creates public/secret keys.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="9">9</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="12" data-code-annotation="9"><code>public_key = ...</code>: Retrieve the encryption (public) key.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="10">10</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="13" data-code-annotation="10"><code>secret_key = ...</code>: Retrieve the decryption (secret) key.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="11">11</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="15" data-code-annotation="11"><code>Encryptor</code>: Used to encrypt plaintexts with the public key.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="12">12</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="16" data-code-annotation="12"><code>Decryptor</code>: Used to decrypt ciphertexts with the secret key.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="13">13</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="17" data-code-annotation="13"><code>Evaluator</code>: Executes homomorphic operations (add, multiply, etc.).<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="14">14</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="19" data-code-annotation="14"><code>IntegerEncoder</code>: Encodes small integers into the BFV plaintext representation.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="15">15</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="21" data-code-annotation="15"><code>m1, m2 = 12, 23</code>: Two integers for the demo.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="16">16</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="22" data-code-annotation="16"><code>encoder.encode(m1)</code>: Converts integer to a SEAL plaintext polynomial.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="17">17</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="28" data-code-annotation="17"><code>encryptor.encrypt(...)</code>: Transforms the plaintext polynomial into a ciphertext.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="18">18</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="32" data-code-annotation="18"><code>evaluator.add(...)</code>: Homomorphically add the two ciphertexts.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="19">19</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="35" data-code-annotation="19"><code>evaluator.multiply(...)</code>: Homomorphically multiply the ciphertexts.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="20">20</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="39" data-code-annotation="20"><code>decryptor.decrypt(result_add, dec_add)</code>: Transforms ciphertext back to a plaintext polynomial.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="21">21</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="42" data-code-annotation="21"><code>encoder.decode_int32(dec_add)</code>: Converts the plaintext polynomial to a Python integer.<br>
</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="22">22</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="50" data-code-annotation="22"><code>bfv_demo()</code>: Runs our entire demonstration when the script is invoked directly.</span>
</dd>
</dl>
<p>Running this script will print the homomorphic sum and product, confirming that the decrypted results match the original integer arithmetic—even though the intermediate computation was performed on encrypted data.</p>
</section>
<section id="further-experiments" class="level3">
<h3 class="anchored" data-anchor-id="further-experiments">Further experiments</h3>
<p>Now that you’ve seen a basic BFV demo, here are three advanced topics that can enhance or vary your homomorphic encryption workflows:</p>
<ol type="1">
<li>Circuit depth: If you chain multiple multiplications, the ciphertext “noise” grows. Past a certain depth, you risk decryption failures unless you use larger parameters or bootstrapping.</li>
<li>BatchEncoder: BFV can pack vectors of integers into a single ciphertext, enabling “SIMD” style batch operations. This is crucial for large-scale tasks, like matrix multiplications or simple neural-network layers.</li>
<li>CKKS: For real or floating-point arithmetic, switch to <strong>CKKS</strong>. It’s approximate but often sufficient (and more efficient) for ML or signal-processing tasks.</li>
</ol>
<p>Below is an example snippet that illustrates chaining multiplications (circuit depth) and using BatchEncoder in BFV. You’ll also see where you’d optionally switch from BFV to CKKS.</p>
<div class="sourceCode" id="annotated-cell-3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-annotation-code number-lines code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seal</span>
<span id="annotated-cell-3-2"></span>
<span id="annotated-cell-3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> further_experiments_demo():                   </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-3-4" class="code-annotation-target">    parms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.EncryptionParameters(seal.scheme_type.BFV)</span>
<span id="annotated-cell-3-5">    parms.set_poly_modulus_degree(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4096</span>)</span>
<span id="annotated-cell-3-6">    parms.set_coeff_modulus(seal.CoeffModulus.BFVDefault(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4096</span>))</span>
<span id="annotated-cell-3-7">    parms.set_plain_modulus(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65537</span>)</span>
<span id="annotated-cell-3-8"></span>
<span id="annotated-cell-3-9">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.SEALContext(parms)</span>
<span id="annotated-cell-3-10">    keygen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.KeyGenerator(context)</span>
<span id="annotated-cell-3-11">    public_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keygen.public_key()</span>
<span id="annotated-cell-3-12">    secret_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keygen.secret_key()</span>
<span id="annotated-cell-3-13">    encryptor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.Encryptor(context, public_key)</span>
<span id="annotated-cell-3-14">    decryptor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.Decryptor(context, secret_key)</span>
<span id="annotated-cell-3-15">    evaluator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.Evaluator(context)</span>
<span id="annotated-cell-3-16">       </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-3-17" class="code-annotation-target">    batch_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.BatchEncoder(context)</span>
<span id="annotated-cell-3-18">    slot_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_encoder.slot_count()</span>
<span id="annotated-cell-3-19">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Slot count: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>slot_count<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-3-20"></span>
<span id="annotated-cell-3-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We'll encode a vector of integers [0, 1, 2, ..., slot_count-1].</span></span>
<span id="annotated-cell-3-22">    sample_vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(slot_count))</span>
<span id="annotated-cell-3-23">    plain_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.Plaintext()</span>
<span id="annotated-cell-3-24">    batch_encoder.encode(sample_vec, plain_sample)</span>
<span id="annotated-cell-3-25"></span>
<span id="annotated-cell-3-26">    ciph_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.Ciphertext()</span>
<span id="annotated-cell-3-27">    encryptor.encrypt(plain_sample, ciph_sample)</span>
<span id="annotated-cell-3-28"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-3-29" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="annotated-cell-3-30">        evaluator.multiply_inplace(ciph_sample, ciph_sample)</span>
<span id="annotated-cell-3-31">        evaluator.relinearize_inplace(ciph_sample, keygen.relin_keys())</span>
<span id="annotated-cell-3-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (Optional) check noise budget with decryptor.invariant_noise_budget()</span></span>
<span id="annotated-cell-3-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># noise = decryptor.invariant_noise_budget(ciph_sample)</span></span>
<span id="annotated-cell-3-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"Multiplication #{i+1}: noise budget = {noise} bits")</span></span>
<span id="annotated-cell-3-35"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="4" onclick="event.preventDefault();">4</a><span id="annotated-cell-3-36" class="code-annotation-target">    plain_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seal.Plaintext()</span>
<span id="annotated-cell-3-37">    decryptor.decrypt(ciph_sample, plain_out)</span>
<span id="annotated-cell-3-38">    decoded_vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-3-39">    batch_encoder.decode(plain_out, decoded_vec)</span>
<span id="annotated-cell-3-40">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Decoded vector (first 10):"</span>, decoded_vec[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])</span>
<span id="annotated-cell-3-41">   </span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="5" onclick="event.preventDefault();">5</a><span id="annotated-cell-3-42" class="code-annotation-target">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ckks_parms = seal.EncryptionParameters(seal.scheme_type.CKKS)</span></span>
<span id="annotated-cell-3-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   (Set poly_modulus_degree, coeff_modulus, scale, etc.)</span></span>
<span id="annotated-cell-3-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   This would allow real-number arithmetic, ideal for ML tasks.</span></span>
<span id="annotated-cell-3-45"></span>
<span id="annotated-cell-3-46"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="annotated-cell-3-47">    further_experiments_demo()</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-3" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="4" data-code-annotation="1">We choose BFV for integer arithmetic. This snippet sets polynomial modulus degree and coefficient moduli. You could scale them up for deeper circuits or bigger integer ranges.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="17" data-code-annotation="2">We create a <code>BatchEncoder</code> to pack vectors of integers into a single ciphertext. Greatly improves performance in large-scale tasks by exploiting SIMD-like parallelism.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="29" data-code-annotation="3">We multiply the ciphertext by itself repeatedly, relinearizing each time. Each multiplication consumes <em>noise budget</em>. If you do enough multiplications without large enough parameters or bootstrapping, you’ll eventually exceed the noise limit, causing decryption failures.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="36" data-code-annotation="4">We decrypt and decode to confirm that, despite multiple multiplications, the result is still coherent—unless the noise budget is used up.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="5">5</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="42" data-code-annotation="5">Shows a placeholder for switching to CKKS, which supports floating-point arithmetic. This scheme is approximate but powerful for neural networks, signal processing, etc.</span>
</dd>
</dl>
<p>With these ideas, you can explore how parameter selection, batching, and scheme type impact your HE performance and functionality. This snippet offers a practical launch pad for deeper experimentation in BFV or CKKS.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>HE represents a significant step forward in our ability to process data securely without ever exposing sensitive information. By allowing computations to be performed on ciphertexts—and yielding valid results upon decryption, HE enables a new paradigm where encryption need not be a barrier to data analysis. Whether it is applied to federated learning in healthcare, collaborative fraud detection across financial institutions, or privacy‐preserving smart contracts in blockchain, HE offers a unique combination of confidentiality and functionality.</p>
<p>Looking forward, several emerging trends will likely shape the future of HE:</p>
<ul>
<li><p>Performance breakthroughs: Continued research on more efficient polynomial arithmetic, improved parameter selection, and specialized hardware (such as GPUs, FPGAs, or custom ASICs) will help bring HE closer to production‐level performance.</p></li>
<li><p>Hybrid protocols: As cryptographic methods converge, we will see hybrid protocols that combine FHE with secure enclaves, MPC, or advanced zero‐knowledge systems for even richer functionality. These layered approaches leverage the best of each technique and help manage performance–security trade‐offs.</p></li>
<li><p>Industry adoption: Finance, healthcare, and governmental agencies are already piloting HE solutions for regulated data. Wider adoption will likely hinge on stable open‐source libraries, well‐tested APIs, and standardized best practices that make HE deployments easier and cheaper.</p></li>
<li><p>Post‐quantum readiness: Many leading HE schemes rely on lattice‐based cryptography, which is believed (though not guaranteed) to be resistant to quantum attacks. As the cryptographic community refines post‐quantum standards, we can expect lattice‐based FHE to align with future‐proofing measures.</p></li>
</ul>
<p>Ultimately, HE illustrates how security and functionality need not be an either–or proposition. By preserving data confidentiality during computation, HE opens up possibilities for collaborative analytics, regulatory compliance, and new cryptographic protocols that were previously unattainable under conventional encryption. While there is more to do—particularly in reducing computational overhead—HE stands poised to become an integral component of next‐generation privacy solutions across industries.</p>


</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/">CC BY-NC-ND 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{montano2022,
  author = {Montano, Antonio},
  title = {Homomorphic {Encryption} for {Developers}},
  date = {2022-06-23},
  url = {https://antomon.github.io/posts/homomorphic-encryption-developers/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-montano2022" class="csl-entry quarto-appendix-citeas">
Montano, Antonio. 2022. <span>“Homomorphic Encryption for
Developers.”</span> June 23, 2022. <a href="https://antomon.github.io/posts/homomorphic-encryption-developers/">https://antomon.github.io/posts/homomorphic-encryption-developers/</a>.
</div></div></section></div> ]]></description>
  <category>cryptography</category>
  <category>Python</category>
  <category>tutorial</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/homomorphic-encryption-developers/</guid>
  <pubDate>Wed, 22 Jun 2022 22:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/homomorphic-encryption-developers/homomorphic-encryption.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Python: Bridging the Gap Between Human Thought and Machine Code</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/python-as-interface/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In the rapidly evolving landscape of computer programming, the choice of programming language significantly influences the efficiency, readability, and maintainability of software projects. Among the myriad of programming languages available, Python has emerged as a dominant force, celebrated for its simplicity, readability, and versatility. This essay posits that Python functions as an “interface language” between human cognitive processes and machine execution, thus acting as an effective medium that bridges the interaction between humans and machines.</p>
<p>The concept of an “interface language” implies that a programming language serves as a medium that not only translates human intent into machine-readable code but also abstracts the complexities of lower-level programming. Python excels in these aspects through its design philosophy, high-level abstractions, and ability to serve as a wrapper for other languages, allowing developers to leverage the substantial effort invested in building state-of-the-art software.</p>
</section>
<section id="ai-generated-podcast-from-the-text-using-noteboooklm" class="level2">
<h2 class="anchored" data-anchor-id="ai-generated-podcast-from-the-text-using-noteboooklm">AI-generated podcast from the text using NoteboookLM</h2>
<audio controls="">
<source src="programming-human-languages-compressed.wav" type="audio/wav">
<p>Your browser does not support the audio element. </p>
</audio></section>
<section id="abstraction-and-human-machine-interaction" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="abstraction-and-human-machine-interaction">Abstraction and human-machine interaction</h2>
<section id="simplified-syntax-and-readability" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="simplified-syntax-and-readability">Simplified syntax and readability</h3>
<p>Python’s simplified syntax and emphasis on readability make it a more human-friendly interface compared to languages like C++ or Fortran. This quality is crucial for developers aiming to solve complex problems without being bogged down by cumbersome boilerplate code or language-specific intricacies.</p>
<p>The fundamental constructs of Python, such as conditions, loops, and sequences of actions, are rooted in control flow theory, which dictates the order in which instructions are executed. These constructs are based on structured programming principles, a paradigm introduced in the late 1960s by computer scientists like Edsger Dijkstra <sup>1</sup>. Structured programming advocates the use of simple, understandable flow constructs, including sequence, selection (conditions), and iteration (loops), which enhance program clarity and reliability <sup>2</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;Dijkstra, E. W. (1968). Go To Statement Considered Harmful. <em>Communications of the ACM</em>, 11(3), 147-148. <a href="https://doi.org/10.1145/362929.362947">DOI</a></p></div><div id="fn2"><p><sup>2</sup>&nbsp;Hoare, C. A. R. (1972). Notes on Data Structuring. In <em>Structured Programming</em>, edited by O.-J. Dahl, E. W. Dijkstra, and C. A. R. Hoare. Academic Press.</p></div></div><p>In imperative programming languages like Python, control flow constructs explicitly direct the computer on how to perform tasks step-by-step, akin to giving a series of commands. This imperative nature closely mirrors how humans solve problems logically: by breaking them down into discrete steps. These basic constructs are fundamental because they allow programmers to express problem-solving processes in a structured manner, directly communicating the flow of operations to the machine.</p>
<p>Consider the following example, where Python is used to read and process a CSV file:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> csv</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data.csv'</span>, newline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> csvfile:</span>
<span id="cb1-4">  reader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.DictReader(csvfile)</span>
<span id="cb1-5"></span>
<span id="cb1-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> reader:</span>
<span id="cb1-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>], row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>])</span></code></pre></div>
<p>This code reads data from a CSV file and prints the ‘Name’ and ‘Age’ columns for each row, demonstrating Python’s straightforward syntax and built-in support for common file operations. The syntax is designed to be as intuitive as possible, minimizing the mental overhead required to understand and maintain code.</p>
</section>
<section id="comparison-with-human-language" class="level3">
<h3 class="anchored" data-anchor-id="comparison-with-human-language">Comparison with human language</h3>
<p>Here, the comparison is with general characteristics of human languages. We specifically use English because it was the choice of Guido van Rossum, who invented Python.</p>
<section id="parallels-between-python-and-english-grammar" class="level4">
<h4 class="anchored" data-anchor-id="parallels-between-python-and-english-grammar">Parallels between Python and English grammar</h4>
<p>A formal comparison between English grammar and Python syntax reveals several interesting parallels. In English, conditional statements often take the form of <em>If [condition], then [action], otherwise [alternative action].</em> Python follows a similar structure with its <code>if-else</code> statements. For instance, in English, we might say: <em>If it is raining, take an umbrella; otherwise, wear sunglasses.</em> In Python, this directly translates into code:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_raining:</span>
<span id="cb2-2">  take_umbrella()</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-5">  wear_sunglasses()</span></code></pre></div>
<p>The grammatical structure of English sentences involving conditions, loops, or sequences of actions aligns closely with Python’s keywords and syntax. Just as English uses conjunctions like <em>and</em> and <em>or</em> to combine clauses, Python uses the same words (<code>and</code>, <code>or</code>) to combine logical expressions. Similarly, loops in English and Python demonstrate close parallels. In English, we might say: <em>For each item in the basket, check if it is ripe.</em> In Python, this would be represented with a <code>for</code> loop:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> basket:</span>
<span id="cb3-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> item.is_ripe():</span>
<span id="cb3-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ripe item found"</span>)</span></code></pre></div>
<p>Python also uses <code>while</code> loops to express repeated actions until a condition is met, akin to statements like “While it is raining, stay inside.” In Python, this would translate to:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> is_raining:</span>
<span id="cb4-2">  stay_inside()</span></code></pre></div>
<p>These constructs allow for a direct mapping between natural language instructions and programming logic, making Python code intuitive and easier to understand.</p>
<p>In English, imperative sentences are used to issue commands, such as <em>Print the report.</em> Python similarly uses function calls to issue commands to the computer, such as <code>print("Report")</code>. This similarity makes Python code feel more intuitive, particularly to beginners, as it mirrors the structure of natural human language.</p>
</section>
<section id="hierarchical-structures-in-python-and-english-grammar" class="level4">
<h4 class="anchored" data-anchor-id="hierarchical-structures-in-python-and-english-grammar">Hierarchical structures in Python and English grammar</h4>
<p>The syntactic model of Python can be compared to the hierarchical structures of English grammar, particularly through the concepts of hypotaxis and parataxis. In Python, the hierarchy begins with instructions, which are analogous to sentences in English. Instructions in Python contain expressions, which can be compared to clauses that convey additional meaning within a sentence. At the lowest level, tokens in Python serve as the building blocks of expressions, much like phrases or individual words contribute to the structure of a clause.</p>
<p>Hypotaxis in English refers to the use of subordinate clauses, where one part of a sentence depends on another, creating a layered, hierarchical relationship. This kind of hierarchy is reflected in Python through its use of nested code blocks, such as functions within functions, conditionals within loops, and other nested constructs. These nested relationships in Python are akin to hypotactic structures in English, where different parts of the code depend on one another, creating complexity. For example:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> condition:</span>
<span id="cb5-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> items:</span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb5-4">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(item)</span></code></pre></div>
<p>In this example, the <code>for</code> loop and the <code>if</code> statement are subordinate to the outer <code>if</code> statement, much like dependent clauses add depth to a sentence in English.</p>
<p>In contrast, parataxis involves placing clauses side by side without subordination, often connected by conjunctions like ‘and’ or ‘but.’ In Python, this is represented by sequential code statements at the same indentation level, executed one after another without hierarchical dependency. For example:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Start processing"</span>)</span>
<span id="cb6-2"></span>
<span id="cb6-3">process_data()</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Processing complete"</span>)</span></code></pre></div>
<p>Here, each statement is independent, akin to paratactic clauses in English, allowing for a straightforward, linear flow of execution. This comparison highlights how Python’s syntactic model mirrors natural language constructs, making it easier for programmers to follow the logic of the code, just as readers follow the flow of a well-written sentence. The hierarchical relationship between instructions, expressions, and tokens in Python maps effectively to sentences, clauses, and phrases in English, offering a natural and intuitive way to structure both code and thought processes.</p>
</section>
</section>
<section id="readability-beyond-syntax-the-pythonic-way" class="level3">
<h3 class="anchored" data-anchor-id="readability-beyond-syntax-the-pythonic-way">Readability beyond syntax: the Pythonic way</h3>
<p>Another complementary aspect of Python’s design philosophy is the “Pythonic” way of writing code. This concept refers to a set of idiomatic practices that maintain a high level of readability and embody key design principles in the code itself. The notion of being Pythonic emphasizes simplicity, clarity, and conciseness—traits that align well with the language’s guiding principle that “Readability counts,” as stated in The Zen of Python by Tim Peters. Formal syntax and semantics alone do not ensure that these design principles translate into readable and clean code; the Pythonic way is needed to bridge this gap.</p>
<p>Writing Pythonic code means leveraging Python’s constructs in an elegant and efficient manner. For example, using list comprehensions instead of loops to create lists or using context managers (e.g., <code>with</code> statements) to handle resources like files results in cleaner and more maintainable code. Pythonic code often reads like a natural language description of the problem being solved, making it accessible to a broad range of developers, from beginners to experienced programmers.</p>
<p>Consider the following example, which demonstrates a Pythonic way to filter even numbers from a list:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">numbers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span>
<span id="cb7-2"></span>
<span id="cb7-3">even_numbers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [num <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> numbers <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<p>This approach is preferred over a traditional loop-based solution because it is more concise and easier to understand at a glance. The Pythonic way of writing code ensures that codebases remain readable, maintainable, and aligned with Python’s core philosophy, making the language not only powerful but also enjoyable to use.</p>
</section>
</section>
<section id="python-as-a-wrapper-for-lower-level-languages" class="level2">
<h2 class="anchored" data-anchor-id="python-as-a-wrapper-for-lower-level-languages">Python as a wrapper for lower-level languages</h2>
<p>In the preceding chapter, we saw that Python’s syntax, semantics, and best practices make it one of the easiest interfaces between humans and machines. This ease of use positions Python as an ideal language for both novice and expert developers, bridging the gap between conceptual understanding and effective software implementation.</p>
<p>Python’s strength as an “interface language” is also epitomized by its capacity to seamlessly wrap and integrate more complex programming languages such as C, C++, and Fortran. This functionality allows developers to employ Python as a high-level interface while leveraging the computational efficiency and fine-grained control of lower-level languages, thereby facilitating the integration of mature and highly optimized libraries without requiring direct manipulation of their intricacies. Python effectively abstracts the low-level complexity of these languages, making powerful tools and optimizations available to a broader audience of developers, including those who may not have extensive experience with system-level programming.</p>
<p>For instance, the <code>NumPy</code> library is largely implemented in C but exposes a Pythonic interface that allows users to perform advanced numerical computations without needing to write a single line of C code. This exemplifies Python’s role in making complex, highly optimized routines accessible through an easy-to-use API. Python serves as an intuitive wrapper, abstracting the complexities of optimized C code and enabling developers to concentrate on the algorithmic and structural aspects of their applications, rather than managing low-level details such as memory allocation and pointer arithmetic. This is particularly important in domains like data science, machine learning, and numerical analysis, where the focus is often on rapid prototyping and experimentation rather than dealing with intricate implementation details. The ability to interface with C/C++ allows developers to harness computational power while enjoying Python’s readability and conciseness, thereby achieving a balance between performance and development efficiency.</p>
<p>Furthermore, the ability to wrap lower-level languages allows Python to serve as an entry point for using sophisticated libraries that were previously accessible only to specialized developers. This accessibility has accelerated innovation across many industries, enabling researchers, scientists, and developers to leverage high-performance codebases without the need for extensive retraining. The availability of optimized, pre-existing code wrapped in Python lowers development costs, minimizes implementation time, and fosters collaboration across fields that historically relied on different programming paradigms.</p>
<section id="extending-cc-with-python" class="level3">
<h3 class="anchored" data-anchor-id="extending-cc-with-python">Extending C/C++ with Python</h3>
<p>Python’s versatility is further demonstrated in its role as an extension mechanism for existing applications written in C or C++. By employing Python, developers can bridge performance-critical components with more flexible, higher-level program logic. Computationally intensive modules can be implemented in C or C++, while Python orchestrates the broader application. This modular approach allows developers to leverage the best aspects of both worlds: the raw performance of C/C++ and the flexibility and ease of Python.</p>
<p>Libraries such as <code>ctypes</code>, <code>cffi</code>, or tools like SWIG facilitate the seamless integration of C functions, enabling efficient interoperability and reducing development complexity by automatically generating bindings where needed. <code>ctypes</code> provides a straightforward mechanism for calling functions in shared libraries, allowing Python programs to invoke compiled C code directly. Meanwhile, <code>cffi</code> offers a more sophisticated interface, enabling developers to interface with C code in a way that is both more idiomatic and safer, ensuring type correctness and reducing potential runtime errors.</p>
<p>SWIG (Simplified Wrapper and Interface Generator) is another invaluable tool in this ecosystem, particularly when working with large and complex C/C++ codebases. It automates the generation of wrapper code, enabling Python to interact with existing C/C++ libraries with minimal manual intervention. This kind of automation is crucial in large projects, where writing bindings by hand would be prohibitively time-consuming and error-prone. The ability to combine Python with C/C++ allows for a highly adaptable workflow, where developers can optimize critical sections of their codebase without sacrificing overall productivity and maintainability.</p>
<p>This extensibility has led to widespread adoption of Python in fields such as robotics, embedded systems, and real-time computing, where high performance is often a requirement but the ease of development and rapid prototyping are also highly valued. By enabling a hybrid development model, Python empowers developers to build systems that are both powerful and flexible, with critical performance-sensitive components written in C/C++ while the overall application logic and orchestration are handled by Python. This approach not only streamlines development but also ensures that the end product is optimized for performance without compromising on maintainability.</p>
</section>
<section id="extending-fortran-with-python" class="level3">
<h3 class="anchored" data-anchor-id="extending-fortran-with-python">Extending Fortran with Python</h3>
<p>Python also extends the reach of Fortran, a language renowned for its numerical performance, by using <code>f2py</code>, a utility within the <code>NumPy</code> ecosystem. Through <code>f2py</code>, developers can integrate high-performance Fortran routines into Python applications with minimal effort. This capability allows the combination of Fortran’s computational efficiency with Python’s readability and ease of use, creating a powerful paradigm for applications that demand both speed and maintainability.</p>
<p>Fortran has historically been the language of choice for numerical computing due to its highly optimized compilers and efficient handling of mathematical operations. By utilizing <code>f2py</code>, Python developers can invoke these well-established routines without needing to rewrite algorithms in Python or C, preserving the computational efficiency that Fortran offers. This is particularly beneficial in scientific research and high-performance computing, where existing Fortran codebases may contain decades of domain-specific optimizations that are impractical to replicate. Python, through <code>f2py</code>, effectively breathes new life into these legacy systems, allowing modern developers to build on the foundational work of earlier generations.</p>
<p>Additionally, the integration between Fortran and Python is not just about performance—it is also about accessibility. By providing a high-level interface to Fortran code, Python makes these sophisticated numerical methods accessible to researchers and scientists who may not be well-versed in Fortran but are comfortable with Python. This democratizes the use of powerful numerical tools, enabling a wider range of practitioners to leverage high-performance algorithms in their work without needing to engage with the underlying complexities of Fortran code. This synergy between Python and Fortran enhances productivity in research environments, where rapid experimentation and iteration are crucial.</p>
<p>Moreover, the combination of Python and Fortran has been instrumental in bridging the gap between modern software development practices and traditional scientific programming. Many legacy Fortran applications, which remain critical to disciplines like fluid dynamics, astrophysics, and climate modeling, can now be integrated with modern data analysis workflows in Python. Notable Fortran libraries such as LAPACK, BLAS, and ARPACK are extensively used by widespread Python libraries like <code>SciPy</code> and <code>NumPy</code>. These Fortran libraries provide highly optimized routines for linear algebra, eigenvalue problems, and other numerical computations, which are crucial for scientific research. This hybrid approach helps preserve the value of decades of Fortran development while augmenting it with Python’s extensive ecosystem for visualization, data manipulation, and machine learning. By extending Fortran’s reach, Python allows these fields to evolve without sacrificing their foundational computational tools.</p>
</section>
<section id="other-bindings" class="level3">
<h3 class="anchored" data-anchor-id="other-bindings">Other bindings</h3>
<p>Python supports a variety of other important bindings, which further demonstrate its flexibility and widespread applicability in different computing environments.</p>
<p>One such notable binding is with Java via <code>JPype</code> and <code>Jython</code>. <code>JPype</code> allows Python to call Java code directly and even use Java objects as if they were native Python objects. This interoperability is particularly useful in environments where Java is already prevalent, such as enterprise software ecosystems. <code>Jython</code>, on the other hand, is an implementation of Python in Java, allowing Python code to run on the Java Virtual Machine (JVM) and seamlessly integrate with Java libraries.</p>
<p>Another important binding is with Erlang through the <code>Pyrlang</code> library, which allows Python to interact with the Erlang virtual machine. This capability is particularly valuable in building distributed, concurrent systems, where Erlang’s strengths are utilized alongside Python’s ease of use.</p>
<p>Python also has strong bindings with Julia, especially through the <code>PyJulia</code> package. Julia, known for its speed in numerical computations, can be integrated with Python, allowing developers to take advantage of Julia’s performance while using Python’s extensive libraries for data analysis, visualization, and more. This integration makes it possible to combine the best features of both languages in scientific computing applications.</p>
<p>Another widely used binding is with Go, facilitated by <code>gopy</code>. This allows Python to call Go functions and benefit from Go’s capabilities in building fast, concurrent programs, while still leveraging Python’s higher-level abstractions and extensive package ecosystem.</p>
<p>Similarly, Python’s interoperability with Lisp is facilitated by libraries like <code>CLPython</code>, which allows Lisp programs to call Python functions and vice versa. These bindings make Python a universal tool for integrating technologies, bridging ecosystems, and creating highly versatile software solutions.</p>
</section>
<section id="python-as-a-glue-language" class="level3">
<h3 class="anchored" data-anchor-id="python-as-a-glue-language">Python as a glue language</h3>
<p>Python’s characterization as a “glue language” aptly captures its proficiency in binding disparate systems and libraries, often implemented in different programming languages. This attribute makes Python particularly valuable in domains such as scientific computing and data analysis, where the need to integrate legacy codebases—often written in Fortran or C—is prevalent. The ability to unify different software components, regardless of their underlying implementation languages, is a cornerstone of Python’s versatility and is a major reason for its widespread adoption in multidisciplinary fields.</p>
<p>The <code>SciPy</code> ecosystem serves as a quintessential example of Python’s role as a glue language; many of its foundational components are underpinned by Fortran libraries that are exposed to users via Python interfaces. This integration allows researchers and engineers to capitalize on the numerical efficiency of Fortran while interacting with these components through Python’s expressive and flexible syntax. In these contexts, Python functions as an intermediary, bridging the gap between highly optimized, domain-specific routines and user-friendly, accessible code, thereby positioning itself as an indispensable tool for developing sophisticated, high-performance applications.</p>
<p>Furthermore, Python’s role as a glue language extends beyond simply interfacing with compiled code. It is also instrumental in orchestrating complex workflows that involve multiple tools and systems. In data science, for example, Python is often used to preprocess data, call optimized C/C++ or Fortran routines for heavy computation, and then visualize the results using libraries like <code>matplotlib</code>. This orchestration capability allows Python to serve as the connective tissue of a larger computational pipeline, integrating diverse tools into a cohesive workflow.</p>
<p>In modern software architectures, Python’s ability to serve as a glue language is also evident in its use within microservices and distributed systems. Python’s extensive standard library and the availability of numerous third-party packages make it an ideal choice for writing service interfaces, APIs, and automation scripts that interact with different parts of a distributed system. By using Python to bind together different components—whether they are services, databases, or computational modules—developers can create systems that are both modular and scalable.</p>
<p>Python’s glue capabilities are further enhanced by its compatibility with other high-level tools and platforms. For example, Python can interact seamlessly with Java through libraries like <code>Py4J</code>, enabling the integration of Python scripts within Java applications. This is particularly valuable in enterprise environments, where Java often serves as the backbone of large-scale applications, while Python is used for data analysis, machine learning, and scripting tasks. By bridging these two ecosystems, Python facilitates a hybrid development model that leverages the strengths of both languages.</p>
<p>Moreover, Python’s role as a glue language is not limited to computational libraries and services but also extends to integrating emerging technologies and paradigms. In artificial intelligence and machine learning, for example, Python is the language of choice for prototyping models that leverage specialized hardware like GPUs and TPUs. Python frameworks like <code>TensorFlow</code> and <code>PyTorch</code> provide bindings to optimized C++ backends, enabling efficient execution while allowing developers to iterate quickly. Python’s flexibility and ease of integration make it possible to interface with both established software systems and cutting-edge hardware accelerators, thereby bridging traditional computing with next-generation technologies.</p>
</section>
</section>
<section id="understanding-python-through-an-epistemic-lens" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="understanding-python-through-an-epistemic-lens">Understanding Python through an epistemic lens</h2>
<p>An epistemic level of interpretation refers to the way knowledge is represented, acquired, and processed within a system<sup>3</sup> <sup>4</sup>. In the context of programming languages, it involves examining how a language enables programmers to model, manipulate, and reason about information and concepts. Applying this to Python, we can define an epistemic level of interpretation by exploring how Python’s features facilitate the expression of knowledge and support human cognitive processes in problem-solving<sup>5</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;Goldman, A. I. (1979). <em>Theory of Human Knowledge</em>. Routledge &amp; Kegan Paul.</p></div><div id="fn4"><p><sup>4</sup>&nbsp;Nonaka, I. (1994). A Dynamic Theory of Organizational Knowledge Creation. <em>Organization Science</em>, 5(1), 14-37. <a href="https://doi.org/10.1287/orsc.5.1.14">DOI</a></p></div><div id="fn5"><p><sup>5</sup>&nbsp;Bunge, M. (1974). <em>Treatise on Basic Philosophy: Volume 1: Semantics I: Sense and Reference</em>. D. Reidel Publishing Company. <a href="https://doi.org/10.1007/978-94-010-9920-2">DOI</a></p></div><div id="fn6"><p><sup>6</sup>&nbsp;Lakoff, G., &amp; Johnson, M. (1999). <em>Philosophy In The Flesh: The Embodied Mind and Its Challenge to Western Thought</em>. Basic Books.</p></div><div id="fn7"><p><sup>7</sup>&nbsp;Hutchins, E. (1995). <em>Cognition in the Wild</em>. MIT Press.</p></div></div><p>Python’s design aligns closely with human ways of thinking, making it an effective tool for representing knowledge structures and reasoning processes. This alignment can be understood through cognitive theories such as embodied cognition, which suggests that cognitive processes are deeply rooted in the body’s interactions with the world<sup>6</sup>, and distributed cognition, which emphasizes that cognitive processes extend beyond the individual to include tools and environments<sup>7</sup>. Python’s intuitive syntax and high-level abstractions allow it to effectively serve as an extension of human cognitive processes, facilitating problem-solving and reasoning. This alignment is evident in several key aspects of the language:</p>
<ol type="1">
<li><p><strong>Expressive syntax</strong>: Python’s syntax is concise and resembles natural language or mathematical notation, allowing programmers to translate their thoughts into code with minimal friction.</p></li>
<li><p><strong>Abstraction mechanisms</strong>: Python supports various abstraction mechanisms like functions, classes, and modules, enabling developers to encapsulate complex ideas and reuse code effectively.</p></li>
<li><p><strong>Dynamic typing</strong>: The dynamic type system allows for flexible manipulation of data without the need for explicit type declarations, mirroring how humans often think abstractly about data.</p></li>
<li><p><strong>First-class functions and higher-order programming</strong>: Functions in Python are first-class citizens, allowing for functional programming paradigms that facilitate a pure style of coding.</p></li>
<li><p><strong>Support for multiple programming paradigms</strong>: Python’s versatility extends to its support for multiple programming paradigms, including procedural, object-oriented, and functional programming. This flexibility allows developers to choose the paradigm that best aligns with their problem-solving approach, mirroring the adaptability of human cognition in selecting appropriate methods to tackle various challenges.</p></li>
</ol>
<section id="python-as-a-tool-for-knowledge-representation" class="level3">
<h3 class="anchored" data-anchor-id="python-as-a-tool-for-knowledge-representation">Python as a tool for knowledge representation</h3>
<p>Python’s features make it suitable for representing complex knowledge domains, such as in artificial intelligence, data science, and computational linguistics. The language allows for the creation of models that closely align with theoretical constructs, effectively providing an epistemic bridge between abstract concepts and their computational implementations. This bridge is built through Python’s intuitive syntax, extensive library support, and high-level abstractions, which enable users to translate domain-specific knowledge into executable code with minimal friction. The advantage of this bridge lies in its ability to simplify complex problem-solving processes, enhance accessibility for non-expert programmers, and reduce the cognitive load required to translate theoretical knowledge into computational solutions.</p>
<blockquote class="blockquote">
<p>An example is represented by graph structures. Graphs are fundamental structures in computer science and mathematics used to model relationships. Python’s data structures and object-oriented features make it straightforward to represent graphs, which are relevant for modeling numerous physical and logical structures, such as network topologies, social connections, dependency graphs, and biological systems. This versatility highlights Python’s effectiveness in various fields where complex relationships need to be visualized and analyzed.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Graph:</span>
<span id="cb8-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb8-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb8-4"></span>
<span id="cb8-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a vertex to the graph</span></span>
<span id="cb8-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add_vertex(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, vertex):</span>
<span id="cb8-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> vertex <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph:</span>
<span id="cb8-8">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph[vertex] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-9"></span>
<span id="cb8-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add an edge between two vertices</span></span>
<span id="cb8-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add_edge(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, vertex1, vertex2):</span>
<span id="cb8-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> vertex1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> vertex2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph:</span>
<span id="cb8-13">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph[vertex1].append(vertex2)</span>
<span id="cb8-14">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph[vertex2].append(vertex1)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming an undirected graph</span></span>
<span id="cb8-15"></span>
<span id="cb8-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if an edge exists between two vertices</span></span>
<span id="cb8-17">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> has_edge(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, vertex1, vertex2):</span>
<span id="cb8-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> vertex2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph.get(vertex1, [])</span>
<span id="cb8-19"></span>
<span id="cb8-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Depth First Search (DFS) traversal</span></span>
<span id="cb8-21">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> dfs(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, start, visited<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb8-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> visited <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb8-23">      visited <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb8-24"></span>
<span id="cb8-25">    visited.add(start)</span>
<span id="cb8-26">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(start, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span>
<span id="cb8-27"></span>
<span id="cb8-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> neighbor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph[start]:</span>
<span id="cb8-29">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> neighbor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> visited:</span>
<span id="cb8-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dfs(neighbor, visited)</span>
<span id="cb8-31"></span>
<span id="cb8-32">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Breadth First Search (BFS) traversal</span></span>
<span id="cb8-33">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> bfs(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, start):</span>
<span id="cb8-34">    visited <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb8-35">    queue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [start]</span>
<span id="cb8-36">    visited.add(start)</span>
<span id="cb8-37"></span>
<span id="cb8-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> queue:</span>
<span id="cb8-39">      vertex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> queue.pop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-40">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(vertex, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span>
<span id="cb8-41"></span>
<span id="cb8-42">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> neighbor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph[vertex]:</span>
<span id="cb8-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> neighbor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> visited:</span>
<span id="cb8-44">          queue.append(neighbor)</span>
<span id="cb8-45">          visited.add(neighbor)</span>
<span id="cb8-46"></span>
<span id="cb8-47">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find all connected components</span></span>
<span id="cb8-48">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> connected_components(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb8-49">    visited <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb8-50">    components <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-51"></span>
<span id="cb8-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vertex <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph:</span>
<span id="cb8-53">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> vertex <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> visited:</span>
<span id="cb8-54">        component <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-55">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._dfs_component(vertex, visited, component)</span>
<span id="cb8-56">        components.append(component)</span>
<span id="cb8-57"></span>
<span id="cb8-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> components</span>
<span id="cb8-59"></span>
<span id="cb8-60">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Helper function for DFS within a component</span></span>
<span id="cb8-61">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _dfs_component(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, vertex, visited, component):</span>
<span id="cb8-62">    visited.add(vertex)</span>
<span id="cb8-63">    component.append(vertex)</span>
<span id="cb8-64"></span>
<span id="cb8-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> neighbor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph[vertex]:</span>
<span id="cb8-66">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> neighbor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> visited:</span>
<span id="cb8-67">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._dfs_component(neighbor, visited, component)</span>
<span id="cb8-68"></span>
<span id="cb8-69">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the graph</span></span>
<span id="cb8-70">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> display_graph(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb8-71">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vertex <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph:</span>
<span id="cb8-72">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vertex<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(v) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.graph[vertex]])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-73"></span>
<span id="cb8-74"></span>
<span id="cb8-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb8-76">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Graph()</span>
<span id="cb8-77">g.add_vertex(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>)</span>
<span id="cb8-78">g.add_vertex(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>)</span>
<span id="cb8-79">g.add_vertex(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>)</span>
<span id="cb8-80">g.add_vertex(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'D'</span>)</span>
<span id="cb8-81">g.add_vertex(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'E'</span>)</span>
<span id="cb8-82"></span>
<span id="cb8-83">g.add_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>)</span>
<span id="cb8-84">g.add_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>)</span>
<span id="cb8-85">g.add_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'D'</span>)</span>
<span id="cb8-86">g.add_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'D'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'E'</span>)</span>
<span id="cb8-87"></span>
<span id="cb8-88"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the graph</span></span>
<span id="cb8-89">g.display_graph()</span>
<span id="cb8-90"></span>
<span id="cb8-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if an edge exists</span></span>
<span id="cb8-92"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Edge A-B:"</span>, g.has_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>))</span>
<span id="cb8-93"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Edge A-E:"</span>, g.has_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'E'</span>))</span>
<span id="cb8-94"></span>
<span id="cb8-95"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Traverse the graph using DFS</span></span>
<span id="cb8-96"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">DFS traversal starting from A:"</span>)</span>
<span id="cb8-97">g.dfs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>)</span>
<span id="cb8-98"></span>
<span id="cb8-99"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Traverse the graph using BFS</span></span>
<span id="cb8-100"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">BFS traversal starting from A:"</span>)</span>
<span id="cb8-101">g.bfs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>)</span>
<span id="cb8-102"></span>
<span id="cb8-103"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find and display all connected components</span></span>
<span id="cb8-104"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Connected Components:"</span>)</span>
<span id="cb8-105">components <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> g.connected_components()</span>
<span id="cb8-106"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, component <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(components, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb8-107">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Component </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>component<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<p>In this example, the code closely mirrors the conceptual understanding of a graph, facilitating reasoning about the structure and behavior of the graph within the program.</p>
</blockquote>
</section>
<section id="facilitating-epistemic-practices-through-libraries" class="level3">
<h3 class="anchored" data-anchor-id="facilitating-epistemic-practices-through-libraries">Facilitating epistemic practices through libraries</h3>
<p>Python’s extensive ecosystem of libraries supports epistemic practices by providing tools that align with domain-specific knowledge representations. This relationship can be linked to cognitive load theory, which emphasizes how domain-specific libraries reduce the cognitive burden for users by providing tailored, high-level abstractions that simplify complex tasks. For instance, libraries like Pandas and NumPy allow for data manipulation and numerical computations that are essential in scientific inquiry.</p>
<blockquote class="blockquote">
<p>Example: Data analysis with Pandas</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data</span></span>
<span id="cb9-4">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb9-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Alice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bob'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Charlie'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'David'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Eve'</span>],</span>
<span id="cb9-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>],</span>
<span id="cb9-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Score'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">87</span>]</span>
<span id="cb9-8">}</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create DataFrame</span></span>
<span id="cb9-11">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(data)</span>
<span id="cb9-12"></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the DataFrame</span></span>
<span id="cb9-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DataFrame:"</span>)</span>
<span id="cb9-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df)</span>
<span id="cb9-16"></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate mean age and mean score</span></span>
<span id="cb9-18">mean_age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>].mean()</span>
<span id="cb9-19">mean_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Score'</span>].mean()</span>
<span id="cb9-20"></span>
<span id="cb9-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Mean Age: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_age<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Mean Score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_score<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-23"></span>
<span id="cb9-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter rows where the score is above 90</span></span>
<span id="cb9-25">high_scorers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Score'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>]</span>
<span id="cb9-26"></span>
<span id="cb9-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">High Scorers (Score &gt; 90):"</span>)</span>
<span id="cb9-28"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(high_scorers)</span></code></pre></div>
<p>Here, the code allows researchers to work with data at a high level of abstraction, focusing on the analysis rather than the underlying computational details.</p>
</blockquote>
</section>
<section id="python-and-cognitive-alignment" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="python-and-cognitive-alignment">Python and cognitive alignment</h3>
<p>Python’s design facilitates cognitive alignment by reducing the gap between mental models and their implementation in code. This concept can be further explained through mental model theory or cognitive fit theory, both of which provide a theoretical foundation for understanding how Python’s syntax and abstractions support alignment between a programmer’s conceptual understanding and the actual code implementation. This concept can be further explained through mental model theory, which posits that individuals create internal representations of systems to understand and predict their behavior<sup>8</sup>. Python’s syntax and abstractions align well with these mental models, thereby reducing cognitive load and enhancing the ease with which programmers can translate conceptual ideas into functional code. This is achieved through:</p>
<div class="no-row-height column-margin column-container"><div id="fn8"><p><sup>8</sup>&nbsp;Johnson-Laird, P. N. (1983). <em>Mental Models: Towards a Cognitive Science of Language, Inference, and Consciousness</em>. Harvard University Press.</p></div></div><ul>
<li><p><strong>Readability</strong>: Code that is easy to read and understand reduces cognitive load by minimizing the mental effort required to comprehend its purpose and logic. Pythonic code emphasizes clear, straightforward constructs that align with natural language, thereby allowing developers to quickly grasp the functionality without excessive interpretation. This reduction in cognitive load is particularly important for complex projects, as it enables developers to focus more on solving problems rather than deciphering convoluted code.</p></li>
<li><p><strong>Intuitive error handling</strong>: Python’s exception handling allows developers to manage errors in a way that reflects logical reasoning, including handling unexpected conditions gracefully. By using <code>try-except</code> blocks, developers can anticipate potential errors and implement appropriate fallback mechanisms, ensuring that the program can continue running or fail gracefully without crashing. This capability to manage unforeseen issues lowers the cognitive burden by making error management more predictable and structured, which is particularly useful in complex systems.</p></li>
<li><p><strong>Garbage collection</strong>: Python’s garbage collection mechanism automatically handles memory management by reclaiming unused memory, thereby freeing developers from the complex task of manual memory allocation and deallocation. This feature not only reduces the risk of memory leaks and segmentation faults but also allows developers to focus on higher-level problem-solving without worrying about low-level resource management. By abstracting away these intricate details, garbage collection contributes to lowering the cognitive load required for efficient coding.</p></li>
<li><p><strong>Modularization</strong>: Python’s modularization capabilities are crucial as they allow developers to create reusable libraries and modules with well-defined functionality. This modular approach helps in abstracting away implementation details, enabling developers to use and understand high-level components without delving into the intricacies of the underlying code. By providing a clear separation of concerns, modularization promotes cleaner, more maintainable code and reduces the mental effort required to comprehend large and complex codebases.</p></li>
<li><p><strong>Interactive development</strong>: The availability of interactive shells like IPython and Jupyter notebooks supports exploratory programming and immediate feedback, which are important for knowledge acquisition and hypothesis testing.</p></li>
</ul>
</section>
<section id="implications-for-learning-and-problem-solving" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="implications-for-learning-and-problem-solving">Implications for learning and problem solving</h3>
<p>By operating at an epistemic level, Python serves as an effective educational tool, enabling learners to focus on problem-solving strategies and conceptual understanding rather than syntactic complexities. This approach aligns with constructivist learning theory, which posits that learners build new knowledge on top of existing cognitive structures by actively engaging with content. Python’s design reduces extraneous cognitive load, as suggested by Cognitive Load Theory<sup>9</sup>, allowing learners to concentrate on essential problem-solving processes. This supports the development of computational thinking skills and promotes a deeper engagement with the material.</p>
<div class="no-row-height column-margin column-container"><div id="fn9"><p><sup>9</sup>&nbsp;Sweller, J. (1988). Cognitive Load During Problem Solving: Effects on Learning. <em>Cognitive Science</em>, 12(2), 257-285. <a href="https://doi.org/10.1207/s15516709cog1202_4">DOI</a></p></div></div><blockquote class="blockquote">
<p>Example: Simulating physical systems</p>
<p>In physics education, Python can be used to simulate and visualize systems, aiding in the comprehension of complex concepts.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulating a simple harmonic oscillator</span></span>
<span id="cb10-5">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb10-6">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sin(t)</span>
<span id="cb10-7"></span>
<span id="cb10-8">plt.plot(t, x)</span>
<span id="cb10-9">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Simple Harmonic Motion'</span>)</span>
<span id="cb10-10">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb10-11">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Displacement'</span>)</span>
<span id="cb10-12">plt.show()</span></code></pre></div>
<p>This code helps students visualize the motion, reinforcing their understanding through both computational and graphical representations.</p>
</blockquote>
</section>
<section id="enhancing-epistemic-access-through-community-and-documentation" class="level3">
<h3 class="anchored" data-anchor-id="enhancing-epistemic-access-through-community-and-documentation">Enhancing epistemic access through community and documentation</h3>
<p>Python’s comprehensive documentation and supportive community contribute to its epistemic accessibility. Resources like the Python Enhancement Proposals (PEPs), tutorials, and forums provide avenues for knowledge sharing and collective learning. The Python Enhancement Proposal (PEP) process is a key element of Python’s evolution. PEPs are design documents that describe new features or changes to Python, offering a formalized way for the community to propose, discuss, and implement language improvements. This structured process, managed by the Python Software Foundation (PSF), ensures that Python evolves in a coherent and organized manner, balancing innovation with stability. Over the years, the PEP process has brought significant changes to Python, such as the transition to Python 3 (PEP 3000) and the ongoing efforts to remove the Global Interpreter Lock (GIL) (PEP 703). These changes have enhanced Python’s compatibility, performance, and usability, reflecting the community-driven approach that keeps Python aligned with the needs of its users.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Python’s unique position as an interface language lies in its ability to bridge the cognitive gap between human reasoning and machine execution. By leveraging its simplified syntax, high-level abstractions, and support for multiple programming paradigms, Python effectively reduces cognitive load and enables developers—both professional and non-professional—to focus on problem-solving rather than the intricacies of machine-level programming. Its design philosophy, epitomized in the concept of ‘Pythonic’ code, ensures that readability and maintainability are prioritized, thereby fostering cleaner, more efficient software development.</p>
<p>The parallels between Python and natural language, particularly English, make Python an accessible language for newcomers and experienced developers alike. This natural alignment facilitates an intuitive coding experience, where the translation of human thought processes into machine instructions feels seamless. The epistemic lens through which Python operates not only supports cognitive alignment but also enhances accessibility through its ecosystem of libraries, community-driven documentation, and well-structured evolution via Python Enhancement Proposals (PEPs).</p>
<p>The evolution of Python, through key changes such as the transition to Python 3 and the ongoing efforts to remove the Global Interpreter Lock (GIL), reflects a commitment to continuous improvement while staying true to its core principles. Python’s adaptability and capacity to serve as a glue language in various domains—ranging from artificial intelligence and data science to education—underscore its versatility and enduring relevance in the software development landscape.</p>
<p>In conclusion, Python’s role as an interface language extends beyond mere syntax; it embodies a philosophical approach to programming that prioritizes human cognitive compatibility. By reducing barriers between human thought and machine logic, Python not only facilitates efficient software development but also fosters an inclusive programming culture where knowledge representation and problem-solving are accessible to a broad audience. The language’s continued evolution ensures that it remains at the forefront of modern computing, bridging the gap between abstract human cognition and concrete machine execution in an ever-changing technological world.</p>
</section>
<section id="appendix-extending-python-with-c-c-and-fortran" class="level2">
<h2 class="anchored" data-anchor-id="appendix-extending-python-with-c-c-and-fortran">Appendix: Extending Python with C, C++, and Fortran</h2>
<p>Python’s extensibility allows developers to combine high-level Python logic with low-level C/C++ or Fortran code to maximize both performance and productivity. Several tools help with this integration:</p>
<ol type="1">
<li><p><code>ctypes</code>: A built-in Python library for calling C functions in shared libraries.</p></li>
<li><p><code>cffi</code>: An advanced Foreign Function Interface for interfacing Python with C code.</p></li>
<li><p>SWIG: A wrapper generator that enables Python to interact with existing C/C++ code.</p></li>
<li><p><code>f2py</code>: A tool for interfacing Python with Fortran code, which is particularly useful in numerical computing.</p></li>
</ol>
<p>Each tool has its strengths, from direct function calls with <code>ctypes</code> to more complex scenarios handled by SWIG. Let’s look at complete code examples for each tool and where they can be found or contributed to.</p>
<section id="ctypes" class="level3">
<h3 class="anchored" data-anchor-id="ctypes"><code>ctypes</code></h3>
<section id="overview" class="level4">
<h4 class="anchored" data-anchor-id="overview">Overview</h4>
<p><code>ctypes</code> is a built-in Python library for calling functions from shared C libraries. It provides an easy and direct way to call C functions, but requires more manual management of data types and memory.</p>
<ul>
<li><p>Developers: Created by Thomas Heller, part of the Python standard library since version 2.5.</p></li>
<li><p>Where to find it: Available in <a href="https://docs.python.org/3/library/ctypes.html">Python’s documentation</a>.</p></li>
</ul>
</section>
<section id="code-example" class="level4">
<h4 class="anchored" data-anchor-id="code-example">Code example</h4>
<p><code>example.c</code> C file:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource c number-lines code-with-copy"><code class="sourceCode c"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// </span></span>
<span id="cb11-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> add<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> hello<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-9">  printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello from C!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Compile the C code (Unix-like operating systems such as Linux and macOS):</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gcc</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-shared</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> libexample.so <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-fPIC</span> example.c</span></code></pre></div>
<p><code>ctypes_example.py</code> Python file:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ctypes</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the shared library</span></span>
<span id="cb13-4">lib <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctypes.CDLL(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./libexample.so'</span>)</span>
<span id="cb13-5"></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Call the C function add</span></span>
<span id="cb13-7">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lib.add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb13-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Result of add(10, 20): </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Call the C function hello</span></span>
<span id="cb13-11">lib.hello()</span></code></pre></div>
</section>
</section>
<section id="cffi" class="level3">
<h3 class="anchored" data-anchor-id="cffi"><code>cffi</code></h3>
<section id="overview-1" class="level4">
<h4 class="anchored" data-anchor-id="overview-1">Overview</h4>
<p><code>cffi</code> (C Foreign Function Interface) is more flexible and safer than <code>ctypes</code>. It handles C types directly and ensures correctness in calling conventions and memory usage.</p>
<ul>
<li><p>Developers: Created by Armin Rigo and maintained by the PyPy project.</p></li>
<li><p>Where to find it: <a href="https://cffi.readthedocs.io/en/latest/">cffi documentation</a> and the project on <a href="https://github.com/python-cffi/cffi">GitHub</a>.</p></li>
</ul>
</section>
<section id="code-example-1" class="level4">
<h4 class="anchored" data-anchor-id="code-example-1">Code example</h4>
<p><code>mathlib.c</code> C file:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource c number-lines code-with-copy"><code class="sourceCode c"><span id="cb14-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> multiply<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Compile the C code (Unix-like operating systems such as Linux and macOS):</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gcc</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-shared</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> libmathlib.so <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-fPIC</span> mathlib.c</span></code></pre></div>
<p><code>cffi_example.py</code> Python file:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cffi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FFI</span>
<span id="cb16-2"></span>
<span id="cb16-3">ffi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FFI()</span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Declare the C function signature</span></span>
<span id="cb16-6">ffi.cdef(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb16-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  int multiply(int x, int y);</span></span>
<span id="cb16-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span>
<span id="cb16-9"></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the shared library</span></span>
<span id="cb16-11">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ffi.dlopen(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./libmathlib.so"</span>)</span>
<span id="cb16-12"></span>
<span id="cb16-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Call the C function</span></span>
<span id="cb16-14">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C.multiply(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb16-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Result of multiply(6, 7): </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</section>
</section>
<section id="swig" class="level3">
<h3 class="anchored" data-anchor-id="swig">SWIG</h3>
<section id="overview-2" class="level4">
<h4 class="anchored" data-anchor-id="overview-2">Overview</h4>
<p>SWIG (Simplified Wrapper and Interface Generator) automates the creation of wrapper code so that Python can call C or C++ functions. It is ideal for larger, more complex C/C++ codebases where manual bindings would be difficult to manage.</p>
<ul>
<li><p>Developers: Originally developed by David Beazley, now maintained by an open-source community.</p></li>
<li><p>Where to find it: <a href="http://www.swig.org/">SWIG website</a> and <a href="https://github.com/swig/swig">GitHub</a>.</p></li>
</ul>
</section>
<section id="code-example-2" class="level4">
<h4 class="anchored" data-anchor-id="code-example-2">Code example</h4>
<p><code>example.cpp</code> C++ file:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb17-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb17-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string&gt;</span></span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Greeter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">public</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb17-6">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> greet<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>string<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"!"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-8">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p><code>example.i</code> SWIG interface file:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource swig number-lines code-with-copy"><code class="sourceCode"><span id="cb18-1">%module example</span>
<span id="cb18-2">%{</span>
<span id="cb18-3">  #include "example.cpp"</span>
<span id="cb18-4">%}</span>
<span id="cb18-5"></span>
<span id="cb18-6">%include "example.cpp"</span></code></pre></div>
<p>Generate the wrapper code with SWIG and compile (Unix-like operating systems such as Linux and macOS):</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">swig</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c++</span> example.i</span>
<span id="cb19-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">g++</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-shared</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> _example.so example_wrap.cxx example.cpp <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-I</span>/usr/include/python3.8 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-fPIC</span></span></code></pre></div>
<p><code>swig_example.py</code> Python file:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> example</span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an instance of Greeter and call the greet method</span></span>
<span id="cb20-4">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> example.Greeter()</span>
<span id="cb20-5">g.greet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"World"</span>)</span></code></pre></div>
</section>
</section>
<section id="f2py" class="level3">
<h3 class="anchored" data-anchor-id="f2py"><code>f2py</code></h3>
<section id="overview-3" class="level4">
<h4 class="anchored" data-anchor-id="overview-3">Overview</h4>
<p><code>f2py</code> (Fortran to Python Interface Generator) is a part of the NumPy ecosystem and is designed to interface Python with Fortran. This is especially useful for scientific computing projects that rely on Fortran for performance-intensive tasks.</p>
<ul>
<li><p>Developers: Developed and maintained by the NumPy community.</p></li>
<li><p>Where to find it: <a href="https://numpy.org/doc/stable/f2py/">f2py documentation</a> and part of the <a href="https://github.com/numpy/numpy">NumPy GitHub repository</a>.</p></li>
</ul>
</section>
<section id="code-example-3" class="level4">
<h4 class="anchored" data-anchor-id="code-example-3">Code example</h4>
<p><code>fortran_code.f90</code> Fortran file:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource fortran number-lines code-with-copy"><code class="sourceCode fortranfixed"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">subroutine</span> add_arrays(a, b, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">result</span>, n)</span>
<span id="cb21-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">integer</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">::</span> n</span>
<span id="cb21-3"></span>
<span id="cb21-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real(8)</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">intent(in)</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">::</span> a(n), b(n)</span>
<span id="cb21-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real(8)</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">intent(out)</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">::</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">result</span>(n)</span>
<span id="cb21-6"></span>
<span id="cb21-7">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">integer</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">::</span> i</span>
<span id="cb21-8"></span>
<span id="cb21-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n</span>
<span id="cb21-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">result</span>(i) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> a(i) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> b(i)</span>
<span id="cb21-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end do</span></span>
<span id="cb21-12"></span>
<span id="cb21-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end subroutine</span> add_arrays</span></code></pre></div>
<p>Generate Python bindings using <code>f2py</code> (Unix-like operating systems such as Linux and macOS, Windows through MinGW or other compatibile Fortran compiler):</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb22-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">f2py</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> fortlib fortran_code.f90</span></code></pre></div>
<p><code>f2py_example.py</code> Python file:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fortlib</span>
<span id="cb23-2"></span>
<span id="cb23-3">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>]</span>
<span id="cb23-4">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.0</span>]</span>
<span id="cb23-5">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fortlib.add_arrays(a, b, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(a))</span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Result:"</span>, result)</span></code></pre></div>
</section>
</section>
</section>
<section id="other-references" class="level2">
<h2 class="anchored" data-anchor-id="other-references">Other references</h2>
<p>Bartlett, F. C. (1932). <em>Remembering: A Study in Experimental and Social Psychology</em>. Cambridge University Press.</p>
<p>Chinn, C. A., Buckland, L. A., &amp; Samarapungavan, A. (2011). Expanding the dimensions of epistemic cognition: Arguments from philosophy and psychology. <em>Educational Psychologist</em>, 46(3), 141-167. <a href="10.1080/00461520.2011.587722">DOI</a></p>
<p>Turkle, S., &amp; Papert, S. (1990). Epistemological pluralism and the revaluation of the concrete. <em>Journal of Mathematical Behavior</em>, 9(1), 3-33. <a href="http://web.mit.edu/sturkle/www/epistemologicalpluralism.html">URL</a></p>


</section>


<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>essay</category>
  <category>Python</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/python-as-interface/</guid>
  <pubDate>Tue, 21 Jun 2022 22:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/python-as-interface/programming-human-languages.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Harnessing Focus: Merging AI and Market Dynamics</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/attentions/</link>
  <description><![CDATA[ 





<section id="prologue" class="level2">
<h2 class="anchored" data-anchor-id="prologue">Prologue</h2>
<p>In his seminal work, <em>The Principles of Psychology</em>, William James profoundly observed, “My experience is what I agree to attend to. Only those items which I notice shape my mind—without selective interest, experience is an utter chaos” (James, 1890). This statement encapsulates the essence of how attention shapes our reality. Our selective focus not only filters the overwhelming influx of information but also constructs the very framework of our knowledge and experience. This insight forms the bedrock of my exploration into the relationship between attention mechanisms in natural language processing (NLP) and attention economics.</p>
<p>The act of attending is more than just a cognitive process; it is a fundamental determinant of how we perceive, interpret, and interact with the world. James’s reflection on attention reveals that our conscious experience is a curated narrative, constructed from the myriad stimuli we choose to acknowledge. This selective process is crucial not only in shaping individual cognition but also in driving the collective knowledge within various fields.</p>
<p>This essay is born out of my fascination with how such a seemingly simple concept—the act of paying attention—can bridge two ostensibly disparate domains: the technical intricacies of NLP and the economic principles governing human focus. Both fields, though distinct in their methodologies and applications, fundamentally rely on the efficient allocation of attention. Whether it is an AI model sifting through vast datasets to find relevance or an economist studying how people allocate their cognitive resources, the underlying principle remains the same: our attention is the gatekeeper of our experience and knowledge.</p>
<p>By exploring these connections, I aim to uncover how advancements in understanding attention can enrich both artificial intelligence and economic theories, ultimately enhancing our ability to manage and utilize information in an era of unprecedented data abundance. This journey through the intersections of cognitive science, technology, and economics underscores a personal quest to understand how the meticulous act of attending shapes not just individual minds, but the collective progression of human knowledge.</p>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In an era characterized by information overload, the concept of <strong>attention</strong> has gained paramount importance across various disciplines. From cognitive science to computer engineering and economics, the mechanisms of focusing on relevant information while filtering out the irrelevant have become a central area of study. This essay explores the fascinating parallel between attention mechanisms in natural language processing (NLP) and the theory of attention economics, two seemingly disparate fields that share a common foundation in the management of information resources.</p>
<p>Attention, in cognitive science, refers to the mental process of selectively concentrating on specific aspects of the environment while ignoring others. This fundamental cognitive ability has inspired the development of attention mechanisms in NLP, i.e., computational models that allow artificial systems to focus on the most relevant parts of input data. Concurrently, in the realm of economics, a novel approach known as <strong>attention economics</strong> has emerged, treating human attention as a scarce and valuable commodity in an information-rich world (Davenport &amp; Beck, 2001).</p>
<p>The parallel development of attention mechanisms in NLP and the theory of attention economics offers profound insights into both human cognition and artificial intelligence, with far-reaching implications for information management and technology design. This essay aims to explore these connections, highlighting how the attention paradigm serves as a bridge between computational models and economic theory, potentially reshaping our understanding of information processing in both human and artificial systems.</p>
</section>
<section id="attention-mechanisms" class="level2">
<h2 class="anchored" data-anchor-id="attention-mechanisms">Attention mechanisms</h2>
<p>Attention mechanisms in NLP are sophisticated computational techniques that allow AI models to dynamically focus on specific parts of the input data when performing language-related tasks. Inspired by human cognitive processes, these mechanisms enable AI systems to assign varying levels of importance, or “attention weights,” to different elements in a sequence, typically words or phrases in a sentence.</p>
<p>The core principle behind attention mechanisms is the ability to weigh the relevance of different input elements contextually. This allows the model to prioritize important information and de-emphasize less relevant details, leading to improved performance across various language tasks (Vaswani et al., 2017). Attention mechanisms work by creating query, key, and value representations of the input data. The model then calculates attention scores by comparing the query with the keys and uses these scores to weigh the values. This process allows the model to focus on different parts of the input with varying intensity, mimicking the way humans selectively focus on certain aspects of information while processing language.</p>
<section id="historical-development" class="level3">
<h3 class="anchored" data-anchor-id="historical-development">Historical development</h3>
<p>The concept of attention in NLP emerged as a solution to the limitations of traditional sequence-to-sequence models, particularly in machine translation. In 2014, Bahdanau et al.&nbsp;introduced the first attention mechanism in their seminal paper “Neural Machine Translation by Jointly Learning to Align and Translate” (Bahdanau et al., 2014). This breakthrough allowed models to selectively focus on parts of the source sentence while generating each word of the translation, significantly improving translation quality.</p>
<p>The evolution of attention mechanisms accelerated rapidly after this initial breakthrough. In 2015, Xu et al.&nbsp;introduced the concept of “soft” and “hard” attention in the context of image captioning, further expanding the applicability of attention mechanisms. Soft attention allows the model to consider all parts of the input with varying weights, while hard attention focuses on specific parts of the input with discrete choices.</p>
<p>The year 2017 marked a significant milestone with the introduction of the Transformer model by Vaswani et al.&nbsp;in their paper “Attention Is All You Need” (Vaswani et al., 2017). This model relied entirely on attention mechanisms without using recurrent or convolutional layers, demonstrating unprecedented efficiency and performance in various NLP tasks. The Transformer’s use of self-attention and multi-head attention enabled parallel processing of inputs and capturing long-range dependencies, setting a new standard for NLP models.</p>
<p>The success of the Transformer architecture led to the development of powerful pre-trained language models such as BERT (Bidirectional Encoder Representations from Transformers) by Devlin et al.&nbsp;in 2018 and GPT (Generative Pre-trained Transformer) by OpenAI. BERT introduced bidirectional attention, allowing the model to consider the context from both directions, which significantly improved tasks like question answering and named entity recognition. GPT focused on unidirectional generative tasks, excelling in text generation and language modeling.</p>
<p>Recent developments have continued to build on these foundations. Models like T5 (Text-to-Text Transfer Transformer) unified various NLP tasks into a single framework, and Retrieval-Augmented Generation (RAG) combined attention mechanisms with retrieval systems, enabling models to access and integrate external knowledge dynamically. These advancements have further solidified the importance of attention mechanisms in modern NLP.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart LR
    classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
    linkStyle default stroke:#0000ff,stroke-width:2px

    A[Attention Mechanisms] --&gt; B[Sequence-to-Sequence Models]
    B --&gt; C[Machine Translation]
    C --&gt; D[Neural Machine Translation by Bahdanau et al., 2014]
    D --&gt; E[Soft and Hard Attention by Xu et al., 2015]
    E --&gt; F[Transformer Model by Vaswani et al., 2017]
    F --&gt; G[BERT by Devlin et al., 2018]
    F --&gt; H[GPT by OpenAI, 2018]
    G --&gt; I[Bidirectional Attention]
    H --&gt; J[Unidirectional Generation]
    I --&gt; K[Improved Question Answering]
    I --&gt; L[Enhanced Named Entity Recognition]
    J --&gt; M[Advanced Text Generation]
    F --&gt; N[T5]
    N --&gt; O[Unified NLP Framework]
    F --&gt; P[RAG]
    P --&gt; Q[Dynamic External Knowledge Integration]
</pre>
</div>
<p></p><figcaption> Historical development of attention mechanisms</figcaption> </figure><p></p>
</div>
</div>
</div>
</section>
<section id="applications" class="level3">
<h3 class="anchored" data-anchor-id="applications">Applications</h3>
<p>Attention mechanisms have found widespread applications across numerous NLP tasks, revolutionizing performance throughout the field. In machine translation, these mechanisms have been particularly transformative. They allow models to focus on relevant words in the source language when generating each word in the target language, significantly improving the fluency and accuracy of translations (Bahdanau et al., 2014). This capability is especially valuable when dealing with languages that have different word orders, as the model can dynamically align relevant parts of the input and output sequences.</p>
<p>Text summarization has also benefited greatly from attention mechanisms. Models equipped with these mechanisms can identify and focus on the most important sentences or phrases in a document, enabling the creation of more coherent and informative summaries. This ability to distill the essence of longer texts into concise summaries has proven invaluable in various applications, from news aggregation to academic research.</p>
<p>In the realm of question answering, attention mechanisms have led to more sophisticated and context-aware systems. These models can efficiently locate and focus on relevant information within a given text to answer specific questions. This has resulted in more accurate and nuanced responses, as the model can weigh the importance of different parts of the input text in relation to the question at hand (Devlin et al., 2018).</p>
<p>Sentiment analysis has seen significant improvements with the introduction of attention mechanisms. Models can now focus on words or phrases that are most indicative of sentiment, leading to more accurate classification of the overall sentiment expressed in a piece of text. This enhanced capability has found applications in areas such as social media monitoring, customer feedback analysis, and market research.</p>
<p>Speech recognition systems have also leveraged attention mechanisms to great effect. These mechanisms help align audio signals with text transcriptions, enhancing the accuracy of speech-to-text systems. This has led to more robust and reliable voice recognition technologies, improving user experiences in applications ranging from virtual assistants to transcription services.</p>
<p>In the field of named entity recognition, attention mechanisms have proven invaluable. They allow models to better identify and classify named entities by focusing on contextual cues, leading to more accurate extraction of important information such as names, organizations, and locations from unstructured text (Devlin et al., 2018).</p>
<p>Text generation tasks, including story generation and conversational AI, have been revolutionized by attention mechanisms. These mechanisms help models maintain coherence and context over long sequences of text, resulting in more natural and contextually appropriate generated content. This has led to significant advancements in chatbots, creative writing assistance, and other generative language tasks (Brown et al., 2020).</p>
<p>Moreover, attention mechanisms have found applications in document classification, where they help models focus on the most relevant parts of long documents to determine their category or topic. In machine reading comprehension, these mechanisms enable models to better understand and reason about complex passages of text, leading to more human-like comprehension abilities.</p>
<p>The versatility of attention mechanisms has also led to their adoption in multimodal tasks that combine language with other forms of data. For instance, in image captioning, attention allows models to focus on relevant parts of an image while generating descriptive text. Similarly, in video understanding tasks, attention mechanisms help models align textual descriptions or questions with relevant frames or segments of video.</p>
<p>As research in NLP continues to advance, the applications of attention mechanisms continue to expand, touching virtually every aspect of language processing and understanding. Their ability to dynamically focus on relevant information has made them a fundamental component in the ongoing quest to create more intelligent and human-like language processing systems.</p>
</section>
<section id="technical-details" class="level3">
<h3 class="anchored" data-anchor-id="technical-details">Technical details</h3>
<p>The development of various attention models has been driven by the need to address specific limitations of preceding models and to enhance the capabilities of NLP systems. Each type of attention mechanism builds on previous concepts, offering improvements and specialized functionalities for different tasks.</p>
<p>Self-Attention, also known as scaled dot-product attention, was a major innovation introduced in the Transformer paper by Vaswani et al.&nbsp;(2017). Self-Attention allows a model to consider the relationships between all words in a sentence, regardless of their position. It works by assigning importance scores to each word in relation to every other word.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart LR
    classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
    linkStyle default stroke:#0000ff,stroke-width:2px

    A[Input Sequence] --&gt; B[Query]
    A --&gt; C[Key]
    A --&gt; D[Value]
    B --&gt; E[Attention Scores]
    C --&gt; E
    E --&gt; F[Weighted Sum]
    D --&gt; F
    F --&gt; G[Output]
</pre>
</div>
<p></p><figcaption> Multi-Head Attention mechanism</figcaption> </figure><p></p>
</div>
</div>
</div>
<p>In this process, each word generates a query, key, and value. The query of each word is compared with the keys of all words to produce attention scores, which are then used to create a weighted sum of the values. Self-Attention captures long-range dependencies effectively and allows parallel processing, leading to faster training times. It also provides interpretability through attention weights. However, it is computationally expensive for very long sequences due to quadratic scaling with sequence length and requires large amounts of data and compute resources.</p>
<p>To enhance the model’s capacity to learn different aspects of relationships between words, Multi-Head Attention was introduced in the same Transformer paper. Multi-Head Attention extends the idea of self-attention by performing multiple self-attention operations in parallel. Each “head” can focus on different aspects of the relationship between words, such as grammar, semantics, or context. The results from all heads are then combined to produce the final output.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart TD
    classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
    linkStyle default stroke:#0000ff,stroke-width:2px

    A[Input] --&gt; B[Head 1]
    A --&gt; C[Head 2]
    A --&gt; D[Head 3]
    B --&gt; E[Combine]
    C --&gt; E
    D --&gt; E
    E --&gt; F[Output]
</pre>
</div>
<p></p><figcaption> Cross-Head Attention mechanism</figcaption> </figure><p></p>
</div>
</div>
</div>
<p>Multi-Head Attention enhances the model’s ability to focus on different types of relationships simultaneously, improving its robustness and flexibility, and increasing its representational capacity (Vaswani et al., 2017). However, it is more computationally intensive due to multiple attention heads and has higher memory consumption, requiring more hardware resources.</p>
<p>Cross-Attention, another key mechanism introduced in the Transformer paper, is used in the encoder-decoder structure of the Transformer. It is crucial in tasks that involve translating from one sequence to another, such as in machine translation. Cross-Attention allows the model to focus on relevant parts of the input sequence (from the encoder) when generating each word of the output sequence (in the decoder).</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart LR
    classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
    linkStyle default stroke:#0000ff,stroke-width:2px

    A[Input Sequence] --&gt; B[Encoder]
    B --&gt; C[Cross-Attention]
    D[Output So Far] --&gt; E[Decoder]
    E --&gt; C
    C --&gt; F[Next Output Word]
</pre>
</div>
<p></p><figcaption> Sparse Attention mechanism</figcaption> </figure><p></p>
</div>
</div>
</div>
<p>Cross-Attention enables effective mapping between different sequences, improving translation quality and facilitating the handling of alignment in sequence-to-sequence tasks. However, its complexity increases with the length of input and output sequences, requiring significant computational resources for large-scale translations.</p>
<p>To efficiently handle very long sequences, Sparse Attention was introduced by Child et al.&nbsp;(2019) as an improvement upon Self-Attention. Sparse Attention reduces the number of word pairs considered, focusing instead on a strategic subset. This can be based on proximity (attending to nearby words), fixed patterns (attending to every nth word), or learned patterns of importance. Sparse Attention reduces computational load, making it feasible to handle very long sequences while maintaining the ability to capture essential dependencies with fewer computations. However, it may miss some important relationships if the sparsity pattern is not well-chosen and can be complex to implement and optimize effectively.</p>
<p>These attention mechanisms have dramatically enhanced the ability of NLP models to understand and generate language. By allowing models to dynamically focus on relevant information and capture complex relationships within data, attention mechanisms have become fundamental to modern NLP architectures. They enable models to better grasp context, handle long-range dependencies, and produce more coherent and contextually appropriate outputs across a wide range of language tasks.</p>
</section>
<section id="novelty-and-success" class="level3">
<h3 class="anchored" data-anchor-id="novelty-and-success">Novelty and success</h3>
<p>The introduction of attention mechanisms marked a significant paradigm shift in NLP. Their novelty lies in several key aspects. Unlike previous models that processed all input elements equally, attention mechanisms allow models to dynamically focus on relevant parts of the input. This mimics human cognitive processes more closely, as we naturally focus on specific words or phrases when understanding or translating language (Vaswani et al., 2017). Additionally, attention mechanisms, especially in models like the Transformer, allow for parallel processing of input sequences, in contrast to recurrent neural networks (RNNs) that process inputs sequentially. This parallelization was made possible by advancements in hardware, particularly GPUs and TPUs, which significantly accelerated the training and inference processes. The synergy between attention mechanisms and modern hardware has been crucial in handling the large-scale computations required by models like GPT-3. Moreover, attention allows models to capture relationships between words regardless of their distance in the input sequence, addressing a major limitation of RNNs and convolutional neural networks (CNNs). Furthermore, the attention weights provide a degree of interpretability, allowing researchers to visualize which parts of the input the model is focusing on for each output.</p>
<p>Attention mechanisms added several critical capabilities to NLP that were present in earlier models but lacked the success seen with GPT. For instance, traditional sequence-to-sequence models struggled with maintaining context over long texts, often leading to loss of important information. The introduction of the Transformer architecture was a game-changer. Transformers, leveraging self-attention mechanisms, efficiently handled long-range dependencies and context, a task that RNNs and LSTMs found challenging.</p>
<p>The success of attention mechanisms can be attributed to several factors. Attention-based models consistently outperform previous state-of-the-art models across a wide range of NLP tasks, from machine translation to text summarization. For example, BERT (Devlin et al., 2018) and GPT-3 (Brown et al., 2020) have set new benchmarks in numerous NLP tasks. The ability to process inputs in parallel allows attention-based models to scale efficiently to larger datasets and more complex tasks. The use of multi-head attention in the Transformer model enables it to learn different aspects of the data simultaneously. The same basic attention mechanism can be adapted for various NLP tasks with minimal task-specific modifications. For example, BERT’s bidirectional attention allows it to understand context from both directions, making it highly effective for tasks like question answering and sentiment analysis. The concept of attention aligns with our understanding of human cognition, making these models more intuitive and potentially more aligned with how our brains process language. Attention mechanisms, particularly in Transformer-based models, work exceptionally well with pre-training on large corpora. This has led to powerful language models like BERT and GPT, which can be fine-tuned for specific tasks with impressive results. For instance, GPT-3’s success in generating coherent and contextually appropriate text can be attributed to its extensive pre-training on diverse datasets, followed by fine-tuning. Furthermore, the development of models like Retrieval-Augmented Generation (RAG) by Lewis et al.&nbsp;(2020) showcases the combination of attention mechanisms with retrieval systems. RAG combines pre-trained language models with a retrieval component, allowing the model to access and integrate external knowledge dynamically. This hybrid approach significantly enhances the model’s ability to generate accurate and contextually rich responses by retrieving relevant documents or information during the generation process.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart LR
    classDef default fill:#ffffff,stroke:#0000ff,stroke-width:2px,color:#000000,font-weight:bold
    linkStyle default stroke:#0000ff,stroke-width:2px

    A[Attention Mechanisms] --&gt; B[Dynamic Focus]
    A --&gt; C[Parallelization]
    A --&gt; D[Long-range Dependencies]
    A --&gt; E[Interpretability]
    A --&gt; F[Improved Performance]
    A --&gt; G[Scalability]
    A --&gt; H[Versatility]
    A --&gt; I[Biological Plausibility]
    A --&gt; J[Synergy with Pre-training]
    A --&gt; K[Enhanced Capabilities with RAG]
</pre>
</div>
<p></p><figcaption> Novelty and success of attention mechanisms</figcaption> </figure><p></p>
</div>
</div>
</div>
<p>The combination of these novel features and success factors has led to attention mechanisms becoming a cornerstone of modern NLP. They have enabled more nuanced understanding and generation of language, pushing the boundaries of what’s possible in artificial language processing. As research continues, attention mechanisms are likely to evolve further, potentially leading to even more sophisticated language models that can better capture the complexities and nuances of human communication.</p>
</section>
</section>
<section id="attention-economics" class="level2">
<h2 class="anchored" data-anchor-id="attention-economics">Attention economics</h2>
<section id="definition-and-core-principles" class="level3">
<h3 class="anchored" data-anchor-id="definition-and-core-principles">Definition and core principles</h3>
<p>Attention economics is an approach to managing information that recognizes human attention as a scarce and valuable commodity. In an environment abundant with information, the primary challenge becomes not the acquisition of information but the allocation of attention. This theory underscores the scarcity of attention in contrast to the overwhelming availability of information, emphasizing the need to allocate it efficiently.</p>
<p>A fundamental principle of attention economics is the concept of attention as a scarce resource. Unlike information, which can be produced and replicated infinitely, human attention is inherently limited. This limitation elevates the value of attention, making it a critical focus for individuals and organizations alike. Consequently, various stimuli—from advertisements to social media content—compete fiercely for individuals’ attention. This competition necessitates that individuals make deliberate choices about where to direct their attention, thus making attention allocation a significant aspect of personal and professional decision-making processes. Moreover, attention is viewed as a form of capital; the ability to capture and sustain attention can be monetized, influencing business models and marketing strategies (Davenport &amp; Beck, 2001).</p>
</section>
<section id="historical-context" class="level3">
<h3 class="anchored" data-anchor-id="historical-context">Historical context</h3>
<p>The concept of attention economics emerged in response to the dramatic increase in available information during the late 20th and early 21st centuries. The advent of the internet and digital media exponentially increased the accessibility and volume of information, shifting the primary challenge from obtaining information to managing and prioritizing it effectively.</p>
<p>Nobel laureate Herbert Simon laid the groundwork for attention economics in a pivotal 1971 speech, where he observed that “a wealth of information creates a poverty of attention” (Simon, 1971). Simon highlighted the paradox where the abundance of information leads to a scarcity of attention, emphasizing that in an information-rich world, attention becomes the limiting factor in consumption. This insight laid the theoretical foundation for what would later become attention economics.</p>
<p>Building on Simon’s ideas, Michael Goldhaber coined the term “attention economy” in 1997. Goldhaber articulated that human attention is treated as a scarce and valuable commodity, arguing that in a society overflowing with information, attention becomes the new currency. He posited that the ability to attract and hold attention is essential for success in various fields, from business to media to personal interactions. Goldhaber’s work underscored the need to adapt traditional economic models to account for the scarcity of human attention (Goldhaber, 1997).</p>
<p>Thomas Davenport further developed the concept in his book “The Attention Economy: Understanding the New Currency of Business,” bringing these ideas into mainstream business thinking and highlighting how businesses can thrive by effectively managing and capturing attention (Davenport &amp; Beck, 2001). Yochai Benkler explored the broader implications of attention economics within networked information environments, adding depth to the theoretical landscape and emphasizing the role of social networks and digital platforms in the attention economy (Benkler, 2006).</p>
</section>
<section id="cognitive-basis" class="level3">
<h3 class="anchored" data-anchor-id="cognitive-basis">Cognitive basis</h3>
<p>The cognitive basis of attention economics lies in understanding how the human brain processes and prioritizes information. Cognitive science reveals that humans have a limited capacity for attention and must constantly filter and prioritize incoming stimuli to function effectively. This selective attention process is governed by neural mechanisms that help focus cognitive resources on the most relevant and significant information while ignoring distractions.</p>
<p>Research in cognitive psychology and neuroscience has shown that attention is influenced by factors such as salience, relevance, and context. Salient stimuli—those that stand out due to their intensity, novelty, or contrast—tend to capture attention more readily. Relevance, determined by personal interests and goals, also plays a crucial role in attention allocation. Additionally, the context in which information is presented can affect how attention is directed and maintained.</p>
<p>These cognitive principles have profound effects on individual and group beliefs. By capturing attention, information can influence perceptions, attitudes, and behaviors. For instance, repeated exposure to specific ideas or narratives can shape beliefs and reinforce existing biases. At a group level, the collective focus on particular topics can drive public discourse and societal norms. Understanding these cognitive mechanisms allows for the development of strategies to manage and direct attention effectively, both in beneficial ways and in ways that can manipulate or mislead.</p>
</section>
<section id="applications-1" class="level3">
<h3 class="anchored" data-anchor-id="applications-1">Applications</h3>
<p>In marketing, attention economics has profoundly influenced advertising strategies. The need to capture attention in a crowded media landscape has led to innovations such as native advertising and influencer marketing. These techniques are designed to engage audiences more effectively by integrating promotional content seamlessly into users’ everyday experiences (Eckler &amp; Bolls, 2011).</p>
<p>User interface design is another area significantly impacted by the principles of attention economics. Designers focus on simplicity, clarity, and strategic use of visual elements to guide users’ attention, enhancing usability and engagement. Websites, apps, and software interfaces are meticulously crafted to capture and sustain user attention by minimizing distractions and emphasizing important features (Nielsen &amp; Loranger, 2006).</p>
<p>In the realm of information management, attention economics has inspired new approaches to knowledge management within organizations. Effective filtering, prioritization, and presentation of information are essential to ensure that critical data receives the necessary attention amidst the vast amounts of available information (Davenport, 2005).</p>
<p>Social media platforms like Facebook, Twitter, and Instagram operate as attention marketplaces where content competes for user engagement. These platforms are designed to maximize user attention through algorithms that prioritize engaging content, fostering prolonged interaction and repeat visits (Kietzmann et al., 2011).</p>
<p>Content creation has also been shaped by attention economics, evident in the prevalence of clickbait headlines and sensationalist content. These tactics aim to capture initial attention, which is crucial for success in an environment where numerous pieces of content vie for visibility and engagement (Blom &amp; Hansen, 2015).</p>
<p>Understanding attention economics is essential in today’s information-saturated world. It provides a framework for analyzing how individuals, organizations, and technologies compete for and allocate the limited resource of human attention. Marketers have exploited attention economics to generate substantial revenues by developing strategies that capture and monetize user engagement. However, this same framework has been leveraged by bad actors, including state-backed propaganda efforts and terrorist organizations, to manipulate public perception, spread misinformation, and incite violence (Benkler et al., 2018; Byman, 2015). Recognizing both the beneficial and malicious uses of attention economics is crucial for developing strategies to safeguard the integrity of information and protect the public from manipulation.</p>
<p>The relevance of attention economics is further underscored by its profound impact on the growth and revenue models of big tech companies. Platforms like Google, Facebook, and YouTube have built their business empires on the ability to capture and monetize user attention through targeted advertising and engagement-driven content algorithms. This focus on maximizing user attention has fueled their unprecedented growth and reshaped entire sectors. Traditional media industries, such as television and newspapers, have been significantly outshined by these digital platforms, which have become dominant forces in the advertising market. The shift towards an attention-driven economy highlights the transformative power of managing and leveraging human attention in the digital age.</p>
</section>
</section>
<section id="bridging-nlp-and-attention-economics" class="level2">
<h2 class="anchored" data-anchor-id="bridging-nlp-and-attention-economics">Bridging NLP and attention economics</h2>
<p>The study of attention provides a compelling lens through which to examine the intersection between natural language processing (NLP) technologies and the broader field of attention economics. Both disciplines are fundamentally concerned with filtering, allocating, and prioritizing resources—whether computational resources in artificial systems or cognitive resources in human behavior. This convergence elucidates the deep interconnections between human cognition and artificial intelligence, particularly when both are designed with similar principles of resource efficiency. The application of these shared principles has profound implications for enhancing AI capabilities, optimizing human-machine interactions, and addressing the ethical considerations inherent in attention-driven technologies.</p>
<section id="conceptual-overlap" class="level3">
<h3 class="anchored" data-anchor-id="conceptual-overlap">Conceptual overlap</h3>
<p>The conceptual convergence between attention mechanisms in NLP and attention economics is rooted in the shared imperative of efficiently managing limited resources. Attention mechanisms in NLP dynamically allocate computational focus to the most salient parts of an input sequence, thereby enhancing model efficiency and optimizing task-specific performance (Vaswani et al., 2017). Similarly, attention economics addresses how individuals allocate their limited cognitive resources among competing stimuli. In both domains, the core challenge is the management of scarcity: in NLP, it pertains to computational power and data complexity, while in attention economics, it relates to the finite capacity of human attention.</p>
<p>In NLP, attention mechanisms facilitate models in identifying which parts of the input are most critical for generating an accurate output, akin to how humans determine the most pertinent pieces of information in a given context. This parallel underscores a shared objective: extracting meaning and utility from complex environments by focusing on what matters most. By understanding these overlaps, we can draw deeper insights into how to make AI systems more adaptive and contextually aware, much like human attention functions in dynamic environments.</p>
<p>Attention mechanisms in NLP models, such as the Transformer architecture, rely on the principle of self-attention to focus on important elements within an input sequence, thereby allowing models to understand relationships between tokens regardless of their distance within the text (Vaswani et al., 2017). This mechanism mirrors the way human attention works by selectively focusing on relevant information while ignoring less pertinent details. In attention economics, this selective focus is essential for navigating information-rich environments where individuals must decide which inputs are worthy of their cognitive effort. The parallels between these processes reveal the potential for AI systems to more closely emulate human-like efficiency in information processing, ultimately leading to more sophisticated and effective models.</p>
<p>The relationship between attention in NLP and attention economics also highlights the adaptive nature of attention. Human attention is constantly shifting based on context, relevance, and immediate needs. This adaptability is a key feature that NLP models aim to replicate through dynamic attention mechanisms. By incorporating principles from attention economics, AI systems can be designed to adjust their focus in response to changing priorities or user inputs, making them more responsive and versatile in real-world applications.</p>
</section>
<section id="enhancing-attention-mechanisms" class="level3">
<h3 class="anchored" data-anchor-id="enhancing-attention-mechanisms">Enhancing attention mechanisms</h3>
<p>Integrating insights from attention economics into NLP offers significant opportunities for advancing AI models. By understanding the principles of human attention—how individuals process and prioritize information—these insights can be adapted to enhance NLP systems. Two primary areas of focus are the improvement of token-to-meaning transformation and the refinement of AI responses to user requests.</p>
<section id="improving-token-to-meaning-transformation" class="level4">
<h4 class="anchored" data-anchor-id="improving-token-to-meaning-transformation">Improving token-to-meaning transformation</h4>
<p>The transformation of tokens into meaningful representations is central to NLP, and cognitive principles derived from attention economics can be instrumental in enhancing this process. Jakobson’s model of language functions provides a useful framework for understanding the components required for effective communication, including context, code, and the addressee’s needs. By drawing on these components, NLP systems can be designed to produce language that is more nuanced, contextually appropriate, and reflective of human communicative intent.</p>
<ol type="1">
<li><p>Contextual understanding: Insights from human cognitive attention can enable NLP models to better capture contextual cues, which are essential for disambiguating meanings. For example, words with multiple interpretations rely heavily on surrounding context to determine the intended meaning. By incorporating cognitive models that reflect human tendencies to weigh contextual information, NLP models can exhibit similar sensitivity to context. This involves refining attention weights to give greater emphasis to relevant parts of the input sequence, thereby enabling models to disambiguate meaning more effectively. For instance, in sentiment analysis, understanding whether a word has positive or negative connotations often depends on the surrounding text, and attention mechanisms can be fine-tuned to improve this contextual understanding.</p></li>
<li><p>Mapping tokens to common code: Attention mechanisms can be refined to facilitate a more nuanced mapping of tokens to an internal representation—or “common code”—that aligns with human linguistic conventions. This refinement involves focusing on syntax, semantics, and pragmatics to ensure that NLP-generated language is syntactically accurate, semantically rich, and pragmatically appropriate. By enhancing the model’s capacity to interpret syntactic structures and semantic relationships, it becomes better equipped to generate outputs that are more coherent and contextually relevant. For example, in machine translation, attention mechanisms can be optimized to ensure that cultural nuances and idiomatic expressions are accurately represented, bridging the gap between linguistic form and communicative function.</p></li>
<li><p>Constructing coherent messages: By integrating principles from cognitive neuroscience, NLP systems can be designed to construct messages that are not only coherent but also reflective of the intended meanings in specific contexts. For instance, in machine translation, attention mechanisms can prioritize idiomatic expressions and cultural nuances that are crucial for generating accurate and contextually appropriate translations, thereby improving the quality of the output, especially in situations requiring nuanced understanding (Bahdanau et al., 2014). The ability to construct coherent messages extends beyond mere grammatical correctness; it involves generating language that resonates with the cultural and contextual expectations of the audience, thus enhancing the overall quality of communication.</p></li>
</ol>
</section>
</section>
<section id="enhancing-responses-to-user-requests" class="level3">
<h3 class="anchored" data-anchor-id="enhancing-responses-to-user-requests">Enhancing responses to user requests</h3>
<p>Attention economics also provides a valuable framework for improving how NLP models respond to user requests by optimizing attention allocation during interactions. This approach focuses on understanding user intent, tailoring responses to user needs, and maintaining conversational coherence. By leveraging these principles, NLP models can achieve a more sophisticated level of interaction that aligns with human communicative behaviors.</p>
<ol type="1">
<li><p>Understanding intent: Human cognition involves inferring intent based on context, tone, and prior interactions. By incorporating such cognitive insights, NLP models can more effectively infer the user’s goals and generate responses that align with these goals. This may involve dynamically adjusting the focus of attention on different parts of a user’s input based on inferred intent, thereby improving response relevance. For instance, in customer service applications, understanding whether a user is frustrated or seeking specific information can significantly impact the model’s ability to provide a helpful response. Attention mechanisms can be trained to recognize and prioritize emotional cues, leading to more empathetic and contextually appropriate replies.</p></li>
<li><p>Tailoring responses: Personalizing responses requires understanding the receiver’s needs, whether explicitly stated or implicitly inferred. By analyzing user interaction histories, AI models can prioritize content that is contextually valuable and aligned with user preferences. This approach is particularly effective in customer service scenarios, where tailored responses significantly enhance the quality of interactions. For example, recommendation systems can benefit from attention mechanisms that prioritize user preferences based on historical data, thereby providing more accurate and personalized suggestions. Tailoring responses also involves understanding subtleties such as tone, formality, and the specific needs of different user demographics, which can be enhanced through targeted attention mechanisms.</p></li>
<li><p>Maintaining continuity: Effective communication also necessitates maintaining continuity in a conversation. Attention mechanisms inspired by cognitive models can ensure that AI keeps track of conversational progression, much like humans do. This capability is especially critical in tasks that require multi-turn interactions, such as dialogue systems or complex question answering, where understanding the full context of previous exchanges is crucial for generating coherent responses. By maintaining a record of prior conversation states, attention mechanisms can enhance the model’s ability to deliver responses that are contextually consistent and logically connected to the preceding dialogue, thus improving user satisfaction and engagement.</p></li>
</ol>
<p>By aligning attention mechanisms with human cognitive processes, NLP models can enhance their ability to prioritize and filter information, thereby improving their capacity to handle complex user interactions and deliver responses that more closely mimic human communication patterns. This alignment not only improves model performance but also contributes to the creation of more natural and effective human-machine interactions.</p>
</section>
<section id="practical-implications" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications">Practical implications</h3>
<p>The integration of attention economics into AI design has profound practical implications that can enhance the functionality and usability of these systems in real-world scenarios. By optimizing how AI models allocate attention to prioritize contextually valuable information, these systems can achieve a greater degree of human-like interaction. The practical applications of this integration span multiple domains, including user experience design, content personalization, and the development of intelligent interfaces that cater to individual cognitive preferences.</p>
<ol type="1">
<li><p>Human-machine interaction: By emulating human patterns of attention allocation, AI systems can more effectively present information that aligns with human cognitive capabilities. This alignment reduces cognitive overload by filtering out extraneous details and emphasizing what is most relevant at a given moment, thus enhancing the user experience. For instance, virtual assistants that leverage attention mechanisms can focus on the most critical parts of a user’s query, providing succinct and relevant answers without overwhelming the user with unnecessary information. This not only improves efficiency but also makes interactions more intuitive and user-friendly.</p></li>
<li><p>Content filtering and personalization: Both attention mechanisms in NLP and attention economics emphasize filtering information to prioritize what is important. In digital environments overwhelmed by data, this capability is crucial. AI systems that leverage attention principles can deliver more relevant and personalized content, helping prevent information overload and ensuring that users receive information that truly matters to them. For example, news aggregation platforms can use attention-based models to curate articles that align with a user’s interests, thereby increasing engagement and reducing the cognitive burden of sifting through irrelevant content. Personalization extends to entertainment, education, and e-commerce, where tailored content delivery enhances user satisfaction and retention.</p></li>
<li><p>Enhancing meaning and agency in language: Insights from attention economics can also be leveraged to improve the conveyance of meaning in NLP. By focusing not only on linguistic accuracy but also on the pragmatic aspects of communication, NLP models can more effectively emulate how humans use language to express intentions, make decisions, and engage in meaningful interactions. This involves generating language that reflects an understanding of social norms, cultural context, and the specific needs of the audience. For example, in educational applications, NLP models can adapt their explanations based on the learner’s background knowledge and cognitive load, thereby providing a more effective learning experience. Enhancing meaning and agency in language also involves the capacity to generate persuasive and emotionally resonant content, which is critical in applications such as marketing and digital storytelling.</p></li>
<li><p>Human attention augmentation: Another significant practical implication is the potential for using AI to augment human attention. By developing AI systems that can assist individuals in managing their attention more effectively, we can help people navigate increasingly complex information environments. For example, digital tools that leverage attention mechanisms can prioritize important emails, highlight critical parts of documents, or provide reminders about key tasks. This augmentation of human attention has the potential to enhance productivity and reduce the cognitive load associated with managing large amounts of information, thus improving overall well-being and efficiency.</p></li>
</ol>
<p>Thus, this conceptual overlap has direct implications for advancing personalized user experiences, enhancing content relevance, and improving the coherence and depth of generated language, pushing AI towards a more human-like understanding and communication paradigm. By focusing on these practical applications, we can create AI systems that are not only efficient but also more attuned to the complexities of human cognition and communication.</p>
</section>
<section id="adversarial-implications" class="level3">
<h3 class="anchored" data-anchor-id="adversarial-implications">Adversarial implications</h3>
<p>The relationship between attention economics and NLP has a dual nature, encompassing both beneficial and adversarial aspects. Malicious actors, including state-sponsored entities and extremist groups, have exploited these principles for nefarious purposes, using AI-driven content to capture attention and influence behavior in harmful ways (Byman, 2015). The convergence of NLP and attention economics thus presents significant ethical and security challenges that must be addressed to mitigate potential harms.</p>
<p>Social media platforms, in particular, are fertile grounds for such manipulations, as their design often revolves around maximizing user engagement—a goal aligned with capturing as much user attention as possible. Malicious actors exploit attention-grabbing strategies to disseminate misinformation, manipulate public opinion, and foster radicalization. These tactics pose significant risks, undermining individual autonomy, eroding public trust, and destabilizing communities (Benkler et al., 2018). The use of NLP models to generate deepfake content, spread disinformation, and target vulnerable populations exemplifies the darker side of attention-driven technologies.</p>
<p>To mitigate these risks, robust mechanisms must be developed within AI systems to detect and counteract malicious content. By incorporating principles of attention economics, AI can be more effectively designed to identify manipulation attempts and filter harmful content before it reaches users. Additionally, enhancing user awareness of how their attention can be manipulated is key to fostering resilience against such tactics. Educational initiatives that inform users about the tactics used to capture and exploit attention can empower individuals to be more discerning about the content they engage with, thereby reducing the impact of adversarial efforts. Moreover, collaboration between technology companies, policymakers, and researchers is essential to develop ethical standards and technological safeguards that prevent the misuse of attention-focused AI technologies.</p>
<p>Furthermore, it is important to explore how AI systems themselves can be made more resilient to adversarial attacks that exploit attention mechanisms. Adversarial attacks on NLP models often involve manipulating input data to divert the model’s attention towards irrelevant or misleading features, thereby causing errors in output. By designing more robust attention mechanisms that can detect and ignore adversarial noise, AI systems can be better protected from such threats. This involves incorporating redundancy in attention pathways, utilizing multi-layered attention checks, and leveraging human-in-the-loop approaches to validate critical outputs in high-stakes scenarios.</p>
</section>
<section id="evolution-of-attention-with-human-and-virtual-agent-agency" class="level3">
<h3 class="anchored" data-anchor-id="evolution-of-attention-with-human-and-virtual-agent-agency">Evolution of attention with human and virtual agent agency</h3>
<p>The evolution of attention mechanisms has been profoundly shaped by the interplay between human agency and virtual agent agency. In human-centric contexts, attention is inherently tied to cognitive processes that prioritize stimuli based on relevance, interest, or survival needs. Human agency in attention allocation is influenced by both conscious choices—such as focusing on a task—and subconscious processes that filter out irrelevant information. In contrast, virtual agents, particularly those driven by NLP, allocate attention based on algorithmic strategies designed to optimize computational efficiency and performance metrics. As AI systems have evolved, the agency of virtual agents in managing attention has become more sophisticated, mimicking human-like patterns of selective focus through the use of attention mechanisms like self-attention in Transformer models. This evolution marks a shift towards increasingly autonomous AI, capable of dynamically adjusting its focus in response to contextual cues, much like a human would. The interaction between human and virtual agent agency in attention management holds significant potential for augmenting human capabilities, enhancing user experiences, and ensuring that virtual agents can respond to human needs in a more intuitive and contextually appropriate manner.</p>
<p>The interplay between human and virtual agent agency also raises important questions about control and autonomy. As virtual agents become more capable of autonomously managing their attention, there is a need to ensure that their objectives remain aligned with human values and intentions. This requires developing mechanisms for human oversight and intervention, allowing users to guide the focus of AI systems when necessary. Additionally, understanding how virtual agents can complement human attention—by taking over routine tasks or highlighting important information—can lead to more effective human-AI collaboration. The evolution of attention in this context thus represents not only technological advancement but also a reimagining of how humans and machines can work together to manage cognitive resources in increasingly complex environments.</p>
</section>
<section id="future-research-directions" class="level3">
<h3 class="anchored" data-anchor-id="future-research-directions">Future research directions</h3>
<p>Future research should prioritize interdisciplinary collaborations that integrate insights from NLP and attention economics to drive new advancements in managing attention within both human and machine contexts. Potential avenues for future research include:</p>
<ol type="1">
<li><p>Advanced attention models: Developing sophisticated attention models that incorporate economic principles can lead to AI systems that are more adept at understanding and processing information in ways that closely resemble human cognition. These models could leverage dynamic attention allocation strategies that mimic human adaptability in shifting focus based on context and changing priorities. Research into biologically inspired attention mechanisms, such as those observed in visual and auditory processing, could further enhance the ability of NLP models to handle complex, multimodal inputs. Additionally, exploring the integration of reinforcement learning with attention mechanisms could allow AI systems to learn optimal attention strategies over time, improving their effectiveness in a variety of tasks.</p></li>
<li><p>Ethical considerations: Exploring the ethical implications of attention management in AI is essential. As AI becomes increasingly integrated into daily life, addressing its potential for misuse and ensuring that systems are designed to protect rather than exploit cognitive vulnerabilities must be a core research focus. This includes developing frameworks for ethical AI design that prioritize user autonomy, transparency, and fairness. Additionally, research should explore the long-term psychological effects of interacting with attention-optimized AI systems, particularly in vulnerable populations such as children and individuals with cognitive impairments. Ethical guidelines must also consider the balance between optimizing user engagement and avoiding exploitative practices that may lead to addiction or reduced well-being.</p></li>
<li><p>User-centric AI development: Further research should also focus on improving human-machine interaction through the lens of attention allocation. By designing AI systems that work seamlessly with human cognitive processes, future technologies can assist users in navigating complex information environments without overwhelming them, thereby promoting more natural and effective interactions. This involves developing adaptive user interfaces that respond to real-time changes in user attention and engagement levels, as well as exploring the use of biometric data (e.g., eye-tracking, heart rate) to inform attention-aware AI responses. Such user-centric approaches have the potential to revolutionize fields such as education, healthcare, and remote work by creating more responsive and supportive AI-driven tools. Additionally, understanding individual differences in attention patterns can lead to the development of more personalized AI systems that cater to the unique cognitive styles of different users.</p></li>
<li><p>Collaborative attention systems: Another promising area for future research is the development of collaborative attention systems where human users and AI agents work together to manage attention. Such systems could leverage the strengths of both human intuition and AI computational power to optimize attention allocation in complex tasks. For example, in medical diagnostics, AI could help doctors focus on the most relevant patient data, while doctors provide the contextual understanding that AI lacks. Research into how to best facilitate this kind of human-AI collaboration, including the development of interfaces that support joint attention, will be critical for advancing the effectiveness of these systems.</p></li>
</ol>
</section>
</section>
<section id="final-remarks" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks">Final remarks</h2>
<p>The interdisciplinary exploration of attention through the frameworks of NLP and attention economics offers profound insights into the efficient management of information resources. Understanding the alignment between attention mechanisms in NLP and attention economics provides new opportunities to enhance both artificial and human cognitive processes. The convergence of these fields holds the potential for more human-centric technology, capable of understanding nuanced intentions, reducing cognitive overload, and delivering personalized experiences.</p>
<p>However, this convergence also underscores the ethical responsibilities associated with developing these technologies. As AI becomes more proficient at capturing and retaining human attention, it is crucial to consider the implications of these capabilities and ensure that they are employed responsibly. This includes implementing safeguards to prevent the misuse of attention-driven technologies, developing ethical standards for AI design, and educating users about the risks and benefits of these systems. As society continues to navigate an increasingly information-dense landscape, the thoughtful integration of attention economics insights into NLP and AI design will be instrumental in shaping the future of technology—and, in turn, shaping the future of human experience. The convergence of these fields not only enhances the technical capabilities of AI systems but also provides a pathway towards more meaningful, ethical, and effective human-AI interactions that respect and augment human cognitive capacities.</p>
<p>The future of attention-driven AI lies in its ability to augment human potential while safeguarding individual autonomy and well-being. By continuing to explore the intersections between NLP, attention economics, and cognitive science, we can build AI systems that not only perform efficiently but also enrich human experiences in meaningful and ethically sound ways. This journey towards more sophisticated, responsive, and human-aligned AI will require collaboration across disciplines, a commitment to ethical principles, and a vision for technology that serves humanity’s best interests.</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p>James, W. (1890). <em>The Principles of Psychology</em>, Vol. 1. New York: Henry Holt and Company. Retrieved from <a href="https://www.gutenberg.org/ebooks/57628">Project Gutenberg</a>.</p>
<p>Bahdanau, D., Cho, K., &amp; Bengio, Y. (2014). <a href="https://arxiv.org/abs/1409.0473">Neural Machine Translation by Jointly Learning to Align and Translate</a>. <em>arXiv preprint arXiv:1409.0473</em>.</p>
<p>Vaswani, A., Shazeer, N., Parmar, N., Uszkoreit, J., Jones, L., Gomez, A. N., Kaiser, Ł., &amp; Polosukhin, I. (2017). <a href="https://papers.nips.cc/paper/7181-attention-is-all-you-need.pdf">Attention Is All You Need</a>. <em>Advances in Neural Information Processing Systems, 30</em>, 5998-6008.</p>
<p>Child, R., Gray, S., Radford, A., &amp; Sutskever, I. (2019). <a href="https://arxiv.org/abs/1904.10509">Generating Long Sequences with Sparse Transformers</a>. <em>arXiv preprint arXiv:1904.10509</em>.</p>
<p>Benkler, Y. (2006). The Wealth of Networks: How Social Production Transforms Markets and Freedom. Yale University Press.</p>
<p>Benkler, Y., Faris, R., &amp; Roberts, H. (2018). Network Propaganda: Manipulation, Disinformation, and Radicalization in American Politics. Oxford University Press.</p>
<p>Blom, J. N., &amp; Hansen, K. R. (2015). <a href="https://www.sciencedirect.com/science/article/abs/pii/S0378216614001826">Click Bait: Forward-Reference as Lure in Online News Headlines</a>. <em>Journal of Pragmatics</em>, 76, 87-100.</p>
<p>Byman, D. (2015). Al Qaeda, the Islamic State, and the Global Jihadist Movement: What Everyone Needs to Know. Oxford University Press.</p>
<p>Davenport, T. H. (2005). Thinking for a Living: How to Get Better Performances and Results from Knowledge Workers. Harvard Business School Press.</p>
<p>Davenport, T. H., &amp; Beck, J. C. (2001). The Attention Economy: Understanding the New Currency of Business. Harvard Business School Press.</p>
<p>Eckler, P., &amp; Bolls, P. (2011). <a href="https://www.tandfonline.com/doi/abs/10.1080/15252019.2011.10722180">Spreading the Virus: Emotional Tone of Viral Advertising and Its Effect on Forwarding Intentions and Attitudes</a>. <em>Journal of Interactive Advertising</em>, 11(2), 1-11.</p>
<p>Goldhaber, M. H. (1997). <a href="https://firstmonday.org/ojs/index.php/fm/article/view/519/440">The Attention Economy and the Net</a>. <em>First Monday</em>, 2(4).</p>
<p>Kietzmann, J. H., Hermkens, K., McCarthy, I. P., &amp; Silvestre, B. S. (2011). <a href="https://www.sciencedirect.com/science/article/abs/pii/S0007681311000061">Social Media? Get Serious! Understanding the Functional Building Blocks of Social Media</a>. <em>Business Horizons</em>, 54(3), 241-251.</p>
<p>Nielsen, J., &amp; Loranger, H. (2006). Prioritizing Web Usability. New Riders.</p>
<p>Simon, H. A. (1971). Designing Organizations for an Information-Rich World. In Martin Greenberger (Ed.), <em>Computers, Communications, and the Public Interest</em> (pp.&nbsp;37-72). The Johns Hopkins Press.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>essay</category>
  <category>machine learning</category>
  <category>🇬🇧</category>
  <guid>https://antomon.github.io/posts/attentions/</guid>
  <pubDate>Mon, 18 Apr 2022 22:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/attentions/attentions.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Controllo delle Partite IVA in Excel Tramite il Servizio VIES</title>
  <dc:creator>Antonio Montano</dc:creator>
  <link>https://antomon.github.io/posts/controllo-piva-vies-api/</link>
  <description><![CDATA[ 





<section id="introduzione" class="level2">
<h2 class="anchored" data-anchor-id="introduzione">Introduzione</h2>
<p>Un cliente aveva qualche migliaia di Partite IVA europee da controllare e la sindrome del buon samaritano mi ha costretto a spolverare il VBA per poter sfruttare lo strumento client più amato nelle aziende: Excel!</p>
<p>Questa guida, pertanto, ti mostra come utilizzare un file Excel per controllare la validità delle Partite IVA tramite il servizio <a href="https://ec.europa.eu/taxation_customs/vies/#/vat-validation"><strong>VIES</strong></a> (VAT Information Exchange System).</p>
<p>Il post è diviso in due parti: la prima è pensata per gli utenti che non hanno esperienza di programmazione, ma hanno un minimo di conoscenza di Excel e la seconda è per chi ha conoscenze di base in <strong>VBA</strong> e vuole modificare o personalizzare il file Excel o il codice.</p>
</section>
<section id="come-utilizzare-il-file-excel" class="level2">
<h2 class="anchored" data-anchor-id="come-utilizzare-il-file-excel">Come utilizzare il file Excel</h2>
<p>Questa sezione è per chi vuole semplicemente utilizzare il foglio Excel già predisposto per controllare le Partite IVA senza la necessità di modificare il codice.</p>
<section id="esecuzione-del-controllo" class="level3">
<h3 class="anchored" data-anchor-id="esecuzione-del-controllo">Esecuzione del controllo</h3>
<p>Passaggi per eseguire il controllo delle Partite IVA:</p>
<ol type="1">
<li><p><strong>Apri il file Excel</strong>: Assicurati di scaricare e aprire il file <a href="CONTROLLO-PARTITE-IVA-CON-VIES.xlsm">Excel</a>.</p></li>
<li><p><strong>Inserisci i dati delle Partite IVA</strong>:</p>
<ul>
<li><p>Vai al foglio specificato nella cella <strong>B3</strong> del foglio <strong>CONFIGURAZIONE</strong>.</p></li>
<li><p>In questo foglio troverai le seguenti colonne:</p>
<ul>
<li><strong>Colonna A (CODICE PAESE)</strong>: Inserisci il codice del paese (es. IT per Italia, FR per Francia, etc.).</li>
<li><strong>Colonna B (P.IVA)</strong>: Inserisci il numero di Partita IVA da controllare.</li>
<li><strong>Colonna C (ESITO CONTROLLO CON VIES)</strong>: I risultati del controllo effettuato tramite il servizio VIES appariranno qui.</li>
<li><strong>Colonna D (ESITO CONTROLLO SINTATTICO (NON LIMITANTE))</strong>: Qui verrà riportato il risultato del controllo sintattico della Partita IVA, ovvero se il formato è valido o meno, basato su una regex (non blocca l’esecuzione del controllo VIES).</li>
</ul></li>
</ul></li>
<li><p><strong>Clicca sul bottone per eseguire il controllo</strong>:</p>
<ul>
<li><p>Nel foglio <strong>CONFIGURAZIONE</strong>, troverai un bottone a forma di <strong>triangolo nero</strong>, simile al tasto “Play” di un lettore multimediale.</p></li>
<li><p><strong>Clicca sul bottone</strong> per avviare il controllo delle Partite IVA.</p></li>
</ul></li>
<li><p><strong>Interpreta i risultati</strong>:</p>
<ul>
<li><p>Una volta avviato il controllo, i risultati verranno visualizzati:</p>
<ul>
<li><strong>Colonna C</strong>: Mostra il risultato del controllo tramite il servizio VIES.</li>
<li><strong>Colonna D</strong>: Mostra se il formato della Partita IVA è valido o meno (controllo sintattico). Se il controllo sintattico è positivo, apparirà “Valida”, se è negativo apparirà “Non valida”.</li>
</ul></li>
<li><p>Alla fine del processo, comparirà una <strong>finestra di riepilogo</strong> che mostra il numero totale di Partite IVA controllate, quante sono risultate valide o non valide, gli errori riscontrati, e le Partite IVA vuote.</p></li>
</ul></li>
</ol>
</section>
<section id="riepilogo-dei-messaggi" class="level3">
<h3 class="anchored" data-anchor-id="riepilogo-dei-messaggi">Riepilogo dei messaggi</h3>
<p>Al termine dell’esecuzione, il sistema visualizzerà una finestra di dialogo che mostrerà il seguente riepilogo:</p>
<ul>
<li><p><strong>Numero di P.IVA controllate</strong>: Numero totale di Partite IVA processate.</p></li>
<li><p><strong>Valide in VIES</strong>: Partite IVA che risultano valide dopo il controllo con il servizio VIES.</p></li>
<li><p><strong>Non valide in VIES</strong>: Partite IVA che risultano non valide nel servizio VIES (potrebbero non essere registrate o essere errate).</p></li>
<li><p><strong>Errori</strong>: Numero di errori riscontrati durante il controllo (ad esempio, problemi con il servizio VIES o con i dati).</p></li>
<li><p><strong>Vuote</strong>: Numero di righe in cui la Partita IVA non era presente o la cella era vuota.</p></li>
<li><p><strong>Efficienza</strong>: Velocità di controllo espressa in Partite IVA per minuto.</p></li>
</ul>
</section>
</section>
<section id="personalizzare-e-modificare-il-codice" class="level2">
<h2 class="anchored" data-anchor-id="personalizzare-e-modificare-il-codice">Personalizzare e modificare il codice</h2>
<p>Questa sezione è pensata per chi ha già una conoscenza di base di <strong>VBA</strong> e desidera personalizzare o modificare il codice VBA per adattarlo alle proprie necessità.</p>
<section id="struttura-del-codice" class="level3">
<h3 class="anchored" data-anchor-id="struttura-del-codice">Struttura del Codice</h3>
<p>Il codice VBA esegue principalmente due controlli:</p>
<ol type="1">
<li><p><strong>Validazione del formato della Partita IVA</strong>: Utilizza un’espressione regolare (regex) per verificare che il formato della Partita IVA sia conforme alle regole del paese.</p></li>
<li><p><strong>Controllo tramite VIES</strong>: Invia una richiesta al servizio VIES per verificare se la Partita IVA è valida.</p></li>
</ol>
</section>
<section id="come-modificare-il-codice-vba" class="level3">
<h3 class="anchored" data-anchor-id="come-modificare-il-codice-vba">Come modificare il codice VBA</h3>
<ol type="1">
<li><p><strong>Aprire l’editor VBA</strong>:</p>
<ul>
<li><p>Premi <code>ALT + F11</code> per aprire l’editor VBA.</p></li>
<li><p>Nel pannello a sinistra, troverai un modulo chiamato <strong>Modulo1</strong> o simile. Qui è contenuto tutto il codice.</p></li>
</ul></li>
<li><p><strong>Controllo sintattico</strong></p></li>
</ol>
<p>Il controllo sintattico del formato della Partita IVA non blocca il controllo tramite VIES. Anche se il controllo fallisce (ad esempio, se il formato è errato), la richiesta al servizio VIES verrà comunque effettuata. Il risultato del controllo sintattico viene inserito nella <strong>Colonna D (ESITO CONTROLLO SINTATTICO (NON LIMITANTE))</strong>. Se il formato è valido, apparirà “Valida”, altrimenti “Non valida”.</p>
</section>
<section id="modifica" class="level3">
<h3 class="anchored" data-anchor-id="modifica">Modifica</h3>
<p>Se desideri modificare o aggiungere una regex per un nuovo paese, segui questi passaggi:</p>
<ol type="1">
<li><p>Vai nel foglio <strong>CONFIGURAZIONE</strong>.</p></li>
<li><p>Inserisci il <strong>codice del paese</strong> nella colonna A (es. “PT” per il Portogallo).</p></li>
<li><p>Inserisci il pattern <strong>regex</strong> corretto nella colonna B per validare il formato delle Partite IVA del paese specifico (ad esempio, per il Portogallo, potrebbe essere <code>^\d{9}$</code>).</p></li>
<li><p>Salva e chiudi.</p></li>
</ol>
<p>Il codice VBA utilizzerà automaticamente la regex inserita per validare il formato delle Partite IVA per quel paese.</p>
<p>Altre configurazioni:</p>
<ul>
<li><p><strong>Numero massimo di righe da controllare</strong>: Se nella cella <strong>B1</strong> del foglio <strong>CONFIGURAZIONE</strong> non viene inserito un valore, la macro controllerà tutte le righe con Partite IVA fino alla prima riga vuota. Se viene inserito un numero, controllerà solo quel numero di righe.</p></li>
<li><p><strong>Codice paese predefinito</strong>: Se una Partita IVA non ha un codice paese associato (colonna A vuota), verrà usato il codice predefinito specificato nella cella <strong>B2</strong> del foglio <strong>CONFIGURAZIONE</strong>.</p></li>
</ul>
</section>
</section>
<section id="riassumendo" class="level2">
<h2 class="anchored" data-anchor-id="riassumendo">Riassumendo</h2>
<p>Questa guida ti permette di utilizzare un file Excel per controllare le Partite IVA europee tramite il servizio VIES. Se sei un utente che non ha familiarità con la programmazione, puoi facilmente utilizzare il file cliccando semplicemente su un bottone. Se hai invece conoscenze di VBA, puoi personalizzare il codice o modificare il file per adattarlo meglio alle tue esigenze specifiche, come l’aggiunta di nuovi paesi o la modifica dei messaggi restituiti.</p>
<p>In questo modo, puoi automatizzare il controllo delle Partite IVA e risparmiare tempo nella gestione dei dati aziendali.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>personal productivity</category>
  <category>🇮🇹</category>
  <guid>https://antomon.github.io/posts/controllo-piva-vies-api/</guid>
  <pubDate>Sun, 21 Nov 2021 23:00:00 GMT</pubDate>
  <media:content url="https://antomon.github.io/posts/controllo-piva-vies-api/spreadsheet-checks.webp" medium="image" type="image/webp"/>
</item>
</channel>
</rss>
